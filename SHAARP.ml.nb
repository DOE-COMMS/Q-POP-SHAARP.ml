(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2050771,      36889]
NotebookOptionsPosition[   2049097,      36853]
NotebookOutlinePosition[   2049587,      36872]
CellTagsIndexPosition[   2049544,      36869]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["Initialization",
 FontWeight->"Bold"]], "Title",
 CellChangeTimes->{{3.8959329631164618`*^9, 
  3.895932965909975*^9}},ExpressionUUID->"441924d6-3b8e-4bd4-8fa6-\
0941648c2c7b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NotebookEvaluate", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<setup.nb\>\""}], 
    "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setupvar", "=", "1"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8863764175259113`*^9, 3.8863764216510215`*^9}, 
   3.8863766499202127`*^9, 3.8864455607318544`*^9, 3.887895488853596*^9, {
   3.887896034438848*^9, 3.8878960439160757`*^9}, {3.889436106460884*^9, 
   3.8894361315889654`*^9}, {3.8894361873976126`*^9, 3.88943619269838*^9}, {
   3.89102444959268*^9, 3.891024450746577*^9}, {3.89305939105934*^9, 
   3.8930593986154356`*^9}, 3.893059461698475*^9, {3.8930644547510796`*^9, 
   3.893064472349676*^9}, {3.893064510080668*^9, 3.893064522229964*^9}, {
   3.893191509709758*^9, 3.893191517223592*^9}, {3.893192189074219*^9, 
   3.893192204514889*^9}, 3.893193179948883*^9, {3.8931939064949512`*^9, 
   3.8931939312531705`*^9}, 3.8933405442081523`*^9, 3.8933481622867684`*^9, {
   3.8933507093480396`*^9, 3.893350715957938*^9}, {3.894586300088585*^9, 
   3.8945863019774375`*^9}, {3.8945882385294175`*^9, 3.8945882396429615`*^9}, 
   3.895364685360523*^9, 3.895837732757901*^9, {3.8958382367167573`*^9, 
   3.8958382509804587`*^9}, {3.895862888181453*^9, 3.895862899403054*^9}, {
   3.8958714652797155`*^9, 3.8958714808134613`*^9}, {3.895871577983863*^9, 
   3.8958716149822598`*^9}, {3.895881111608961*^9, 3.8958811205978346`*^9}, {
   3.8959239658297596`*^9, 3.895923966325376*^9}, 3.8959423773480606`*^9, {
   3.896314653348934*^9, 3.896314657267294*^9}, 3.8963154455605087`*^9, {
   3.896321435583887*^9, 3.8963214612888904`*^9}, {3.897014237722165*^9, 
   3.897014241214029*^9}, {3.8970165009005947`*^9, 3.897016502144909*^9}, {
   3.8970969729877863`*^9, 3.8970969747356415`*^9}, {3.8971742747549467`*^9, 
   3.8971742987739334`*^9}, {3.8971743546206465`*^9, 
   3.8971743601042366`*^9}, {3.8972624999508963`*^9, 3.89726250567898*^9}, {
   3.897262744722416*^9, 3.8972627684770613`*^9}, {3.8972632772311325`*^9, 
   3.8972632852568636`*^9}, {3.8972633516738973`*^9, 
   3.8972633541172123`*^9}, {3.897263634613264*^9, 3.897263650408495*^9}, {
   3.8972639453176775`*^9, 3.8972639464912057`*^9}, {3.897264054835474*^9, 
   3.897264063685416*^9}, {3.8972641236852856`*^9, 3.8972641640741763`*^9}, {
   3.897264334170711*^9, 3.897264375822837*^9}, {3.897264409445538*^9, 
   3.897264410986657*^9}, 3.8972647577955017`*^9, 3.897265056538562*^9, {
   3.8972657392507453`*^9, 3.897265739430617*^9}},
 CellLabel->
  "In[323]:=",ExpressionUUID->"0937ff5c-ef37-4c7e-9f0b-71353001cec0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "run", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"setupvar", "\[NotEqual]", "1"}], "||", 
     RowBox[{"!", 
      RowBox[{"ValueQ", "[", "setupvar", "]"}]}]}], ",", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"Style", "[", 
       RowBox[{
       "\"\<Please Evaluate the setup.nb first!\>\"", ",", "Bold", ",", "Red",
         ",", "32"}], "]"}], "]"}], ";", 
     RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LogoExists", " ", "=", " ", 
   RowBox[{"FileExistsQ", "[", "\"\<Logo.png\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"LogoExists", " ", ",", 
    RowBox[{
     RowBox[{"Logo", "=", 
      RowBox[{"Image", "[", 
       RowBox[{
        RowBox[{"Import", "[", "\"\<Logo.png\>\"", "]"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "550"}]}], "]"}]}], ";"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"progress", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"equByteLimit", "=", 
    SuperscriptBox["10", "5"]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "if", " ", "analytical", " ", "expression", " ", "exceeds", " ", "this", 
     " ", "size"}], ",", " ", 
    RowBox[{
    "it", " ", "will", " ", "hide", " ", "in", " ", "case", " ", "of", " ", 
     "crash"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"mtop", ",", "mlayer", ",", "mbot"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mtop", "=", 
   RowBox[{"setMater", "@", 
    RowBox[{"Air", "[", "]"}]}]}], ";", 
  RowBox[{"extMater", "@", "mtop"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mlayer", "=", 
   RowBox[{"setMater", "@", 
    RowBox[{"LiNbO3", "[", "]"}]}]}], ";", 
  RowBox[{"extMater", "@", "mlayer"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mbot", "=", 
    RowBox[{"setMater", "@", 
     RowBox[{"Air", "[", "]"}]}]}], ";", 
   RowBox[{"extMater", "@", "mbot"}], ";"}], "\[IndentingNewLine]", " ", 
  RowBox[{"(*", 
   RowBox[{
   "max", " ", "number", " ", "of", " ", "layers", " ", "in", " ", "the", " ",
     "system"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"maxmaterialnumber", "=", "10"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "a", " ", "default", " ", "list", " ", "to", " ", "store", " ", "all", 
     " ", "materials", " ", "for", " ", "the", " ", "current", " ", 
     "system"}], ";", " ", 
    RowBox[{
    "set", " ", "top", " ", "and", " ", "bottom", " ", "to", " ", "be", " ", 
     "air", " ", "by", " ", "default"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allmaterials", "=", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"mbot", ",", "mlayer"}], "}"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{"mtop", ",", 
        RowBox[{"maxmaterialnumber", "-", "2"}]}], "]"}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{"run", ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ProgressIndicator", "[", 
         RowBox[{
          RowBox[{"Dynamic", "[", "progress", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "100"}], "}"}], ",", 
          RowBox[{"ImageSize", "->", 
           RowBox[{"{", 
            RowBox[{"1000", ",", "30"}], "}"}]}]}], "]"}], ",", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<     \>\"", ",", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "progress", "]"}], ",", "22", ",", 
             RowBox[{"FontFamily", "->", "\"\<Helvetica\>\""}]}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<% Completed\>\"", ",", "22", ",", 
             RowBox[{"FontFamily", "->", "\"\<Helvetica\>\""}]}], "]"}]}], 
          "}"}], "]"}]}], "}"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"Framed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"RawBoxes", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToBoxes", "[", "#", "]"}], "/.", 
           RowBox[{"MapAt", "[", 
            RowBox[{"RuleCondition", ",", 
             RowBox[{"DownValues", "[", "Manipulate`ManipulateBoxes", "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}], "/.", 
          RowBox[{
           RowBox[{"FEPrivate`FrontEndResource", "[", 
            RowBox[{"\"\<FEBitmaps\>\"", ",", "\"\<UpdateIcon\>\""}], "]"}], 
           "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ToBoxes", "@", 
            RowBox[{"Graphics", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Green", ",", 
                RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                RowBox[{"Rectangle", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Inset", "[", 
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                   RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                   RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                   RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]}]}]}], "]"}], 
        "&"}], "@", "\[IndentingNewLine]", 
       RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Clear", "[", 
           RowBox[{"wavL", ",", "wavNL"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"userguide", "=", 
           RowBox[{"Column", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "Style", "[", 
                   "\"\<Welcome to \
\[Sharp]SHAARP.\!\(\*StyleBox[\\\"ml\\\",FontSlant->\\\"Italic\\\"]\) !\>\"", 
                   "]"}], "}"}], ",", 
                 RowBox[{"BaseStyle", "->", "\"\<Title\>\""}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
               "Style", "[", 
                "\"\<\[Sharp]SHAARP.\!\(\*StyleBox[\\\"ml\\\",FontSlant->\\\"\
Italic\\\"]\) is an open-source package for deriving and simulating reflected \
and transmitted optical second harmonic generation (SHG) of slab and \
multilayer systems. Optical SHG describes the process where two photons of \
frequency interact with one or more nonlinear media (crystals) to create a \
photon at 2\[Omega], so called the SHG process.\>\"", "]"}], ",", 
               "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "Style", "[", 
                  "\"\<This package builds in the most general approach to \
both analytically and numerically solving the SHG response of crystals with \
arbitrary crystal symmetry, arbitrary orientation, and a complex dielectric \
function (complex refractive indices).\>\"", "]"}], "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "Style", "[", 
                   "\"\<Open \
\[Sharp]SHAARP.\!\(\*StyleBox[\\\"ml\\\",FontSlant->\\\"Italic\\\"]\).nb in \
the Mathematica\[RegisteredTrademark] software on your computer\>\"", "]"}], 
                  "}"}], ",", 
                 RowBox[{"BaseStyle", "\[Rule]", "\"\<Section\>\""}]}], "]"}],
                ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Style", "[", "\"\<1. From the menu, \>\"", "]"}], 
                  ",", 
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Evaluate\>\"", ",", 
                    RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], 
                  ",", 
                  RowBox[{"Style", "[", "\"\< -> \>\"", "]"}], ",", 
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Evaluate Notebook\>\"", ",", 
                    RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}]}],
                  "}"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "Style", "[", 
                  "\"\<    Note: This process will clear out all the \
definitions from other notebooks and enable the Notation package for the \
analytical solutions.\>\"", "]"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "Style", "[", 
                  "\"\<2. After a few seconds waiting time for \
initialization, you will see the main panel\>\"", "]"}], "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Style", "[", 
                RowBox[{
                "\"\<Use the 'Functionality' control on the control panel to \
the left to set material properties and then view the desired output in the \
display panel.\\nIn order to update figures in the display panel, you must \
press any of the three 'Update' button in green to the top right.\>\"", ",", 
                 "20"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Style", "[", 
                RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Style", "[", "\"\<More Resources\>\"", "]"}], 
                  "}"}], ",", 
                 RowBox[{"BaseStyle", "\[Rule]", "\"\<Section\>\""}]}], "]"}],
                ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "Style", "[", 
                   "\"\<For detailed information of \
\[Sharp]SHAARP.\!\(\*StyleBox[\\\"ml\\\",FontSlant->\\\"Italic\\\"]\), please \
refer to the \>\"", "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<GitHub\>\"", "]"}], ",", 
                    "\"\<https://github.com/bzw133/SHAARP.ml\>\""}], "]"}], 
                  ",", "\"\<, \>\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<manual\>\"", "]"}], ",", 
                    "\"\<https://shaarpml.readthedocs.io/en/latest/\>\""}], 
                   "]"}], ",", "\"\<, \>\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<tutorial video\>\"", "]"}], 
                    ",", "\"\<https://www.youtube.com/watch?v=YiKRm6i7kNs\>\"\
"}], "]"}], ",", 
                  RowBox[{"Style", "[", "\"\<, and \>\"", "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<FAQ\>\"", "]"}], ",", 
                    "\"\<https://shaarpml.readthedocs.io/en/latest/FAQ/\>\""}]\
, "]"}], ",", "\"\<.\>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
               "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "Style", "[", 
                   "\"\<\[Sharp]SHAARP for single interface, \
\[Sharp]SHAARP.\!\(\*StyleBox[\\\"si\\\",FontSlant->\\\"Italic\\\"]\) : \>\"",
                    "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<GitHub\>\"", "]"}], ",", 
                    "\"\<https://github.com/Rui-Zu/SHAARP\>\""}], "]"}], ",", 
                  RowBox[{"Style", "[", "\"\<, \>\"", "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{
                    "Style", "[", "\"\<\[Sharp]SHAARP.si manual\>\"", "]"}], 
                    ",", "\"\<https://shaarp.readthedocs.io/en/latest/\>\""}],
                    "]"}], ",", "\"\<.\>\""}], "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "Style", "[", 
                   "\"\<If you used \[Sharp]SHAARP for your publications, \
please kindly cite us:  \>\"", "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<\[Sharp]SHAARP.ml\>\"", "]"}], 
                    ",", "\"\<https://www.nature.com/articles/s41524-024-\
01229-2\>\""}], "]"}], ",", 
                  RowBox[{"Style", "[", "\"\<, \>\"", "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<\[Sharp]SHAARP.si\>\"", "]"}], 
                    ",", "\"\<https://www.nature.com/articles/s41524-022-\
00930-4\>\""}], "]"}], ",", "\"\<.\>\""}], "}"}], "]"}]}], 
              "\[IndentingNewLine]", "}"}], ",", 
             RowBox[{"Background", "->", "White"}], ",", 
             RowBox[{"Alignment", "->", "Left"}], ",", 
             RowBox[{"BaseStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"FontFamily", "->", "\"\<Franklin Gothic\>\""}], ",", 
                RowBox[{"FontSize", "->", "18"}]}], "}"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", "Preprocessing", "*)"}], "Chapter"], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"INITIAL", " ", "SETUPS"}], "*)"}], "Section"], 
          StyleBox["\[IndentingNewLine]", "Section"], " ", 
          RowBox[{"(*", 
           RowBox[{
           "max", " ", "number", " ", "of", " ", "layers", " ", "in", " ", 
            "the", " ", "system"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"maxmaterialnumber", "=", "10"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "reset", " ", "materials", " ", "to", " ", "air", " ", "if", " ", 
            "not", " ", "used", " ", "in", " ", "materialnumber"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allmaterials", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"materialnumber", "+", "2"}], ";;", 
              "maxmaterialnumber"}], "]"}], "]"}], "=", 
           RowBox[{"Table", "[", 
            RowBox[{"mbot", ",", 
             RowBox[{"maxmaterialnumber", "-", "materialnumber", "-", "1"}]}],
             "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "create", " ", "dgrid", " ", "for", " ", "display", " ", "and", 
            " ", "input"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"clearFigs", "[", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"dgrid", "=", 
           RowBox[{"Dynamic", "[", 
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"generatingdfun1", "[", "matindex", "]"}], ",", 
              RowBox[{"Spacings", "->", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], ",", 
              RowBox[{"ItemSize", "->", "All"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "assign", " ", "values", " ", "to", " ", "dependnet", " ", "d", 
            " ", "components"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"indexfun1", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"materialnumber", "+", "2"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"zvecplots2d", "=", 
           RowBox[{"ConstantArray", "[", 
            RowBox[{"placeHolderFigs", ",", "maxmaterialnumber"}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"zvecplots3d", "=", 
           RowBox[{"ConstantArray", "[", 
            RowBox[{"placeHolderFigs", ",", "maxmaterialnumber"}], "]"}]}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", 
            RowBox[{"progress", "=", "10"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"INITIALIZE", " ", "PRESETS"}], "*)"}], "Section"], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"ValueQ", "[", "startupvar", "]"}], ",", ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "ptest1", ",", "ptest2", ",", "ptest3", ",", "ptest4", ",", 
                  "ptest5", ",", "ptest6", ",", "ptest7", ",", "ptest8"}], 
                 "}"}], "=", 
                RowBox[{"Table", "[", 
                 RowBox[{"0", ",", "8"}], "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"ValueQ", "[", "startupvar", "]"}], ",", ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "plabel1", ",", "plabel2", ",", "plabel3", ",", "plabel4", 
                  ",", "plabel5", ",", "plabel6", ",", "plabel7", ",", 
                  "plabel8"}], "}"}], "=", 
                RowBox[{"Table", "[", 
                 RowBox[{"\"\<Type Label Here\>\"", ",", "8"}], "]"}]}]}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"startupvar", "=", "1"}], ";", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "ap1", ",", "ap2", ",", "ap3", ",", "ap4", ",", "ap5", ",", 
                "ap6", ",", "ap7", ",", "ap8"}], "}"}], "=", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest1", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest2", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest3", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest4", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest5", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest6", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest7", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest8", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}]}], "}"}]}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "All", " ", "setup", " ", "depending", " ", "on", " ", "anything", 
            " ", "in", " ", "the", " ", "TrackedSymbols", " ", "go", " ", 
            "here"}], "*)"}], "\[IndentingNewLine]", 
          StyleBox["\[IndentingNewLine]", "Subsubsection"], 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"hkl", " ", "CONVERSION"}], "*)"}], "Section"], 
          StyleBox["\[IndentingNewLine]", "Subsubsection"], 
          RowBox[{"(*", 
           RowBox[{"convert", " ", "between", " ", 
            RowBox[{"orientation", "[", 
             RowBox[{"[", "2", "]"}], "]"}], " ", "and", " ", 
            RowBox[{"orientation", "[", 
             RowBox[{"[", "3", "]"}], "]"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", 
            RowBox[{"ruihklfun", "/@", 
             RowBox[{"Range", "[", 
              RowBox[{"materialnumber", "+", "2"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", 
            RowBox[{"progress", "=", "15"}]}], "]"}], ";", 
          StyleBox["\[IndentingNewLine]", "Section"], "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            StyleBox["CALCULATIONS",
             FontWeight->"Bold"], 
            StyleBox[" ",
             FontWeight->"Bold"], "*)"}], "Chapter"], "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"single", " ", "run"}], "*)"}], "Section"], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], 
             "\[Or]", 
             RowBox[{
             "Functionality", "==", 
              "\"\<Partial Analytical Expressions\>\""}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\[Omega]0", "=", 
              RowBox[{"N", "@", 
               RowBox[{"(", 
                RowBox[{"2", " ", "Pi", " ", 
                 RowBox[{"c0", "/", "\[Lambda]"}]}], ")"}]}]}], ";", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Abs", "@", "theta"}], ">=", "89"}], ",", 
               RowBox[{"theta", "=", 
                RowBox[{
                 RowBox[{"Sign", "[", "theta", "]"}], "89.0"}]}]}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"wInc", "=", 
              RowBox[{"setwInc", "[", 
               RowBox[{"\[Omega]0", ",", 
                RowBox[{"N", "@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"theta", "/", "180"}], " ", "Pi"}], ")"}]}], ",", 
                "\[CapitalDelta]\[Delta]", ",", "\[CurlyPhi]", ",", "n0"}], 
               "]"}]}], ";", 
             RowBox[{"extWave", "@", "wInc"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
               "setup", " ", "all", " ", "materials", " ", "into", " ", 
                "mats"}], "=", 
               RowBox[{"{", 
                RowBox[{"m1", ",", "m2", ",", "m3", ",", "..."}], "}"}]}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"ToExpression", "[", 
                RowBox[{
                 RowBox[{"\"\<m\>\"", "<>", 
                  RowBox[{"ToString", "[", "#", "]"}]}], ",", "InputForm", 
                 ",", 
                 RowBox[{"Function", "[", 
                  RowBox[{"name", ",", 
                   RowBox[{"name", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], ",", "HoldAll"}], 
                  "]"}]}], "]"}], "&"}], "/@", 
              RowBox[{"Range", "[", 
               RowBox[{"materialnumber", "+", "2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"ToExpression", "[", 
                RowBox[{
                 RowBox[{"\"\<m\>\"", "<>", 
                  RowBox[{"ToString", "[", "#", "]"}]}], ",", "InputForm", 
                 ",", 
                 RowBox[{"Function", "[", 
                  RowBox[{"name", ",", 
                   RowBox[{"extMater", "@", "name"}], ",", "HoldAll"}], 
                  "]"}]}], "]"}], "&"}], "/@", 
              RowBox[{"Range", "[", 
               RowBox[{"materialnumber", "+", "2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "always", " ", "set", " ", "1", "st", " ", "material", " ", 
               "to", " ", "be", " ", "air"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"m1", "=", 
              RowBox[{"setMater", "@", 
               RowBox[{"Air", "[", "]"}]}]}], ";", 
             RowBox[{"extMater", "@", "m1"}], ";", "\[IndentingNewLine]", 
             RowBox[{"mats", "=", 
              RowBox[{
               RowBox[{
                RowBox[{"ToExpression", "[", 
                 RowBox[{
                  RowBox[{"\"\<m\>\"", "<>", 
                   RowBox[{"ToString", "[", "#", "]"}]}], ",", "InputForm", 
                  ",", 
                  RowBox[{"Function", "[", 
                   RowBox[{"name", ",", "name", ",", "HoldAll"}], "]"}]}], 
                 "]"}], "&"}], "/@", 
               RowBox[{"Range", "[", 
                RowBox[{"materialnumber", "+", "2"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "detect", " ", "if", " ", "analytical", " ", "d", " ", "or", 
               " ", "h", " ", "is", " ", "used"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"noAnalytical", "=", 
              RowBox[{"And", "@@", 
               RowBox[{"NumberQ", "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"Flatten", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Key", "[", "dC", "]"}], "/@", "mats"}], ")"}]}], 
                   ")"}], "~", "Join", "~", 
                  RowBox[{"(", 
                   RowBox[{"Flatten", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Key", "[", "h", "]"}], "/@", "mats"}], ")"}]}], 
                   ")"}]}], ")"}]}]}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"mrassumption", "==", "0"}], ",", 
               RowBox[{"(*", "FMR", "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Which", "[", 
                 RowBox[{
                  RowBox[{"winhAssumption", "==", "0"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"flagBackward", "=", "False"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"flagStandingWave", "=", "False"}], ";"}], 
                  "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                  RowBox[{"winhAssumption", "==", "1"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"flagBackward", "=", "True"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"flagStandingWave", "=", "False"}], ";"}], 
                  "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                  RowBox[{"winhAssumption", "==", "2"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"flagBackward", "=", "True"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"flagStandingWave", "=", "True"}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"flagJK", "=", "False"}], ";", 
                RowBox[{"flagHH", "=", "False"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"wavL", ",", "wavNL"}], "}"}], "=", 
                 RowBox[{"f4NL", "[", 
                  RowBox[{"mats", ",", "wInc"}], "]"}]}], ";"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"mrassumption", "==", "1"}], ",", 
                 RowBox[{"(*", "JK", "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"flagBackward", "=", "False"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"flagStandingWave", "=", "False"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"flagJK", "=", "True"}], ";", 
                  RowBox[{"flagHH", "=", "False"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"wavL", ",", "wavNL"}], "}"}], "=", 
                   RowBox[{"f4NL", "[", 
                    RowBox[{"mats", ",", "wInc", ",", "True"}], "]"}]}], 
                  ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"mrassumption", "==", "2"}], ",", 
                   RowBox[{"(*", "HH", "*)"}], "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"flagBackward", "=", "False"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"flagStandingWave", "=", "False"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"flagJK", "=", "False"}], ";", 
                    RowBox[{"flagHH", "=", "True"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"wavL", ",", "wavNL"}], "}"}], "=", 
                    RowBox[{"f4NL", "[", 
                    RowBox[{"mats", ",", "wInc", ",", "True"}], "]"}]}], 
                    ";"}]}], "\[IndentingNewLine]", "]"}]}], 
                "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"evaltime", "=", "0"}], ";", "\[IndentingNewLine]", 
          RowBox[{"StartTime", "=", 
           RowBox[{"SessionTime", "[", "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", 
            RowBox[{"progress", "=", "25"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{
            "batch", " ", "run", " ", "for", " ", "Fresnel", " ", "and", " ", 
             "Maker", " ", "fringes"}], "*)"}], "Section"], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"FresnelList", "=", 
              RowBox[{"{", "}"}]}], ";", 
             RowBox[{"MFList", "=", 
              RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"fresnelcontrol", 
                RowBox[{"(*", 
                 RowBox[{"&&", 
                  RowBox[{"(", 
                   RowBox[{"!", "makerfringescontrol"}], ")"}]}], "*)"}], "&&",
                 "noAnalytical"}], ",", "\[IndentingNewLine]", 
               RowBox[{"FresnelList", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Fresnel", "[", 
                   RowBox[{"mats", ",", "#", ",", "mrassumption"}], "]"}], 
                  "&"}], "/@", 
                 RowBox[{"Range", "[", 
                  RowBox[{"0.0", ",", "89.0", ",", "thetastep1"}], 
                  "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"makerfringescontrol", 
                RowBox[{"(*", 
                 RowBox[{"&&", 
                  RowBox[{"(", 
                   RowBox[{"!", "fresnelcontrol"}], ")"}]}], "*)"}], "&&", 
                "noAnalytical"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Abs", "@", "maxtheta2"}], ">=", "89"}], ",", 
                  RowBox[{"maxtheta2", "=", 
                   RowBox[{
                    RowBox[{"Sign", "[", "maxtheta2", "]"}], "89.0"}]}]}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"MFList", "=", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"MF", "[", 
                    RowBox[{"mats", ",", "#", ",", "mrassumption"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"Range", "[", 
                   RowBox[{"mintheta2", ",", "maxtheta2", ",", "thetastep2"}],
                    "]"}]}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"!", "noAnalytical"}], ")"}], ",", 
               RowBox[{
                RowBox[{
                "Print", "[", 
                 "\"\<Only numerical simulation is supported for Maker \
fringes calcaulation;  Either analytical d or h is given! Abort!\>\"", " ", 
                 "]"}], ";", 
                RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{
            "batch", " ", "run", " ", "for", " ", "Sample", " ", "Rotation"}],
             "*)"}], "Section"], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"SampleRotationList", "=", 
              RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"samplerotationcontrol", 
                RowBox[{"(*", 
                 RowBox[{"&&", 
                  RowBox[{"(", 
                   RowBox[{"!", "fresnelcontrol"}], ")"}]}], "*)"}], "&&", 
                "noAnalytical"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Abs", "@", "theta"}], ">=", "89"}], ",", 
                  RowBox[{"theta", "=", 
                   RowBox[{
                    RowBox[{"Sign", "[", "theta", "]"}], "89.0"}]}]}], "]"}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"SampleRotateList", "=", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"SampleRotate", "[", 
                    RowBox[{"mats", ",", 
                    RowBox[{"theta", " ", "Degree"}], ",", "#", ",", 
                    "samplerotatestep", ",", "mrassumption", ",", 
                    "materialnumber", ",", "delta", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{"psi", " ", "Degree"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"Range", "[", 
                   RowBox[{"0", ",", "360", ",", "samplerotatestep"}], 
                   "]"}]}]}], ";"}]}], "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"Print", "[", "SampleRotateList", "]"}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"SampleRotateList", "=", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"SampleRotate", "[", 
                    RowBox[{
                    "mats", ",", "theta", ",", "#", ",", "mrassumption", ",", 
                    "materialnumber", ",", "delta"}], "]"}], "&"}], "/@", 
                  RowBox[{"Range", "[", 
                   RowBox[{"0", ",", "360", ",", "samplerotatestep"}], 
                   "]"}]}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                "SampleRotateListHalf1", "=", "SampleRotateListHalf"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"SampleRotateListHalf1", "[", 
                  RowBox[{"[", 
                   RowBox[{";;", ",", "1"}], "]"}], "]"}], "=", 
                 RowBox[{
                  RowBox[{"SampleRotateListHalf1", "[", 
                   RowBox[{"[", 
                    RowBox[{";;", ",", "1"}], "]"}], "]"}], "+", "180"}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"SampleRotateList", " ", "=", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                  "SampleRotateListHalf", ",", "SampleRotateListHalf1"}], 
                  "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"!", "noAnalytical"}], ")"}], ",", 
               RowBox[{
                RowBox[{
                "Print", "[", 
                 "\"\<Only numerical simulation is supported;  Either \
analytical d or h is given! Abort!\>\"", " ", "]"}], ";", 
                RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"Postprocessing", " ", "for", " ", "plots"}], "*)"}], 
           "Chapter"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"For", " ", "Set", " ", "Material", " ", "Properties"}], 
            "*)"}], "Section"], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
             "Functionality", "==", "\"\<Set Material Properties\>\""}], " ", 
             "||", " ", 
             RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], " ", "||",
              " ", 
             RowBox[{
             "Functionality", "==", 
              "\"\<Partial Analytical Expressions\>\""}]}], ",", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", 
              RowBox[{"PLOTTING", " ", "SCHEMATIC", " ", "FIGURES"}], "*)"}], 
             "Subsubsection"], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"heterostructureschematic", "=", 
              RowBox[{"Show", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Graphics", "[", 
                 RowBox[{"{", 
                  RowBox[{"White", ",", 
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", "White", "]"}], "]"}], ",", 
                   RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "1.5"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", 
                    RowBox[{"-", "2"}]}], "}"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\>\"", ",", "15", ",", "Black", ",", "Bold"}], "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1.75"}]}], "}"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Air\>\"", ",", "15", ",", "Black", ",", "Bold"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"8.5", ",", 
                    RowBox[{"-", "1.75"}]}], "}"}]}], "]"}]}], "}"}], "]"}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"Graphics", "[", 
                 RowBox[{"Text", "[", 
                  RowBox[{
                   RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"DownArrow", "[", 
                    RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "<>", "\"\<Incident Light, \>\"", "<>", 
                    RowBox[{"ToString", "[", "\[Lambda]", "]"}], "<>", 
                    "\"\<\[Mu]m\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"DownArrow", "[", 
                    RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "]"}], "]"}]}], 
                    ",", "20", ",", "Blue", ",", "Bold"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"5", ",", 
                    RowBox[{"-", "1.75"}]}], "}"}]}], "]"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"schematicfun", "/@", 
                 RowBox[{"(", 
                  RowBox[{"Reverse", "@", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", 
                    RowBox[{"materialnumber", "+", "2"}]}], "}"}], "&"}], "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"materialnumber", "+", "1"}]}], "]"}]}], ")"}]}], 
                  ")"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"Graphics", "[", 
                 RowBox[{"{", 
                  RowBox[{"White", ",", 
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", "White", "]"}], "]"}], ",", 
                   RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{"-", "materialnumber"}], "-", "2", "-", "0.1"}]}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", 
                    RowBox[{
                    RowBox[{"-", "materialnumber"}], "-", "3"}]}], "}"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", 
                    RowBox[{"(*", 
                    RowBox[{"ToString", "[", "materialnumber", "]"}], "*)"}], 
                    ",", "15", ",", "Black", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{
                    RowBox[{"-", "materialnumber"}], "-", "2", "-", 
                    "0.25"}]}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Air\>\"", ",", "15", ",", "Black", ",", "Bold"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"8.5", ",", 
                    RowBox[{
                    RowBox[{"-", "materialnumber"}], "-", "2", "-", 
                    "0.25"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
                  "}"}], "]"}], "\[IndentingNewLine]", ",", 
                RowBox[{"ImageSize", "->", 
                 RowBox[{"{", 
                  RowBox[{"600", ",", "Automatic"}], "}"}]}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"zvecplots2d", "=", 
              RowBox[{"fzvecplots2d", "/@", "allmaterials"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"zvecplots3d", "=", 
              RowBox[{"fzvecplots3d", "/@", "allmaterials"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"For", " ", "SHG", " ", "Simulation"}], "*)"}], "Section"],
           "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], ",", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
             "noAnalytical", ",", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              StyleBox[
               RowBox[{"(*", 
                RowBox[{"PLOTTING", " ", "WAVE", " ", "PATH"}], "*)"}], 
               "Subsubsection"], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"fig13d", "=", 
                RowBox[{"Graphics3D", "[", 
                 RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"incident", " ", "\[Omega]", " ", "wave"}], 
                    "*)"}], "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"wInc", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], "-", 
                    RowBox[{"Normalize", "[", 
                    RowBox[{"wInc", "[", "k", "]"}], "]"}]}], ",", "Red"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"\[Omega]", " ", "waves", " ", "in", " ", "red"}],
                     "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"transmission", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "materialnumber"}], 
                    "}"}], ",", "Red"}], "]"}], "&"}], "/@", 
                    RowBox[{"wavL", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"reflection", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
                    "Red"}], "]"}], "&"}], "/@", 
                    RowBox[{"wavL", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"forward", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Red"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Red"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavL", "[", 
                    RowBox[{"[", "4", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"backward", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", "Red"}], 
                    "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", "Red"}], 
                    "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavL", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "2", "\[Omega]", " ", "homo", " ", "waves", " ", "in", 
                    " ", "blue"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"transmission", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", "materialnumber"}], "}"}], 
                    ",", "Blue"}], "]"}], "&"}], "/@", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"reflection", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", "Blue"}], 
                    "]"}], "&"}], "/@", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"forward", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Blue"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Blue"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "4", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"backward", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", "Blue"}], 
                    "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", "Blue"}], 
                    "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "2", "\[Omega]", " ", "inhomo", " ", "waves", " ", "in", 
                    " ", "orange"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"mrassumption", "==", "0"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{"flagBackward", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{"flagStandingWave", ",", "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "5", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "6", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "7", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", ".5"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", ".5"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "8", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", ".5"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", ".5"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "9", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", ".5"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", ".5"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "10", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"0", "-", ".5"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", ".5"}]}], "}"}], 
                    ",", "Orange"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "5", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "5", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "6", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "5", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "5", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "5", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", "interfaces", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Hyperplane", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "#"}], "}"}]}], "]"}], "&"}], 
                    "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", "materialnumber"}], "]"}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Evaluate", "@", "options2d"}], ",", 
                  RowBox[{"PlotLabel", "->", 
                   RowBox[{"\"\<\[Lambda] of \[Omega] wave (\[Mu]m) = \>\"", "<>", 
                    RowBox[{"ToString", "[", "\[Lambda]", "]"}]}]}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"fig12d", "=", 
                RowBox[{"Show", "[", 
                 RowBox[{"fig13d", ",", 
                  RowBox[{"ViewPoint", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "Infinity", ",", "0"}], "}"}]}], ",", 
                  RowBox[{"Method", "->", 
                   RowBox[{"{", 
                    RowBox[{"\"\<RotationControl\>\"", "->", "None"}], 
                    "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{
                 "PLOTTING", " ", "ELLIPSOMETRY", " ", "of", " ", "2", 
                  "\[Omega]", " ", "waves"}], "*)"}], "Subsubsection"], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "for", " ", "the", " ", "polarplot", " ", "of", " ", 
                 "reflected", " ", "waves"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"rmpw1", ",", "rmpw2"}], "}"}], "=", 
                RowBox[{"wavNL", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                  RowBox[{"[", 
                   RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ",
                   "reflected"}], ",", " ", 
                 RowBox[{
                  RowBox[{"[", 
                   RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ",
                   "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"extWave", "@", "rmpw1"}], ";", 
               RowBox[{"extWave", "@", "rmpw2"}], ";", "\[IndentingNewLine]", 
               RowBox[{"rSignal", "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], 
                 ".", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"rmpw1", "[", "A", "]"}], "+", 
                    RowBox[{"rmpw2", "[", "A", "]"}]}], ")"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "for", " ", "the", " ", "polarplot", " ", "of", " ", 
                 "transmitive", " ", "waves"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"tmpw1", ",", "tmpw2"}], "}"}], "=", 
                RowBox[{"wavNL", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                  RowBox[{"[", 
                   RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ",
                   "reflected"}], ",", " ", 
                 RowBox[{
                  RowBox[{"[", 
                   RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ",
                   "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"extWave", "@", "tmpw1"}], ";", 
               RowBox[{"extWave", "@", "tmpw2"}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"tSignal", "=", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], 
                   ".", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tmpw1", "[", "A", "]"}], "+", 
                    RowBox[{"tmpw2", "[", "A", "]"}]}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";"}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"tSignal", "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}], ",", 
                    RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], 
                 ".", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"tmpw1", "[", "A", "]"}], "+", 
                    RowBox[{"tmpw2", "[", "A", "]"}]}], ")"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"rules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                   RowBox[{"delta", " ", "Degree"}]}], ",", 
                  RowBox[{"If", "[", 
                   RowBox[{"RotatePolarizer", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "]"}], ",", 
                  RowBox[{"If", "[", 
                   RowBox[{"RotateAnalyzer", ",", 
                    RowBox[{"\[Psi]", "->", 
                    RowBox[{"\[CurlyPhi]", "+", 
                    RowBox[{"analyzeroffset", " ", "Degree"}]}]}], ",", 
                    RowBox[{"\[Psi]", "->", 
                    RowBox[{"psi", " ", "Degree"}]}]}], "]"}]}], "}"}]}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"dataRs", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"rSignal", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "*", 
                   RowBox[{"Conjugate", "[", 
                    RowBox[{"rSignal", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}], "/.", 
                 "rules"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"dataRp", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"rSignal", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "*", 
                   RowBox[{"Conjugate", "[", 
                    RowBox[{"rSignal", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], "/.", 
                 "rules"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"dataTs", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"tSignal", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "*", 
                   RowBox[{"Conjugate", "[", 
                    RowBox[{"tSignal", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}], "/.", 
                 "rules"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"dataTp", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"tSignal", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "*", 
                   RowBox[{"Conjugate", "[", 
                    RowBox[{"tSignal", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], "/.", 
                 "rules"}]}], ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "factorRp", ",", "factorRs", ",", "factorTp", ",", 
                  "factorTs"}], "}"}], "=", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]}], ";", 
               RowBox[{"Imax", "=", "1"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", " ", "[", 
                RowBox[{"samplerotationcontrol", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Quiet", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "MaxRp", ",", "MaxRs", ",", "MaxTp", ",", "MaxTs"}], 
                    "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", ",", "3"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", ",", "4"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", ",", "5"}], "]"}], "]"}], "]"}]}], "}"}]}], 
                   "]"}], ";"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Quiet", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "MaxRp", ",", "MaxRs", ",", "MaxTp", ",", "MaxTs"}], 
                    "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{"Re", "@", "dataRp"}], ",", "\[CurlyPhi]"}], 
                    "]"}], ",", 
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{"Re", "@", "dataRs"}], ",", "\[CurlyPhi]"}], 
                    "]"}], ",", 
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{"Re", "@", "dataTp"}], ",", "\[CurlyPhi]"}], 
                    "]"}], ",", 
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{"Re", "@", "dataTs"}], ",", "\[CurlyPhi]"}], 
                    "]"}]}], "}"}]}], "]"}], ";"}]}], "]"}], ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"Quiet", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"MaxRtot", ",", "MaxTtot"}], "}"}], "=", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Re", "@", "dataRp"}], "+", 
                    RowBox[{"Re", "@", "dataRs"}]}], ",", "\[CurlyPhi]"}], 
                    "]"}], ",", 
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Re", "@", "dataTp"}], "+", 
                    RowBox[{"Re", "@", "dataTs"}]}], ",", "\[CurlyPhi]"}], 
                    "]"}]}], "}"}]}], "]"}], ";"}], "  ", 
                RowBox[{"(*", 
                 RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Imax", "=", 
                RowBox[{"1.1", 
                 RowBox[{"Max", "[", 
                  RowBox[{"MaxRp", ",", "MaxRs", ",", "MaxTp", ",", "MaxTs"}],
                   "]"}]}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"Imax", "=", 
                  RowBox[{"1.1", 
                   RowBox[{"Max", "[", 
                    RowBox[{
                    "MaxRp", ",", "MaxRs", ",", "MaxTp", ",", "MaxTs", ",", 
                    "MaxRtot", ",", "MaxTtot"}], "]"}]}]}], ";"}], 
                RowBox[{"(*", 
                 RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Abs", "@", "Imax"}], "<", 
                  SuperscriptBox["10", 
                   RowBox[{"-", "10"}]]}], ",", 
                 RowBox[{"Imax", "=", "1"}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"factorRp", "=", 
                RowBox[{"Max", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxRp", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxRp"}], "]"}], ",", "0"}], 
                   "]"}]}], "]"}]}], ";", 
               RowBox[{"factorRs", "=", 
                RowBox[{"Max", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxRs", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxRs"}], "]"}], ",", "0"}], 
                   "]"}]}], "]"}]}], ";", 
               RowBox[{"factorTp", "=", 
                RowBox[{"Max", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxTp", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxTp"}], "]"}], ",", "0"}], 
                   "]"}]}], "]"}]}], ";", 
               RowBox[{"factorTs", "=", 
                RowBox[{"Max", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxTs", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxTs"}], "]"}], ",", "0"}], 
                   "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"factorRtot", "=", 
                  RowBox[{"Max", "[", 
                   RowBox[{"1", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxRtot", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxRtot"}], "]"}], ",", "0"}], 
                    "]"}]}], "]"}]}], ";", " ", 
                 RowBox[{"(*", 
                  RowBox[{"new", " ", "V240120"}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"factorTtot", "=", 
                  RowBox[{"Max", "[", 
                   RowBox[{"1", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxTtot", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxTtot"}], "]"}], ",", "0"}], 
                    "]"}]}], "]"}]}], ";"}], " ", 
                RowBox[{"(*", 
                 RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"polarRp", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRp", "*", 
                 RowBox[{"Re", "@", "dataRp"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"polarRs", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRs", "*", 
                 RowBox[{"Re", "@", "dataRs"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"polarTp", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTp", "*", 
                 RowBox[{"Re", "@", "dataTp"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"polarTs", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTs", "*", 
                 RowBox[{"Re", "@", "dataTs"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"polarRtot", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRtot", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Re", "@", "dataRs"}], "+", 
                   RowBox[{"Re", "@", "dataRp"}]}], ")"}]}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{"new", " ", "V240120"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"polarTtot", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTtot", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Re", "@", "dataTs"}], "+", 
                   RowBox[{"Re", "@", "dataTp"}]}], ")"}]}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{"new", " ", "V240120"}], "*)"}], 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"!", "RotateAnalyzer"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"!", "RotatePolarizer"}], ")"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{"samplerotationcontrol", ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"figRp", "=", 
                    RowBox[{"ListPolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], " ", "Degree"}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "2"}], "]"}], "]"}], "/", "Imax"}], "*",
                     "factorRp"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "SampleRotateList", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Joined", "->", "True"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "->", "Full"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figRs", "=", 
                    RowBox[{"ListPolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "Degree"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "3"}], "]"}], "]"}], "/", "Imax"}], "*",
                     "factorRs"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "SampleRotateList", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Joined", "->", "True"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "->", "Full"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figTp", "=", 
                    RowBox[{"ListPolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "Degree"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "4"}], "]"}], "]"}], "/", "Imax"}], "*",
                     "factorTp"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "SampleRotateList", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Joined", "->", "True"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "->", "Full"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figTs", "=", 
                    RowBox[{"ListPolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "Degree"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "5"}], "]"}], "]"}], "/", "Imax"}], "*",
                     "factorTs"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "SampleRotateList", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Joined", "->", "True"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "->", "Full"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"figRp", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarRp", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figRs", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarRs", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figTp", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarTp", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figTs", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarTs", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}]}], "]"}], "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{"figRtot", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarRtot", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRtot", "]"}]}], ",", "22",
                     ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])+\!\(\*SuperscriptBox[\(I\), \(R, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", 
                   RowBox[{"(*", 
                    RowBox[{"new", " ", "V240120"}], "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"figTtot", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarTtot", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTtot", "]"}]}], ",", "22",
                     ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])+\!\(\*SuperscriptBox[\(I\), \(T, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}], 
                  RowBox[{"(*", 
                   RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
                 "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"figRp", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRp", "*", 
                    RowBox[{"Re", "@", "dataRp"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"figRs", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRs", "*", 
                    RowBox[{"Re", "@", "dataRs"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"figTp", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTp", "*", 
                    RowBox[{"Re", "@", "dataTp"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"figTs", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTs", "*", 
                    RowBox[{"Re", "@", "dataTs"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"figRtot", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarRtot", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRtot", "]"}]}], ",", "22",
                     ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])+\!\(\*SuperscriptBox[\(I\), \(R, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", 
                  RowBox[{"(*", 
                   RowBox[{"new", " ", "V240120"}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"figTtot", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarTtot", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTtot", "]"}]}], ",", "22",
                     ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])+\!\(\*SuperscriptBox[\(I\), \(T, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}], 
                 RowBox[{"(*", 
                  RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{
                 "Plot", " ", "maker", " ", "fringes", " ", "and", " ", 
                  "fresnel", " ", "figures"}], "*)"}], "Subsubsection"], 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"makerfringescontrol", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"listMFpara", "=", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Re", "[", 
                    RowBox[{"MFList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CapitalDelta]\[Delta]", "->", 
                    RowBox[{"delta", " ", "Degree"}]}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], " ", "/.", 
                    RowBox[{"\[Psi]", "->", 
                    RowBox[{"psi", " ", "Degree"}]}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"figmakerfringespar", "=", "\[IndentingNewLine]", 
                   RowBox[{"ListLinePlot", "[", 
                    RowBox[{"listMFpara", ",", 
                    RowBox[{"PlotRange", "->", 
                    RowBox[{"{", 
                    RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Thickness", "[", "0.01", "]"}], "]"}]}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameStyle", "->", 
                    RowBox[{"Directive", "@", 
                    RowBox[{"{", 
                    RowBox[{"Black", ",", "18", ",", "Thick"}], "}"}]}]}], 
                    ",", 
                    RowBox[{"Axes", "\[Rule]", "False"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)\>\"", "]"}], ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], T\)]\)(\!\
\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]) (a.u.)\>\"", 
                    "]"}], ",", 
                    RowBox[{"BaseStyle", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontSize", "->", "18"}], ",", 
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}]}],
                     "}"}]}]}], "}"}]}], ",", 
                    RowBox[{"ImageSize", "->", "Large"}]}], 
                    RowBox[{"(*", 
                    RowBox[{",", 
                    RowBox[{"FrameTicksStyle", "->", 
                    RowBox[{"{", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"FontOpacity", "->", "0"}], ",", 
                    RowBox[{"FontSize", "->", "0"}]}], "]"}]}], "}"}]}]}], 
                    "*)"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"listMFperp", "=", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Re", "[", 
                    RowBox[{"MFList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CapitalDelta]\[Delta]", "->", 
                    RowBox[{"delta", " ", "Degree"}]}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "/.", 
                    RowBox[{"\[Psi]", "->", 
                    RowBox[{
                    RowBox[{"(", "psi", ")"}], " ", "Degree"}]}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"figmakerfringesperp", "=", "\[IndentingNewLine]", 
                   RowBox[{"ListLinePlot", "[", 
                    RowBox[{"listMFperp", ",", 
                    RowBox[{"PlotRange", "->", 
                    RowBox[{"{", 
                    RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Thickness", "[", "0.01", "]"}], "]"}]}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameStyle", "->", 
                    RowBox[{"Directive", "@", 
                    RowBox[{"{", 
                    RowBox[{"Black", ",", "18", ",", "Thick"}], "}"}]}]}], 
                    ",", 
                    RowBox[{"Axes", "\[Rule]", "False"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)\>\"", "]"}], ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], T\)]\)(\!\
\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]+90\[Degree]) \
(a.u.)\>\"", "]"}], ",", 
                    RowBox[{"BaseStyle", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontSize", "->", "18"}], ",", 
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}]}],
                     "}"}]}]}], "}"}]}], ",", 
                    RowBox[{"ImageSize", "->", "Large"}]}], "]"}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"fresnelcontrol", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"listFresnel", "=", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"Re", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FresnelList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"0", " ", "Degree"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FresnelList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"90", " ", "Degree"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FresnelList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"0", " ", "Degree"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FresnelList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "5"}], "}"}]}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"90", " ", "Degree"}]}]}]}], "}"}], "/.", 
                    RowBox[{"\[CapitalDelta]\[Delta]", "->", "0"}]}], ")"}]}],
                     "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"figfresnel", "=", "\[IndentingNewLine]", 
                   RowBox[{"ListLinePlot", "[", 
                    RowBox[{"listFresnel", ",", 
                    RowBox[{"PlotRange", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "90"}], "}"}], ",", "Automatic"}], 
                    "}"}]}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Thickness", "[", "0.01", "]"}], "]"}]}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameStyle", "->", 
                    RowBox[{"Directive", "@", 
                    RowBox[{"{", 
                    RowBox[{"Black", ",", "18", ",", "Thick"}], "}"}]}]}], 
                    ",", 
                    RowBox[{"Axes", "\[Rule]", "False"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)\>\"", "]"}], 
                    RowBox[{"(*", 
                    RowBox[{",", 
                    RowBox[{
                    "Style", "[", "\"\<Fresnel Transmittance/Reflectance\>\"",
                     "]"}]}], "*)"}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fresnel Transmittance/Reflectance\>\"", ",", "Black",
                     ",", "20"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "400"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(R\), \(p\)]\)\>\"", ",", "20"}],
                     "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(R\), \(s\)]\)\>\"", ",", "20"}],
                     "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(T\), \(p\)]\)\>\"", ",", "20"}],
                     "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(T\), \(s\)]\)\>\"", ",", "20"}],
                     "]"}]}], "}"}]}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
                "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{
                 "Plot", " ", "schematics", " ", "for", " ", "optical", " ", 
                  "geometry"}], "*)"}], "Subsubsection"], 
               "\[IndentingNewLine]", 
               RowBox[{"plot2geometry2d", "=", 
                RowBox[{"fplot2geometry2d", "[", "theta", "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"plot2geometry3d", "=", 
                RowBox[{"fplot2geometry3d", "[", "theta", "]"}]}], ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{
                 "Plot", " ", "schematics", " ", "for", " ", "optical", " ", 
                  "polarization"}], "*)"}], "Subsubsection"], 
               "\[IndentingNewLine]", 
               RowBox[{"polarizationplot2d", "=", 
                RowBox[{"fpolarizationplot2d", "[", 
                 RowBox[{
                 "theta", ",", "phi", ",", "psi", ",", "RotatePolarizer", ",",
                   "RotateAnalyzer"}], "]"}]}], ";", 
               RowBox[{"polarizationplot3d", "=", 
                RowBox[{"fpolarizationplot3d", "[", 
                 RowBox[{
                 "theta", ",", "phi", ",", "psi", ",", "RotatePolarizer", ",",
                   "RotateAnalyzer"}], "]"}]}], ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{"PLOTTING", " ", "ELLIPTICITY", " ", "FIGURES"}], 
                 "*)"}], "Subsubsection"], "\[IndentingNewLine]", 
               RowBox[{"rwave", "=", 
                RowBox[{"Normalize", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"rmpw2", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"rmpw1", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"rmpw1", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"rmpw2", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "}"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                    RowBox[{"delta", " ", "Degree"}]}], "}"}]}], "]"}]}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"twave", "=", 
                RowBox[{"Normalize", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tmpw2", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"tmpw1", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tmpw1", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"tmpw2", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "}"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                    RowBox[{"delta", " ", "Degree"}]}], "}"}]}], "]"}]}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"iwave", "=", 
                RowBox[{"Normalize", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"wInc", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"wInc", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                    RowBox[{"delta", " ", "Degree"}]}], "}"}]}], "]"}]}], ";",
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"ellipticityfig", "=", "\[IndentingNewLine]", 
                RowBox[{"If", " ", "[", 
                 RowBox[{"RotatePolarizer", ",", "\[IndentingNewLine]", " ", 
                  RowBox[{"ParametricPlot", "[", 
                   RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"iwave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"iwave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"rwave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"rwave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"twave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"twave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"z", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Evaluate", "@", "options3"}]}], "]"}], 
                  "\[IndentingNewLine]", ",", "\[IndentingNewLine]", " ", 
                  RowBox[{"ParametricPlot", "[", 
                   RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"iwave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"iwave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"rwave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"rwave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"twave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"twave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "}"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"z", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Evaluate", "@", "options3"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]",
               ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"clearFigs", "[", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"Print", "@", 
                RowBox[{"Style", "[", 
                 RowBox[{
                 "\"\<SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!\>\"", " ", ",", 
                  "Bold", ",", "Red", ",", "32"}], "]"}]}]}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{
            "For", " ", "Partial", " ", "Analytical", " ", "Expressions"}], 
            "*)"}], "Section"], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
            "Functionality", "==", "\"\<Partial Analytical Expressions\>\""}],
             ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"rules", "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                 RowBox[{"delta", " ", "Degree"}]}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{"RotatePolarizer", ",", 
                  RowBox[{"Sequence", "@@", 
                   RowBox[{"{", "}"}]}], ",", 
                  RowBox[{"\[CurlyPhi]", "->", 
                   RowBox[{"phi", " ", "Degree"}]}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{"RotateAnalyzer", ",", 
                  RowBox[{"\[Psi]", "->", 
                   RowBox[{"\[CurlyPhi]", "+", 
                    RowBox[{"analyzeroffset", " ", "Degree"}]}]}], ",", 
                  RowBox[{"\[Psi]", "->", 
                   RowBox[{"psi", " ", "Degree"}]}]}], "]"}]}], "}"}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"for", " ", "the", " ", "linear", " ", "part"}], ",", 
               " ", 
               RowBox[{"i", ".", "e", "."}], ",", " ", 
               RowBox[{
               "Fresnel", " ", "coefficients", " ", "for", " ", "one", " ", 
                "incident", " ", "angle"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"rmpw1L", ",", "rmpw2L"}], "}"}], "=", 
              RowBox[{"wavL", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "reflected"}], ",", " ", 
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"extWave", "@", "rmpw1L"}], ";", 
             RowBox[{"extWave", "@", "rmpw2L"}], ";", "\[IndentingNewLine]", 
             RowBox[{"rSignalL", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"rmpw1L", "[", "A", "]"}], "+", 
                 RowBox[{"rmpw2L", "[", "A", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "2"}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tmpw1L", ",", "tmpw2L"}], "}"}], "=", 
              RowBox[{"wavL", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "reflected"}], ",", " ", 
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"extWave", "@", "tmpw1L"}], ";", 
             RowBox[{"extWave", "@", "tmpw2L"}], ";", "\[IndentingNewLine]", 
             RowBox[{"tSignalL", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"tmpw1L", "[", "A", "]"}], "+", 
                 RowBox[{"tmpw2L", "[", "A", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "2"}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"dataRpL", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"rSignalL", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "*", 
                RowBox[{"Conjugate", "[", 
                 RowBox[{"rSignalL", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}]}], 
             RowBox[{"(*", 
              RowBox[{"/.", "rules"}], "*)"}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataRsL", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"rSignalL", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "*", 
                RowBox[{"Conjugate", "[", 
                 RowBox[{"rSignalL", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}]}], 
             RowBox[{"(*", 
              RowBox[{"/.", "rules"}], "*)"}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataTpL", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"tSignalL", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "*", 
                RowBox[{"Conjugate", "[", 
                 RowBox[{"tSignalL", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}]}], 
             RowBox[{"(*", 
              RowBox[{"/.", "rules"}], "*)"}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataTsL", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"tSignalL", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "*", 
                RowBox[{"Conjugate", "[", 
                 RowBox[{"tSignalL", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}]}], 
             RowBox[{"(*", 
              RowBox[{"/.", "rules"}], "*)"}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "equationRpL", ",", "equationRsL", ",", "equationTpL", ",", 
                "equationTsL"}], "}"}], "=", 
              RowBox[{"Re", "@", 
               RowBox[{"{", 
                RowBox[{
                "dataRpL", ",", "dataRsL", ",", "dataTpL", ",", "dataTsL"}], 
                "}"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "for", " ", "the", " ", "polarplot", " ", "of", " ", 
               "reflected", " ", "waves"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"rmpw1", ",", "rmpw2"}], "}"}], "=", 
              RowBox[{"wavNL", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "reflected"}], ",", " ", 
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"extWave", "@", "rmpw1"}], ";", 
             RowBox[{"extWave", "@", "rmpw2"}], ";", "\[IndentingNewLine]", 
             RowBox[{"rSignal", "=", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                   RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Sin", "[", "\[Psi]", "]"}], ",", 
                   RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], ".", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"rmpw1", "[", "A", "]"}], "+", 
                  RowBox[{"rmpw2", "[", "A", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "for", " ", "the", " ", "polarplot", " ", "of", " ", 
               "transmitive", " ", "waves"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tmpw1", ",", "tmpw2"}], "}"}], "=", 
              RowBox[{"wavNL", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "reflected"}], ",", " ", 
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"extWave", "@", "tmpw1"}], ";", 
             RowBox[{"extWave", "@", "tmpw2"}], ";", "\[IndentingNewLine]", 
             RowBox[{"tSignal", "=", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                   RowBox[{"Sin", "[", "\[Psi]", "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}], ",", 
                   RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], ".", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"tmpw1", "[", "A", "]"}], "+", 
                  RowBox[{"tmpw2", "[", "A", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"dataRs", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"rSignal", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "*", 
                 RowBox[{"Conjugate", "[", 
                  RowBox[{"rSignal", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}], "/.", 
               "rules"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataRp", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"rSignal", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "*", 
                 RowBox[{"Conjugate", "[", 
                  RowBox[{"rSignal", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], "/.", 
               "rules"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataTs", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"tSignal", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "*", 
                 RowBox[{"Conjugate", "[", 
                  RowBox[{"tSignal", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}], "/.", 
               "rules"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataTp", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"tSignal", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "*", 
                 RowBox[{"Conjugate", "[", 
                  RowBox[{"tSignal", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], "/.", 
               "rules"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "equationRp", ",", "equationRs", ",", "equationTp", ",", 
                "equationTs"}], "}"}], "=", 
              RowBox[{"Re", "@", 
               RowBox[{"{", 
                RowBox[{
                "dataRp", ",", "dataRs", ",", "dataTp", ",", "dataTs"}], 
                "}"}]}]}], ";"}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "equationRpL", ",", "equationRsL", ",", "equationTpL", ",", 
                "equationTsL"}], "}"}], "=", 
              RowBox[{"ConstantArray", "[", 
               RowBox[{"placeHolderEqus", ",", "4"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "equationRp", ",", "equationRs", ",", "equationTp", ",", 
                "equationTs"}], "}"}], "=", 
              RowBox[{"ConstantArray", "[", 
               RowBox[{"placeHolderEqus", ",", "4"}], "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"progress", "=", "100"}], ";", "\[IndentingNewLine]", 
          RowBox[{"EndTime", "=", 
           RowBox[{"SessionTime", "[", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"evaltime", "=", 
           RowBox[{"EndTime", "-", "StartTime"}]}], ";", 
          "\[IndentingNewLine]", "\"\<\>\""}], 
         RowBox[{"(*", 
          RowBox[{"Avoid", " ", "print", " ", "Null"}], "*)"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          StyleBox["CONTROLS", "Chapter",
           FontWeight->"Bold"], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"Column", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            StyleBox["header1", "Input"], ",", "\[IndentingNewLine]", 
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Framed", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Functionality\>\"", ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "Functionality", ",", "\"\<User Guide\>\"", ",", 
                    "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<User Guide\>\"", ",", 
                    "\"\<Set Material Properties\>\"", ",", 
                    "\"\<SHG Simulation\>\"", ",", 
                    "\"\<Partial Analytical Expressions\>\""}], "}"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<Row\>\""}]}], "}"}], 
                    "]"}], "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "16"}], "}"}]}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     "\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}]}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"schematictype", ",", "1", ",", "\"\<\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<2D Schematics\>\"", ",", "Bold"}], "]"}]}], 
                    ",", 
                    RowBox[{"2", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<3D Schematics\>\"", ",", "Bold"}], "]"}]}]}],
                     "}"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<Row\>\""}], ",", 
                    RowBox[{"ControlType", "->", "SetterBar"}]}], "}"}], 
                    "]"}]}], "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "14"}], "}"}]}]}], 
                    "]"}], ",", "\"\<\>\""}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], "}"}], ",", 
                    "True"}], "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Wavelength Setting\>\"", ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[Lambda]", ",", "1.064", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident fundamental wavelength (\[Mu]m):\>\"", 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ControlType", "->", "InputField"}], ",", 
                    RowBox[{"FieldSize", "->", "6"}]}], "}"}], "]"}], 
                    "\[IndentingNewLine]", "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "15"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Layer Selection:\>\"", ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"materialnumber", ",", "1", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Number of Layers: \>\"", ",", "Bold"}], 
                    "]"}]}], "}"}], ",", "Number", ",", "InputField", ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Dynamic", "["}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"IntegerQ", "[", "materialnumber", "]"}]}], ")"}],
                     ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The number of materials must be an integer.\>\
\"", ",", "Red", ",", "Bold"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"materialnumber", "<", "1"}], ")"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: You need to use at least one material.\>\"", 
                    ",", "Red", ",", "Bold"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"materialnumber", ">", 
                    RowBox[{"maxmaterialnumber", "-", "2"}]}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{
                    "\"\<ERROR: The maximum number of materials is set at \
\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"maxmaterialnumber", "-", "2"}], "]"}], "<>", 
                    "\"\<.\>\""}], ",", "Red", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"matindex", ",", "2", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Select the layer to Edit : \>\"", ",", "Bold"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"materialnumber", "+", "1"}]}], "]"}], "->", 
                    RowBox[{"(", 
                    RowBox[{"ToString", "/@", 
                    RowBox[{"Range", "[", "materialnumber", "]"}]}], ")"}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<Row\>\""}], ",", 
                    RowBox[{"ControlType", "->", "SetterBar"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", "\"\<\>\""}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", "]", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Name: \>\""}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "name", "]"}], "]"}], "]"}], "]"}], 
                    ",", "String", ",", 
                    RowBox[{"FieldSize", "->", "20"}], ",", 
                    RowBox[{"FieldHint", "->", "\"\<Enter name here\>\""}]}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
                    ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Case Studies and Examples\>\"", ",", "18", ",", 
                    "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Blank linear\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"blankMaterL", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Blank nonlinear\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"blankMaterNL", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<BaTiO3\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"BTO", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Air\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"Air", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    "\"\<LiNbO3(11\!\(\*OverscriptBox[\(2\), \(_\)]\)0)\>\"", 
                    ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "LiNbO3xCut\[Lambda]1550", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<LiNbO3(0001)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "LiNbO3zCut\[Lambda]1550", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<KTP(100)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"KTPxCut", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<KTP(010)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"KTPyCut", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<ZnO(0001)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"ZnO001", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Pt(111)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"Pt111\[Lambda]1550", "[", "\[Lambda]", "]"}]}]}],
                     ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(Al\), \
\(2\)]\)\!\(\*SubscriptBox[\(O\), \(3\)]\)(0001)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "Al2O3$0001\[Lambda]1550", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<GaAs(111)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "GaAs111\[Lambda]800", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<X-cut Quartz\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "Quartz$xCut\[Lambda]1064", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Quartz(001)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "Quartz$zCut\[Lambda]800", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Au Coating\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"Au\[Lambda]800", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<MoS2\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"MoS2", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}]}], "\[IndentingNewLine]", "}"}], 
                    "]"}]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox["Left", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], ",", 
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}]}],
                     "}"}]}], "Input"]}], 
                    StyleBox["]", "Input"]}]}], 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox["True", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\"\<\>\"", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["]", "Input"]}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Calculation Controls\>\"", ",", "18", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"fresnelcontrol", ",", "False", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Generate Fresnel Coefficients Plot:\>\"", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}], 
                    ",", 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"makerfringescontrol", ",", "False", ",", 
                    RowBox[{
                    "Style", "[", "\"\<Generate Maker Fringes Plot:\>\"", 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     "\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Assumptions\>\"", ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Assumptions for Multiple Reflection: \>\"", ",", 
                    "Bold", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"mrassumption", ",", "0", ",", "\"\<\>\""}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "0", "->", "\"\<Full Multiple Reflections (FMR)\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    "1", "->", 
                    "\"\<Jerphagnon & Kurtz Assumption (No MR)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "2", "->", 
                    "\"\<Herman & Hayden Assumption \\n (MR only for \
2\[Omega] Homo Waves)\>\""}]}], "}"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<Vertical\>\""}]}], "}"}],
                     "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"mrassumption", "==", "0"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Assumptions for 2\[Omega] Inhomogeneous Waves (for \
FMR only): \>\"", ",", "Bold", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"winhAssumption", ",", "1", ",", "\"\< \>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"0", "->", "\"\<Forward waves only\>\""}], ",", 
                    RowBox[{"1", "->", "\"\<Forward + Backward waves\>\""}], 
                    ",", 
                    RowBox[{
                    "2", "->", 
                    "\"\<Forward + Backward + Standing waves\>\""}]}], "}"}], 
                    ",", 
                    RowBox[{"Appearance", "->", "\"\<Vertical\>\""}]}], "}"}],
                     "]"}]}], "}"}]}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], 
                    RowBox[{"(*", 
                    RowBox[{"\[And]", 
                    RowBox[{"(", 
                    RowBox[{"makerfringescontrol", "==", "False"}], ")"}]}], 
                    "*)"}], ")"}], "\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Polarimetry Settings\>\"", ",", "18", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Angle \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\) (\[Degree])\>\"", ",", " ", "Bold", ",", "14"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"theta", ",", "45.0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\) (\
\[Degree])\>\"", "]"}]}], "}"}], ",", "0.0", ",", "89.0", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "340"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"theta", ",", "45", ",", "\"\<\>\""}], "}"}], ",",
                     "0", ",", "75", ",", "15", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "theta", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\\\" \\\", RowBox[{\\\"(\\\", \
\\\"\[NoBreak]\\\", TagBox[GridBox[{{RowBox[{\\\"Cos\\\", \\\"[\\\", \\\"\
\[CurlyPhi]\\\", \\\"]\\\"}]},{RowBox[{RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"\
\[CurlyPhi]\\\", \\\"]\\\"}], \\\"\[Application]\\\", \
SuperscriptBox[\\\"e\\\", RowBox[{\\\"i\\\", RowBox[{\\\"\[DifferenceDelta]\\\
\", \\\"\[Delta]\\\"}]}]]}]},{\\\"0\\\"}},GridBoxAlignment->{\\\"Columns\\\" \
-> {{Center}}, \\\"Rows\\\" -> \
{{Baseline}}},GridBoxSpacings->{\\\"Columns\\\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \\\"Rows\\\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \\\"\[NoBreak]\\\", \
\\\")\\\"}]}],Function[BoxForm`e$, MatrixForm[BoxForm`e$]]]\)\>\"", ",", " ", 
                    "Bold", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"delta", ",", "0", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Ellipticity \[CapitalDelta]\[Delta] \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", ",", "Bold"}], "]"}]}], "}"}], 
                    ",", "0", " ", ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "222"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<                                               \>\"",
                     ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "delta", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], 
                    "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RotatePolarizer", ",", "True", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Polarization \
\[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", ",", "Bold"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"True", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Rotate Polarizer\>\"", ",", "Bold"}], 
                    "]"}]}], ",", 
                    RowBox[{"False", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Fix Polarizer\>\"", ",", "Bold"}], "]"}]}]}],
                     "}"}]}], "}"}], "]"}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "RotatePolarizer", ",", "\"\< \>\"", "  ", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Fixed Incident Polarization \
\[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", 
                    "0", ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "163"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "45", ",", "\"\<\>\""}], "}"}], ",", 
                    "0", ",", "180", ",", "45", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "phi", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "\"\<For \[CurlyPhi] and \[Psi], 0\[Degree] refers \
to p- polarized, 90\[Degree] refers to s- polarized\>\"", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "14"}]}]}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "0", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fixed Incident Polarization Angle \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", ",", "Bold"}], "]"}]}], "}"}], 
                    ",", "0", " ", ",", "360"}], "}"}], "]"}], "}"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{"RotatePolarizer", ",", "Red", ",", "LightBlue"}],
                     "]"}], "]"}]}]}], "]"}], ","}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RotateAnalyzer", ",", "False", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<SHG Polarization \[Psi]\!\(\*SuperscriptBox[\((\), \
\(o\)]\)): \>\"", ",", "Bold"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"True", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Rotate Analyzer\>\"", ",", "Bold"}], "]"}]}],
                     ",", 
                    RowBox[{"False", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Fix Analyzer\>\"", ",", "Bold"}], "]"}]}]}], 
                    "}"}]}], "}"}], "]"}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{"RotateAnalyzer", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"RotatePolarizer", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"analyzeroffset", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Analyzer-Polarizer Angle Offset \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", "0", ",", 
                    "180", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "}"}], "]"}], " ", 
                    ",", "\"\<\>\""}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Fixed SHG Polarization \
\[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", "0", 
                    ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "235"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "45", ",", "\"\<\>\""}], "}"}], ",", 
                    "0", ",", "180", ",", "45", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "psi", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{",", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "0", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fixed Output Analyzer Angle \!\(\*SuperscriptBox[\((\
\), \(o\)]\)): \>\"", ",", "Bold"}], "]"}]}], "}"}], ",", "0", " ", ",", 
                    "360"}], "}"}], "]"}], "}"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{"RotateAnalyzer", ",", "Red", ",", "LightBlue"}], 
                    "]"}], "]"}]}]}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"samplerotationcontrol", ",", "False", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Sample Rotation \
\[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", ",", "Bold"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"True", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Rotate Sample\>\"", ",", "Bold"}], "]"}]}], 
                    ",", 
                    RowBox[{"False", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Fix Sample\>\"", ",", "Bold"}], "]"}]}]}], 
                    "}"}]}], "}"}], "]"}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{"samplerotationcontrol", ",", 
                    RowBox[{
                    RowBox[{"RotatePolarizer", "=", "False"}], ";", 
                    RowBox[{"RotateAnalyzer", "=", "False"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"samplerotatestep", ",", "10", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Step Size\!\(\*SuperscriptBox[\((\), \(o\)]\)): \
\>\"", "]"}]}], "}"}], ",", "0", ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "235"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"samplerotatestep", ",", "10", ",", "\"\<\>\""}], 
                    "}"}], ",", "10", ",", "30", ",", "10", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "samplerotatestep", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"makerfringescontrol", "==", "False"}], ")"}]}], 
                    ")"}], "\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], ",", "True",
                     ",", "False"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
                    ",", "\"\<\>\""}], "]"}], "]"}], "\[IndentingNewLine]", 
                    ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], 
                    RowBox[{"(*", 
                    RowBox[{"\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], "*)"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"fresnelcontrol", "==", "True"}], ")"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fresnel Coefficients Collection Settings\>\"", ",", 
                    "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Step Size \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)(\[Degree])\>\"", ",", " ", "Bold", ",", "14"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"thetastep1", ",", "2", ",", "\"\<\>\""}], "}"}], 
                    ",", "1", ",", "5", ",", "1", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "thetastep1", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"fresnelcontrol", ",", "True", ",", "False"}], 
                    "]"}]}], "]"}], "\[IndentingNewLine]", ",", "\"\<\>\""}], 
                    "]"}], "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], 
                    RowBox[{"(*", 
                    RowBox[{"\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], "*)"}], 
                    ")"}], 
                    RowBox[{"(*", 
                    RowBox[{"\[And]", 
                    RowBox[{"(", 
                    RowBox[{"makerfringescontrol", "==", "True"}], ")"}]}], 
                    "*)"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Maker Fringes Collection Settings\>\"", ",", "18", 
                    ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Minimum Incident Angle \!\(\*SuperscriptBox[\(\
\[Theta]\), \(min\)]\) (\[Degree])\>\"", ",", " ", "Bold", ",", "14"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"mintheta2", ",", 
                    RowBox[{"-", "30"}], ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(\[Theta]\), \(min\)]\) (\
\[Degree])\>\"", "]"}]}], "}"}], ",", 
                    RowBox[{"-", "90"}], ",", "0", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "340"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"mintheta2", ",", 
                    RowBox[{"-", "30"}], ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"-", "90"}], ",", "0", ",", "15", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "mintheta2", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Maximum Incident Angle \!\(\*SuperscriptBox[\(\
\[Theta]\), \(max\)]\) (\[Degree])\>\"", ",", " ", "Bold", ",", "14"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"maxtheta2", ",", "30", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(\[Theta]\), \(max\)]\) (\
\[Degree])\>\"", "]"}]}], "}"}], ",", "0", ",", "90", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "340"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"maxtheta2", ",", "30", ",", "\"\<\>\""}], "}"}], 
                    ",", "0", ",", "90", ",", "15", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "maxtheta2", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Scan Step Size (\[Degree])\>\"", ",", " ", "Bold", 
                    ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"thetastep2", ",", "1", ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "5", ",", "10", ",", "15"}], 
                    "}"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "thetastep2", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\\\" \\\", RowBox[{\\\"(\\\", \
\\\"\[NoBreak]\\\", TagBox[GridBox[{{RowBox[{\\\"Cos\\\", \\\"[\\\", \\\"\
\[CurlyPhi]\\\", \\\"]\\\"}]},{RowBox[{RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"\
\[CurlyPhi]\\\", \\\"]\\\"}], \\\"\[Application]\\\", \
SuperscriptBox[\\\"e\\\", RowBox[{\\\"i\\\", RowBox[{\\\"\[DifferenceDelta]\\\
\", \\\"\[Delta]\\\"}]}]]}]},{\\\"0\\\"}},GridBoxAlignment->{\\\"Columns\\\" \
-> {{Center}}, \\\"Rows\\\" -> \
{{Baseline}}},GridBoxSpacings->{\\\"Columns\\\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \\\"Rows\\\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \\\"\[NoBreak]\\\", \
\\\")\\\"}]}],Function[BoxForm`e$, MatrixForm[BoxForm`e$]]]\)\>\"", ",", " ", 
                    "Bold", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Fixed Incident Polarization \
\[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", 
                    "0", ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "163"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "45", ",", "\"\<\>\""}], "}"}], ",", 
                    "0", ",", "180", ",", "45", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "phi", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Fixed SHG Polarization \
\[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", "0", 
                    ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "235"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "45", ",", "\"\<\>\""}], "}"}], ",", 
                    "0", ",", "180", ",", "45", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "psi", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "\"\<For \[CurlyPhi] and \[Psi], 0\[Degree] refers \
to p- polarized, 90\[Degree] refers to s- polarized\>\"", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "14"}]}]}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"delta", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident Ellipticity \[CapitalDelta]\[Delta] \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", 
                    RowBox[{"-", "90"}], " ", ",", "90", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "222"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"delta", ",", "0", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"-", "90"}], ",", "90", ",", "30", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "delta", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "makerfringescontrol", ",", "True", ",", "False"}], 
                    "]"}]}], "]"}], "\[IndentingNewLine]", ",", "\"\<\>\""}], 
                    "]"}], "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Thickness\>\""}], ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"matindex", "==", "1"}], "\[Or]", 
                    RowBox[{"matindex", "==", 
                    RowBox[{"materialnumber", "+", "2"}]}]}], ")"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<(No input: thickness of first and last material is \
infinite)\>\"", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", "\"\<Slab Thickness (\[Mu]m)   \>\"", "]"}],
                     ",", 
                    RowBox[{"Slider", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "h", "]"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1000"}], "}"}], ",", 
                    RowBox[{"ImageSize", "->", "150"}]}], "]"}], ",", 
                    "\"\<   \>\"", "\[IndentingNewLine]", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "h", "]"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "4"}]}], "]"}], ",", 
                    "\"\<    \>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<analytical h\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "h", "]"}], "]"}], "]"}], "=", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"\"\<h\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}]}], "]"}]}]}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
                    "]"}], "\[IndentingNewLine]", "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Crystal Structure\>\""}], ",", "18", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Point Group:    \>\"", ",", "Bold", ",", "14"}], 
                    "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Noncentrosymmetric -> \>\"", ",", "14"}], 
                    "]"}], ",", 
                    RowBox[{"PopupMenu", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "pg", "]"}], "]"}], "]"}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<1\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", 
                    "16"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", 
                    "26"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", 
                    "36"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<1\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<2\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "16"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "21", ",", "22", ",", "23", ",", "0", ",", "25", ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "34", ",", "0", ",", "36"}],
                     "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<2\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "11", ",", "12", ",", "13", ",", "0", ",", "15", ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "24", ",", "0", ",", "26"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "32", ",", "33", ",", "0", ",", "35", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<m\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<mm2\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "15", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "24", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "32", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<mm2\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<222\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "25", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "36"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<222\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<3\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"11", ",", 
                    RowBox[{"-", "11"}], ",", "0", ",", "14", ",", "15", ",", 
                    RowBox[{"-", "22"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "22"}], ",", "22", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "14"}], ",", 
                    RowBox[{"-", "11"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<3\>\""}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<32\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"11", ",", 
                    RowBox[{"-", "11"}], ",", "0", ",", "14", ",", "0", ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "14"}], ",", 
                    RowBox[{"-", "11"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<32\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<3m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "22"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "22"}], ",", "22", ",", "0", ",", "15", ",", 
                    "0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<3m\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<4\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "15", ",", "0"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<4\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<6\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "15", ",", "0"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<6\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "15", ",", "0"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "15"}], ",", "14", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"31", ",", 
                    RowBox[{"-", "31"}], ",", "0", ",", "0", ",", "0", ",", 
                    "36"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<4mm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "15", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "15", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<4mm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<6mm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "15", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "15", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<6mm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<422\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<422\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<622\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<622\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)2m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "14", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "36"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)2m\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(6\), \(_\)]\)\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"11", ",", 
                    RowBox[{"-", "11"}], ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "22"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "22"}], ",", "22", ",", "0", ",", "0", ",", 
                    "0", ",", 
                    RowBox[{"-", "11"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(6\), \(_\)]\)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(6\), \(_\)]\)m2\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "22"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "22"}], ",", "22", ",", "0", ",", "0", ",", 
                    "0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(6\), \(_\)]\)m2\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)3m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "14", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "14"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)3m\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<23\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "14", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "14"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<23\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "15", ",", "0"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\[Infinity]\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "15", ",",
                     "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "15", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\[Infinity]m\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]2\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\[Infinity]2\>\""}]}], "\[IndentingNewLine]", "}"}], 
                    ",", "\"\<--\>\""}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<                                     \>\"", "]"}], 
                    ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Centrosymmetric -> \>\"", ",", "14"}], "]"}],
                     ",", 
                    RowBox[{"PopupMenu", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "pg", "]"}], "]"}], "]"}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(1\), \(_\)]\)\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(1\), \(_\)]\)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<2/m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<2/m\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<mmm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<mmm\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<4/m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<4/m\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<4/mmm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<4/mmm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(3\), \(_\)]\)\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(3\), \(_\)]\)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(3\), \(_\)]\)m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(3\), \(_\)]\)m\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<6/m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<6/m\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<6/mmm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<6/mmm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<m3\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<m3\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<m3m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<m3m\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<432\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<432\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]/m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\[Infinity]/m\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]/mm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\[Infinity]/mm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]\[Infinity]\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\[Infinity]\[Infinity]\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]\[Infinity]m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\[Infinity]\[Infinity]m\>\""}]}], 
                    "\[IndentingNewLine]", "}"}], ",", "\"\<--\>\""}], 
                    "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<a = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<    b = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<    c = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\[Alpha] = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<    \[Beta] = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "5", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<    \[Gamma] = \>\"", ",", "12"}], "]"}], 
                    ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "6", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}]}], "}"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Crystal Orientation\>\""}], ",", "18", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"SetterBar", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Use Miller Indices (hkl)\>\"", ",", "Bold"}],
                     "]"}]}], ",", 
                    RowBox[{"2", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Use Crystal Physics Direction\>\"", ",", "Bold"}], 
                    "]"}]}]}], "}"}]}], "]"}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<?(hkl)\>\"", ",", "Black", ",", "Bold", ",", "11"}], 
                    "]"}], ",", "hklExplain"}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "3", "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<?Crystal Physics\>\"", ",", "Black", ",", "Bold", 
                    ",", "11"}], "]"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<: \>\"", ",", 
                    RowBox[{"ZSysExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    "\"\<Times New Roman\>\"", ",", "20"}], "]"}], "]"}]}], 
                    "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "==", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\<Rotation Angle =  \>\"", "]"}],
                     ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "rotationAngle", "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    RowBox[{
                    "Style", "[", "\"\< degree(\[Degree]) \>\"", "]"}], ",", 
                    "\"\<    \>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    "\"\<Apply Rotation Angle\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "=", " ", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}]}], ",", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}]}], ";"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
                    RowBox[{"Chop", "[", 
                    RowBox[{"(", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}]}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ")"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
                    RowBox[{"Chop", "[", 
                    RowBox[{"(", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}]}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ")"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "=", " ", 
                    RowBox[{"Chop", "[", 
                    RowBox[{"(", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}]}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ")"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"rotationAngle", "=", "0"}]}]}], "]"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SubscriptBox[\(Z\), \(1\)]\) = { \>\"", "]"}], 
                    ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\"\< }\>\""}], "}"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SubscriptBox[\(Z\), \(2\)]\) = { \>\"", "]"}], 
                    ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\"\< }\>\""}], "}"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SubscriptBox[\(Z\), \(3\)]\) = { \>\"", "]"}], 
                    ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\"\< }\>\""}], "}"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<(hkl) \[Rule] Crystal Surface Plane: \>\"", ",", 
                    "Bold"}], "]"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\<h = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\<,  k = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\<,  l = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}]}], "}"}], 
                    "]"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<[hkl] \[Rule] Direction Perpendicular to Plane of \
Incidence\>\"", ",", "Bold"}], "]"}], "]"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\<h = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\<,  k = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\<,  l = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}]}], "}"}], 
                    "]"}], "}"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}], "}"}], 
                    "]"}]}], "\[IndentingNewLine]", "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "==", "0"}], ")"}], ",", 
                    "\[IndentingNewLine]", "\"\<\>\"", "\[IndentingNewLine]", 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}]}], ",", "\"\<\>\"", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The crystal physics basis vectors are not \
orthogonal.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}]}], "]"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "==", "0"}], ")"}], ",", 
                    "\"\<\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[Cross]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "5"}], 
                    "]"}], ".", 
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", "5"}], 
                    "]"}]}], ">", "0"}], ")"}], ",", "\[IndentingNewLine]", 
                    "\"\<\>\"", "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The crystal physics basis vectors are not \
right-handed.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}]}], "]"}], 
                    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "}"}], "]"}], "\[IndentingNewLine]", "}"}], "]"}], "*)"}],
                     "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "==", "0"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\"\<\>\"", "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}]}], ",", "\"\<\>\"", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The crystal physics basis vectors are not \
orthogonal.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[Cross]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "5"}], 
                    "]"}], ".", 
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", "5"}], 
                    "]"}]}], ">", "0"}], ")"}], ",", "\"\<\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The crystal physics basis vectors are not \
right-handed.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Norm", "@", 
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "-", "1"}], 
                    "]"}], ",", "6"}], "]"}], "<=", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "4"}]]}], ",", "\"\<\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: \!\(\*SubscriptBox[\(Z\), \(1\)]\) is not a \
unit vector.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Norm", "@", 
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "-", "1"}], 
                    "]"}], ",", "6"}], "]"}], "<=", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "4"}]]}], ",", "\"\<\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: \!\(\*SubscriptBox[\(Z\), \(2\)]\) is not a \
unit vector.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Norm", "@", 
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "-", "1"}], 
                    "]"}], ",", "6"}], "]"}], "<=", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "4"}]]}], ",", "\"\<\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: \!\(\*SubscriptBox[\(Z\), \(3\)]\) is not a \
unit vector.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], "]"}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Dielectric Tensors \
(\!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(\[Omega]\)], \
\(ij\)]\) and \!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(2  \
\[Omega]\)], \(ij\)]\))\>\""}], ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\< \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \
\(ij\), \(\[Omega]\)]\) = \>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"MatrixForm", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "\[CurlyEpsilon]\[Omega]C", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Sequence", "@@", "##"}], "]"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"FieldSize", "->", "9"}]}], "]"}], "&"}], ",", 
                    " ", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", "3"}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"Spacings", "->", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    RowBox[{"ItemSize", "->", "All"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], "}"}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<  \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \
\(ij\), \(2  \[Omega]\)]\) = \>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"MatrixForm", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "\[CurlyEpsilon]2\[Omega]C", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Sequence", "@@", "##"}], "]"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"FieldSize", "->", "9"}]}], "]"}], "&"}], ",", 
                    " ", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", "3"}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"Spacings", "->", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    RowBox[{"ItemSize", "->", "All"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], "}"}], "]"}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< SHG Tensor \
(\!\(\*SubscriptBox[StyleBox[\\\"d\\\",FontSlant->\\\"Italic\\\"], \
\\\"ijk\\\"]\))\>\"", "<>", "\"\< pm/V\>\""}], ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(d\), \(ij\)]\)=   \>\"", ",", 
                    RowBox[{"MatrixForm", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "dgrid", ",", "\"\<\>\""}], 
                    "}"}], "}"}], "]"}], ",", "\"\<    \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    "\"\<analytical dij\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "need", " ", "to", " ", "exclude", " ", "top", " ", "and",
                     " ", "bottom", " ", "layers", " ", "and", " ", "any", 
                    " ", "other", " ", "linear", " ", "materials", " ", 
                    "layers"}], ";"}], " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "dC", "]"}], "]"}], "]"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<m\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}]}], "]"}], ")"}], 
                    "&"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "d11", ",", "d12", ",", "d13", ",", "d14", ",", "d15", 
                    ",", "d16"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d21", ",", "d22", ",", "d23", ",", "d24", ",", "d25", 
                    ",", "d26"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d31", ",", "d32", ",", "d33", ",", "d34", ",", "d35", 
                    ",", "d36"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"indexfun1", "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"materialnumber", "+", "2"}], "]"}]}], ";"}]}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "pg", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "==", "1"}], ",", "True", 
                    ",", "False"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
                    ",", "\"\<\>\""}], "]"}], "]"}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Layer Properties Preset Values\>\"", ",", "18", ",", 
                    "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Press update before setting any preset.\>\"", ",", 
                    "Blue", ",", "14"}], "]"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 1\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest1", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval1", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval1"}], ",", 
                    RowBox[{"presetval1", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap1"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 2\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest2", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval2", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval2"}], ",", 
                    RowBox[{"presetval2", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap2"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 3\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest3", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval3", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval3"}], ",", 
                    RowBox[{"presetval3", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap3"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 4\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest4", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval4", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval4"}], ",", 
                    RowBox[{"presetval4", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap4"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 5\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest5", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval5", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval5"}], ",", 
                    RowBox[{"presetval5", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap5"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 6\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest6", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval6", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval6"}], ",", 
                    RowBox[{"presetval6", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap6"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 7\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest7", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval7", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval7"}], ",", 
                    RowBox[{"presetval7", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap7"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 8\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest8", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval8", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval8"}], ",", 
                    RowBox[{"presetval8", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap8"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Clear Presets\>\"", ",", "Bold"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "ptest1", ",", "ptest2", ",", "ptest3", ",", "ptest4", 
                    ",", "ptest5", ",", "ptest6", ",", "ptest7", ",", 
                    "ptest8"}], "}"}], "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", "8"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "plabel1", ",", "plabel2", ",", "plabel3", ",", "plabel4",
                     ",", "plabel5", ",", "plabel6", ",", "plabel7", ",", 
                    "plabel8"}], "}"}], "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\"\<Type Label Here\>\"", ",", "8"}], "]"}]}], 
                    ";", 
                    RowBox[{"Clear", "[", 
                    RowBox[{
                    "presetval1", ",", "presetval2", ",", "presetval3", ",", 
                    "presetval4", ",", "presetval5", ",", "presetval6", ",", 
                    "presetval7", ",", "presetval8"}], "]"}]}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{
                    StyleBox["Row", "Input"], 
                    StyleBox["[", "Input"], 
                    RowBox[{
                    StyleBox["{", "Input"], 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest1", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 1 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel1", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest2", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 2 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel2", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest3", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 3 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel3", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest4", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 4 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel4", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest5", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 5 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel5", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest6", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 6 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel6", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest7", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 7 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel7", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest8", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 8 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel8", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}]}],
                     "}"}], "]"}], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Toggler", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "presetpopuptextvar", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"0", "->", "\"\<Show Preset Information\>\""}], 
                    ",", 
                    RowBox[{"1", "->", "\"\<Hide\>\""}]}], "}"}], ",", 
                    RowBox[{"Background", "->", "LightBlue"}], ",", 
                    RowBox[{"Alignment", "->", "Center"}]}], "]"}], ",", 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"presetpopuptextvar", "==", "1"}], ",", 
                    RowBox[{"Style", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\"\<Presets currently set:   \>\"", "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval1", "]"}], ",", 
                    "\"\<1   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval2", "]"}], ",", 
                    "\"\<2   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval3", "]"}], ",", 
                    "\"\<3   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval4", "]"}], ",", 
                    "\"\<4   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval5", "]"}], ",", 
                    "\"\<5   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval6", "]"}], ",", 
                    "\"\<6   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval7", "]"}], ",", 
                    "\"\<7   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval8", "]"}], ",", 
                    "\"\<8   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval1", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval2", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval3", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval4", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval5", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval6", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval7", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval8", "]"}]}], ",", 
                    "\"\<\>\"", ",", "\"\<None.\>\""}], "]"}], "<>", 
                    "\[IndentingNewLine]", 
                    
                    "\"\<\\nUpdate and press any of the preset buttons to \
save a material's \\ninformation to that preset. \\nPress the button again \
and update to apply those values.\\nHide and show this message to \
refresh.\>\""}], ",", "\"\<Times New Roman\>\"", ",", "12"}], "]"}], ",", 
                    "\"\<\>\""}], "]"}], "]"}]}], "\[IndentingNewLine]", 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], 
                    StyleBox["]", "Input"]}]}], 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox["False", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\"\<\>\"", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[
                    RowBox[{"(*", 
                    RowBox[{
                    "add", " ", "another", " ", "update", " ", "button"}], 
                    "*)"}], "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Green", ",", 
                    RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Inset", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                    RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
                    RowBox[{"Typeset`update$$", "=", 
                    RowBox[{"AbsoluteTime", "[", "]"}]}], ",", 
                    RowBox[{"Appearance", "->", "None"}]}], "]"}]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], "}"}], ",", 
                    StyleBox[
                    RowBox[{"ItemSize", "\[Rule]", " ", "63"}], "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}]}], "}"}]}], 
                    "Input"], 
                    StyleBox[" ", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Frame", "\[Rule]", "All"}], "Input"]}], "]"}], 
                   ",", 
                   RowBox[{"Background", "->", "White"}], ",", 
                   RowBox[{"ImageSize", "->", "Automatic"}]}], "]"}], ",", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  StyleBox["PLOTS", "Chapter",
                   FontWeight->"Bold"], "*)"}], "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"timecell", "=", 
                   RowBox[{"TextCell", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Time Used = \>\"", ",", 
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "evaltime", "]"}], ",", "5"}], 
                    "]"}], ",", "\"\< s\>\""}], "}"}], "]"}], ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", "20"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"Framed", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<User Guide\>\""}], 
                    ",", "\[IndentingNewLine]", "userguide", 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", "heterostructureschematic", "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"schematictype", "==", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< : \>\""}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"zvecplots2d", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], "}"}], 
                    "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< : \>\""}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"zvecplots3d", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], "}"}], 
                    "]"}]}], "]"}], "}"}], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontSize", "->", "24"}], ",", 
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}]}],
                     "}"}]}]}], "]"}], "}"}]}], "\[IndentingNewLine]", "}"}], 
                    "]"}]}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", "timecell", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\\n\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Green", ",", 
                    RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Inset", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                    RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
                    RowBox[{"Typeset`update$$", "=", 
                    RowBox[{"AbsoluteTime", "[", "]"}]}], ",", 
                    RowBox[{"Appearance", "->", "None"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Center"}]}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Optical Geometry and Polarization\>\"", ",", "30", 
                    ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"schematictype", "==", "1"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"fig12d", ",", "PropagationExplain"}], "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"fig13d", ",", "PropagationExplain"}], "]"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"schematictype", "==", "1"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"plot2geometry2d", ",", "GeometryExplain"}], 
                    "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"plot2geometry3d", ",", "GeometryExplain"}], 
                    "]"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"ellipticityfig", ",", "EllipticityExplain"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"schematictype", "==", "1"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"polarizationplot2d", ",", "GeometryExplain"}], 
                    "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"polarizationplot3d", ",", "GeometryExplain"}], 
                    "]"}]}], "]"}]}], "}"}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"makerfringescontrol", "||", "fresnelcontrol"}], 
                    ",", "False", ",", "True"}], "]"}]}], "]"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Polar Plots\>\"", ",", "30", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"\"\<Assumption Used: \>\"", "<>", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"mrassumption", "==", "0"}], ",", 
                    "\"\<Full Multiple Reflection\>\"", ",", 
                    RowBox[{"mrassumption", "==", "1"}], ",", 
                    "\"\<Jerphagnon & Kurtz Assumption\>\"", ",", 
                    RowBox[{"mrassumption", "==", "2"}], ",", 
                    "\"\<Herman & Hayden Assumption\>\""}], "]"}], "<>", 
                    "\"\<\\n\>\"", "<>", 
                    "\"\<Consider Backward Wave (for FMR only)? \>\"", "<>", 
                    RowBox[{"ToString", "[", "flagBackward", "]"}], "<>", 
                    "\"\<\\n\>\"", "<>", 
                    "\"\<Consider Standing Wave (for FMR only)? \>\"", "<>", 
                    RowBox[{"ToString", "[", "flagStandingWave", "]"}]}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}], 
                    ",", 
                    RowBox[{"FontSize", "->", "22"}]}], "}"}]}]}], "]"}], ",",
                     "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"figRp", ",", "PolarPlotExplain"}], "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"figRs", ",", "PolarPlotExplain"}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\
\)(\[CurlyPhi],\[Psi])\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"Re", "@", "dataRp"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\
\)(\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"Re", "@", "dataRs"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}]}], "}"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"figTp", ",", "PolarPlotExplain"}], "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"figTs", ",", "PolarPlotExplain"}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\
\)(\[CurlyPhi],\[Psi])\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"Re", "@", "dataTp"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\
\)(\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"Re", "@", "dataTs"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}]}], "}"}]}], 
                    RowBox[{"(*", 
                    RowBox[{",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"figRtot", ",", "figTtot"}], "}"}]}], "*)"}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"makerfringescontrol", "||", "fresnelcontrol"}], 
                    ",", "False", ",", "True"}], "]"}]}], "]"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fresnel Coefficients Figure\>\"", ",", "30", ",", 
                    "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "figfresnel", ",", "SpanFromLeft", ",", "SpanFromLeft", 
                    ",", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SubscriptBox[\(R\), \(p\)]\)\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"listFresnel", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SubscriptBox[\(R\), \(s\)]\)\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"listFresnel", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SubscriptBox[\(T\), \(p\)]\)\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"listFresnel", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SubscriptBox[\(T\), \(s\)]\)\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"listFresnel", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}]}], "}"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", "fresnelcontrol"}], 
                    "]"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Maker Fringes Figures\>\"", ",", "30", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"\"\<Assumption Used: \>\"", "<>", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"mrassumption", "==", "0"}], ",", 
                    "\"\<Full Multiple Reflection\>\"", ",", 
                    RowBox[{"mrassumption", "==", "1"}], ",", 
                    "\"\<Jerphagnon & Kurtz Assumption\>\"", ",", 
                    RowBox[{"mrassumption", "==", "2"}], ",", 
                    "\"\<Herman & Hayden Assumption\>\""}], "]"}], "<>", 
                    "\"\<\\n\>\"", "<>", 
                    "\"\<Consider Backward Wave (for FMR only)? \>\"", "<>", 
                    RowBox[{"ToString", "[", "flagBackward", "]"}], "<>", 
                    "\"\<\\n\>\"", "<>", 
                    "\"\<Consider Standing Wave (for FMR only)? \>\"", "<>", 
                    RowBox[{"ToString", "[", "flagStandingWave", "]"}]}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}], 
                    ",", 
                    RowBox[{"FontSize", "->", "22"}]}], "}"}]}]}], "]"}], ",",
                     "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "figmakerfringespar", "}"}], ",", 
                    RowBox[{"{", "figmakerfringesperp", "}"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
                    "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\
\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi])\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "listMFpara", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "200"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\
\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi]+90\[Degree])\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "listMFperp", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "200"}]}], "]"}]}], "}"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    "makerfringescontrol"}], "]"}], "}"}]}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Maker Fringes Figures\>\"", ",", "30", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Overlay", "[", 
                    RowBox[{"{", 
                    RowBox[{"figmakerfringespar", ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"\"\<\>\"", ",", "21"}], "]"}], "~", "Join", "~", 
                    RowBox[{"{", "figmakerfringesperp", "}"}]}], "]"}]}], 
                    "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "makerfringescontrol", ",", "True", ",", "False"}], 
                    "]"}]}], "]"}], "}"}], "*)"}], "\[IndentingNewLine]", 
                    "}"}], ",", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", "timecell", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\\n\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Green", ",", 
                    RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Inset", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                    RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
                    RowBox[{"Typeset`update$$", "=", 
                    RowBox[{"AbsoluteTime", "[", "]"}]}], ",", 
                    RowBox[{"Appearance", "->", "None"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", "noAnalytical"}], ",", 
                    RowBox[{"Framed", "@", 
                    RowBox[{"Text", "@", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!\>\"", " ", ",", 
                    "Bold", ",", "Red", ",", "32", ",", 
                    RowBox[{"TextAlignment", "->", "Center"}]}], "]"}]}]}], 
                    ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}]}], "]"}]}], "\[IndentingNewLine]", 
                    "}"}], ",", 
                    RowBox[{"Alignment", "->", "Center"}]}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Text", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<For \[Omega] homogeneous waves:\>\"", ",", "Bold", 
                    ",", "Red", ",", "32"}], "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationRpL.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationRpL", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationRpL", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<(\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationRpL", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationRpL"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationRsL.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationRsL", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationRsL", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "Black", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationRsL", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationRsL"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationTpL.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationTpL", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationTpL", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationTpL", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationTpL"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationTsL.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationTsL", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationTsL", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "Black", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationTsL", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationTsL"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Text", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<For 2\[Omega] homogeneous waves:\>\"", ",", "Bold", 
                    ",", "Blue", ",", "32"}], "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationRp.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationRp", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationRp", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationRp", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationRp"}]}]}], "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationRs.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationRs", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationRs", "]"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", " ", 
                    "\"\<DialogBox\>\""}]}], "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "Black", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationRs", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationRs"}]}]}], "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationTp.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationTp", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationTp", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationTp", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationTp"}]}]}], "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationTs.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationTs", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationTs", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "Black", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationTs", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationTs"}]}]}], "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}]}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "14"}], "}"}]}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", "timecell", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\\n\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Green", ",", 
                    RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Inset", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                    RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
                    RowBox[{"Typeset`update$$", "=", 
                    RowBox[{"AbsoluteTime", "[", "]"}]}], ",", 
                    RowBox[{"Appearance", "->", "None"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Center"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\"\<\>\""}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}]}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{"{", 
                    RowBox[{"800", ",", "Automatic"}], "}"}]}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Center", ",", "Top"}], "}"}]}], ",", 
                    RowBox[{"Background", "->", "White"}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], "}"}], ",", 
              RowBox[{"Alignment", "->", "Top"}]}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", ",", 
         RowBox[{"TrackedSymbols", ":>", 
          RowBox[{"{", 
           RowBox[{
           "schematictype", ",", "materialnumber", ",", "matindex", ",", 
            "Functionality", ",", "\[Lambda]", ",", "mrassumption", ",", 
            "winhAssumption"}], "}"}]}], ",", 
         RowBox[{"ContinuousAction", "->", "None"}], ",", 
         RowBox[{"Paneled", "->", "False"}], ",", 
         RowBox[{"SaveDefinitions", "->", "False"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Background", "->", 
       RowBox[{"GrayLevel", "[", "0.9", "]"}]}], ",", 
      RowBox[{"ImageSize", "->", "Automatic"}], ",", 
      RowBox[{"Alignment", "->", 
       RowBox[{"{", 
        RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}]}], ")"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8863764175259113`*^9, 3.8863764216510215`*^9}, 
   3.8863766499202127`*^9, 3.8864455607318544`*^9, 3.887895488853596*^9, {
   3.887896034438848*^9, 3.8878960439160757`*^9}, {3.889436106460884*^9, 
   3.8894361315889654`*^9}, {3.8894361873976126`*^9, 3.88943619269838*^9}, {
   3.89102444959268*^9, 3.891024450746577*^9}, {3.89305939105934*^9, 
   3.8930593986154356`*^9}, 3.893059461698475*^9, {3.8930644547510796`*^9, 
   3.893064472349676*^9}, {3.893064510080668*^9, 3.893064522229964*^9}, {
   3.893191509709758*^9, 3.893191517223592*^9}, {3.893192189074219*^9, 
   3.893192204514889*^9}, 3.893193179948883*^9, {3.8931939064949512`*^9, 
   3.8931939312531705`*^9}, 3.8933405442081523`*^9, 3.8933481622867684`*^9, {
   3.8933507093480396`*^9, 3.893350715957938*^9}, {3.894586300088585*^9, 
   3.8945863019774375`*^9}, {3.8945882385294175`*^9, 3.8945882396429615`*^9}, 
   3.895364685360523*^9, 3.895837732757901*^9, {3.8958382367167573`*^9, 
   3.8958382509804587`*^9}, {3.895862888181453*^9, 3.895862899403054*^9}, {
   3.8958714652797155`*^9, 3.8958714808134613`*^9}, {3.895871577983863*^9, 
   3.8958716149822598`*^9}, {3.895881111608961*^9, 3.8958811205978346`*^9}, {
   3.8959239658297596`*^9, 3.895923966325376*^9}, 3.8959423773480606`*^9, {
   3.896314653348934*^9, 3.896314657267294*^9}, 3.8963154455605087`*^9, {
   3.896321435583887*^9, 3.8963214612888904`*^9}, {3.897014237722165*^9, 
   3.897014241214029*^9}, {3.8970165009005947`*^9, 3.897016502144909*^9}, {
   3.8970969729877863`*^9, 3.8970969747356415`*^9}, {3.8971742747549467`*^9, 
   3.8971742987739334`*^9}, {3.8971743546206465`*^9, 
   3.8971743601042366`*^9}, {3.8972624999508963`*^9, 3.89726250567898*^9}, {
   3.897262744722416*^9, 3.8972627684770613`*^9}, {3.8972632772311325`*^9, 
   3.8972632852568636`*^9}, {3.8972633516738973`*^9, 
   3.8972633541172123`*^9}, {3.897263634613264*^9, 3.897263650408495*^9}, {
   3.8972639453176775`*^9, 3.8972639464912057`*^9}, {3.897264054835474*^9, 
   3.897264063685416*^9}, {3.8972641236852856`*^9, 3.8972641640741763`*^9}, {
   3.897264334170711*^9, 3.897264375822837*^9}, {3.897264409445538*^9, 
   3.897264410986657*^9}, 3.8972647577955017`*^9, 3.897265056538562*^9, {
   3.8972652324571233`*^9, 3.8972652945646935`*^9}, 3.897265532269307*^9, {
   3.897265619051794*^9, 3.8972656192213917`*^9}, {3.8972656492230062`*^9, 
   3.8972658770424967`*^9}, 3.8972659621106715`*^9, {3.8972663503638773`*^9, 
   3.897266351160634*^9}, 3.8972688920457516`*^9, {3.8972689951163425`*^9, 
   3.897269022094269*^9}, {3.8972716679316235`*^9, 3.8972716712986555`*^9}, 
   3.8972735227376385`*^9, {3.897273638716218*^9, 3.897273653555581*^9}, {
   3.897608093096344*^9, 3.897608129960377*^9}, {3.904176592843627*^9, 
   3.904176604125903*^9}, {3.9052892079933033`*^9, 3.9052892095654354`*^9}, {
   3.905289426876752*^9, 3.905289478497834*^9}, {3.9052895094135027`*^9, 
   3.9052895097097797`*^9}, {3.905289560311488*^9, 3.905289588193482*^9}, 
   3.9052896306804285`*^9, {3.9052896786778135`*^9, 3.905289704345976*^9}, {
   3.905289761318979*^9, 3.9052899750971775`*^9}, {3.9052900181131816`*^9, 
   3.9052900332167206`*^9}, {3.9052901526462464`*^9, 
   3.9052902801457233`*^9}, {3.905290626349579*^9, 3.9052906368521805`*^9}, {
   3.9052906677926245`*^9, 3.9052906828516173`*^9}, {3.9052908235418086`*^9, 
   3.905290837566*^9}, {3.905291096387946*^9, 3.9052911216052566`*^9}, {
   3.905562264468772*^9, 3.905562275662298*^9}, {3.9055623246881113`*^9, 
   3.905562374937717*^9}, {3.90754067007922*^9, 3.907540675570279*^9}, {
   3.9075408246334457`*^9, 3.907540830282073*^9}, {3.907541498903358*^9, 
   3.9075415199994097`*^9}, {3.907541610396675*^9, 3.907541702126567*^9}, 
   3.9075417957496123`*^9, 3.9075419511897783`*^9, {3.907542050795882*^9, 
   3.9075420730160303`*^9}, {3.9075421752712917`*^9, 3.907542253195198*^9}, {
   3.9075424118835096`*^9, 3.9075424128744297`*^9}, {3.9075428318130407`*^9, 
   3.907542843212064*^9}, {3.9075428985752335`*^9, 3.9075428987228394`*^9}, {
   3.907543012430893*^9, 3.907543023294074*^9}, {3.907543183471364*^9, 
   3.9075431870038457`*^9}, {3.9075432197594566`*^9, 3.907543246946149*^9}, {
   3.9075437787353983`*^9, 3.907543788957831*^9}, {3.9077984448643255`*^9, 
   3.9077985064413877`*^9}, {3.908138584728819*^9, 3.908138592464755*^9}, {
   3.9147260198839097`*^9, 3.914726046939372*^9}, {3.9147260904653997`*^9, 
   3.9147264496388535`*^9}, {3.9147264808591995`*^9, 
   3.9147265119033704`*^9}, {3.914726584993626*^9, 3.9147266010557613`*^9}, {
   3.914726721746036*^9, 3.914726741175739*^9}, {3.914726808212217*^9, 
   3.9147268104937963`*^9}, {3.9154119993556137`*^9, 3.915412075108282*^9}, {
   3.9154124636178093`*^9, 3.915412478536029*^9}, {3.9159242001271296`*^9, 
   3.9159242475539618`*^9}, {3.9159242797818403`*^9, 
   3.9159242917163095`*^9}, {3.915932323557305*^9, 3.9159323828865423`*^9}, {
   3.9159325141303043`*^9, 3.915932563822338*^9}, {3.9159326982004414`*^9, 
   3.9159327254030323`*^9}, {3.915932814363677*^9, 3.915932814913087*^9}, {
   3.9159328768928757`*^9, 3.9159328890932713`*^9}, {3.9159329297880783`*^9, 
   3.9159329477343564`*^9}, {3.915933006965935*^9, 3.915933013226115*^9}, {
   3.9159330506269627`*^9, 3.915933063745679*^9}, {3.915933095776817*^9, 
   3.915933156516915*^9}, 3.9159333425011816`*^9, 3.91593351342039*^9, {
   3.9159335526207895`*^9, 3.9159335530877304`*^9}, {3.915934077276955*^9, 
   3.915934089845589*^9}, 3.9159342026932087`*^9, {3.9159349794939766`*^9, 
   3.915934979678418*^9}, 3.9159363335295906`*^9, {3.915936861662032*^9, 
   3.915936861896302*^9}, {3.9159371143384953`*^9, 3.915937120310953*^9}, {
   3.915937237986265*^9, 3.9159373006724634`*^9}, {3.9159373426470394`*^9, 
   3.915937383096856*^9}, {3.915937418865204*^9, 3.9159374281674166`*^9}, {
   3.9159381112077847`*^9, 3.9159381166025925`*^9}, {3.9159381829601336`*^9, 
   3.9159381884448333`*^9}, 3.9159386059217978`*^9, 3.9159386436615496`*^9, {
   3.9159387186977234`*^9, 3.915938732881762*^9}, {3.915939492788086*^9, 
   3.915939554093082*^9}, {3.915939597675132*^9, 3.915939771316867*^9}, {
   3.91593980399825*^9, 3.915940065993087*^9}, {3.91594015196397*^9, 
   3.9159401527740536`*^9}, {3.9159402739484305`*^9, 3.915940307650511*^9}, {
   3.9159405519594135`*^9, 3.9159406011141586`*^9}, {3.915940745264082*^9, 
   3.9159407552917585`*^9}, 3.9159407953912077`*^9, {3.915940994734627*^9, 
   3.9159410075776787`*^9}, {3.915941086695094*^9, 3.9159411400208282`*^9}, {
   3.9159412472716913`*^9, 3.9159412999863434`*^9}, {3.915941363169037*^9, 
   3.915941408241685*^9}, {3.915941470794081*^9, 3.9159415661200523`*^9}, {
   3.915941750802684*^9, 3.9159417708301334`*^9}, 3.9159418220649705`*^9, {
   3.9159418792561817`*^9, 3.9159418804989595`*^9}, {3.915941932151952*^9, 
   3.9159419414537024`*^9}, {3.9159420024045787`*^9, 3.91594200991928*^9}, {
   3.9170401802326345`*^9, 3.917040196355941*^9}, {3.9170415742361345`*^9, 
   3.9170415819752345`*^9}, {3.917041654337927*^9, 3.91704165897552*^9}, {
   3.9170449030637255`*^9, 3.9170449070849276`*^9}, {3.9170456781986723`*^9, 
   3.917045682204319*^9}, {3.917046231280607*^9, 3.917046258534807*^9}, {
   3.9170463052471433`*^9, 3.917046306670555*^9}, {3.917048962824339*^9, 
   3.9170489727238035`*^9}, {3.9172197535833664`*^9, 3.917219753682469*^9}, {
   3.917219969165842*^9, 3.917219972305231*^9}, {3.9172214383223715`*^9, 
   3.9172214460126677`*^9}, 3.9172215887350926`*^9, {3.917222074914173*^9, 
   3.917222156589408*^9}, {3.9173879394818864`*^9, 3.9173879421490917`*^9}, 
   3.9419761502888145`*^9, {3.941976634809931*^9, 3.941976652799513*^9}},
 CellLabel->
  "In[326]:=",ExpressionUUID->"a98b854b-c774-4627-bdc0-c461ecf5096d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Run",
 FontWeight->"Bold"]], "Title",
 CellChangeTimes->{{3.895933009888097*^9, 
  3.8959330181481047`*^9}},ExpressionUUID->"55cc25b1-6118-4568-90fc-\
f6cca0bb059f"],

Cell[CellGroupData[{

Cell[BoxData["run"], "Input",
 CellChangeTimes->{{3.8971784963421345`*^9, 3.8971784967148747`*^9}, 
   3.9147265334076586`*^9, {3.914726616181691*^9, 3.914726617148091*^9}},
 CellLabel->
  "In[339]:=",ExpressionUUID->"54c5d0bf-aa90-4ef5-b95d-14bc7b0597e7"],

Cell[BoxData[
 TemplateBox[{
   ProgressIndicatorBox[
    Dynamic[$CellContext`progress], {0, 100}, ImageSize -> {1000, 30}], 
   TemplateBox[{"\"     \"", 
     StyleBox[
      DynamicBox[
       ToBoxes[$CellContext`progress, StandardForm], 
       ImageSizeCache -> {
        31.200146198272705`, {0.22827147622592747`, 13.44062452018261}}], 
      StripOnInput -> False, FontFamily -> "Helvetica", FontSize -> 22], 
     StyleBox[
     "\"% Completed\"", 22, FontFamily -> "Helvetica", StripOnInput -> 
      False]}, "RowDefault"]},
  "RowDefault"]], "Print",
 CellChangeTimes->{
  3.9172199756969357`*^9, 3.91722086104146*^9, 3.9172212807134757`*^9, 
   3.9172215000603647`*^9, 3.9172216132234035`*^9, 3.917221811165524*^9, 
   3.9172221610131135`*^9, 3.917222297639426*^9, 3.917384451845798*^9, 
   3.917384624102851*^9, 3.917386353113865*^9, 3.9173879654539757`*^9, 
   3.941975788567534*^9, 3.9419763979386225`*^9, 3.941976493506369*^9, 
   3.941976525442371*^9, 3.9419766601898804`*^9, 3.9419766942872252`*^9, {
   3.941976738245948*^9, 3.941976764938566*^9}},
 CellLabel->
  "During evaluation of \
In[339]:=",ExpressionUUID->"44051497-b037-4f09-b7d7-9f0d33997c06"],

Cell[BoxData[
 FrameBox[
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`analyzeroffset$$ = 
     0, $CellContext`delta$$ = 0, $CellContext`fresnelcontrol$$ = 
     False, $CellContext`Functionality$$ = 
     "User Guide", $CellContext`makerfringescontrol$$ = 
     False, $CellContext`materialnumber$$ = 1, $CellContext`matindex$$ = 
     2, $CellContext`maxtheta2$$ = 
     30, $CellContext`mintheta2$$ = -30, $CellContext`mrassumption$$ = 
     0, $CellContext`phi$$ = 0, $CellContext`psi$$ = 
     0, $CellContext`RotateAnalyzer$$ = 
     False, $CellContext`RotatePolarizer$$ = 
     True, $CellContext`samplerotatestep$$ = 
     10, $CellContext`samplerotationcontrol$$ = 
     False, $CellContext`schematictype$$ = 1, $CellContext`theta$$ = 
     45, $CellContext`thetastep1$$ = 2, $CellContext`thetastep2$$ = 
     1, $CellContext`winhAssumption$$ = 1, $CellContext`\[Lambda]$$ = 1.064, 
     Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
     Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
     1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
        Hold[$CellContext`Functionality$$], "User Guide", ""}, {
       "User Guide", "Set Material Properties", "SHG Simulation", 
        "Partial Analytical Expressions"}}, {{
        Hold[$CellContext`schematictype$$], 1, ""}, {
       1 -> Style["2D Schematics", Bold], 2 -> 
        Style["3D Schematics", Bold]}}, {{
        Hold[$CellContext`\[Lambda]$$], 1.064, 
        Style["Incident fundamental wavelength (\[Mu]m):"]}}, {{
        Hold[$CellContext`materialnumber$$], 1, 
        Style["Number of Layers: ", Bold]}, Number}, {{
        Hold[$CellContext`matindex$$], 2, 
        Style["Select the layer to Edit : ", Bold]}, 
       Dynamic[
        Thread[Range[2, $CellContext`materialnumber$$ + 1] -> Map[ToString, 
           Range[$CellContext`materialnumber$$]]]]}, {{
        Hold[$CellContext`fresnelcontrol$$], False, 
        Style["Generate Fresnel Coefficients Plot:"]}, {True, False}}, {{
        Hold[$CellContext`makerfringescontrol$$], False, 
        Style["Generate Maker Fringes Plot:"]}, {True, False}}, {{
        Hold[$CellContext`mrassumption$$], 0, ""}, {
       0 -> "Full Multiple Reflections (FMR)", 1 -> 
        "Jerphagnon & Kurtz Assumption (No MR)", 2 -> 
        "Herman & Hayden Assumption \n (MR only for 2\[Omega] Homo Waves)"}}, \
{{
        Hold[$CellContext`winhAssumption$$], 1, " "}, {
       0 -> "Forward waves only", 1 -> "Forward + Backward waves", 2 -> 
        "Forward + Backward + Standing waves"}}, {{
        Hold[$CellContext`theta$$], 45., 
        Style["\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\) (\[Degree])"]}, 0.,
        89.}, {{
        Hold[$CellContext`theta$$], 45, ""}, 0, 75, 15}, {{
        Hold[$CellContext`delta$$], 0, 
        Style[
        "Incident Ellipticity \[CapitalDelta]\[Delta] \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): ", Bold]}, 0, 360}, {{
        Hold[$CellContext`RotatePolarizer$$], True, 
        Style[
        "Incident Polarization \[CurlyPhi]\!\(\*SuperscriptBox[\((\), \
\(o\)]\)): ", Bold]}, {
       True -> Style["Rotate Polarizer", Bold], False -> 
        Style["Fix Polarizer", Bold]}}, {{
        Hold[$CellContext`phi$$], 0, 
        Style[
        "Fixed Incident Polarization \[CurlyPhi]\!\(\*SuperscriptBox[\((\), \
\(o\)]\)): "]}, 0, 360}, {{
        Hold[$CellContext`phi$$], 45, ""}, 0, 180, 45}, {{
        Hold[$CellContext`RotateAnalyzer$$], False, 
        Style[
        "SHG Polarization \[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): ", 
         Bold]}, {
       True -> Style["Rotate Analyzer", Bold], False -> 
        Style["Fix Analyzer", Bold]}}, {{
        Hold[$CellContext`analyzeroffset$$], 0, 
        Style[
        "Analyzer-Polarizer Angle Offset \!\(\*SuperscriptBox[\((\), \
\(o\)]\)): "]}, 0, 180}, {{
        Hold[$CellContext`psi$$], 0, 
        Style[
        "Fixed SHG Polarization \[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \
"]}, 0, 360}, {{
        Hold[$CellContext`psi$$], 45, ""}, 0, 180, 45}, {{
        Hold[$CellContext`samplerotationcontrol$$], False, 
        Style[
        "Sample Rotation \[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): ", 
         Bold]}, {
       True -> Style["Rotate Sample", Bold], False -> 
        Style["Fix Sample", Bold]}}, {{
        Hold[$CellContext`samplerotatestep$$], 10, 
        Style["Step Size\!\(\*SuperscriptBox[\((\), \(o\)]\)): "]}, 0, 360}, {{
        Hold[$CellContext`samplerotatestep$$], 10, ""}, 10, 30, 10}, {{
        Hold[$CellContext`thetastep1$$], 2, ""}, 1, 5, 1}, {{
        Hold[$CellContext`mintheta2$$], -30, 
        Style[
        "\!\(\*SuperscriptBox[\(\[Theta]\), \(min\)]\) (\[Degree])"]}, -90, 
       0}, {{
        Hold[$CellContext`mintheta2$$], -30, ""}, -90, 0, 15}, {{
        Hold[$CellContext`maxtheta2$$], 30, 
        Style["\!\(\*SuperscriptBox[\(\[Theta]\), \(max\)]\) (\[Degree])"]}, 
       0, 90}, {{
        Hold[$CellContext`maxtheta2$$], 30, ""}, 0, 90, 15}, {{
        Hold[$CellContext`thetastep2$$], 1, ""}, {1, 2, 5, 10, 15}}, {{
        Hold[$CellContext`phi$$], 0, 
        Style[
        "Fixed Incident Polarization \[CurlyPhi]\!\(\*SuperscriptBox[\((\), \
\(o\)]\)): "]}, 0, 360}, {{
        Hold[$CellContext`phi$$], 45, ""}, 0, 180, 45}, {{
        Hold[$CellContext`psi$$], 0, 
        Style[
        "Fixed SHG Polarization \[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \
"]}, 0, 360}, {{
        Hold[$CellContext`psi$$], 45, ""}, 0, 180, 45}, {{
        Hold[$CellContext`delta$$], 0, 
        Style[
        "Incident Ellipticity \[CapitalDelta]\[Delta] \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): "]}, -90, 90}, {{
        Hold[$CellContext`delta$$], 0, ""}, -90, 90, 30}, {
       Hold[
        Column[{
          Row[{
            Style["   ", 30], 
            Column[{
              Image[CompressedData["
1:eJzs3P2rZPddB/A7T2fmPM2ZOTN37r3rZWWJbrZGA9IkGom0odCSHxRtXdKK
BROzllBINKvUiLrWWqGoqPi8ggiaH/xB26JFk6DQ2h+SomlAsUWwqOlDstak
YkyT7s2On++4Ey7bRpCEzm739YL3Pef7cL7nzP0D3sfuvPfNP9zd2to6PYo/
b77jXbfed98d979lEoOT95y++x33nLrrtnt+7NQ7Tt337Xf2YvLmwdbWL7Zb
W/0tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAD4qutcDAAAAAAAAAAAAAAAAAAAAAAAAJeXXmQU
yTb9IQAAAAAAAAAAAAAAAAAAAAAAAHyZOrIfWUQGG/4WAAAAAAAAAAAAAAAA
AAAAAAAAwsmTJ3tt247ruj4ew1sjt0SuiTSRzkY/DgAAAAAAAAAAAAAAAAAA
AAAA4Cp3/fXXl0ePHj1WFMVt3W73RyP3Zln2PYPB4Ftiudj09wEAAAAAAAAA
AAAAAAAAAAAAAFzN2rYdN03zrf1+/55Op/P+yAcGg8EvjEajt5Vled14PG5j
WxnJNv2tAAAAAAAAAAAAAAAAAAAAAAAAV5uqqraHw+Eber3eb3Q6nc91u93P
9/v9vxoMBr9UluUP1HX9HVmWvSa27m3piwIAAAAAAAAAAAAAAAAAAAAAAPhq
6TRNM53NZjdG7s7z/M8Hg8EXI8t+v/+Zbrf716k/KsuyH499d7Rt+8a6ro/H
c+NIb9MfDwAAAAAAAAAAAAAAAAAAAAAA8LVsPB63kZsWi8Wp3d3ds9Pp9ONV
VT2f5/kyy7KDXq93rtPpPNbv9/8y1v5oZ2fn5+fz+e2TyeT6rf/tiwIAAAAA
AAAAAAAAAAAAAAAAAODV14lM8jy/saqqu+q6/p3xePxI0zRPRs7HeFkUxTLW
XxwOh1+IPBHjT8T8Q23bvi/1RUWOxxnDTf8QAAAAAAAAAAAAAAAAAAAAAACA
r0Ft6okqiuJUXM9mWfboYDB4Osbnm6a5MJ1Ol+u0bXtQ1/X5fr//Qq/X+2ys
P7S7u/ve7e3tN8WzR+KsbNM/BgAAAAAAAAAAAAAAAAAAAAAA4ArXiwwi2f7+
fhtuaprmrqIofns4HD6aZdnnR6PRhaqqlpPJJPVDvXRdLBarzqjYs+z1ei/k
ef7JePaBWLuzLMvr4sx6w78NAAAAAAAAAAAAAAAAAAAAAADgStbZ3t6uZrPZ
kfl8fnw6nd6yu7t7d4zPFkXxyGAweLosy4PUCxXrq36o8Xi8zPN8mbqj0lw8
v2yaZhn7vxT7P93v9x8cjUbvivVb6rqebfoHAgAAAAAAAAAAAAAAAAAAAAAA
XKG6s9ms3tvbO7FYLN5QluVbI6dj7vfn8/kjRVGcy7LsQuqESn1QsWcZa6uu
qNFolLqhltPpdLWWOqNi/qDX630hzn08rr8ZZ31/XdfXxniw6R8KAAAAAAAA
AAAAAAAAAAAAAABwhelFqtTldOTIkdtns9m7+/3+2U6n82dFUfx927ZPj8fj
83meL8uyXMa+5WQyWXVFpWvqjzo8l7qimqZZ9nq9F+Pcp7rd7sPx7HvirDfG
8ztb+qIAAAAAAAAAAAAAAAAAAAAAAAD+P/pFUexOJpPX7e7u/sz29vYHh8Ph
Y91u99/Ksnxu3QmVeqJi3yqpG2o6na6SeqFS0p40TvvTOMuyZZzxfJz1iaqq
Hoj8UJzxzfG+OtLZ9I8GAAAAAAAAAAAAAAAAAAAAAAC4QgyGw+E3tG37lr29
vd9aLBZ/W9f1k3meP5+6n2K8jLVVP1RVVauk+9QHNR6PVzncFZWuaZz2lWV5
Pu4/M5vNHor5+0ej0XfG++ab/sEAAAAAAAAAAAAAAAAAAAAAAABXiul02tR1
fXPTND8yn8/fP5vN/nUymXwx9T3F/aorKnVArfuh0n26Hu6OSn1R656odX/U
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
HnmmhmEYW+R57pbrf1Ge4fWO40yXZ/NkEhP8OwMAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAHgh6OZSmEqlDpR5UxiGN9i2XUkkEk8ZhhH5vt/sQOlWVNxy
yuVyoz0nvRYEwbi0ouJ76A6Vvoe+rmVZu+R5HpL9X8mz/aPrui+VbZs8szHR
vzgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAXgG5FpcIwPETmHUEQ/Myy
rJWJRGKHbJv9prjd1NqI0mtx36m1JbU7nSi5f/NacY9K73ue17Bt+3GZux3H
+Yzv+2e4rjtV0YoCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvDroVlQ6C
YI7Me8Iw/J3jOGtM03zadd1ms6mtrS0qFArNPpTuROl93Xcaj0bU2FaUHn0c
96lkvSHP8YRhGMtlvuf7/kVy/kh5Zn+if3EAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAvgGYryrKsOdls9r0yv0ulUo94nrczCIJmr0m3ofTIuUiv+b7f
3OpWlF7TXSe9HY9eVDz6erpRVSqV9L12JRKJzclk8i659zVy/vUyM+S53ZHn
BwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2F+NtqLy+fwlxWLxlmw2+3A6
nX46bjbpXpTuQelj27Yj0zSbvSjdd4rPjUcrSl9Dj76PPtadqM7OzmaTKpFI
NAzDeCgMw1/K+ctd132pPHdRxpzg3x8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMCepFtRKdu2D0mn0+/K5/O/yWQyD8s8PbbjpLdBEDQ7UbrnpDtRek3v
x32n8WxF6QZVoVBo3tOyrMjzvI3FYvGuUql0taydLM/dqWhFAQAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAACA/ZtuRaWDIDhM5pIwDG9JpVIPp9Ppp5+rA6Vb
TnHDSW/1Od1yku/sditq7Ohr6+vqNpXneQ1Z29Le3t7T0dHxBTn3SnnuLhlr
gn9/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe1Qmk8l5nneMbduXWpb1
n67rPpJKpXbqLpQe3W3SzSbdbsrlcs1O1AvViop7UTINma1yXJHtF33fP1Ue
vVPGnOjfHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwB6UKBQKXel0+jTD
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
eTf2qVaU67q0ogA0tfahFsrf9EVKWQNKOXcq5a2WWamUq9f0uZF+FO0oAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAACAvUAmk8mlUqnjbdtekEwml8kMGYax0rKs
n7iuuyAIgtfLnCjHh6vhZpQ10c8MvIB0KypvmubR6XT6Q9ls9lZ5L9bqVpS8
M3t1K0qv+b6ve1G0ooB91Ejb6S/2mvT5BfJv1V/4XCJuRMV9qIXDTSj/T0ql
qvJv3FKlSrLtWD68zffKuu5HLRr+m08vCgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAYOIkU6lUIZ/PH1Mqld6ZzWa/63neesdxIsuythuGsTyRSNwi268GQfAv
bW1tF8vn5qfT6Rny3XCiHx54gehWVFbeibny3/57ZH5q2/YK3YrS78pEtqLi
ie85dl23ouTd1b0oWlHAPqSl/aTH0H2nqKUFFXef9Nw8cl43nfREf/7s2O+b
VXnvdR9KtuGdSuXvUapjiVLTepSaXVbq8KVKzdPb5UrNks9N0f0o+W72JqW8
lmdITvTvBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4MUkk8nk0un0Mblc7sK2
trbri8XiPXK8OQzDyPM83Yt6OplMrjUMY2kQBH+Qz3yvVCpdIZ87Q/eijjrq
KGuifwbgBaDbLL7MNHk3zpX/9q+Rd+OORCKx2XGcxt7citJr+n2mFQXs/cb2
oXT3aUApR7edFioV6r6T3l+plPtrWR8YGTnnrpH1XqVSci6rR+/rtdVKeXr0
99YqFcg2o/tPugOl+1C6DVVR6mX3KzVf9s8oK/UaOT5D9k+S+x2zWKnD5dws
2e+4W6m0vtdIiyox0b8vAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAF4GkTMHz
vGPDMHyHbK/zff+eIAg2ZDKZHa2NGVnbIec2OY6z3nXd/lQq9dNisXhFZ2fn
K0ulUrtcx5zoHwZ4AeguSiDvxjx5Ly40DOObcly3bXswm83u2ltbUfK+xu9x
sxWl33VaUcDeQzeXRqbZh9IdJt1/0n0n3XuqKpW/Z7jT1H2vUpPrSnX2KVUs
K5XTTSi91cd6fYlS0xYrNbOi1IwHlJpyn6zJtdrul5HPtetr6POyPUK2L60p
dbLM2XKPN8p3LpTPvXepUh+U+YDMxTJ/r9tRcv4k2R7eI9/X99TPFg3/7acX
BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAel0+m87kT5vn9REARfdxznHtM0
dQ+qoXszunsTT7FY1NuG67pRIpHYIZ/pLxQKP2hvb3+37ubI5bJquD0F7O8S
8t50yXtzqmVZH0smk3fKe6H7akO6ExV3oeKJW1HP13F6IVpRLc23ZitKtrSi
gD0obj8tkL+LC4b7T8/qKbV+5uaRPlRV3kfdYJJtuEqpnGw7dPuprNRBsp1b
Uepo2R6j9/Wa7kHp7tMi2z6oblmHlS3rqCWm+TJZP1HOn9Cj1HGyf0RNqUPv
U2rOUqXmjaydKPtnyPb1cnyhzD/IXCHzCVn7gszX5Pw35PgrI2v/KNd7m2xf
GfeidJ/qzuFeFH/7AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxtG5555rdHZ2
+vl8Pt3W1tZRKpWOKxQK70ylUtc5jnOvzGO+7+/SXRndvNETt2d0K0q+E8ln
I9u29ejP/jEIgn+TOcXzvElyC2Oif0bgBZAY6awdJ+/Ah8IwXCjvxTpZG2pt
NcXvkB59rN8dPfG5uOE0Ho2ouEf1fGu0ooA9L24/RSPtp4VKmYuUsnT/SY/e
1z2ohWNGn1uplLtUqWCJUlnZlmRtSo9tz65Z1jzZf3lZqfk9Sp0l8zrZP1e2
Z+tuU9UwTuoxjJOXOs5pFXmnZV5bdd039ljWW5ckk+eXk8nz5HrnjHxXf+e1
sn2jXPN8mUvkWv8k8zFZ+5Lc+0bZ/7Hs/1bmdpk7ZW6VtR/J9lqZf5HvX1hT
6hS55mHy+UnyM2X0zzXRv3sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAID9ycyZ
M9NTpkw5IJPJzM3n86e0tbW9u1Qq/UcqlbrHtu1Nnuc1CoVCJGvNLpTuzMha
5DhOc1+v6fPy/YasbUkkEhXDML7muu4bwzA8WNGcwYtDQibj+/4R8i58UN6N
W9Pp9Fp5j4Z0j0lP3FuT9+xZrSj9LrW2osajFzW2FRUft7ai9L1pRQHj7ll9
KNm3BpRy1ijl361UuqxUrq5UYZVsZT2tm1C/ldHbqlKh7i3dr1SbnOuu2fas
Pss6vO55x9Uc5+Re2z6rmkyeJ/N2uc57K8nkZUuSyX9emkz+U08y+f6Kab5L
5uKy511SCYJ/qKVSl1Z8/4qq4/yb/IH+ZDmR+Jh89solSl3eo9RlPcPbK+S+
/yrX+7ys/0dFqZt1H0qO75Btj0y/zEqZB8vD+/fI/ErmGzIflbU36X6VPPMs
/XPJz+yq4X8XAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHsS+Xw+3d3dfVhn
Z+fZYRi+07Ksj8r2O8Vi8b5MJrPBdd1dugul2zKy1mxC6Z5NEATNXpTuzeg1
fU6vO46zU667NpFI/E6+uyCdTr9SPluSteRE/7DAHha3ouamUqkPytwqs1be
p2YrSjeZdJspbkK19pri9bFru9uKer52lJ64E6WfjVYUMD50H2qB/L2LhsdY
NNKHkq3fq1RKN5RkOpcoNe0epQ5crNTBNaVmPaDUFL0uax16W1FqssyMmmUd
2u95x/QGwYn9vn96LQheX/H9Cyqe976Kbf9z2TA+WTOML8r26z2G8e2lhvGd
sml+vceyvlR2nM+VXffzlTD8UiWd/lo1DG+suO4Py5b186Wm+f96TPMHMt+Q
710n37++YhjfrCQSN8n8sqzUf/Uodf9Spfpku0q2a2Vtg2w3yvEmmfUyy3Qv
Sn6WX8j6l8vJ5CVLDONUee6D71CqpH/miL/9AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAu0v3G8J0Oj2zo6PjXJmrfd+/SdYWOo4zkMlktuZyuV26IyPrzTaU
7sroxkw+nx/t2eit7t7oXpRed103kms8nUgkBuQ6P5DvXSLfnyefyci6MbE/
MrBH6Xcqq/97l7nU87zbZLtO3oFntKLiZtPzNZxeiFZUfA9aUcDuG9uHkjGr
8v6sVspbL39ny0rlHlCqvabUVNk/aKlS8ypKHS/zf+R4vhyftFipl/YodaR8
b67sv2Sxab60bJon9DnOab1h+LreVOqt9XT63TKXV1Opf6uE4RfLnvfNimX9
pGpZvy1b1u09lnVv2bbvqdj2f5Vd9zcV3/9/1SD4eTmVuqWWTi8sp9N3l4Ng
iXyvWvG8snzmXvnMH3o871b53sKltn1n2TAW9xhGTeYBmTU9yeQGmY0yW3oS
iS3yjPE8JvNgOZFYXDHNX1Vc96uVIHifXO9UudZB9yvVpn/+iL/7AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAuysZhmExn88f19HR8UGZn6ZSqR7TNB/xff8p
3X7So3syuhOle1G6KTO2cxO3Z3QvSm/1Zy3LihzHeVSud7t85pPy3VM9z+uW
e5oT/UMDe9CzWlEy62R/KG6ttfafWrtR8fvT2okaj1bU2Ou0tqLiThStKOB/
TvehRiZ5s1LGwpE+1Eql3LVKBUvk34KlSpUqSk1eatsHLrGsuUtM82Vlw5i/
xDBe06PU35WVOl/mIj09yeRbKsnk6+X8uUtluySZPK+aTL614jgX1+Tfk95M
5l9q2eznqrnc16v5/E31bPY31XT6jqrn9ZQdZ6BiWSsrtv1QxXUfKvv+Cpl6
JQx75DPlSibTJ99bUc1mH6pks2urmcwG2T4qx2v0upxfVg3D5fL5BytB8HBF
/t0qu+7jcq1Ncu0tZdveItffVDbNx2U2VAxjrTzng3KuLPe5Ta7z/Wp7+6d7
J016R9+UKSfVisVZdaUKd9KKAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGA/J
XC43RebVHR0dn5K5U/bXhmG4XbdkSqVS1NbWNtqUiXszequP47Xn6tzIuYbs
bykUClU59x9BEJxn2/bBck9non9oYA96VivKdd11MkO6tabfmbEdJ73V708+
n39WK2p3O1F/qRUVv8e0ooD/kWf0oaLhsXQfao1S/iKlMn1KFe9Wqruq1Mwe
pebUTPPYquOcVLHtMyuu+4aKZV1YSSbfJ/PhciLxb5VE4jNLDeOaHsP4tMxV
PaZ5RcU0/7lsmlfKZ6+qOM5nKkFwbS2b/V4tn/9lvVD4r2qhsLiaz/dVMplV
lVRqXdnzHq943uZqEGytheETlTAcrKZSGyvDTagNlVzucfnOZvnuYL1Y3FYr
lXbUOjp21jo7t9c7Ogbr7e2b6qXSRlnfVC2VNlfb2jbXisXNtVxuUy2Tebyc
Sj1aDoJH5Pora0FQk2svrmazf5LP/bLW3X1j76xZnx2YM+cfB4488rwHjjrq
5X0HHnjAkkwmq9tZ0fC/iwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPhfyufz
6VQqdWw6nb4kk8n8QLYrZNvsROluTaFQaDZs4iaUXtOjezMjbZnmNm7dxE2p
+Puy3SHf0+2p3/q+f4XjOPPlO+1ya2Oif3ZgD0nKe/CMVpRt2+tkhmR/tK02
thUVv29xw2m8OlHP14tqXY97Ua2tKFmjFQW00H2oBfJ+R8NjLFLKGlDKWa2U
16tU6h6lCouV6iorNX2JUodWlDpa9k8oG8are237dVXHeWvV8y6p+/4/VRzn
4xXD+HKPYdxYTSR+VEkmf9Vjmr+T+VXZNG8u2/aNMjf02Pa3q7b9A/nuz2th
eGstm723VizWam1tK6ptbY/I/qO1fH5zNZvdVpG/3bVMZofsD1VzuUZNRrZD
st1Rzee3VwqFHfKdnbWOjqF6V9eu3smTo/6pU6O+Aw7Qs7N3xoyn+mbMeKJv
5sytvbNmbe6dPn1jberUx3q7u9f2dnU9WO/o6JPvLq51dd1e7+7+tXzn5r5Z
s77Rd+ihX+g/6qh/GXj5y9+/Yv78t6w8/fRXr3zta+f1nnVW19LDDw9u5u89
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADA7ki2t7cHqVTqwGw2+ybZftW27UWG
YTzh+/5o90nv676NbkLphk2pVGqO3tdr+rzexq0o3Z3RzRl9vlgsNhs0pmk+
LdcdkOt8Xz77HvnsUbqlo+hHYP/0rFaUZVnr5B0Ycl23+Y7odyXuRbW2ouIO
m35v9FZ/prUrtSd7UXErSqYu92+2ouQ5aUXhRU33oUam2YdaqJRZlXdC96HW
KxWWlcrJcUdNqakVpQ6uK3Vkj1KvWKrUaTLnVJLJv6+Y5sU1276s5nlXVcPw
mloYfqPq+z+uuu7vK4ZxV08y2dNjGL09ptlfNs1q2XEWlW37dpk/9jjOnRX5
21xxnKp8Z3k1k3m4VixuqJVKm+rt7VtrbW1P1dvadsh2Z7VY3FUtFBr1QiHq
k+mX6ZW/w/L5qNrW1qiWSo1aR0ejt6sr0p2ovmnTov4ZM6K+Aw/c1X/wwTv6
58zZNnDUUZsHjj768WUvecm6ZfPmreo//PCBvjlzlsq5O2T7u/4jjvjRwLx5
N/QdffSX+o877hP9r3jFFQOnnPIPy8844/wH//ZvX/vgRRedvOHDHz5y0+c/
P23TDTdkF113nTXR/xsCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADs44x0Op2X
eUkmk7lUtr+0bXt1Mpkc0m2osa2o1v5TW1tbc1/3bPS6nrhro9firpT+rN6X
e0WJROJxx3Ful+NPysyX63YqGjTYPyVlspZlzXNdd7QVJe/AkLwDo12osa0o
/c7pdX083q2o+DrxteN76rX4XY9bUXKuLtNsRcnz04rCi05rH+rmkT6UbG3Z
ukuVCpbI+y3b0iLXnVK37QOrljW3YprHlw1jfs0wXlNV6o0yF5WV+kA5mVxQ
sazPlG37+orv31RLpX5Tz2Rul+1SOV4m5x7qMc11Zct6VD7zeMW2H6s6zpqy
4zxYdt0Vsl0l64/IbKi47sZqGG6t5fNP1kulHbX29p3Vjo5duv9Ub2+Pekul
Zhuqr2Xq8ve6OXJOf6be0RHVJk1q1CZP3tU7bdrOvhkztvcdfPC2ZXPnblp+
7LEbHvibv3nogfnzl6945SvLD5x66t3LTjnl1uXz5/9M9r+1/FWv+soDZ5xx
9Yozz/zIA2ed9f4Vr33t21e+4Q1/t+qCC8586IMfPHHD1VcfueWmm2Zvu/vu
7sbq1fnVq1d7URQlJvp/TwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgH2ckUql
CjIvzefzC7LZ7O3pdHqDHDdaOzW6IxPP2LZN3J+Jz8UdGj16rVAoNFtRyWRS
z1bHcZb6vv/vMqd7ntetaNBg//SsVpRhGOtkbci27dGOWtxo0u+Nnvhd2hOt
qLHv6Ng+VdyKkhmUz9Vl7TrZ0orC/qLZfvprH2rtQ0XDY+k+1Bql/EVKZfqU
KvYo1V11nJk9ljWnx/OO63Gck2V7Vt1139DnOBfUbPt9Fdu+omwYV/cYxlfL
pvndsmX9ouZ5f6iE4f3VTKavmss9WMtm11aC4PGK42ytWNY2+cx22X+66nlP
Vzxve9l1t8lslbUtcr0nyrb9pOxvl+/srORyu2ptbQ3dfeqV6dPT3h716VZU
W1uzF1Vv7USNTK1U0k2poXpn547apElP9U6btqV/1qxHl82Z8/Dyo49evuLE
EysPnnnmPQ++4Q0LV775zb9Ydf753119/vnXPnjBBZ9d9fa3f3T1O95x6aqL
Lnrn6ne967xV73nP2Q9dfvlJj33yk8c8/q1vHfbU7bdP37ZqVVdjy5ZC47HH
0lEUuTIGrSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDdZpZKpfYgCP5PKpX6
pMx9mUzm8Vwutytuyuit7sjo5pMe3ZXRnRndlIk7M3pdfyb+Ttyg0Wv6vG5F
mabZsCzrCd/3e+X4657nneW67hRFgwb7p2YrSmaebduXyjyjFaXfi7GtqNYu
1Hi3olqbb7Si8GIy0n5q9p/iUcPNqObE5xf8+byxSClLtvZqpbxepVJ1pQqL
leq6T6kZSy3rsIppHl0xjBPLtn16zfPO7U2l3lpPpy+pptMfqqVSH6+E4ZfL
QfCtsuP8rGxZt8ncW3bdWiUIVshn1lRzuUerhcLmWi73RCWd3l7x/aflWkMy
jarjRL2eF8l1I/lOQ66xU9Z3yjV29pjmLplGxfMaNXlfdQ+q2YeS6dWNqJFO
VD3uRI1M78jUisVGrVB4Wta21Ts6Nvd2d6/rmz79wb6DD64PHHnkfctf9rI/
rDjttF8+eN55P3j4kkuuf/hDH/r8miuv/Ne1V155+cNXXvnuR6666s0y56z7
zGfmr7v22pdu/N73Dn9q4cKZjYce6m5s3doWRVF2/fr1YSOKHNm36EQBAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAACMGyOXy03xff8MwzCukbnfdd2N6XR6V2uz
Rree9Fb3ZOKmTGvHprVBo6e1H6U/o78v1214nveEHPfKd66X758l96cVhf3V
aCsqmUxeaprmbYlEotmKchxntBX1fA2o1ubaeLSi4iZUa4eKVhT2V619qJvl
71w0PM3+00ql3AGlnKrs6ybUdTILlTL1tjpyXrZhWamcbDt6lZpWse2Dy5Z1
VM00X1F1nNPqtn1OxXXfXPO8iyuZzD/Wcrmr6m1t19RKpRtqxeKP5fh31Uzm
rkoYVno874Gy6z5cCYIN1Wx2k7xYW+UzT8nnd8h2ZyWb3SXnmo2ommVFcu2o
rvddN6rItse2Gz2W1SibZlQxjKgqU9OfkXe1Lu9uswfV2oeSv72jI++1nl49
8tlaPj8kz7atVihskGddWZ80qdw3a9ady4844jfLjj/+hyvmz//Gqte97guP
XHzxx9YsWPDhtV/84nvXX3/9+Ruuu+7c9TfccNrWH/zgZZt++MN5W269dXZj
2bLJjXXr2qPNm3ONRiMl40VRZMuYcSOKThQAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMD4aG9vD4rF4rwwDN9uGMa3E4lEn23bg6lUqhE3oHRTxvO8Zu+ptSkT
d2aeq28Tt6LifpT+rkxDrjUo63WZr8n+mfIINGiwv3pGK0reredtRbW+S/E7
1Lo2Hp2ov9aKan1XaUVhXxT3oRbIuxcNT7MPtVApV7b+gFLpe5Qq3K9U28Oy
1S0ovfYnpVK6DdUr2yXyzt4lfxrleEqPbc+uWtbcimm+rGIYp9Zs+zVyfF6v
41xUd90P1H1/QS0MP1vN56+vl0o39XZ2/qZ30qQ/1bq6euodHQPVUumharG4
Xs5vrGYyW2u53JO1UmlHrbNzp3xmV62jo9FsPMk7WZf3rib/LlRNc3gsK6rY
9vDIfnNNd6KSyeHRx64bVeWdrcnf5Jr8vW2O3tdNKD1yXT31kalmsw15ju0y
G2S9Tz5/V23SpFsGDj74e8uPO+4rD5xyytUrzj77I6vOP//9ay6//MK111zz
hg033XT6xl//+oRtt9121PbFiw9+auXKadETT3Q0oijfaDTSug8l47T0oZL0
oQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMaVbjk4mUzmgHw+f242m/2853l3
Oo6zKQiCXbonE09rv2Zst6a1a/Nc7ah4dJcmDMOGfGYwl8vVi8XitXKd0+We
kxQNGuyfRltRMs1WlGyftxUVv29xxyl+18arE9V6vbHvc+s6rSjsa8b2oRYp
ZQ3I37c1Svmyn/mjUm1LlJpUVmq6HB9UVeoQve2X44pSk/W5HqW6Fys1tWbb
s8qWdXjd846rOs5JVds+q25Zb6g7zoV12/6HmuteUfa8T1V8/9pKGH6vms3+
sl4o/Fe1o+P+end3X+/Uqat6p01bW5827XGZLXK8rd7Vtb3W0bGz3tk5JJ9p
9E6ZEvVNnhz1dXVFvboVJe9hzfOaTahyMjk8ptk8bo7el7VKIvHn0ce2HVV1
Y0p/P+5DyX51ZGq6IzWyrcq/KTI7K0GwRWaFfO/Oajr9096urq/1z5nzyeUn
nnj5yte85p2rL7jgjQ9fdtlZaz/3uZM2//znR2+vVg9prF17QGPbtq4oiooy
GRl/pA9l0YcCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADY44wwDIupVOql6XT6
cplfyP5q2TY7UbpjEzdq9DafzzfXxjahnq8VFfduxqw1W1G6QSNzvdz/bNd1
pyoaNNg//dVWVKFQGG2pjW1FjX0P98SM7USNNN2arSg5r9/T62SNVhT2Rs/o
Qy1UytR9qNVKeb1Kpe5RqrBYqS7dh1qi1KGyfUmPUq+QOXmpUq+8X6lT9HFN
qWOrSh3TY5rHLTLNV/Q4zskV2z6j5rp/W/X98+ued0nddT9U87yPV1z3yxXP
+7Yc/0zO3VZLpe6t5nL1alvbylpX1yO9U6c+1jtz5ua+2bOf6DvooO19Bx/8
tGyH6rNmNXqnTYv6pkyJ+qdOjQZkX291K6ou/wbUdMdJ/k3QTajRVpRuQelG
lB7DGF5LJEZHr+mOVNXzmh2oZhNKN6L+3IVqXrcu73Pd96Oy7zfkmZ+q+P56
mbL8HL+sBsFX+0qlK/sOP/ziZWee+ber3vOeU9d99rPHDd5005zGfffNaGzb
NqnRaLRFUZSVbSBbV8aWMeM+FI0oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA
PS6Zy+Ump1KpV3ue91nXde8Jw/DxbDbbaO3TxK2n/2mz5rn6UTINuccTMn0y
NwZB8EbbtmfLszgT/csA9oC/2orSDbbWNtTYVpQ+H6+NeZf+V9N6nb/QiYrk
3RyUqctasxWl/61QtKIwwSKlEiOTvHmkD1WV/y51H0q24Z1K5WXbsUSpaWWl
DupR6kjdg1qq1GkVpc6RtfNk/wLZvlOP3pf1v9fr5WTyTVXLekvFcS6se967
q75/eT0I/rUShl+QuaEaBD+uhuHvK0Fwd8X3K7L2QDWdfriaz2+olUqb+rq7
B3unT3+qf/bsHQOHHbaz//DDdw3MndtYNndutOzQQ6NlBx4YDUyfHvUfcEDU
P9KN6u3qimryjsu1o4ptR+W4CRW3onQPaqQX1Tw3MnEnSn+n4nlRTd5Z3YWq
yXvc3OrjkUZUn5yXnyeSZx6SZ95SyeVWVPL522uFwjdr2ewV9ba2N/fNm3fa
6gsuOGbLt789+8lKZXJjcLAUbd6cazQaqTF9KIM+FAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAwAvOz2Qy88IwfLvjON91XXdA92F0zynux4xty+zOxNeU+z3p
ed6Dcr+fyv3el0qljs/lcpmJ/mUAe8AzWlEyz9mK0o2muA2l1+J3Lj6v3x99
fk+2olrP6Xvpfwt836/LllYU9rS/1h16zj7USqXcpUoFS+Qdk21pkVJT7lVq
9hLLmnu/UsfXlDqlR6mz5bNvlLlI5gMyH6ko9YmyUtfI9kt6K5/5xJJE4qqK
YXy0x7Kuqnnex2th+PlyKvX1Wip1cz2TuaWeTv+pmk73VFKpZbV0enUlnV5f
TaU21rLZrbVC4cl6R8eO+uTJO3tnzNjVf8ghjYE5c6Llc+dGy+fNa26XyfHA
QQdF/TNnRn3Tp0d9U6dGvd3dUb29PZJrRFXfH+5BtXSimq0o3YmyrKhq21FV
/s1otqHi0ceu22xF6dZUXd7b0dGdKL0m06u7UfJ3vVosPtU7adIj9QMOWNJ7
0EE/6589++reqVPf1jdp0kn1l7zksDULFkyJ1qwpNqIo1Wg0PBkniiJrpA+V
pA8FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwgkvk8/l0EASHuq77Jt/3r0mn
03elUqlNYRjukvVmN0Y3anRDZrwaNXH3Rt/Dtu2tjuMsLhaLX+nq6npLR0fH
wd3d3Z76680QYF/yF1tR+n2Qd2C0z9TahtJrcTtqT7Sixjaj9H3ie+l1eU8H
5d8CWlHYE+L202j/SW/1LGiZ6JljLFLKGlDKWaOUL/uZ+5Vq61Gqe7FSM2U7
R9aOW2oYJ8mcWUkmX19LJt8m817Zv6KcSHyqlkhcW0kkvivzs55E4rdL5X0s
K3WL7P9Ezn9vqWl+t+w4368GwY+r6fSvZf5YzWbvl+mvZbOrZNZWcrnHZbul
ksk8WcvlttcLhadrpdJQraur0Tt5cjQwfXq07KCDomWHHtrsQy07/PBoQKZf
jvtnz476ZsyIeqdNi3onTRruRMn7Xg3DZvepbBjPbEXJcbMT5brNllRN/jbr
7ejoRtTI6HPNPpTuQsk0rxkEjUoq1ajm84361Kk7lx1xxMblxx/fv+zEE29d
ceqp16+YP/+yFccff1b1kEPm9h9xxKSVCxZkdSOKPhQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAMDeob29PcjlcocFQfAGx3E+67rurXL8SFtb2y7diNENmzAM
x70Vpa9XKBSa17MsS99nndzzPydPnvyvU6ZMOblYLHYecsghtGiwP9GtqJzM
kaZpXiazMJFI7BOtKPn3YVDuWZehFYXx0uxDLRjpQy1UyqzKf1N3KuXp/tNS
pYJFsr1JjnUT6tcy+rzeXy1rf1IqVVeqsFiprrJS05codej9Sh0t+yfIvFrm
3Hoy+Zaqab67bJr/VLWsjy21rC/3mOa3ZX4uawuXJpOLegyjKjPQk0wul+M+
2V9STibvrljWXRXHua/i+z2VMOyrptMrq/K3sZrPP1bL5zfXcrknZH97Vfeh
CoWhWrG4q97WFvW1t0d9nZ1Rf3d31D9tWtQ/Y0bUf+CBzTZU/0EHNadPjvum
T490T6re0RHJd6OavGu6+VSx7Wd3omQquhUl55otKHn/a/JeNre6BxUEw6Mb
UiMdqZFGVKOsx/d3lT1vp+zvqHV2PjVw1FFbV5xxxppVb3rT4tUXXvijR97+
9k+sufjiCx56y1tOXHXOOdNXnnBCduA973HiRtRE/4cCAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADwIpeQsdrb2w+YNGnS6/L5/NWmaf6nYRgPZ7PZ7R0dHc1O
TRAEzS7N7jZpxo7u0OhWVNyjsm17MAzDJXLPr5RKpbOmT58+ZebMmc5E/5KA
cTTaipJ36jL5b/8P8t/9ejkeku1oP+2/04pqbTuNxzxXK0pv9ZpuxelWlOzX
Za3ZinJdl1YU/jeabahoTB9qpVKu7IdLlMrer1RbXanOXqW65FzHIqWKZXlv
5DPZTTL3KFXQ6/LZaRWlDu6R90nmFUuVOk2Oz5H5+5pS75TtZZVE4qqyYVxT
Ns0bypb144pt/77iOHeXXbda9rwVsr+m7DgbZB6vOs5GOf94xbLWyecfls8/
pM9XfH9dJZ1+rJrNbqrncoO1fP6pWqGwo9bWtlNG96EavboRVSoNT3t71Ct/
P3u7uqLe7u6od8qUqHfatD/P1KnN9dFGlLxnVXnfK3+hEzXairKs4VaUvJN1
eTfr8r3m6F7USDOqKlMOgobMLpkhue7T8vNul59nW4/rbq1NmvTYir/5m4dW
v+1ttbUf/vDvNnzsY1/d8OlPv//RL3/57PU33DB3/ac+1bH6/e/3ouH/jwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAICJZ8oU29raXt7d3X1FoVD4lWmaDyeT
ySHdh2lvb4/kXLMXo1sxvu83t/pYz+62afQ14g6OvrbjONvk/v22bd8oa6+b
PXv2NFpR2M/oVlRWZq78N/4Beed+L//tr0kkEs1WVGs/baJbUfE7rp9D9+Lk
3R+U42YrSoZWFP4nEtGfJ6n7UIuUsmTrLlUq0H2ou5Rqryg1uarUTFk7rKbU
vLJSR8kc3qPU7PuUmiHnZ8j6rPuVOkQ+M69XqePl/HxZO1u+90aZt8t8QNYW
yDU/K5+5vpxI3Fw1zVt6bPuOHtftKfv+skoq9VA1k1mv20+1TGar7D9ZyWR2
yPpOOT9UcV3dVnpKZlvV856ohuE2+cxTlWx2R7VQ2FkrFodqY/tQI9OrR/52
1vV0dAxPZ+fw6H1Zb/ah5D2uyvumu05V3Yhy3eFOlGn+xVZU1bKimuNEdfmO
7kPFjSh5xqgSho1KEOyq+P5OmR3ys2yX7bay522Vn2VTxbLWVxxnVX3SpN4V
J5983yOXXfbbx6+77oatP/3pRwYXLvy7p8vll0abNk3buHFjJooiY6L/owEA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAoJ5PJTA/D8JxsNvuVVCp1v+/7g7oL
ozsxulmjt7ofo9f06G7MeLWiWntReuQ5njQM44FEInGTPMebOzs7D+ru7vYm
+pcEjKOETEZmjrxX78rlcj9xXXeFHP/FVlR8HL8ze6IV9Xyj76sbca2tKFmj
FYW/ZrQPdbNShh7dhxqQvzuy9WWblm1xiVKTdAOqR94J2T/mfqVOWKzUabI9
u6zU/12q1Jly/lTZniSfOblsGPN7DONVMmfXlHq9nLtA5n2y/8/y+avlM9fK
fF/mV3L8x3Iicb98p6/sOKt6wnBdJZN5vFYsbqmVSk/WOjq21zs7d9Y7Oobq
pVKjV961Xvlvvi7/zVeDQHeXhmS7s5pK7axms0PVfL5Rk/ezt1iM+lo6Ub0j
U49Hzj1jdBtKvjfah9JtJ88b7kM5TrMRVbGs5+5EJRLNqcq+npqcr+lelHy3
phtTvt+Q2dVsXPn+02XP217xvCdltspskrUNI22sAfk5euTnv6tv+vRbVpx1
1s0bPvGJr25buPCjQ6tXXxANDp4SRdFBjUajJFtfJjHR/wEBAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAABgWKFQSGUymaMcx7k4mUz+0Lbt5dlsdlupVGr2anQj
xvf9yPO8ZidKd2niTtR4tKLizk1b2/9n507g46jr/49/d669N9kkm6tpjja9
6UG5ihUpd0VuQQ6BP3c5LKAIqIiVnyg/lJ8KKh6AeIIgInhAEbSiyCE9sjOz
R5K26ZHepVdo0+aY7//zmeyE7ZICStq08H4+Hp/H7Mwec2QnAR/4Ssjq6mpu
4uzQdX2Zz+d7io7lenr+8Hg8XjTU1wlgEHF/JUTTQN/vT9H3+/v0XX+N1ju4
FeU12rwOFLeiePbUitrbnShvP9yKov130L7RioJ34/ah5gihcB9qnhDaM0L4
XxYi+JIQUfqyly4QovrfQoxYKMT4jBCHJIX4WJMQM2k+aQpxIc0s7j/R3EzP
3UJzY1JRrjUV5eomRbmGHl9nKcqNtP5Fes1d9Pof0Ht/ScunaObR4/k0aXpf
W9LnW53U9Y1WMLjFisW2p8rKOlPV1d3purqedEODk21okM11dbKlpka2VFbK
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
k6q6LKkoa5oU5Q3T59tsKkoHrW+n6bAUZRM9v4GnSdPeoOVmtw+ladtpdpq6
3p3U9V567Nj0t8zWdZniTlQwKOlLK9P0NyxTWen2oLL19TI7YoTMNjS4j91G
VHW1TJeXyxS9zm1Acfspf/KbUV4bylt6nShuROV1otw+VCDQt/T7pUXHxK0o
Pr4UT+4xt6O4a8V9q6TPx32obpqdNDuahOig2ULbN9Dz7dzIsgzDtMLhV8xY
7AW7rOz3mdran2fGjftB5rDD7l58zDFfbjn55M8uPeecK9suvvj89uuuO2XN
bbfN2PDd7x628bHHxne++GLD9kym2tm6tVRKGaMJ0RjciaJ5104YAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADsU8FcK+qCaDT6G1ouNQxjB21z
2zDch8rvRRW2arxtg9Go4TYUfy5/Hu+Ph9Z7NE3b5PP5/k3H9G06vk/Ra0fS
cetDfeEABomP7rEo3UsTgsHgtYFA4Fn6nrfTfdDfihqo57SvWlGFXarcvdpB
29M0biuKjhOtqP2U137Kb0DlT+Fz3IGaT79fW4Twr6C/D+uEiHAD6iWaJiHC
3ISaJ0SAp61vGaFtJa8JUblIiHpTiLEpIQ62NG36IlU9MaWqZ9i6/mk7GJxl
FxXdlIrHv2onEt9JVVb+NFVV9bt0RcXzdmnpq/ScbUWjS81QaJVpGBuSur7F
1LQ3k6q601TVLm4ncUPJ6pse3mZyF4omqWm7aLgP1UPvdSzDkDa3obgRldeJ
4n6T236iv2m0X5keNsydDE9VVd82+pvHjSg6HmnTd9/ONZ/c/lNhMyp/+Pm8
17uNqPxOFPeh6DjcoWOyc20od8ndKF13zL7pMflcVHVX0ufrNH2+N+m6b6XH
G2lW0/al9Fm2FYm8Zsfjf6Nr+Qc6h1+nGxt/1DJ58rdapk2bs+TYY29qOeWU
q5ecd96Fy2fNOr395puP2/iNbxzR8YtfHNT517+OdFasGCa3bSuTmzcXO44T
llIGaHQajUZBJwoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYL/k
tqKKi4svKCkpeTQejy+JRCLbudvkNZu4FcWPQ6GQNAxDBgKB3ZpOA/Vs3k+r
hpf8uZWVle5S07ReOs5VtG9u6HyVjvc4Wq8QaNPAB4OPvucx+m5PpO//Z+j7
P5emne6rLv7+F7bY9lYn6r22onidW1F0vGhF7acK+lDKPCE0m34+3Hfi1hM3
nrgFxdu4C0Wv0bw+1HNChOlxEU3ZAiGq6TW1tKxrFmIY96CytD0tRCk/b9Lv
YVrWNgkx2hJiMm2fllTV42hOS+v6eZauX5HWtBvNQOArqUjkHruk5IF0eflj
qcrKuenhw/+Vqq01M8OHt6arqlamEol1dmnpplQs1mGFw530nl3cTUrqumNp
mkypqszQpPkxjalpTpL+NrjDr+H+kteF8sbvd5tRNv3N4mYTt5/cVhTdVylu
QvHQ3zd3nbfT99ztPHHfKdd4snn4vV4z6r02ovJaUe5n8LHkNaIsGpOHzoPO
s5em2zSMLpqd9Hg7nc9WOrdNdC3X0muWJf3+DB3TfDsW+7udSPw5XVv7m8yY
MQ80T5ny7eZp0/5n8YwZtyyZOfPa5WeeefHKiy46a/ns2Se2z5nzkU0//OHk
rX/84yinpaXGWbOmXEpZTBPJ9aGMXB9KRSMKAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAGC/F/D7/SPi8fh5paWlj5SUlCwuKirazk0Yrxfj9WqC
wSB3m9xWFLdjuBHlvWYwOjXe5/Bne60o7lTpui4VRdkeCoWStM+H6Pnz6Zgb
6djDQ33xAAZBfyuK7oHZNHNp2mnbbq0or+M0UCtqsNpR/0kripZoRe1H9tSH
oscBWkZMIeItQiS477SQli8LUcJNqFeFiG0QIur1oRYJMex1IUbSckJSiKnz
uf9EQ+87hLZPpPeO5+HHTUIcnBLiCEuIY2hOSanqObaiXGJr2mzLML5k6vrd
tPyh5fc/Ysdif7JLSv6RqqhYlKmpac40NCzPNjauzY4a9UZ25Mht6draHemq
ql2psrJuu7i41w6HHe4ruc0nbkDRcCfKzg23ocz8RpQ33IbiofdauXFbTdxt
4rYTfYe5C2XzcBuKO0/chaK/a+7Qe3cbfr/XmuLP4F4U96FyrSh7D52oVN6k
af+pXCvKbUQpipP0+XqbFKXHVNWupK7vNA1jO8022t8m2t86OuYVtM9mKxpd
RMf7T7u8fG6quvq36VGjfpqdPPneliOP/PqSY4754tKZM2e3nXnmpcsvuOCc
lVdf/fF1t9320c333HPw1sceGyPnz6911q6tkFLGnQ0boo7jBAv7UEP9vQUA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgPeMW1EN4XD43KKiol/T
tMZise2F/RnuxnAjhofXvU5UYUdmsFpR/Jj3wY/p+LhPtbOkpGRJVVXVE2Vl
ZZcZhjGWjj0y1BcPYBC8ayvKazbl32/5nbZ92YrKvaaDJk3jtqLo/kQragjk
96HmCKHQUp0vhO4I4W8SIsx9KFuIygVC1NH66FRf/2miJcQ4mpG0Xpd7rmGh
EKO4D2Vq2qFJTfuYpaonJlX1dFNVz2lSlPPo8dn03tPoNZ/gofedSp9/hqko
n0orysU019qKcqutqndahvE92zB+Yfn9T9uBwDwrFJpvR6MZq6RkWaqyck1m
+PCNmVGjtjZPmLC9efLknc0TJ3ZnxozpzdTXO5nqapkpK5P05XqrscTD3SZu
LeWN7Y3Xh3qnzhM3ngr7Tl4jil+radLs6zj1D3edePtuvSl+H78/fwpaUW4f
ioe2pbkrRY9z++ml68t9qO6kz7eLZkdSUTqSur6FnltPx7PSikZbU/F4MpVI
vJyuqnrerq//fWb06J83T5r0/dbDD79r8dFHf3nxzJk3LjnzzCvaLrzwvGVX
X33KyptumrHh7rsP3fjQQ+M3P/dcg5NOVzmOU+Js3BhzpPT6ULrXh6LxDfV3
FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/mNBv9/fGAgELggG
g4+GQqHF0Wh0e343Jr8fw+2asrIyWVpa6nZjwuGwjEQig9KpKRxu1PBn5/ax
k/a5ory8/E/xePxKwzDG07FHh/riAQyC/6gVld+Jym9FDUYv6r20onKv66Dt
aRq3FUX3JFpR+45P7j4qjdYihH+VEKElQhQ1CVE+X4jalBCjFgoxmdaPWCTE
DFqeZApxskVLWj8mKcRRPPSao+m5Y5tUdaapqmfauv5p2++/0jKMG23D+KKp
aXOSqvrVJkX5Ir3/JnrvZ+l9N9L657gPZanq/9D7vkvzML32d/S+F+j9r5qB
QMoKBJbYgUC7FQ5vsOPxLanKyjfTw4d3ZkaP7mqePLmn5fDDndbDDpOLJ0+W
LaNHy5a6OpmtqJBp+v5xY4lbT25nye9/qwHl9aIK21CFw50objxxJ4qbTfTd
9VpRlteJos9xG1E+n6Rze2to3eJeFLeiuEPlNae8XlTBpHKNKK8Tlcq1qaxY
zLFjsR56TbcVDO4y/f5OU9ffpH1uMRVlI127VXSdllrRqJ0qLX0tVVX1t2xD
w9PZceN+1Tplyg9bjjjiW4tnzPhK64kn3rT49NNnLTv//E8vv+KK05d97nPH
rbnjjiPeePDBg7Y888xIp7l5mNy2rUxu2lQkpQw5juPP9aE09KEAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA58iUQiEgqFJvv9/lmKojyp63pb
JBLZkd+h8ZpNvM6NKG5FccOGn+PtXr9msCe/T0P72EnHuSIQCPyBjvUK2u9Y
OvzIUF8/gEHwtlZUPB4fklZU4T68/Rbuk1tRdLxpGrSi9pH8PtTjeX0oR4gg
LWNZIcqahRhmCTEyKcREW4jD6fGMRUJ8guaclBAX0bZZphDX0/M30FxL269s
EuLyJkW5zFKUy01FudrWtM82BQJzrFDonmQ4/CM7GPylZRiPm5r226TP90t6
/09ofkDv+wGt/8hS1Ycteo6ef87S9ZdNwzDNQGAxTTu9d50dCGyi5TYrEum0
iot32eXlPemamt7sqFFO6+TJcum0aXLpkUfKJVOnytZx42TziBEyU10tU/S3
hhtMVjD49lbUnsZrSOU6Uv19p1y3KcX9Kfou938uvcbtRCnK7p0orxVFz3mt
KMv7LK8XRWPllnZeJyq33aHz7bVjsW67uLgrFY930n7fNKPRbfTcG7TvNXRs
bXSN0qlI5HW7tPTFVFXVnzKNjY9mJk16oPWII7695Jhj7lh68sk3t51xxjXL
LrjgolVXXXXG2htvPH7tHXccuem++yZ3zp3b6LS01DjbtiWklMVy3boILQN5
fSiV+1BoRAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfCD4QqFQ
ZSwWO9EwjK/Q+guKoqwOh8O7uAcTj8fdLgy3Ymib24vhVhT3a/g5ry0zGI2a
gcY7Bt4f7WeXqqrL6Rj/QMc4KxKJjKdjiQ71BQQYBAO2ouj73cX3W36zzbvX
8jtRhV21vdmK8n4noBW1b+T3oWiUeUJoNl1nehzICBFNC1G6QIjqJiEaFgox
nrYdskDTPtakqjMtVT0rpSgXWYpybVKIW00h7qT3ftcS4se0/iCt30/v+3aT
z3f3Ip/vLsvn+196z7eTmvZjOxR61I7F/kzzdzMc/ncyEFhkGsaCpKK8nPT5
/krvf47e+zw9/rupqq/Qe5pMXW9O6vqKpN+/Nsl9qFBoqxUO76DZSdNtRiK9
VnGxky4rk9mqKtlSXy8XjxsnlxxyiFxyxBFyMS1bJkyQ2ZEjZWbYsN1bUdyJ
erdWVH4naqBWFH2H3VYUjU3fafdz6XX9rSif761OFK33d6Jyn+X2qvjz+H17
GDMYdGh66XG3FQrttKLRHXY8vi2dSGyiWUuzPJVINNuJxMJURcU/01VVz6Zr
ax/Pjh79UPbgg+9tmT79ztYTTvji0tNPn912/vmXrrziirNXz549c93tt09f
f++9B2997LExO+bPr3XWrq1wtmwpcaSMOo4TlFIa6EMBAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHxgaUVFRcWxWOywaDR6g2EYj9C2FkVRdkYi
EYf7TDxeK4q2ub2Y/E6U16gZrE6N16Xxmji8b95fWVkZr+/UNK2djnEuLT9L
64fz8Q/1RQQYBO/YivLuN+9e8zpR3v3ibRuse/Cd9pHfiqJJ07itqEAggFbU
ICnsQ9GoNLojhN8WIrJciDgtK1NC1JlCjG0S4mBLiOmmqp5Ac4at6xfYfv9V
lmF83tT1ryV1/b6kz/cLmifp9c/R/CMpxEu0fMH0+f5I23/HY/l8v7cU5RlL
1/9uBYML7FgsYxcXL7VisZVmMLjaNIzVSU1bkVSUxfS+ZnpPq6koS03aRvtZ
Y/r9G+1AYAu9drsZDu+0I5EuKxLpoXHcVhMNfWFkhr5D2UTC7UU1NzTI1gkT
ZOvUqbJ1yhTZPG6czNK2ND2Xot/9djjc12h6p05UYSPKG3oPd534M1L0HXY7
UfSZ7ufSd93yOlT8Gfm9KO5E5TeivOFjyPWiBppkIOCYgUAPzS5af5Ouwxa6
dhtSiUR7etiw1kx9fTIzYsTL6cbG51Pjxj2ZnTTpZ80HH/z91mnT7mqdMeO2
pR//+A3Lzj778uUXXXTuymuu+cTqL37x6C333nvItkcfHdf5yiv1zrJlVdJx
SpyNG2Pch6Lx5/WhFPShAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAA+sAKkLhKJnE5zn2EYr9K2raqqul0Y7jN5rSivF8MtGa9JM5iNqMJOlNem
8dpUfCz0uIuOcb3P53tJ1/Vv0GtOicfj3KdRhvpCArxP/a0o+t7PpvtxLi3b
6fvdld9mK+w45TfcvG17qxXFz/Fx5LeiaBtaUYPHV9CI4j6U1iKEv0mIcJsQ
xa8IUWEJMZzWR9NyclqIaUkhjqM5LaUo56Z0/fK0YdxoBgJzrEDg23Yw+JAd
CDxhGcbzlq6/aiqKlfT5Wkyfbym9p42mhdatpKIsyo1Fr8maqrqUPmOVFY1u
SMXjm+zi4m12NLrdDAZ3moaxw9K0bZaibLZ8vs203GLr+lbT799uBYOdVii0
ywqHe+j1vTQON5rS+UPfpzR9f9wpLZWZ6mrZPHKkbBk/XrZwJ2rECJkeNkym
Egm357THVtSe+lDe0Gvo3KUdCrmNqhTtl85Fpmif/Nm8pPOSdIzua9zP5/fR
37/dOlG8fU/D+8gbujY9NJ10LbbStV9H595ml5XZmdraV9Njx/6tecqUp7NH
HPGr1qOOur/12GO/uXjmzK8sOe20zy0966yr2i644IL2K688beVNNx278X//
9/COn/1sQufzz49wMplquWpVmdy0qUhKGcr1oXT0oQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAPlRCsVisMRwOfzoUCv0qEAhkFUXp1HXd7cJw
n8lrxeR3ofKbToPdqMlvRXm9KP5s7uXQaxzDMHb6fL6lmqY9Qcf7eZqP0nmU
0KhDfTEB3ge3FUXf9YnBYHA2fa/n0n3Zzn00r81U2GcbqOE2GPehNwO1ovL3
wa0oepymQSvqfSjoQynzhNCeEcLvCBGcL0TRQiESSSFqbCEaaTmRlodbQsxI
CXFySlXPySjKJbaizLY07TbT7/+mFQz+2AqFHrPC4WftSORfViSSNEOhVtMw
2k1NW9ekqm8kFWWL6fNto9nS5PNtpPV1SVVdS7OeZiO9bjN9Vge9t9OKx3fZ
paXdVnGxkwqHpe33y6SmOaaidCd9vl303l2WrnfRfrtpn730nr4+FDehCoa3
u80mHvoOpbgXRX9nMsOGyWx9vczW1bmdqHR5+W4tJ4tbToW9qHdpRfFx2sGg
25py98v741ZUIiHTVVXupHg/9LdltyZVfmuKP4O3efvO279Nr0nxaJpMc1uK
r4mu70wFAm/Q/pbTNbMz1dUvZRoanslOnvzo4qOO+snSmTP/b8mZZ96x9Nxz
b15+8cXXLLvssotWXXPNGWs///njN95557RNP/jBpK1//OOo7clkjbNtW0Ju
3lzsOE5YShnI9aG0XB8KjSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgA+XsGEYo0Oh0CXhcPjJYDC4TNf1zkAg4PZguBXFTZhIJNLfbBqoFZXf
shmMXlT+ePvItaIkd6x8Pt+bqqoupOP8Cc15fr+/kc9lqC8mwPvwtlYU3Zft
9P3v8hpNvCxstHn3TP76YLai+N729lu4T25F0WO0ov4LhX0oGtWma0fLQEaI
aFqI0gVCVJtCjFgkxARaHpoU4mNNQsy0hDjLUpSL04pyralpX7B0/RtJw7jf
8vt/bQUCf7LC4X+Y0egiOxZrplmWKipaY0ciG+1QaKsZCOxI6vouU1W58+Tk
pod7TzSd7qjqTppd9HldViTSa8XjTrq0VGboZ58Jh2WG+0maJum1kt7bS8te
U9cd7jKl6W9Fmr4rmcJG1ECTa0Vxq8ntN1VWynR1dd+yokKmaRv3orjvNGAv
6p1aUdxyotfSOctUQSuKO1Tco8oMH97XpaJ9pehvXSrXpeLz4P247+fWFA8/
5vPONaL4/FPeqKq0aOhn0UXHtpnObWmmpmZ+ZsyYv2SnTHl08Uc+8v2lJ5zw
9bazzvrCiosv/szyWbMuWXnjjWev+MIXZq775jenb/7JT6ZsfeqpMTvmz6/t
WLKkQm7ZEnc2bIjm+lBGrg+log8FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAPChxq2oMdFo9LKioqKnaLkiGAx2hkIhtwnDfSZuxITDYbcN4zWh
vIaT16gZzFZUYTfK61TxsfAy14rapWnaUjrO39PxzqJtE+hcYkN9MQHeh/5W
FH3PZ9P3fi5NO917XXyvefcX3w/57ba9cd8N1Ioq7FHl7s0OOrY0jduKotei
FfUOCvtQjwuh0lJ3hPCvod/FphDx14SoXCREPT0emxRi6nwhPkrrJ9KcQds+
TTMrqSg3m6r6taSu32caxi8sv/8p2zD+ZgUCr5uhUNqKRNqsoqLVdknJhlRJ
yZZ0PP5mqri404rFus1wuNf0+x3uHaUVRaZ8PmnRNNG4zai+blRvUlUdbi6l
uP/E7Sf6mWdomeZuEneaNE2a9H4e7iTxtjT93XBbUe/UhxqoFUXfMW41uX2o
6mqZqanpG+45VVW5bSfuSdn0Hps+321GvVsvirtOfKxeJ4qH90n74wZVmj4/
W18vsw0Nfc0o3g+3qXJdKm5MecPXIBUIyBTtL8XXhM7d9vpQ3MlSlB6T/ibR
soNevzJTXb0gO2nSn1tnzHh4ySc+8c1lZ511y7KLLrpy+TXXnLvyS1/6xPq7
7vrYhgceOGTbH/4wdvMrr9TLdesqHccpoYnSBGn8hX0oNKIAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD70uBU1uqio6NKysrIn4/H4skgk0skt
Gq8Jw50obkd5vSavFZXfjtkbzRrv87wmFTdrvFaUoii76LhX0bHNpZlNM4me
LxrqiwnwPritKPouT6Tv/myaufTdd1tRfD969wU/9tpt+fffULWi6HcDWlHv
rL8PNUcIhRtR84XQW4TwrxIitEiI4iYhym0hamk5eqEQkxcIcWRSiONoTrOE
OI/mCnr+s02KMsf0+b7dpKo/TWra75KG8bwVCLxqBYOWFQ4vsSKRdisWW2/H
45tTpaUddiLRmSov70onEj207qTpZ8ndJ7f/xG0nbh7lWlG0L25FOWZu3eaO
lKr2tZG4k8TNJPrecX+pv9OUG+5E2fwar8v0XjpR3nAriv6uuK2oqiqZqauT
2ZEjZbaxsW9ZXy8ztbVuQyrltZzoff29qIE6UbnjcTtPdL8U9qnSpaVuhyo7
YkTfPniZ24fbpeJ2FZ8HnU+ahxtYuVYUfz5deyepqr1JReGu1i66bjvo+m2z
FGUt/RxS6bq6F1qnT//p0rPPvnPFlVd+Zs0NN5y79rbbjt94332Hd/z2txM6
//nPEc7y5dVy1aoyuWlTkZQylOtD6ehDAQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADAHvS3ooqLi5+k5bJYLNbpdWF4yZ0oHl7Pb0Xti06N99le
s4b36/f7paZpXbRcQ8f1fDgcvoGWU9CKggMcd2H6W1F0r7mtqGAw2MVtKO9+
8FpR3FDLvzf2xn2Yfw/uqRVFx4JW1ABkXiNK9jWiNBrDESI4X4iihUIkkkLU
2EI0vi7ERFoebgkxY5EQn0gJcY4pxKU01y9SlC8nfb5vNanqT5Kq+lhS1+ea
hvEv0+83zVCo1YxEVlix2Dq7uHgTzTa7pGRHKpHYlaqs7KFx0pWVMlteLrNl
ZTJL35MM95K4oUS/R23uKqmqNBVFciMqvxOVP/ntJZt7UbwcaLjL9F+2otKJ
RF+/qaFBNo8ZI5vHjXtrxo5121FuM4rOh1/v9qK4W5XrN+WPzedGz9l7alfx
daiq6tvXqFGymbtU9fUyW1Pjbs/QtcrQcaXptWk6Jz432pdD17zX1PWepKbt
MlW1k67bdpqtNBvo2q00NS1tR6P/yI4c+eu2E0/82trrrrti/Te+cUr7gw8e
uW3u3LHbW1pq5LZtZXLz5mLHccJSykCuD6XlN6KG+rsLAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAD7JbcVFQqFLqV5MhKJLCsqKur0elDco+Eu
DfdpeBu3orgT43Vq8ttRXktmMMb7PG+f3vC2YDDIvahdgUBgFR3bczTX07FP
RisKDnBuK0rX9Yn0XZ9dWlo6l77v7fQ97+JWm9eE8u5J737jbUPViqJj6aBB
KyqnsA81TwjNpuuxQohgRohoWojSBUJUm0KMWCTEhIVCHPZvIY5uEmImPXeW
JcTFNNfS819I+nx3LVLVHzZp2iM0fzYN4x80i6xAoNkMhZZbkcgaMxp9wy4u
3sp9KLusbKddXt6dqqjoTVdWOm4LiaeiQmYTCZktLXX7R247ibtO3Fny+922
kqlp7lg8qvr24fYSd5e4s0Q/e3dy3SWbPs8dbip5XaaC17zj8Ou8VlR1dX8r
qmXCBNkyaZJsmTJFthx8sPuYt2fq6mSazsntRdE+6Xq8rRf1rq0o7kBxP6u2
VjaPHOm2opppv7yeHTZMZui5NH9+cbFD19ixwuEeKxTqMgOBnbSv7fRz2Nqk
65tsTVtL+1ue9PszyVDodauo6C/p6upfLT744LtWnnPOVeu+8Y2Zbz7//MFy
8+Z6x3ESjpTRXB/KQB8KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAD+E1VVVaFoNDoqFApdouv674LBYFssFtutFeV1obwmDW/ndtTebkV5+ygt
LXXHa1Tx9nA4vIser6KZS48/QzORTgetKDiQ7daKKisrm0vf73a/3++2ovje
4/vNuwcKW1H5Pae90YoaqB3FrShapmncVlQgEPjQtaIK+1A0Ko3uCOG3hYjQ
lLxOv2oXCVFvCjE2KcTUJiE+Susn0voZ9PynaTmLtt+8UIg7m3y+7yV9vl80
KcrTtq7Ps/z++WYgkLZCoTYrElltFRVttIuKtqTj8Tft0lK3D2VXVvamqqr6
+lCVlX3DjajycpkpK3O7R2nuRHEniZtO4bC0vV4Ut5a4GVU4vJ3GbS7Re7iv
lKLfw2n+PBp+nKLvnbs9vwvldaLerReV35Xiz+HPpWPOcK9p1CjZzK2oKVNk
6yGHyNbDDnOXLRMnymxjo8wMH97Xi6J983l4zasBW1F87APsN03Hn+U2VX29
26fK5lpR6ZoamaqsdOyysl67uLjbjsV20nXfQdd/mxkMbqbPXUefu4L222xH
o012Scm/UuXlc+l9v6Hj/iEd89faTjjh2uVXX33alp/97BBn06Y6R8pSKWWI
Rs/vQ6ERBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA79UhhxwS
GjZs2Ci/33+Jz+f7naZpbdFotDO/B8OPvU4NL7lVEw6H3ed4fTBbUV6LhvfB
fRxecicqv5HDS9rXLnp9O81ceuy1omJDfT0B3ofdWlE0c+n73m4YRlcwGOy/
B72O2p5aUYPZi9pTKyqvI9dB29O07cPWisrvQ/keF0KdL4TeJkSgSYgwLYtN
ISoWCFGXFGKMJcRkWj9yoRDH0/ppNOfTtito2+fo8VfpPd9p8vkepnmS5gVT
UV41Nc22AoElZiSyyi4qWp+KxzenS0o6UolEZ7qioitVWdnT34fi5pHXieLe
Unl5X9Mpv+eU6yTZXiuqcHg7P8+T33zi93NrKpFw+0xp2o87/Di3H36+vxn1
XltR+b0ofi9/Bh8zfXamoUE2jxnzVi/q0EP7elGTJ8vmsWNldsQImRk2zO1V
8XH3t6I0rW8MQ9rcueIeFveivP3k9pnmVhSdF1+nTE2N26fK5DpRdlVVb4r7
W9zhKip6k67FFpoN9N52u7h4MR2nmUkkXk5XVj6fqa9/MjNmzM9bJk363uJp
0+5cfMwxN7d+/ONXLr7ggrPW3n77kVuefHKk4ziljpRBKaXmNaKG+ssLAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHnvHjx0dqamoO8vv9V9Hq
U6qqLo9EIp1ee8brw3g9Gq/j5LVq8ptSg92K4j4O78drVHGfiif32l20v1X0
uudpbqLXHkrb4kN9PQHeB7cVxd0zmtk0c+m+bNd1vb8Vxd20wlZUfs9psFtR
e5q8blsH7dttRdF80FtRu/WhaJR5QmgtQvjnCxFaIkTRQiEStF5Dy1FJISam
hDjCEuIYU4hP0HyK5jLadn2Totye9PnuafL5HqD5renzzaX5V1JRkklVbTU1
bYXl96+zw+FNqeLibTb3oSord6VranrStbVOtrZWNtfUyOZhw2RzrhOV4UYU
95y43bSnRlTe7NZp4tdyp4nfz/0nHm5BeT0oXlZWygzty20r0aRp37ztHXtR
79SJym9F8Wu94+Bj4P3U1blNKG5GtUyaJFunTpWtU6bIlvHjZbaxUWaGD3eP
l9tWViDwVitKVd3Htt8vbbpv3FZU7nzTecP7tOk68bll+NxomaJzoWvdTddv
O12PLXZJyTp63EbbU5mqqtfo2v8t09j4VPOECb+k47l/yfTpdy897rjb204+
+bNLzzjjyqUXXHDuqquvPmnlLbdM2/q9743ueO65cjl/fkhKqQ71lxcAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5s3FciH9E07fO0OpeW7dFo
dCf3mbz+TGErils03IrJb9IMZiuK98OfFQqF3B6NdxwFraguem5tMBh8kbZ9
ldaPTyQSlUN9PQHeBx/dd24ryu/3zw4EAnN1XW+ne3K3VpTXahqqVpTXquJ7
kZYdtM1tRdExfSBbUYV9KBrVpnNcIUTwVSFi84UoywhRbQox4t9CHLRQiMNo
jk4K8XHa/klbUf4fzXWmpn3RVNX/tVT1h/T4kaSm/dlUlH/SLKLtzUlFWZ5U
1bW0/Q3TMLZaodAOq7h4V6qiojtdU9ObrauTzSNGyNbGRtlKyxZer6np70QV
9pq4ocSdJJt+j/YPr+c6Sdxl4ve4rSf+DG5ADR8uM7W1fctcEyozbNjuz3nD
vSh6H7+/v03F+323PtSeJq8X1X9c3HCi/TaPGiVbJ06UrZMny5YJE/paUXQM
3Hni/fW3orgT5Q2v03a3F0XnnuJzp++tFY06PHQdeuyioh7aX2+a90ljl5b2
2GVl2+2Kig3pYcPa0rW1Zrqh4aXMmDF/zk6c+GjLYYf9uOWoo+5ZeuKJc9pO
PfWmlZ/61KyVF1984YpZs85c+/nPH792zpxpb9x//0Frnn66wVm4MOGsWRNG
JwoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN4nH40RjUbHxGKx
CwzDuI/WF2iatrm4uLinrKysvwvl9WHyuzRemya/TzNYraj87g03cbzn+DE3
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
LbkTZdN29zPKy3f7DO9z3BmgD+UeV3W122Li96bp+NL098DtQ9Hn5TedvK5T
6v02onKzW3eKW1E8tJ2Pgc8hQ8fojteKor9VbiuLztfic/f5pCWEpJ+RTNHj
NG2z+broehfNZvq5LDMjkSa7vPzFTGPjn1unTXui7bTTnlhx6aVPt3/uc0+t
uf32X6y/885vbfjWt27acO+9F73xk5+ctOWRRw7d+vzzo7cnkzXO6tUJuXlz
cUEfSstrROFvDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBav
FXVQMBi8NhqNPuv3+90mjaqqbneGO1E8+W2a/EZTYTdqMBtR3ud5rajCdlR+
z4bWuRW1jubFSCRyK53PoXReJQKtKDjw7NaKonFbUYqidBmG4X73+d7gezL/
vixsOu2te5D3mb89HA7LUCh0oLSi3taHolFtOlZaBjL0+5Ael6SFqGoSosES
YtwCIQ6ZL8RRtJxpCnEmzYX03DWLhLiVll+n+T7Nr2j9j5bP93fT51uQVJSM
qarLkrq+xgoENtrh8Fa7uHh7KpHYmamu7nL7UA0NDveZWhoaZHNtrWzmhhP3
mOj6ch/KDgalHQj0LSMRt8/ktpq498RdKe445XpO3IpK0fu4peT1oixNk5au
u5+Rovfz57rvpde7PSjuQuV6Ue7jgj5Uhj7T3V9p6VttKJ68NtTb5j10n96x
D1XYiPKGrwedFy/d60DHlhk+vG/ournnz8fJr/X73SaUnWtF8dDPTCZ9Pod+
Nt00HfTzWUHXZr4ZicxNVVf/unnq1PvbTj31m+2zZt219itf+db6e++9542f
/vSOjt/97rptzz//yW2vvfaxXStWHCQ3bap1HKfU2bAhSssg+lAAH1gqTSXN
QTQzaM6muZrmizRzaL5O8y2ae2l+SPMQzS9pHqP5Pc2faf5C8yzNH2meovkd
zeM0j+Re+zOaB2l+TPOd3GfeRvNZmlk0F+f2e3LuGA6nGU9TI/r+2R0AAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+XLxW1ARFUa7Vdf0ZWrbTepem
aW5zZihbUfktKJ78fXjbuFUTiUS4V9MdCoXW0bK/FUWviwu0ouDAs1sripZz
adlO0+X3+93vO98HiUTCHb4feNtgNqK8+9q79/mzeR+8Pf/3AXei+Jho3FYU
re+XraiB+lDzhdAdIfxrhAibQsRpKlJC1CWFGLNIiCkLhfgIzQm0fjrNBfT8
VTQ3LRDif+j5e5uE+BnN702f7680ryV9vlRSUZaaqroqqaobTF3fYgUCb1rh
cKddVNRll5b2pCornWxNjWyuq3MbUS3ciqqvd1tRWa95xM0nutZuJ4quLX2G
tHK9KG4pub0mr/tE7+FeUprfW1kpU/R9sHPvd9/H3SR6b8prTdHzbgeK98dt
qFwfKpvrQ6VzfSj+fK8L5e6Xh3tNPN76u/ShBupEDdSL2mMfqnDffA1y58L9
qkxVVd/509I9bm5F8Wfx6+jvF/1MJP3cHJoemi76We2kZQfNOhq7SVH+YgYC
D9tVVd/MHnbYrW3nnnvNmi9/+ZLNDz106bbnnrv8zQULLtre3n5q19at0xzH
GUNTLaUszjWi9Pw+FBpRAAeUYhruiZ5L8yXR13l6muZfNM00m4T7Z2O/H/oT
JrbQrKCxaV4WfW0q7lU9QHMXzU00l9CcQjONZhRN/H1fQQAAAAAAAPgwmSH6
uslDPQAAADA0hvqfAfDPAQAAAAAAAAAAAAAAAAAAAAAAAAC7629F0VxD82ea
lTS79qdWVOE+vP1wJ4pbNaFQSAaDwW6atfT474FA4Ba0ouAAtlsrimaPraiy
sjL3nuT7oLCntrdbUfz8/tyKyu9DzRFCeVwIlR5r84QIrBIitEiI4iYhyi0h
hqeEGGUKMSktxDTaduwCIU6l7efS48uTQtxIy6/Q6/8v6fM92OTz/ZaWfzF9
vleSimIlVXVxkn4+pq6vtwxjE8020zA6Tb9/lxUM9tiRSC93lzJ03bLl5bK5
qko2V1fLZm5Gcadp+HC3ecStJ245cdPJpt9ptmFIS9elxUtuRnEDibfTNedG
k9tL4u5TfX3f0GelaT1F++BelEWv638fv4fbTHQMbmOK35cbt7PE+6XnbDpO
t83E++H3cW/KG1q3cvv3WlH2f9GJetfx+lD5fSreL7ezeOhxmq8nffezdM0y
fN3onFLciuLjp+fp5+HQz6mXfnbdyb5G1Js0m2nW0LTQcy/Rz+1Xtt9/ZzaR
uLb18MPPWX7ZZSe+8cAD03e8/vr0rvXrj3Yc52OOlIfScrSUspKmiB77aamh
DQWw34vQHElzoej7/5H8UvS1lNaJoW887Q/TTbNG9DWm/k7zG5rv0NxKczHN
iTRTaPhvefA/u/T7NYWmjGY8zTGirxf2GZqv0txH82uav9IsoemhqR6SowQA
AAAAANi/DPW/w3oDAAAA+x7/7+tD/c8APDP28nkCAAAAAAAAAAAAAAAAAAAA
AAAAHEj21IrauT+0ovL3lT/esXC7hjtRgUCAWzXdtFxP6/+guZVbUfT+EoFW
FBx43lMrqrS01L03vWYa3xN8b3gdp8FstPG9yPvxtnn74GPh+4/GbUXRa4a0
FSXz+lC5UeYJodHScIQIttB1nS9EWVKIGno8Mi3EQbYQh9PyaFNVT86o6tlJ
RbnEFGL2IiFua/L57qb5cdLn+w3Ns/TcSzRNSVVtSWraCkvX1yb9/k1mMLjN
CoV2WOHwTppuetzLraUUd43oZ5Oha5eha5ih65ahn1u6rKyv2VTYOuJOFLeR
uPFEv4Pd8XpRuU4ST4que5o/q7paZhsaZHbkSJkdMeKtXhR9Pnec3L4Td574
fdxe4oYTvY+f59YU96HcfdLx8Wvc13qNqvzJ61X9J72o/6oPNVAnKtetStEx
pGjpXlM+/0Si79px6yqvFWVqGneiumi202xtEmIt/fyW0s8uSefxIu3zMTru
u+14fJZVXX1K8xFHHLHhc58b2/nKK/WO49Q5UjbScoyUcgR3ouhxjJYGjbKv
v9MA8K40mmk019E8TGOJof//rXzQ5k2aZTQLaF6geZzmRzR30dxCM0v0dZdm
5n4WY2kqaPx7/rH91/jnHaJJ0NTTHCT6umAn0HyS5nKam2m+K/oaWHy89Gde
vPFfnHfdXjh+AAAAAACAA8kcMfT/TurNjL17qgAAADCA/eWfBebt7RMFAAAA
AAAAAAAAAAAAAAAAAAAAOIDsqRW1a39qRRW2b7x1btdwK4r7OYZhcCtqDa3/
jeYWmkPotXGBVhQcePpbUfTdnk3f67n0uL8Vxd97/v579yX3mvJbUYN9H3r3
Yv69n38PBoPB/lYUHcdQtKLe1oeiUW3aPy0DGfodR49L0kJUNQnRQI/HLxDi
0KQQH6P1mZaqnpVSlIssTbs2qWm30vo3TFX9QdLn+xXNH02f78WkoixsUtWs
qWnLkrq+xjSMjVYwuMWORLZbsdjOVFFRV6q4uMeOxx234cRdKPq5ZLgVlZtU
rvGUomvGTSNuNLnDfSPuJXEXyWs1cSNKVfuGH/M27iXlOk3u59B70xUVMltX
J7ONjX29qPp6mampcbfb9Lzbf+LG00CdJx6vD8XP6zo3liSde98oSt9469yM
4tfx6/lY8npRe2pF7Tbv1ojy2lB5414zbm55nSi6DjxuOyoWc+ySkt5UWVmP
XVraS9depvkzuRWl6110zB1JVV1Pj9vouJNWOPwPev0frKqqn2VGjry7eezY
z2QaG09dNnLk1OaPfnTEmjlzymVbW7EjZVRKGacpcxynlIbXdRr8LQHYP0wW
fT2gH9L8m8YRQ///U8HseXaIvk5TO00rDf0ZFotyP7t/0fyd5i80z+Ye83bu
fS2mWU2zkWYbTSdN7z4+9kYBAAAAAADw4TZHDP2/V3ozby+fKwAAALzdUP/9
z58Ze/dUAQAAAAAAAAAAAAAAAAAAAAAAAA4YB0Qryvtc7tLwNj4WPibexo0c
7ufout5jGMbyYDD4R9p2Pa1PofMoFmhFwYHHbUXRTKTv8mz63s8NBAK7taL4
HvDuyYFaUd69M5iNqPxtXi/Ka0XRcXXQpOk4f0z34T5pRckB+lDzhdAdIfxr
hAibQsRfE6JykRD19HhsSoiD6fF0S4gTTVU9w1aUC2iusjTt87T+taSu32dq
2s8tXX/K1rS/mYry76SipOm5pUlNW500jA2m37/FCgTetMLhTjsW67JLSnpS
iYST4WZTVZVsrq6WzbTMJhIywz0o7h1x16hwuNnEy/xOk9eG4lGUvvFaUfQa
O6/P5Lai6OeQLitz21DZESP6elENDTIzfLhM0zGk6Hckv97tTHHnifeRW7rb
ctv7+1BeG8rnG3i8Y8k1o9xz2FMris/dm7zt77kRlZt0XivKpn2adMz0c+il
n0MP/Qy67KKinXY83mnF47zstouLe6zi4m7avi1VXLwyVVaWSg0b9nKqru5P
mcbGn7dOmvTtliOOuL1lxoxrW4477pNtxx8/bflHPjJy1dFHl9nXXksHYxtS
So2GlwHHcfy5dfwdARg6DTRX0DxCs04M/f8fBfPhmXECAAAAAADgw22o/72s
cGbs1bMFAACAfHPE0P/tz595e/d0AQAAAAA+tGaIof/nfQwG895m3h5mzh5m
Rt4AAAAAAAAAAAAAAMAHy37disr/fN4v93C8To53TLzO/Rw63u2GYSyi1zwY
CoUuosdjcueGxgccaN6xFeX10vJbUTxeKyq/q/Z+O1H8OTyFn13YiqL7rUPX
9TQt92orSub1oeYIoTye60O1COFfJURokRDFi4UobxVieEqIUQuFmJwWYlpS
iOMsIU61FOW8rKJcbmvaZ01Nm2Pq+rctTXuIlk9Yuv685fe/QmPR+mKadpr1
pmFstgKBbWYw2GmFw7vsSKTbKipy0vQ7KFtRIZuHD5ct9fWypbHRneaRI2W2
tlamy8v7WkncRuIGUq4Nxc0jt9PE3SWv0TRQm+kdWlFuL4o+l48hw20q2n+W
9ztihMzQvnlbqrTUfZ27r/wWlDcD9aHoEu9xvGPi46HP7D+eXP/pv2pFFfah
aFuahztRvJ5rapl+v0M/hx76GXUldX0n/Vx2JAOBDisS2WKVlGy0yso2WOXl
b6RqajZnRo7c2Dx+/LLmKVMWthx++POLP/rR37Qee+wPlpx00h1LTznl+qVn
n33x8osvPm3VrFnT26++esySyy+vWHPhheF5c+Zob/u+SamgEwWwz/E/u51O
cx+NLYb+v7HBfHhnktg3Zog9/7dcGAxm/xzYP80RQ//dwGAw733mCADY3/F9
KvezmbdXzxgAAADyDfXf/YFmxt48YQDYp/jfN4b6f5vAYD7oM+ddZoZAOwIA
3iIxGMyHbuaJgf+5YYbAPx8AAAAAAAAAAAAAABwI9vtWlPe5XiuKmzh8LKWl
pe5x0XbH7/fvVFW1Tdf1J0Kh0OcDgcBRdA6lNOrQXVqA/5rbiqLv88RgMDib
Zq5hGP2tKL4v8u9JrxXF90nunnDXB6MVxZ+T34byWlHeMfBr6H57WyuKjn/Q
WlEyrw+VG4VG4z7UCiGCtIxlhShLClFjC9FIy4m0PNwSYoYpxCdSqnpORlEu
SWna9Zam3Wbq+jdp+eOkYTxGj5+1DeOlZCCQNEOhFpoVViCwluYNKxjcRrOD
tu0yw+EeMxJxbPp9k6Zzz3Anqry8rxPV2ChbJ0yQrZMmyRaaZnrcPGaMzNbV
yUxFhdtz4maS20aia+W2m3S9rwNV2G8q6Ea9YyuKh34u3KTiPlR+KyrttaLo
Z9XfiipsQb2XPlTheP2q/6IV9bZOVK4VlSroRHEDix9b4bBjhUK99LPoTvr9
u2ifO+jn1ZHU9S10/TaYgcBqq7i4LV1RkUnX15vZCRPM1mnTUkuPP95edvrp
ry0/77xnll100c+XX3bZPcsvv/wL7VdffdmKa645Y+VNN81Yf+edU7d+97uj
3nz44Uo5b15ESrnHvxVoRQHsE6NovkTzdzH0/x0MBuPNoWLfmLGPzgeDwQze
wP5pjhj67wYGg3nvM08AwP5uqH9P7Glm7MVzBgAAgD5zxND/zce/RwB8sO2v
v2cwGAy6EQAfVkP9uweDwezfM08M/M8GAAAAAAAAAAAAAAAwdPb7VpT3+V4r
ijs1XiuKh7Z3G4axQVGUV3Rdv5ueP42er6VzUIbwugK8H/2tKL/fPzsQCMyl
x24rirtMfD/wdz+/3eTdF/mtKK/pNFitqPzP5ud5f/wc96v2QivqbX2oeUJo
Nn0mPQ5k6PdWWohSWlabQoxYRL/DaHloUoiP0Xw8rapnWYpycVrTrjU17QuW
rt9lGsb9lmH82vL7/2T7/S+agcAiOxTKmpHIcquoaI1dXLzRjka30mw3o9Fd
diTSbUUivTQO94vSdO4Z7kTReWfKymS2qkpm6+tly7hxsvXgg2XroYf2zSGH
yJbJk93t2YYGmamululEwu06uX2kYNBtP7kNJ+5A5Q83nfJ7Udxl4q4Uv36g
VhQdU5q+C5maGrcTxb2oTF2dTPM+6RjdRhX3qeiz/6Mu1EAdqbx2lZ3frhqo
FVUw/Z2o/FYUvzevE8XbLG5bRaN8zXvcRlcw2Enn/ib97LbS9dpIs9oKBNrM
cDhNP6/5dJ4vNo8d++ziadOeWnLyyb9ffsEFf2q/5ppnV99yy+9X33bbQ2u+
+tWvr7nzzuvXf+tb5626554TNv/oR1O3PP104/aXXx7mpNOlzpo1YSmlNji3
LQD8h6poZtP8Qwz9f8+CwQw0R4p9Y8Y+Oh8MBjN4A/unOWLovxsYDOa9zzwB
APuzGWLof0/saebsvdMGAACAHP57O9R/8/c0APDBsD//nsFgMO9t5gl0pAA+
SIb6dwoGgzmwZ55ARwoAAAAAAAAAAAAAYF/br1tRhfviLg1v87o1PLS9yzCM
1T6f7690zF+g1xxJrykZyosK8D71t6KCwWB/K4qmi9b7W2n/n73zAJOrrvf3
d6e33WzvPb1XipQwoiiIiFxAKaIUAUERRIG/Io6IiO1eFbiC1y5yUazIVRIQ
B1ARJCG707ckJCEhIYQUQtommd//+z0zZ3N2skkmyeycmd3P+zzvc6ae8zu/
mXNmZ7O86A21zFaUHCvSc9KPn1y3oqTZJsuRaEWpjD4Ua11CZE8SOSNEvhBR
BS/rlxG1LyWa2k00L0x0Ml9/D9/3wYjFcmnEZrs2bLPdErLb7wrb7feGHI5f
hJ3OP0Zdrr9FXK6XIh5PLOLzvRIZN+61aGXlG5Ha2i2x2tq3ebkrUlOzJ1xV
tS9SUZGM8T5rbai0MZFvi/F+S/sp3tCg4u3tqmfKFNU7Z47qO+441XfCCapf
lMtz52q9qB5pOLW0qHh9vdZ10vpNmc0oUZpQ0nTSW1GyPFgrKt1c0hpW0q5K
d6ukFSVLaUfF6uoU75/2HFnH4HrpMH0oeZyxV2Uci/SseKzSn+J53N+KOkQn
akgrKqMTpe9PyOdLhlJdLulz7Qp7vdt5f7eGXa5N7Pqwx7OSH5uIlJe/HK2u
/jvv759jHR2/7pk9+8cr3vnO+1Z++MPffvX667+17vbbv7P+61+/f9299353
409/esfmX//66q2PP/6BN//2t5N3hcNTt7/6anNyy5ZKpZQvmUw6pRPFluT8
CAYAHAz5mfMKSv28afbfqEB4OBdSfvDnaX8ghLkTFCYBMv+9ASHM3iABAAqZ
AJl/nsD5AwAAADAPsz/vD6V/5HYbAJBHCvk7B4Tw2A0SWhEAFBty3Jp97oAQ
jj6DhJ8JAAAAAAAAAAAAAAAAAICRouBbUXobarjtpbs4u51O51qLxbKYx3yj
x+OZzWMdZ+akAnCMlPB7u8zr9Q62ohwOxxp2gN/fg60ovZ+mN9SMrSj92Mll
K0rWP1wrisel7Hb7UbeilKEPFSCyPJruQwWJXF1E3mVE5f1EtRGiVr4+6UWi
OSGid3QTvWsp0QfCRBexHw9ZLDeHbLZAl93+nW6H4ychp/N3MZfrqYjL9ULY
7Y5EfL7l0bKyNdGKig2x2trNicbGbbGWlp3xtraBWHv7XjYZb2lRCekuSQuK
51LU2lC8/1Fdua26WmsxxZuatD5T74wZqm/ePK0X1a/3ohYsUH2zZ6veadNU
z6RJKtHRoT1eOlM8Bq2dFDb2otKtqLDVur/XdKhWFCutKGlP8f6oeGtrqhXV
2al4n1S8sTG1LWlTyXZkPfq6jR0oYx9qGMOiPg69E2UYizaGQ7WiDtWJko6V
15sM+3x72d3sdr6+lR//BvtqpKysN1JR0RWprv5npLHxyVhn5297pk79Se+8
ed/rPfXUry4/++zPr7rsspteu/nm69bfddfVbzzwwLVbHn30+i2LFl23bcmS
S99OJM4c2LJl/s6dOycklapjywyNKIt0otCKAiAvnM/+mk2S+X+DAmG2vovy
gz9P+wMhzJ2gMAmQ+e8NCGH2BgkAUMiYfY44nP4R23MAAAAABMj8z3p8lwBg
9FPo5xoIYe4N0v5WBACg8JBj1OzzBIRw7Bgk/FwAAAAAAAAAAAAAAAAAABwr
RdWKytyGjImv7/b5fGtcLtcTbrf7k9LXkc6OmZMKwDEybCuKlwPSaTJ2m4yt
KL2flj4ucnL86evXtym3Sz9KP/7k8tG0opShD5XWwtp6iZxLiDy8LGNruoma
I0QTeDmTl8cvI/KzZ7MfChFdEbJYPt1tsXyx22r9VpfV+sOww/HrbodjUcTp
/GfE7e4Oe7190bKy1dHKytdjNTWbEnV1b8UbG3ck2tt3JyZM2JuYMiXZM22a
6ps6VfVNmaJ6J0xQPdJcamhQ8ZqaVBNKrKrSjKbVbpP7pRclfamJE1XP9Omq
d/Zs1Td3ruqbP1/1SStq3jzttt6ZM1UPr196UTFet6wjwvMb9ngO24oKGVpR
4cxWlLSaeD0yNq1bxevXelHSpeJxxXlbMlZ5jDSejNsYsh19W2n1+wc7UfIc
GaN0onjM0niKZtOJku0aW1Eyfn5+lI3x5Vi6FRXy+Xaz2yLjxr0RKy9fxWOO
xerrX4w1Nz8d6+z8Q2zKlF/0zJ9/f//Chfcsf897bl/xgQ/cuPrii69Yc801
H15/yy0f2PjNb75n80MP+bc99ZR/ZyLxLrVly7sHBgYWKqXmJJPJDraGL/vS
nSgr+lAA5IUK9ha2h8z/+xIIj8YzKT/487Q/EMLcCQqTAJn/3oAQZm+QAACF
SoDMP0fgHAIAAACYh9mf89noH6mdBwDkjWL43gEhHHkDaf0EADCbIJl/ToAQ
jm0DhJ8LAAAAAAAAAAAAAAAAAIAjYUgrqqSkpKBbUXoDR789PbbdfNtafvxi
vu0GvjybHzfO1FkF4Ng4oBXldDoHW1H6Mae3nIzHpBwjurk4Ho0dKuOxp29L
WlF2u13x+SKbVtQBfaggkS3Cj+PLrjifi2JEVbxsDBF1LuPzEi8XdBMt5Mec
2UV0fpjoo90Wyye7LJbPd5eU3NNttX6/y2b73y67/c9hh+O5kMu1LOLxJCKl
pSuj5eXrolVVb0br6rbGGht3xFtadsfb2vYkxo/fJ92m/pkz1fK5c9WK+fPV
8nnzVP+cOap3xgzVM2HCYGcpXl+fsq5O60LFamtTjShjR0rvRXV2qgQ/NzF5
cqobNWtWqhMl8uWeqVNTDSdpRfG5S+snSf/pcK0oQ6cpnO40Dfai9F4TvxYy
zkR7e6oVle5FJdraVLyxMdWLSm8vom9P1mvoRg1e18dh1NiJSm/7cI0orROl
t6LSnShpREV5DDE2Lr0oaWV5vXvDZWVvRSorX4vV1yfira0vJiZOXJSYOfOR
3uOOe7DvlFO+2fvud39p+Qc+cPOrF1109erLL79k1fXXn/vGLbe8c+PXvnbC
ph//ePaup5/mSe/pTG7e3JHctWtSMpmcppSawrbrnSjWwVpMOJ4BGGvMZx9g
95D5f0MC4bH4AcoP/jztD4Qwd4LCJEDmvzcghNkbJABAoSLHp9nniGz0j9D+
AwAAAGOZAJn/GY/vEwCMDYrlfAMhzK9B2t+JAADkFznuzD4HQAih0SChHQUA
AAAAAAAAAAAAAAAAHIqCbkUZ1ds0cln6NNKwqaqqErVWFF9fzH4arSgwCpDj
8oBWFF8+ZCtKN5etKL0NdbB+m4znMK2oA/pQrPVRvi9J5IwQ+djKl4gauog6
wkRTY0Tz+PIp7HujVusH4xbLpSGL5RPdFsstXVbrV9n7um22X4RstsciDkcw
5HQu6fZ44iGf75XwuHGvRSorN0br6rbEGxvfjrW07Iq3t++Jjx+/LzFxYrJ3
0iTVP2WKWj5jhloxb55aceKJasVJJ6nl73iH6j/hBNU7d26q6dTZqeKtrSre
3JzqRolyWbpL9fWpZpT0l/gcFBOlHSUtqYYGFZPHSaeJtyVNKlmfLBPpBpU8
N8pzp7WbpJUkDSjpNxlaUWG9FaX3ouQ+6TXJ46T3pPeipBUl8msjY9CaVdKJ
mjhRa171yOX29v29KH6c9jy9GSXrHU7ZVlp5XMTYicqiETVE6UqJeiuK16XJ
Ywi53fvCXu/2SFXVazzf4cT06c/0nXjib/r8/gdWnH32V1dccMEtqy655BMr
PvrRj66+9trz1t966xmv33XXSZvvv3/O1kcembTpqadat61fX5fcsqVSbd5c
nkwmy5RSFbysZevYStbLt9nMPaQBGBNcyC4m8/9OBMJceT7lB3+e9gdCmDtB
YRIg898bEMLsDRIAoBDxk/nnB5xHAAAAAPMIkPmf8dkKAChuiul8AyE0zwCh
GwVAvpBjzexjHkIID2WA8HMBAAAAAAAAAAAAAAAAAGCkKFpRxj6NLKVPI72o
6upqVVNTs5tvW8u3LWbRigKjgSGtKF4ucrlca9gBj8dzQLtpuOMkV62o4ZpR
xvXLePRWFDvYinIRtU4gcqr9fSjLEiL7K0SuLiIvL8tDRHVLidq6iSYvI5oT
JjqJb3t3hOgDEYvlYvbqiM12c9hu/3LIbv9uyGb7abfN9vuQw/HXsNP5Qsjl
ioS83hWh0tK1kYqKDZHq6s2x+vptsaamnfG2toFEZ+derQ81ZYrqnzpV9U+b
pi37eNk3c6bqX7BALT/5ZLX81FNV/ymnqL4TT1R98+erHr5POk/Si0pI80ls
b1eJtrZU68nQi5JWVJTnQlP6T6K0o/h+rS8lvSlRntvcnHqePEeaTdKKkuaT
253qRUmbSTpNeiuqpCSl3osSpSUljzP0orRWFK9L1itNKG280oqSVtXkydpS
a1/J9uvqUmPm11JrP0kvytCFGlTvQ4myLb0TJWPOog8Vy1RaUfz8MK+HX7dk
t9O5j1/HAXYHr39DtLY2npg2Ldj3znc+suL887+z6iMf+fyqa665ZtVNN33o
tVtvPWvDnXeeuvm+++a99fDDU3YGg+3qlVfqpQ+VfOONUqWUi3Ww9rSOZDLp
Tuvk61azD2gARjmfZPvI/L8HgTDXXkT5wZ+n/YEQ5k5QmATI/PcGhDB7gwQA
KEQCZP754UgEAAAAQG4x+7P9SAyM0BwAAPJDsX33gBCab5BS5w4/AQBGAj+Z
f5xDCGG2Bgi/FwAAAAAAAAAAAAAAAAAAsmpFGbszw7Wihrueqz5NZo9KbpNO
VGlpqaqqqpLx7ebLa91uN1pRYLQw2Iri9/sN/P5exJeHtKKMfTb9+JRjQo4N
43GTK2XdYmYrSrptDodjSCvK7XCcU0HUehqRSxHZeomcS4g8y4nG8eWabqLm
KNHEENEsXp4QJnon+/6oxfKhuMVyRdhmuzFis90Rttu/HXE4fhh2OB7l5aKI
0/nPsMsVCnm9/eHS0lfD5eWvR6qqNkVqa9+KNjTsjLa0DMTa2/fGx4/fJ32k
PmlESR9q+nTVP2OG6mN7+XLv1Kmqh5d9c+ao/uOPV/3SiOKldKJ6+bYeflwP
P1d6S4kJE1Ri/Pj93ShjL0q6S9XVqU4Uz4vWX9JbSnKbNKP4fs2aGhUVpdPE
8yaP0dpL0nuSDpMoXSbpNEkPytiKMiq3y/3ScpLnyPNZrRfF65UxSZtKxixz
IPvaK/vN8yD7I/fFGhr296KkU5XZizL2odLr1ztR2fSh4ro8J7H0ffx6JUM+
376w270n5HTu7rbbd3TxeyZktb7B21weqa7+V2L27N+sPPfc/1xz9dWffe1z
n/vIa3fddebG++8/YdtvfjN9y1NPdW6PxxuTW7dWqU2bximlPOk+lE1aUKyF
leOGZJlWbrOYfCwDMJq5nI2T+X/7AeFIeRnlB3+e9gdCmDtBYRIg898bEMLs
DRIAoBAx+9xwpPpHZBYAAACAsUmAzP9sx3cKAMYOxXbOgRAWngFCIwKAXOIn
849rCCE8GgOEnwkAAAAAAAAAAAAAAAAAjE0O2oqy2+0HtKLkemYraiS6NPp6
9TaNPgZjs0bv5fBtWivK6/WiFQVGC0NaUfweX+Tz+QZbUfL+13tNohwfeitK
2k368ZHLY1EaVKJc17cr2/RJK4rPFXZpRVmtMZfN9j/lDse5E4k6v0407gXe
jwRR9TKiphDfFuVzDS8XvEx0WjfRWXGr9fyIxfKxmM32yYjN9vmw3f71sMPx
QMjheCTidP456nT+PexyLQt7PD3h0tJVkfLy9dGqqjejtbVbo/X1O2JNTbti
ra17Yh0d+6Tr1JvRiOpLN6K0TpQ0oKQTxY+RblLP5Mmqhx+ntaH4sdplUR7D
9w22ooy9qPb2VG+pqengrSjpKqWNptUbUpn3a9d15bq0m6TXZLWm2lBEB2qx
KJ6nVM/J2IqSVlNVlYo3Nmrj1OaD96dv9mytiyX7P9iLqq/Xxi3PlTaU1osS
5XJ6vdHDtKGG7UOljfF8RMaNS7L72D3hsrKBkM+3M+R2vx1yOreG7PaNIZtt
DdsT8nhejNTX/3H5ccd999VLL71pw+23X/ja97532rbHH5+hli9vTb71Vo1S
qlz6UEmlnLy0pxtRFr0LdbAD6VD3AQCOmg+xS8j8v/OAcKS9kvKDP0/7AyHM
naAwCZD57w0IYfYGCQBQaATI/HMDziUAAACAeZj9uX40+kdiIgAAeaEYv39A
CAvXAOHnAgCOFT+ZfyxDCOGxGiD8TAAAAAAAAAAAAAAAAABg7HBAK4o94lbU
SPSi9FaUbEfGIBq3p8uP0VpR7GIWrSgwGtBaUXwMzuT38w3sIn7vr+H394D0
mqQHJUu9l2Y8PvW+mlzXj9FcHIvG47xCjknpRfHS6/Eou9Wq7BbLNrfVGiu3
2X483m7/0CVEM39J1BYnag8TTV1KND9is50Stlrfm7BaPxi12z8Stdk+0e1w
3Bqy278acjjuDzudD4Vcrj/x8pmIy7U04vHEoz7fK5Hy8tcilZUbo3V1W2KN
jdtjzc1aHyre0bEvPmFCsmfiRNU7ebLqmzo15bRpqnf6dM3BBpTefxo/Xmsl
xZuatKZSvLlZxdvaVFzaStKCki6UNKJE6UPpjah0Jyohz+XnSGspVlOjonxe
ivI8DLaipPck/SaeF63l5HKpiNOpKQ0mY4tJ2lFaZ0rWIUtZjzSj5DE2mwpb
LMP3ovg27X5Zr2xHb0VJ24nXE6ut1cYo45V97ps1S/XNm6d658zR5kGbA75f
Oldav8owrrCsL92dOmBsso/sQftQsi42XFYmjai97AC7k69vD5WWvhX2+d5k
14U8nlW8nThfXhIuL386Wl//aGLSpHuXn376Z1+9/voLXv/v/z5p64svTkq+
/XaDUmoc6zL0oax6I8rsgxSAMcjZ7LNk/t90QJgvP0H5wZ+n/YEQ5k5QmATI
/PcGhDB7gwQAKDQCZP654Wj0j8BcAAAAAGONYv05AN8rACheivW8AyEsbIOU
Or8AAI4Os49hCCHMpQECAAAAAAAAAAAAAAAAAEY3B7SieFkwrajBNo10adJj
GKYXtZtvW8su5vvRigKjgcFWFL+/tVYUu4YdkPe/tKI8Hs8BXSj9mDD2o3J5
HJYbrOL1i2Vut3KWlCg30bZKqzUx3mZ76D12+5V3E532DNFxYaKTolbru7ut
1nNjdvvFEafz6pjLdXPY7b4z5PF8l5c/Dbtcv4+43X8Ne70vstFwaemKCB/T
0crKN2K1tZsTjY3bYs3NO+NtbQOJ8eP3JiZOTPZOmqT6pkxR/VOnqv5p01Tf
9OmavXobSuT7E/w4rf/U0aHiLS0q3tCgYtXVqf6RWFWltZVifLvejZLHakob
SlcaUfL8xkYVq6vbv450I2pQaUXxa6O1lxwOFebzqNZ10pXr0niSHhOfW7V1
SXdKltKe4tdM2k/ac61WFTpYL4pvl8dE9O6U3oqSlpPsE69T60V1dmpz0jdn
TqoVNWOGNifSxpJt6tvT1qN3omSfZGy8jzImbSkNKn5sjO+Li4Y+VDTViEqy
e/nyAC938Vi282v4Fq9/U6Si4vVIVdVqnuueaHX1skhd3T+jjY2Lejo6fhWb
PPkHPXPn3tO3cOHNqz/0oYtW3377wq1PPTVJvf12fTKZLGOd6EMBYDqnsH8h
8/9+A8J8ewPlB3+e9gdCmDtBYRIg898bEMLsDRIAoNAw+7yA8wkAAABgHgEy
/zP9aPXnfjoAAHmgmM87EMLiMEBoRABwpJh93EII4UgYIPxMAAAAAAAAAAAA
AAAAAGB0UrCtKH3dxhZOZr/G2Iri+9GKAqOFEj7uyrxe70z2Bp/Pt6i0tHQN
v88HhjsO9WND2lHGflROjkPZjvSnpNkmDSrpRLF1fE5o5Ot1breqKilR9UTb
J1ssy0+xWH53nc32uZ8SXfQ80Xlhi+XDUbv9yqjDcWPE5boj7PF8O1Ra+qNw
aelvIqWli6NlZc+Hy8pCkfLy/mh5+auxysrXY7W1mxKNjW/FW1t3JNrbd8el
DzVp0r6eKVOSfek2VP/06ap/xgzNvpkzVS8vtU4U398zebLWh4qn+1Ax6TtJ
D0r6Tjxmvemkt5WkixSVJpL0mvixWjPKqNwmPSdZR1XV0EaUrEPMbEU5nfs7
UdJ1Eq3W1G3SZZLOEm8z3tQ0uA1t/bJuWYc8n58bOlgviq/Luoa0okQZg3Sd
pO/E+6P1ongutPmZNUtbavPT2altW/Y9kh6zth55vjShpDfF64jLGGXJj4vz
7dKJyuxD8eu4h93F69nBy7fYzbyODdGqqlejtbX9sfr67khLy7/inZ1PxqdO
/V1i1qyf9R9//L39p5761f4zzrh1xbnnXrvqoos+tO6GG9657rvfnbH9yScb
Ny1fPs7QiUIjCgBzcLPfIfP/XgNCs7yZ8oM/T/sDIcydoDAJkPnvDQhh9gYJ
AFBIBMj888Kx6M/5jAAAAABjC7M/y/HdAoCxR7F/B4EQFpcBAgBkg9nHKoQQ
jrQBwr8nAAAAAAAAAAAAAAAAABg9FHwr6lDrlvtKS0vRigKjDa0Vxe/lmW63
+waHw7HI4/Gs4fe71oqSY9KofmxKJ8rn82nLYzkmy41KJ4qt4m3USBuKLzey
HXx5kuh2q0klJWoW0Y6FFsvKiyyWv9xttX79TzbbzUtstpu6bbYvhOz2b4Rd
rgcjHs8jYZ/vL9Gysr9HKiq6opWVPZHq6tXRmpr1sbq6N2ONjVtj0ofq6NgV
nzhxT2Ly5FQfSm9DzZyp+mfN0uwTDY2oXmlETZqUaiC1tqbaS9J+kj5UZttJ
7yrpjSfpR0kvSvpIejNKN92Hisn9emfKsI4IX44YW1Fy3diKktaTdJ5E6UVJ
38nl0h6rtZj0NpWMV7att6L4MXprarAXJZKhFSUdKn7cYCtK71bJvqb3ScYv
vSzpQw32tKZMUYnx41MdLd6m9KH0VpQ2Lh6D1oaS8Ym8/3EZF68z3YfaJ32o
MJ972Z38mm5jt4TLyjbyttfya7uCtxuJNTW9GOvs/Ft8+vQ/9syf/4veU065
v++MM+5Z/v73377qggtuXH3JJVetu+qqC1+74YYzX7/11pPe/PrXp29/6KHm
zcFguVLKwVrMPhABGMNcxq4m8/8+A0IzvY3ygz9P+wMhzJ2gMAmQ+e8NCGH2
BggAUEiYfU7AOQUAAAAwD/kcNfuz/FgFABQffjL/3AEhHHsGCABwKAIGg2T+
MQshhCNlkPBzAQAAAAAAAAAAAAAAAIDipyhaUQdbf7qNs5vvX8vXF/P1T3s8
ntk8frSiQDEzpBXlcrmGtKJ05bjUNfaidI/kuCzPsIKtZKt4HbXSh+LLrWwn
r3cKO4dvO5E9yeVSp1os6kyLZcdldvvKz9vtwZ/bbD/5m9V638t2+wNhm+2h
kMv1p4jH80ykrGxppLw8HqmqWhmtq1sXb2raGG9u3hJvb98e7+zclZg0aU/P
lCl7e6ZPT/bNmDGkDdU/e7bqS9srSidq2jSte9QzYYJKtLdrzaVYff3+PpSx
7TScet9JbyvJc6QJJY0lWWasQ3pMWpdJV67rvSh9PdJdkvv01lNmK0r6Tk5n
qsvE69ZaTg0NKi5dqqqq1DpknW73/t6UPEc0NqPS3SljKypykP2S5pXMj/Si
tPmSptb48SrR2qrdp+2jjIeN8fPifF3aUNKI0sbEcxGuqEhGxo3bGy4tHeBt
7WTf5u1uCft8b4bLytZFKipeiVRXx/l1XRJpbX2WX8vHe2bPfrjv5JMf6H/X
u7614txz71h+8cU3r7riimvWXn/9xatuuunc9Z///Ls2fu1rJ7z5/e/P2PLw
w51vB4P1yd7esnQnqsTsgxCAMYr8PPhHMv/vMSAsBL9I+cdP+NtLCAvBoMEA
pY5NERQHfjrwfCqa/b6CcCwaNOgnnEsBKFQCZP75IhcCAAAA4Ogw+zM8F/pz
PSkAgLziJ/wuD0KYXwMEADgS/ISOFIRw9BogAAAAAAAAAAAAAAAAAKA4KehW
lL5+Y/dG7+TorSiv17vb5/OtZRfzZa0VxeNFKwoUM4OtKH5P3+B2uxfx+3sN
v+cHjE0o/XiQY1Q0Hhf8+MMel8P1ocQqVvpQ9Wwz28FOZmfxehfwek/2etUZ
vDyHPc/pVB+2WtU1Ntu2L7tcr/zY5XrxL3b7ohfs9ie6HY5gxOH4d8jtjoZL
S1dEKivXRmpr34g2Nm5JtLW9nRg/fmfP5MkDPdOm7e2ZMSPZl25CLZ87d9B+
tm/OnFQfiu+XRlSPNKKkd9TZqeJtbVprSZpLWufpYH0ovZ9kNLOrlKncbuxD
eTxDNTSajK0oeU7Y0HoKGXpR0nsabDzx46RHJW2rwb6VrEvWLa0peb7ocKSU
5xmV++Sx+hgy9zV9WbpX8aYmbb4SEyeqhLS1OjpUoqVFxaWtJduVsUgrip8T
SzWmkpGKin3s3kh5+UB43LhdvJ3tvM9b2U28rfWhsrLVfH8Pv6YvR5ub/xHr
7HyiZ/r0X/cef/wP+/z+/1p+9tl3rrzwws+9csUV1628/vrL1t9yywfX33HH
Ga9//esnvX7//XN2PfLIpE1PPdWa7O+vVZs3lyul3OlOlMXsAxCAMcqXyPy/
vYCwkPwKFQ5+wt9eQphrg3RgC0oEox8/4b8/gzDXBgl9PQCKGTl2zT6P5EJ/
jucFAAAAGAuMlp8DgrmeGABAweAn/NsIhHDkDBD6EAAcK37C3zJACIvfAOFn
AgAAAAAAAAAAAAAAAADFR9G0ooxtHH3b0sPxeDy7vV7vWnawFcXjRysKFDOD
rSi32621ovj9v4aPwwE5HvUelN5Q04+JzGPyYMflwfpQNek+VBPbzuuexE7n
Y2w+exJ7uterznK71XnsRzwedS37aYcjeZvVOvAtm23TLx2OV550uaIvulzd
XbwMeTz9YZ9vTbi8fEOkqmpzrKHhrVhLy85EZ+fuxOTJe3umT9+n9aHmzEm1
oebNU8vnz9fsZ/v4utaJ4sfwY1XPlCla5yje3q7izc0qVlenYlVVqcaSsY90
uD6UwcHOU+Zj0u0kvRGltZ9EaTzp8vVIutU0pDfFl7V+k6EXpTWiLJaUei+K
79Oeqz9PnpPZiZLLmdsT9cvGXlXmPuv7yeuO1dRoc6Y1olitsdXUpDW2Ynqj
itfFr1cyXFq6L1xWtofXt4sv72C38e2b+f4NfNur4XHj+qLV1d3R+vrno21t
T0YnT/5dz7x5P+k79dTvLj/zzLtWnHfebSs/8pFPrvr4xy9/7TOfOf+1228/
c+3dd5+64b775r318MNTdjz9dJuKROqTq1dXJpPJUqWUK92Iskonii0x+wAE
YIzxLjZE5v/NBYSF5j1U+PgJf3cJ4cEM0v5uiegn9ANAdvgJLSkID2aQ0IQC
YDRi9rkll+coAAAAABwZ8rO92Z/hudKf26kBABQ4fkJHCkKYOwOEPgQAI4Gf
8PcMEMLiMkD4mQAAAAAAAAAAAAAAAABA8TCkFcUWVCtK38ZwrSjZptfrVW63
e7fH41nr8/nQigKjhSGtKJfLtYjf72uqq6sHampqtONR3v/SSpNjQG9GGY8b
/dg5VB+qUvpQbB0/t5FtYyfwuqaxc3ndJ7J+9kzexgc9HnWx262udLnUp5xO
9f/Yu9nv2u17f2yz7fij3b7xGadz7b89nldDPt+rkXHj1ocrKt6MVFa+Famp
2RFraNgda23dkxg/fl/P5MnJvunTVf+sWWq5dKLSjSjpQ/UvWJBqRM2dm2pE
TZumEhMnpvpGra2K16Ni1dWpPlS6y5TZfzpYH0prKmWq96L01pKxE2XoMoX1
fpPDMUSt2aS3onjOtXGJclnWqbef5PE22/5elCjX9XWI+vqlI5VuSYUNPSjj
vmWO+4DelbF5JUseU6y+XsVbWrR51Fpb+lzyWMNebzLkdu/j/dwTcrl2hd3u
t/n61pDHs5HXv5bXvzxaWRmO1da+EG1ufjo2YcIfe2fP/nnviSfe33/66V9b
fs45X1h5ySWfXnPVVVesu/nmCzf8v//3vg133nnalvvuW7DxoYem7Vy8uGP7
0qWNyTVrqlQyWZpUyp3uQ9nQiALAVL5C5v+NBYSF6repuPET/uYSjm6DhGYJ
MAc/4W/b4eg3SDi/AjBWkOPc7HNOLvXndHYAAACA0Y/Zn925/h4DAACCn/C7
Owjh0Rkg9CEAyBd+wuc1hLBwDRB+JgAAAAAAAAAAAAAAAABQ+Ay2oiwWy/Ul
JSV/ZqUVtavQW1Fy3ePxoBUFRiM5aUUZ+1B6I0r6UNXpPlQD28qOZ6fyOmaz
x7MLeb3v4fWey36YvYKPs0+63epWl0t92eFQ3+Jzww/YX7K/s9v3LXI4dj3n
cm1b4vVu7ior2xKpqtoaq6nZHq2r2xVvaBiINTfvjbW2Jns6O1XfpEmqf8oU
1Z9uRfXNnq11oQbl670zZqieqVNVYsIEFW9rU7GmJsXrU1E+F+kNpiEdpEM1
ovQmlLH9ZFRuT7eYBh+nP1b6TYZGVMhmUyGrdb/SeuL7tI4TjyvG45Nxxmpr
U1ZVpXpWsl5eT0T6T/y8cEmJCunqzSi5T5a66VaUjGVIh0rmQG9Rybr1XtZB
WlH6fmnXq6u1XpQ2n7KUscq6+HEhtzsZstv3sDu67fatvO3XQ17vqsi4cfFI
dfWSaGPjM7HOzj8lpk59uGfBggf6Fi78Zv9ZZ93xyoUXfmb15Zd/fPX111+8
7rbbzlkXCJy+8VvfOuHNBx+cueXXv56wfdmypmRvb43atGmcUsqTTCadvLQb
+1BoRAFgCnPY58j8v6uAsJD9Ho1O/IS/t4TFY5AObJWIABQyfsLft8PiMUho
QgEw1jH7PDQS5zUAAAAAZId8DzD7szvX+nM5QQCAUYmf8Hs7COHhDRAAwEz8
hM9rCGFhGCD8XAAAAAAAAAAAAAAAAACgcNFbUTOcTucn3W73Ew6HY01JScmA
zWYrqlaU1+sdbEXxeNGKAsXMAa0ofr+v4dsGqqqqBo/F4Y6LioxGlN6HqmJr
+Tn1bDPbyc+bzM5ij2NPYd/Nvp+90OdTH/N61XXsZ/kYC7jd6ttOp/q+w6F+
ZrerR/nc8Dgvn+Tbgi5X8p8ez96Xxo3bHaqs3Bmprd0Va2gYiDc37423tiYT
7e2qh+3t6FC948ervokTVe/kyap36lTVO3261oXS5Ms9U6aoHr4/wY/l56tY
XZ2KSm9J7yLpfShjI+ogjaTBTlS6+xTmfQhL9ylTuV009qPSjahIuhEV1htR
Fkuq70SUki9L00lrMUknSvpQDQ0q3tSkjT8uPabq6tT4ZSyyPr0Vpa9DX480
o+Q+MbMVJfuud6JkPsQsmlERQytKLmuPlV6UNKJ4Gefrcb49xvsbstv3ddts
0ol6M+R2rw6XlkYiNTX/ira2LopPnvzrnnnzfth78sn/ueI97wm8cu65n33l
kks+sfLKKy9be+ONH1x/++3vfv2uu07a9MADs7f+9rcTdzz7bEuyv79Wbd5c
nkwmvUopl6EPNdiIMvsgA2AMcyOZ/3cUEBaD36exhZ/wt5Yw/wYJnRIw9vAT
/sYd5t9gWj/hPAsA2E+AzD8/jYQAAAAAyA75jmD253auDeR0hgAAYw0/4Xd2
EMKhBggAUGj4CX/bACHMvwECAAAAAAAAAAAAAAAAAAoPvRU1zefzXVdeXv5/
Xq/3VYvFsrvQWlHG7epj4bFqrSiXy4VWFBhNDGlFsYv4+FzD1wfkWJT3Pl8f
PC7kNv041VtRFXy79KFq0n2oJraDHz+JncHOZ09iT2fPZs9nL+PHXMt+hr2D
1/8NPr7u93jUT10u9WunUz3mcKgn7Hb1NC//zrf9i+97iZ+3tLw82V1Tsy/a
0LA33ty8L9HWpvWh+jo7Vd/48Vojqkd3wgStB6WbEPlx0pTS+1AxvQ+ld5/0
PtThGlHpxw82kgzdp3C6+xTi8WtK/0l6TNKCkvsM/ajBRpQ8Tm9EEQ2vdJ1k
XDxmrRPV0qLivP+yP4nWVhVvbNTaTLI/WrNKtinrzGxO6a0oWZ8uj0Geo+1X
ZitKNLai9D6U3ogyzoP0sqQ5JfPGj43xc2L8uBjfFpN9ttuTvB+7uh2OjSGf
rz9aW/tSvLNzcWLWrIf7TzrpvhXvfe9XV5x77m2vXHzx9asuv/xjr33qU//x
+q23vvf1u+46ZfP3vjf3jYcfnrLj6afb3n7xxXq1ZUtF8o03StN9KAdrQx8K
gIKhhf0Dmf+3ExAWiz8iIPhp6N9Zima/NrC4DNKBLSgRADA8fsJ/lwaPziCh
vQcAODLkfGH2uWsk9OdwjgAAAIDRip/M/8weKQEAYCTwE/6tBMKxapDQhwCg
WPATOlIQwpE1QAAAAAAAAABQnMh/01nPtrIT2GnsXPYEdgE7i53MtrONrNuU
UQIAAAAAgCNFfs7zsVM9Hs9V5eXlj/Ky32Kx7CqEVpRu5nb1sUgvh8e7m0Ur
CowmBltR/J4ebEXxe35Ab6Tx+1xrRUkXqrqqStVUV6tqPlar+Nio5sfU8rHR
wPe38uUJvJzOzuPbTmT97JnseewlfP/HeR038vO+wN7Dx/q9vPwJ3/4I3/9H
3s4it1s97XKp59jn2X/z9aV8Xxc/JsTbjNTWap2kREuL6m1vV72dnVofqle6
UGyCL2tKE6qjY39HqblZxfl5MXm+sQ9lbEMZG1EH60MN14mSPpJ0oqT7JH0m
aUNJ80mUTpOudJuM3ShZph8/2HQydp0ylb6T9JykFdXYmOpEyb5KA0v2na9r
+8ivj9Zy4jFp65c2lHiwTpTIj5POlbb/0oPSe1G6cp1vj4iZjaiMuYjKGMV0
N0rGEXI6pRG1r9ti2c3LzWGvd3m0sfFfiWnT/tS/cOEPV7z//XevuvTSm1d/
/ONXrbvxxgtfu+WW920IBBa+8Y1vLNj40EPTdi5e3PF2LNaQXLOmKplMlrJu
9KEAKFguZDeR+X8vAWEx+XMCh8JP6JjAlEFCnwSAfOInnIPHukHCORcAkBvM
Pp+N5HkSAAAAAIdGvk+Y/Zk9UvpzN00AAJAVfsLv6SAcCwYIAFDM+AntRwhh
7gwQAAAAAAAAABQe5exp7A3sD9kn2GXsOjq67z7y36BF2b+yD7GfpFRfCgAA
AAAAFA7S8fCynW63+8LS0tLvO53Ol0pKSt4u1FaUUWlFeb1etKLAaGOwFcXH
5WArit/zA9KGKuX3vc/rVWXpVlQNH6N1VVWqno/JRj5OWvj2Dn7MVF7OYU9g
F/L19/BzzmUvYq/k65/i22/j59/Fx/d3+fk/qq5Wj9TUqD/y5Sf4tqd5Xc/x
457nx/+bXcouY7v5eWHpOvF247W1qqexUfUYOlE9eiNK70TxbdJQivNj4vzY
WH29ivF2YtI70vtQ0oI6mj5UhoN9JI9HhV2uVJdJOkzD9Z70DpT0o6QLJY/T
Tbecsm5F8b4MtqJk/ydP1pT9l/2O1dVpbSet02ToVx1UvR3lcGj7os2F9KJk
vmQ9vDxoI0r2X1e2l+5EaZ0qlysZcjr3ddvte6UR1U20g/djC19ezetbEp84
8fHlp5324Krzz//ymmuu+cRrt956wRt33/2ujd/5zgnrH3xw5pbf/358cunS
RrV2bXUymSxTSnl46eSl3diHQiMKgILii2T+30fAAx1gt7Nb05fNHg880P8l
cDT4Cf9dxGg0SOiSAFAs+AktqdEizr0AgJFEzi1mn+dGUn/OZgoAAAAYnZj9
WT3S36UAAKAQ8BP+vQTC0WiAAACjET8VR0cqmOW+mD1OCMeCAQIAAAAAAAAA
85nPfpNdTvn7PrSZ/TN7SR72DwAAAAAAHB4bW+F2u08sLS29yeFw/Iqv99ls
tl1lZWXJQm5F8XgHW1E8frSiwGhhaCvK5VrE7/U1VZWVA9VVVaqCj70K6bix
NXwM1LNNbLvPpyaxs/jy8XzfqewZfPkc9kKvV32MvZ69hQ3w477Ftz/Ix/Yv
q6vV72tr1V/q69XfGhrUc3V16vmaGvUSH/sv87aW8Xq62bD0mPi4i/Fz4vyc
hN6Jam1VPe3tWhNKa0PpfaiODhXn++LNzSrG643x42M8fmkdad0jWd9wfaij
aETp6xvSipImk/SW9O6TSMP0nozNKH1p1Hhfxv3SfNJaTLxP0sCSLpQ2DxMn
qsSkSal5kP2XVpTsu/Sd0uNLt5tS4xQdjv0NKb1ZJevnx0jzSeZFa0PpHqwP
pTei0p0ofTvdTmcyZLfvDVmtA7wfO7qI3mI3squ7S0q6w6WlT8ZnzPjR6rPP
vmPttddete6OO87e+MADx2994onJO/7975Zt/f21avPm8mQy6TX0oWzoQwFQ
sMjPd9JuN/vvIka7e9l+SrXyf8zeSakOv/ze8z2U+t1rG6Ua/dJntR/i9fKx
NWwLO4mdzS5kP8zexH6D/QX7FKX6/JsKYP9Hs785yGsFjh4/Fc5/ExGkoR2V
4TT7PZjv+TDOiZ/w39cDMFrxU2G2pLLB7DHm4xzsJ5x/AQD5wexzXz7OrQAA
AAAYHvnuYfZn9Ujrz9VkAQDACOGnwvo3k0wDWVhoY4YwnwYJADCW8FPhdKSy
Of/4TRwfhGPRAAEAAAAAAABA/rmFXULmfyeSRtWtLP5bfgAAAAAAc7G43e7G
srKyM+12+1f4+rM2m209Xx9AKwqAvFMi72E+xmZ53e4b2EXjSkvX1FRWDtRV
Vak6PvYa+P3fxMdEOx8DE7xeNc3jUXPYd7CnSx+K77+A77+ML1/LfsbnU3ew
3+DH/jf7M/ZRvv//+Ph+qq5OPdfQoP7V1KReamlRy5qbVTdfD9XUqDDfr3WQ
pA/FlxPSiOLbE/X1KtHYqBKtrSohnaiOjkHjbW1aMynG90sjKcbPicp6eNxa
00nvQRk90jZUZifKoLEXJZ0krbWU7jGF7HYVslqHtp+MkqEfldmMEuW50nCS
npN0nRyOVCuK9y3G8yJNLGlDaXPA8yKtLG0eeL6klRXV5yI9r9qY9baVdKOk
F5VuRYWG6UUd0ITKbEMZlXGl91/WG7LZ9nZbLLu6S0re5n18k/dxDZvoslhe
6nI4FvPYftp//PFfWnXppR9bf+edZ2z+5S/n7Fi6tE2tXVudTCZLlVKujD6U
BX0oAAqW6exLZP7v/UaTG9i/sfex11Kq4dSa7QsyglSwJ7NXs99hF7Oryfz5
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
Yhm8HBalC2W8T9pOIl/W+lG8DzI+mT+tXzVxouqRdpW0ongsMia5LONMyDhk
DLx9bX5k3XoripXtRXhuonxfjOclps+N9K1KS5Oh0tJ9YZ9vT7fHszvkdO7o
ttm2dZWUbOLnru0iSoTc7udi48f/cuUZZ3x11VVXXbf2C184b8M3vnHqm7/4
xYwd//xnW7Krq1YtXz5OKeVCJwqAosHG/oHM/z1eoSvdo2vZiqOb5jGLlz2X
vY9dQea/jvn2pWOfQpAlAcr/6+vPYlxmvwdzaSCL/QUAAB0/5f88lQ1mn0tx
XgYAFDt+Mv/8Z4b+Y586AAAAYFQg30PM/lzOt8GczBwAAJhPIZ47g3keV77n
QDdAB+9IHI2BYRzNczmWldcWADD6yfc5PJjFmPx5HlOhGKShn91+Kp7fDftp
6M8J+X5fjYSBjH0MFMCYCmUuAAAAAAAAAOBIWErmf685GgdY+wjMBwAAAAAA
ODgHtKLcbvdOvn5AK0rvQUm3qaKi4oBOVC5bUcZ1oRUFigmV0YdirREix/NE
7l6ishhR1TKippeIxkeJpr9MdFyI6LRuorOetlgu+4XF8sVv2+2/ucPp7P2i
3f7Wly2Wfd+y2dQPnU71CPsH9gmHQ/2Vl8+6XOp5t1u9xMfEUj4+uvi4DFVW
qki68xSXJlSGcttg/6mhYbABFZPn8fGm9Z2kw8THnDSjpMOkNaSkO6V3ouS+
4VpReh9K2lDGPpTeiEr3oULSYZImkrG5xJe1zhI/Rp4XOVQryqiMRcYk+8z7
kmhrUz16m2n27FQvav781DJ9Wes08f3ScJJmVKy5WWtqyf7KvmvjlXFmtqAy
JRoq3yatJ3m+zIPMV6yxUSXa24f2ongcMrbBVhS/Dtq2Zb5kboytKN5+hG+T
VpQ2L15vMuz17uP52RPm8yC7g69vC3s8W0JO50Z+/loeQx+PfVm33R6Ml5f/
b8/MmV9fdd551756661nv/GDHxy3JRicsG358rqkUmXpRpSdtZh97AAAsqKa
fYbM/x1eoSq/W7yXnXaU8wsO5CT2G2yCzH9982FXbqYNZIGf8v/6+rMYl9nv
wXzvLwAA6Pgp/+epbDD7XJpLA1nuMwAA5BI595h9/jPDYC4mDwAAABgFmP2Z
bJb+HMwdAACYTSF+hwrmeVwjaYAK5/PCT6OrEzHWDRAAYLQjx3k+zyvBLMbk
z/OY8m2Q9jeh/FnMR7Hjp+L+ucCfsT+BAhiTGQYIAAAAAAAAAI6ca8n87zPH
4rtyPyUAAAAAAOAQDGlFud3ulS6XaycvtS7TcA0n6TZVVlZqvajh2k75akXx
eNeyg60oHg9aUcAsBvtQAUMf6hUiFy99bCVfro8TtS8lmtpNNK+L6JQlRO8N
EZ3H91/K16/7h8XypcdLSn74C4vluQdtttd+YLXu/ElJSfJRq1U9brerpxwO
9Sz7T/ZFp1O95HKpl/lY7fZ6VVi6SXxMStspXlOTakNJO4mNi3ojSpQ2lMiP
k8fH+HnSNtIaSdJzki4Rr1NaTNKP0lpMeiNqmE7UkD6UjEWaR3onShpRPF6t
vWTsQ2X2luQy3y6Pi/BzpIsUlV7U4VpRMhZjL6qxUcVbW7UGk9aMmjpV9c6Y
oXpnzUq1oo47TvUtWKA1m+R2rdc0fryKtbSoKM+NrEfbB56HwXESHV55nMWS
6l3J+KUVxePS5jk9pnhnp+qZPFn1Tp+ueqdN08YnbStpXGnb1VtR0qeijP6U
jMftTvK87gl5PLv5sW/z5a1hr/dN3tZrkbKyV8KlpXF+vZaEKiqC4erqP0Qa
G3/UO2nS3f3vfOd1Kz/xife/8b3vzd/5wgsd6q23qlUy6dUbUWyJaPZBBAA4
LBMo1bEx+3d3hegq9vNsxVHPLsiG49ivsmEy/zUfKaM5my1wOPyU/9fXn8W4
zH4P5lIAADgS/FSY5ymzz6W5NJDlPgMAQC4x+9xnpgAAAMBYR76DmP15bJbB
HMwfAACYjZzLCu28mc8xjbTFQIDG9ud5MRsc5vUEAIwe8n1uzuac4s/zmPKx
zwEaG12obAhQ8bWjAgfZD7PHZcZ7GQAAAAAAAACOhOfJ/O8yx+Lncj8lAAAA
AADgEHhLS0u1VpTL5fq9w+FYabfbdzqdTq3LJI2mzIaTNKKqqqq0++Qxej8q
V62oQ/Wn9F6U1+sdbEWxaEUBU1AZfaglRPZXiFxdfFyFiCrYuihRWzfR5AjR
nJeJTmLP4MsfYC/m+69hP8v337mspOR7/y4pefi5kpKnF1ssiT9ZLFvYPX+x
WJJPW63qObtd/Yt9yeFQS9llbLd0mNxuFfV4VIyPizgfh3E+NhM1NVobKp7u
REmLyNiIivL90lXS+kp8XGmNJ+k6SedIukSylGYUr1e7T1pQot6FShvVG1HS
VhJlHXofSp4vfShpHx2sD5WptJb4sRF+rtaKkl6VbOdwvSgZlyylGSXtK33/
Gxu1FlPP+PGpRtOMGapvzhzVN3duqhU1a5bqnTlT60VJx0maTvJ82Setb2Vs
Nh1MaTnJuMV060prbUnnSjpWlZWpuZa5l9dDOlbSjOIxJdrbVbypSRuv7IM8
T5urjO3KekMOxz6e1wF+zI6Q2/0Wv14beN5XR8rLe/j5L8eamp6Lt7f/OdbZ
+avE9OkP9ixY8PXehQtv6zv77KtXXH75uevuvPOEnf/3f51v9fbWJPd3otCH
AqB4mMauJPN/b1doxtirjn5awTEwh1J/wzPaulG9uZwkcFjy/fr6C3BMIykA
ABwphXieMvtcmkv9We4zAADkigCZf+4z08CxTyEAAABQ1Jj9WWy2AABQ7AQp
f+fMYAGOCZ8TQ/FT8TUiIH43AcBoxU/5PZcEC3BMOH+aS4CK4/f/B3sdi2Hs
uTR4kHkAAAAAAAAAgExqyPzvMMfqD3I+KwAAAAAA4FB4HQ7HYCvKbrevtFgs
O3mpNZmkC6V3oA7XihrpXpS+fr0V5fP51rJaK4rvQysKjDgq3YbSfZTIyktb
kMi1lsizhGjcy/y9LEzUEiWamCCaFSM6sYvodL7t/eyH+fYru4luClksd3SX
lHyb/VGopOQ3vHzyZYvlxX9bLL3PW60bnrNad7J7/2G1qhdtNrWEj8mXHQ7V
Jf0l6RGxETbmcqmY261iXq+K8fERq6xUserqVBdKb0SlO1FaI4qPXa1fJPIx
pXWfpO8k69SbTqI0o6T3JN0njyclbyNicPD2Q/WhpHt0qD5UhnpvScYUOVwr
Su9WSa9KV3+8dJr4XCX7rTWjWlv3N6OmTVO906dr7ShZym3x9nZtviL8HG3f
9FaU3rcaxrDeiZIxi+k5i+itKBmLjEMaVqK8NunxxJubVbyhQXuttF6XzKPM
nd7UkrnQ5evdNtvebodje7fTuSnk8bzK646Gq6peiDY2LubxP9q7YMEP+089
9T+Xv/e9X15+zjmfXXnRRVev/tjHLnrt+uvPXHfHHSdsuO++Sdsee6zu9ddf
50mKOJRSFrOPJwBA1nRQql9j9u/sCkmZj2uOZVJBTjmV/T67mcx/bxyrr+R4
bsChyffr6y/AMY2UwSz2FQAAMsn3uaoQx2T2/gIAQC6RnwnNPveZafDYpxAA
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
OaQVJW0rfR3GMetjyNxuZjtK71Hp6+fzzGBTS14DnqOeCRNUz5QpKSdNUomO
jlQvqrJy/5ylG17aNvTxp3tUg80ouSzjlr6U3onS+1AGpRMVJa0TlWS383rX
8PtpKc/Db+NVVV+LNzZeGZsx44xXzzln1mvXX9+W/PnPq5LxeKlK9aEcxj4U
GlEAFCW/JfN/R2e2P6DUz6hg9HIu+2cy/72W6e6R3GlwAH7K7+vrz2JMZr8H
87mvAACQiZ/ye67KBrPPp7kykOX+AgBALpBzjtnnvUITAAAAGCvg54ADDRzT
jAIAgLnk61wZzHI8wTyOaSQdqwSo8H9W0D+3C32cudxXAEBxEqT8nS+CWYzH
n8fx4PxY3Mj8mv0aZ/NaF9I48X4HAAAAAAAA5IOryPzvKMfq8zmfFQAAAAAA
cDi0VhR7QCtKukzV1dWD3Sa92SSXS0tLB6+Lue5FGZtU+jb029GKAkeLGqYP
FSFy8GXXP4hKXySqWkrUGCLq5Nun8XJBN9GpXURnhon+g5cf5evXd1sst3WX
lHwtZLX+d5fV+nC3zfZ/YYfj2ZDT+XLI7U6EPJ6VYZ9vXai0VPpQWyMVFdsj
lZW7YjU1A5GamlQfqqZGJUTpRNXVDTai4tJxamlJyZdjfJ+0i7RelNebahwZ
20h6KyrdKApnNJYGe1GGVpSsO9HerhKdnVr3SOtFyXakwyQdI+kvyfrpCBtR
2fSh9FaTrjSW0g52olyuoZ2l9PhlDmQZMfai0s2lA1pRlNGMSqv1mPQx6W0t
aUXxurX5kT6XvA48JwlpRE2bpvpmz1Z9c+Zo9s6cqXqmTk31omTOZDy8jpA+
hvRrEfn/7L0HmBxXma9/pvN094SeKM2MNMo5G0dSGQzsYoKJxosvGFjAZBaW
dAmNzcKS7rKYBUxcuPzXgBYwccHLXZpdnC1rpruq02gkIclykm3JshUtdf2/
73SdpqY1kmo03VU10u99nt9T3dUVvhP6lHqex6/p2obVFumGUo4ofm/zRE1w
ZVlhV5Rerf/oaEvLY3ROke71+9KSJTeOb9jw3rGLL37RtssvX/vIu941ZH7p
S52VSiVq80PBEQXAzObzwvu/z3mZHZRXTLsXwUxiKeWfKAeF9/NPBbiHJtwd
W81BTV7PPzfbCgAA9WjCf89cr9dTrMsAgJmI12ueH6NNp0MBAACAGURaeP/c
9Vsy0+pRAADwFr+tlRkXa2pmznXSwt//ZrDPRz/X2YikTzpKAAC/4+b6ZF8X
T4bmYj1YG88O3JzDZzremg/q87oPAAAAAAAAAOcOXxXe/z6Zbr7a8F4BAAAA
AACn46SuKPYysSuKt3Y3lN0VlUqlGu6KmswdZfdHKVcU1bCb9klXFGUt1QJX
FDgBs84PRQlSwhUhooYQye1CdN4lxKwRIeblhFg2KsR6XYinF4R4Hr2/go75
G9q+VQ8E/n60peVTIy0tN2SDwe/r4fDNuUjkD0Y0encuFivo8fg2I5HYrbe1
7THa2/cVOjuf0Lu6Dud7eo7m+/qO5fv7K0X2QnHYEUXfrVJ3t1nk0HvpKJo9
u+opGhqSriK5pfcFOkf6oiwvUc0zpPxIvLW5ovTJXFH03Sl0dZnFWbPMEnuQ
5s83SwsXVjNvnrx3nr7P0r8UiVQdRpO5l4TNDXWmfqiTZRJPlKpduqKovjy1
QW7ZncXOKPZnsX9pMl+UvUbrtc7h+vh+fC++B12P+1h6uoaHqw4t9kQtW2Zu
WbPG3LJ+vbnlvPPMLRs2yNdjtK+8dKkcH9lnVEPOfn/l7uJ7sI+Kx0U5ovg9
H8t+rEk8Uar+LIXm4iF6v1vv6LiH7vejbZde+g87Xvay1+246qpnPPDOd87f
l053bc9kYpYnCn4oAGY+1wrv/zbnZX5IaZt2L4KZzAHh/Tw0m95KYEcT7o6t
5qAmr+cf5jEAwGv8tlZ5vZ66+QwCAIBGkBber3l+TGY6nQoAAADMILx+5vo1
2jT6FAAAvMRvv5kyLtbUzIC/kBbej8fpnt9+rrERSZ9yhAAAfsXNtSnjoB7N
xXqwLp5duDmXz3TM/VCj130AAAAAAAAAOPu5Q3j/22S6eVPDewUAAAAAAJyO
SV1R4XBYupm6u7trfiblhrK7orq6umr+KE4j3FDqWsoRpaLuy7VQjlB2U25J
JBJwRYEJmDY/VFqIwEYhgpuECI8JEd0tRHyrEB2jQvTRvrm0XbJZiLX3CnEx
5bm6EC8uBAKvyQcCbzICgb8bDQTSo8HgP+nB4HdyodBP9HD490Ykcocei+l6
PL5Vb2u7T+/oeNjo7NxbSKX2G11dhwq9vUfYD2X091fYAVWkSEeU8kPR94hT
oHnNziPpPmIXFDuj6LjCrFlVbxG7omgrHVJ0DT5G+p8sN5Judw2xm4g9RPxZ
a2vVt8S+KHYhKecS3YuvX6Lrsh9KOpE49JqdVOxhku4ldhqxy8jmWDohkzmi
zsQPVedTUnXnbY4rGe4n9kRRH8lQX8o+Y1cTHScdWXwdvje7oGzeqpz1XlcO
KzqO7yP9U3Qd7t+i8mctWmSWFi82y5ylS82xFSukG2ps3bpq2BVF2/Ly5dK5
VbD6rOaKElVPlc6+KHU/W1vlcaouWx+yw8qg8zg0B9kTdWxEiMezLS1baE79
YcuGDV/f/vKXv+++a699ya4PfWjtQ+n0LPMb34grT5TX3zkAwLR5gfD+73Je
5sPT70JwFnCz8H4umk1vJajHzbHVfFYP5jEAwI/4ba3yej3FugwAmGl4vd75
OdqZdysAAAAwI0gL75+3fk1mGv0KAABewuuXn9ZJt+rxQ1vPNdLC+7GZLOkZ
UGOj2wkAmBlowl/PLjfrwZp49sF9zvPMz+Oe9rg+N6Kdpg8AAAAAAAAAZzdH
hPe/S6ab9Q3vFQAAAAAAcDpqrijKBFcU+5l6enqkv4n9TPyeXVH8vt4Vxe8b
7Yri13ZXlPrM8kUdSSQSuylwRQFFzQ9lJUAJsR9qkxBx2raXhOjJCjF0rxCL
CkKsGhHignuEuJS2l+eEeJUhxDW5QODdeij00Vw4/PlsKPQNyo/p9W8pt2aj
0awei40ZicROvb39ISOVeszo6dmf7+09WOjrO5KfNetYYfbs48XZsyulWbPM
EjuienulI6pI35WaH4odRcqBZPmcDOVF4s/oWOmYsvmi2OUkfVHsJuLj2a2k
vEPK16S8RJYzSnqXEgkZ6Yui6xfYVTV7tvQclYaHZYpz5sh90kVFx+k2F5Vu
d0JN5odSPqSp+qFO54lS/WNzRXHt3AcF7gv2ZymHFnujqN9kv9A1ZP18Tb62
/frs0OK+4H6w9bHsB3ZmWZ4ouV24UEY6o5YtM8srVpjlVavMsdWrzTHaskeK
+02OB92z3hUlfVEtLdX+q/NW1frQ+pxj0Os8ncOhOVoZbWk5RNe8X0+lNheX
Lv3ptuc979O73vrW1+247rpnPvi1ry3Ye/PNnaZphrz+0gEAGsJiysPC+7/L
eZFdlL+afheCs4Rrhfdz0mx6K0E9bo6t5rN6MI8BAH4kI/y1Vnm9nmJdBgDM
JNLCmzWO7+vm8+NMkznzrgUAAABmBF49Y736N8hUo51xzwIAgHe49VvL6e8l
t+pp9nMLTA73jR/H2D5maR/Ug7kJAGA04d76kPFZPc2O5qC9oDnws8jPz0Kv
68P8BwAAAAAAADQLdix5/Xtkujna8F4BAAAAAABOqLmiWlpaaq6oUCgk/Uy9
vb0TXFHKDcXOpnp3VKNdUfW+KL6Xuje7oii7KXBFneOYJ/qhgoYQEdrGikK0
FYTopu1ATogFm4VYca8QT6M8i17/tS7Eyymvo7x9NBD4cDYY/MdsOPy10Wj0
pmw0+ms9EvmfXDS6WY9GS7T9c6619QE9kXjU6Oh4PN/dfTDf33+4MDj4VGHO
nOPsDSoNDprlgQGzzJ6ovj6zyF4myw91giOKvjPSbcT+omjUNCKR6pbeS5cR
+6XoWtIVxS4n3rIjib6T/Dkfp3xO7BySsTuj6nxRecvBVOB6uDZ1bXVddi7R
ZzVXFJ/P12EXlJVJ/VBn6oiq80Tpyms1mSfKcmjJPpk9u1rz3Ll/CfW7rJ/6
m9sgvVGqfzmWa0o6uOga0hFFbS7xmLEnat68qitKZf58s8gOLb42f07vpTuK
PVJLlkh/lDyG/Vp0Xd0ai3pXVC328WE3FDuiKIYtyitF16nk2tufKsye/Wh5
6dLi2IUX/n7rS1/6jfve9a733fe5z73oiR/9aNUTd9zRv2n37rhpmi1ef/8A
ANOGnW93Cu//LudF/ocye/pdCM4i5gvv56XZ9FaCejLCvbHVHNTj9fxrRDIO
2gkAACfDzXXZCV6vqViXAQAzibTwZp3j+2oe3Xuq0c6wbwEAAAC/49W/A0zr
/l4/450kc2ZdCwAAnsJrl5/WSLfqaWbSDtt6LsN95PU4nW7c/Fgj5icA5xaa
cG9tyPisnmZHc9Be0Dw04e9nodf1uREAAAAAAADAucebhPe/RaabOxveKwAA
AAAAwAnsiloaDoffGIvFbqbtDuEjV5TdF1XviqJ77qbcQoEr6hzDnMQPRQlX
hIgaQiQpXZRZI0LMywmxLCvEhlEhnkHvn0/vr6C8lvLWkUDgA7lg8FN6OHxD
LhL5fi4a/bnR2voHPRbblIvHC7lkcrueTN5vxON79Hh8X76t7UkjlTqc7+1l
lw/7oSrlefPMMc7wsDk2NGSWZs0yi/S9KbCXiP1ENteRjM0ZJd1I7Epib5Ll
XJK+KPY68fl2LxL7otiJ1NdXdSHVu6KEzUtkOaPYxSRdVPG4mWdfFHuY2FvV
3V31RVGt7E2S16T7GVZNNVeUqmuynKkfajJXFNfIfcHtru8vy6sl/VlUI9fM
/VHzO7HDibbS7WQ5r9inxU6oPIdfU/sKfB73p82/VeLrqLATSvmhlD+L+4dj
d3ZxrGOkn4r6k/s3x66o+rGwRecoNxS9VuHPaH5Wsi0tx+gaR/WursPF5cv3
jT/nOX/e/qpX3bnz7W//0QPXX//pvV//+jUP//znzzo0Ojrf3Lu30zTNCFxR
AJwV3CS8/5ucF/kFJdKA/gNnH9uE9/MTuEtGuDe2moN6vJ5/jUjGQTsBAOBk
pIW/nrler6lYlwEAMwmv1jnN4/tPJekz6lkAAADA//AzzsvfOxmP7j/VAADA
TMOt9V2t56djpqz3p0raYVuB/3xM9WPnt/owRwE493BrXcg4qEVzsZ5mB/gD
fh75+VmY8bC+ZifjoP0AAAAAAACAs4uvCu9/i0w3X294rwAAAAAAACewK2pZ
PB5/QyqV+lkikfhzIBA4FAwGpaOpp6fntK4o9b5Rrqh6ZxRf3+6l4lqoziP0
2W7afwsFrqhzAHOiH6ploxDBTZYfit7HR4ToHBeij/bNvVuIpfR+3b1CXJwV
4rmUl+hCvIa2f2sEAn83Egx+MhcOf0mPRL6bi0Z/asRivzfi8Tv1ZNLIt7WN
Gx0d9xmp1MNGd/feQiq1P9/ZeYj2HaV9x/I9PRX2FZWHhsyxuXOrnihKmf1B
7BeyvEvSc8SOI/Yf8Zbf0xzOd3dXP7c8UuwZqnmZeBuLSW+SdDqxz0l5itgT
xd4iPp/PY58TO5vYCzWZn4j28+d8HN9DXtNyMVGbqr4o+n7L69H7mieKHVTs
b5rMFdUIP5Q9fB9uB9dHtRmWE6rmiFKeKNWH3Cf9/VVX1IIFZnnxYrO8ZIlZ
XrrULC9aZJbmz686o9jnxH12ulCfTgj3Nfcxu6XYM8XjpMLOKfZQsW/KOl66
otixxf1G/VXvitKtGHWp+aGEOEY5OirEYcqBbCj0eGHOnD3bNG3Hrje+ceT+
j33s13v++Z9v2HvTTe/d/9vfvvTI5s1rnywUZldGRxOmaQbhigJgxvMO4f3f
47zI9xrQd+Dshf9G7PUcBe6SEe6NreagHq/nXyOSdtBOAAA4GbyG+OmZ6/Wa
inUZADBTcHP9Ptl6nvGwhkY/fwAAAICZhte/dzQPa5hKtDPoWwAA8BJeZ91Y
HzMO68m4VI8bzy7gDE34y8lUP36aD2rCPAXg3MWtNSHjoBbNxXqaHeAf+Hnk
52ehl/U1OxkH7QcAAAAAAACcPdwhvP8dMt28ueG9AgAAAAAAnBCnLGlra7u6
q6vrpkQiMaZcUexpUq4o+rzmilIeJ94qj1OzXFHqtboPXFHnHBP8UJRARojQ
mBDRihCtm4To2CxEb1aIIUOIRbRdPSrEhSNCXErbF+WEeBXlDblA4N3ZQOCj
2WDwC6Oh0LdGI5GNuVjsd/nW1tv01tacnkhsybe37zRSqYcKfX2P5gcG9hcG
Bg4WBwaOFGbPPpbv76+w46mYSpkl2pb7+szywID0RZXnzDFLlptIuoPoc4Pm
qXQfsQOptVW+lp4jdjOxh0iFfUTsaaLPpaOJo7xOdA3pc2I/EYcdVOx1outI
NxF7lk7liqJ9On2P+ThZA19TuZjYU6XCtdJ+eU32Ntk9Uc0M34PvVe+Jsjui
uC7+jGqT9bPnivqM+5q9UNIVxZ6o5cvN8rJlVW/UokVmeeHCqjdq3jzplaq5
oywfVIEze3Y1s2aZRe5fdkHx+Ng9Xnx/DtfD+3nMlCuKr8fn03n8uew7bhf3
OY1JvR+KnVHsh8pV/VBPUQ5n2Q8lxOM0V/fSnH2I5ujOwty5pa2XX37P7g99
6D8e+Zd/+cZjGzd++OAf//jqx3X9ksrevfPNvXs7zU2bwvBEATDjWSe8/1uc
F9nciM4DZzVXCO/nKXCXtHBvbDUH9Xg9/xqRtIN2AgDAydCEv565Xq+pWJcB
ADMFL9c5heZxHU6jTbFvAQAAAL/Dvzn88Hsn42EdTpOZcu8CAIC3aMJf6+NM
WOtPF81hW8FE+Jnv9dippH1eXzPbCQDwF26tBxkHtWgu1tPsAH+hCX8/C9Me
1ueH9gMAAAAAAADODg4L73+DTDfnNbxXAAAAAACAE9gVNT+ZTL68q6vra4lE
YlNLS8sTyhXV3d09qSuK3yuHk/I6NdoVdbLwvaleuKLOYsw6PxQlaAgRoW2s
KETbXUJ03yvEQE6IBSNCrKTt07JCPIvy16NCvIK2r6fj3zEaCHwk29LyjyPB
4NdHQ6Gb9HD413ok8j+5WGxETyTK+ba2HfnOzgfyXV2P5vv6Hmc/VGHevCPF
hQufohwvLVhgloeHpReqxI4imu9FmoNF+h4Ue3ulY6jIriGKdDnRfvYGSe8S
e5/YhaR8SOyK4mPZMcT+Io7yS6nzlBeJ3VLsJ0qlqr4odkTR67zloJLXZteS
3RVl90Xxa9ovP2dXlOVjyk/iY1JOK+k6csMRpcL9wvfk9iofk70m3s91c23W
VraB+2T2bLNE4yLHh/1Q7Imy+6IWL5afFekY6Ymi8StaXigZy72lfF3SD0V9
K/tH3Zf9Whz7fel46amisSupa/N12Q/GdfPx1Id56ve85Yui8ajQfDzOfiia
m0fYD0XbJ9gPRZ89RNlFr8dpm8tFIncUFiz43bZXvOKHD3/mMzfs27jxw0/c
eutrD5bLz6ocPrykYpq9lUql1TTNgNffUQDAtLlVeP+3OLdzQ0N6DpzttArv
5ypwl7Rwb2w1B/V4Pf8akbSDdgIAwMnQhL+euV6vqViXAQAzAV5n/LLGZTys
xWkyU+pdAAAAwP94+fzVbHVoHtZxpjUDAIDf0YS/fid5+czBc8Af+GUOpCep
Le2DutxoJwDAP7i1JmYc1KK5VIsbAf6En0l+fRZ6VZsb0Ry0HwAAAAAAADCz
WSe8/+0x3RyjtDS6YwAAAAAAgCNClO5kMvn0VCr1gVgs9pOWlpZtwWDwaHt7
e0W5otgDVe+KUvvU5254ouCKOnsxbX6otBCBjUIENwkRrggRNYRIUroKQswu
CjHvXiGWZ4XYQPueoQvx/LwQVxiBwGspbx0JBD442tLyD9lg8CujodAPcqHQ
L3KRSEaPRu/JxuNFPZncrnd03G90dT2S7+nZV+zre7Iwe/bhwpw5TxUXLDhe
Wrq0MrZihbll+XJzy5Il5tj8+WZ5cNAssq+JXUaJRHXL7if2N3HodX4yR5Tl
Q+L9eTpfeoYWLpQuo/KiRWaJri19UeyZousY7IJi55ByOrG/iK/NW+WSUtdn
31IwKF1R0hdVH/ZEsfvJur88l6+ronxM6nr1nih+P1ka4Yni6/A92a2kXFF2
RxTXxB6pukhvE/VFgT1dNCbSF6X6c+nSarhf2ROlXFzsclJuKDqPQ+Mux4Md
XbWxU34ovo+9var/LNeX9ETRuPE9ZObNMwtUi3ROWfODr5ELhyu5YPBYNhA4
QjlEeYLm5b5sS8seym69pWUrjZ9O/XBnLh7/L6O9/eb84OD3tlx44Zd2vvWt
n3jsW9965xN33PGaQ7t2Pady5MjKSqUyu2KabaZphin4/QzAzOZzwvu/xbmd
rzWk58C5wu3C2/kK3EUT7o2t5qAer9fLRiTtoJ0AAHAyNOGvZ67XayrWZQDA
TIDXGb+scZqHtUwlmvPuBQAAAHyNJrx9ptbj9TPeSTJOOxcAAHyAJvy1NmZc
qsfNZxeYOmnh/TiaYvK/u2o+qMuNdgIA/EFGuLMOZBzUorlUix/aCryDn0l+
fRZ6VZsb0Ry0HwAAAAAAADBzeaPw/nfHdHNPw3sFAAAAAABMhUBXV9dQZ2fn
5dFo9FP0/r+DweCD7e3tR+tdUalUaoIryi0/FMfupaL7wxV1FmDa/FBWAuyH
yggRGxUiMSJEZ06I/nuFGM4KsdQQYp0uxCW07zJ6/RIjELiK8mYjFHqfHg5/
cjQc/mc9FPpuNhT6Gb3/f7lo9K5ca6uRTSa36h0du42urofzvb17C7NmPVGY
PftQYXDwaGHOnOPF4eFKef58c2zRIumIGl+1ytyycqU5xu4h9jkNDEi3kHQZ
sTuInUI2t5B0GdX5oWoeJDonr/xGc+ea5SVLzPKyZdJvJJ1Dc+ZIB5F0F7F3
ir1QlhtKRXqU7B4qdhixC8qeYNDMceh1TvmY6uqYELuTSV1TRbWhPvbjnHqh
7DXaXVF8Pe5De230fkIb1X3sbin2XHV1Sf9TzRfFzqaFC2vupiL3KY0Z96v0
Q9ndUJYfSnq5bH07wcFlr5nvTXXJMeR70v3YRyXHkeZHiUP3Zi9Vvq/P1FOp
Cl33GJ1zhK53IBeJPJ6NRB6lMbmfsp3mZIE+u0dva/uj0dPzy8Lw8A+Ky5f/
y9j55396/LLLPrT96qvftvuTn3ztk7/5zYuO7tz5rCNHjqypVCpzTNPspG2U
tkG4ogCY0bxEeP93OLfzjYb0HDiX+KTwds5Gmt5CYEcT7o2t5qAer9dMt9oJ
AACnwq31yk+1YF0GAMxk/LbGeb3uOknGaecCAAAAPict/PU89bKe6f4bBgAA
/IqffiNlXKqnmQGNwS/P/PQktWni7Jirp2snAMB73FprMg5q0VyqxQ9tBd7C
zyQv5obm49rwvQAAAAAAAABMh38R3v/umG7w34wBAAAAAHhMb29vsqenZ0M0
Gn0bvb05GAxub2trO9jV1SUdTXZXlOVq8sQVpWpRrijaD1fUzOMEPxQlNCZE
dJMQ8a1CdGymKXm3EHMMIRbdK8Qa2n/RqBDP0YV4UT4QeHUxEHhDPhR6jxGJ
fFyPRr+Ya2391mgs9u+0vcVobb2dktPj8S1Ge/suI5V6KN/T8xj7ofKDg4cK
c+ceLQ4PHyvNm3ecvULl4WFzTIV9UUuWmGPsiaKwD4jdQNLlRHNfuoxsLiHp
ZgoE5FbuV14mdhDRXJVeou5us8Dp65MOI+mHYqcRXZf9Quyh4s8KyhXF5ylX
FHuMLK/TBIeS3cVkdzzVu574HOVjsof3Wa4ruwuq5sCyO5y4BuVT4vbbnVGn
c0PVO6LqvE+63RNlv75yYXG/cpSziWtk9xb1kXRAzZ4tfVGyX+fOlVt+Lx1R
1Kd5dkTxGFj9WvNDKUeUvW02V1RtXDl8b74vO6rsvq/ly80yzxHOihVmafFi
Mz93boVqeoqOO0Tjv5/u8zDVu5PaWdY7O0dyXV1/0vv7f5OfN++HpRUrvl6+
6KLPbn3BCz6y9cor37njb//2ml3vfe8r7//4x//6sW9+85lP3n77hsN79iyt
HDzInqgUJcaeKK+/vACAadFF2SG8/zucm/lJQ3oOnGtcLLydt4nmNxHY0IR7
Y6s5qMfrddOtdgIAwKlwa73yUy1YlwEAM5W08HaNm4yMxzU18jkEAAAA+B0v
n6XpSerRPK5pOrUDAIBfcWNdzDisJeNSPc0MaCz8TPV6TE/2XD8b5quTdgIA
vMOtdSbjoBbNpVr80FbgPfxM8mJ+aD6urdlJO2g7AAAAAAAAYGZyu/D+N8d0
89aG9woAAAAAAJgSQ0NDrQMDA0tisdjV9PZHgUBgazKZlK4o9jQpV5TN1dQ0
V5S6rrpfvSvKOgauqBmGeaIfKmgIEdkpROuYEO0FIbpHhBjMCbGAtis3C3E+
5dmUF+pCvMIIBF5fCIXeoUci/1uPRj+rx2I35uLxH+rJ5G/0trY/UUb0jo5y
vqNjh5FKPZjv6XnUmDVrf2Fw8GBhePhIccGCp0qLFx9nz8/Y4sXm2MKF5hi7
oubMMctDQ2ZpYMAs8Zb3LVokw6/ZR8S+IXYUsUtIeoRaWkyqsxp+zT4h9iyx
34ndROwxYl8Rp7+/6jXq6ZHvi+w3Yj9U/WeTuKKUx2iCJ6rOByX9Tlb0utS8
T05C92E3lXRUcQ1cD7uWqD7lXJKOJfY6sdOpvqbJPFF2lxUfa8VQTi27i0r5
otgVxeexIyoQqMZyRcnzLFcU1yT7T/Upp94RxX4ouxdKeanUffkz5Y/i8eU2
0X1qY8zhOrhm7h/qE/Z7lWjulJctkz6xLWvWmOOUsVWrzOKSJcdonh0sDg8/
RvNmV76/v2D09d2ZHxz8z9KiRRvH1qz55vgll3xh2wtf+LFtV175nu1vfvMb
73v/+1/9wHXXXb7nc5+79JEvfenCR2+8cfWhH/940YFsdmj//ff3ViqVdkoU
nigAzgpuFN7/Dc7N3EOJNaTnwLnIYeHd3O10oX1gIm6NreajWrxuJwAAnIqM
cGe9coLXa6pb7QQAgDPFj2uc5oO6nEQ7ffcCAAAAviYtvH2Wpk9SV8bjupwk
46SDAQDAJ/hpXZwJazzWf/fhfxN4Pbbpk9Q20+dsfbSTtBMA4A1urX9Onl+a
S7U0O2kHbQX+wK35fybPQq9q80PbAQAAAAAAADMPL/+7mUbl/Ib3CgAAAAAA
mBLDw8Ox/v7++bFY7MpgMPhvoVBoS1tb2wG7K0r5mtxwRdW7qez35y3d/whl
N+UWClxRPsW0+aHSQgQ2ChHcJESY3sduFaLNEKKrIMTsUSHm60Isv1eI8+jz
Z9L7F4wI8bKcEFfT67dlA4EPjgaDn85FIv+SjUZ/YMTjv8y3tf3R6Oy8N59K
FfM9PdvzfX335/v7H8kPDj5enDPnQHF4+HBx4cKnikuXHi8tX15hr884Z8UK
cwt7ftj3M3eudAzVnE0ceq3cQ/yevU2G5RDS7Q4hYXmi2GXEHiP2LHV3Vx1Q
7IIaHKyG3/N12b1kD7uMrBR4W+eJytv8SSd4mdgRZfmdJniP7D4k/kxF+aBs
Xin7+coPxXVwrbL9c+aYRe6f4WH5WraJ+0M5mPhe9c4odjzV+6HY/cSpvzfX
yPfl9io3lvJQ8bnKN2VvrzrHcllJx5ZybdX5tk7aH3ZXFN+Xr2Udr/O92QdG
97WPsWwT35/7iOcH9UdpwQKzvHSpOb5qlbl13TpzbN26SnnVqkPlZcv2lBcv
Hqe5t6mwePHvtqxc+YMtF1305a0veMF1O6666n27r732b+/74Adf88B11734
wS9+8bkPfuUrFz/2ne+sffyHP1xy8Je/nPvEHXf0m7lc6iHDSFqOqBAlQGnx
+vsMAJgWlwrv//7mZvZQljWk58C5ys3Cu/nb60L7wETcGlvNR7U0MwAAMF0y
wj/rlddrKtZlAICfSQtv17f0KWpz61kynWRO18EAAACAz/H6eXsyNI/rchrt
1N0LAAC+wY313unvI6+fPW61E0wdTXg/P9InqS3tcV2NjnaSdgIA3Met9cXJ
80tzqZZmJ+2grcA/uPUdmOr3wava/NJ2AAAAAAAAwMxhnfD+t8Z0U6GEGt0x
AAAAAABgarArqqOjY0F7e/tr4vH4Tclkcryzs1O6opSfqd7l1ExXlPJC2d1U
9s+pviOU3ZRbEokEXFE+wrT5oawE2A81JkR0VIhETojUViH6743FhrORyFIj
HF6nh0KX5IW4LCvESyl/Ywjx5lwg8P5sS8t1I8Hgl0cjke9lo9Gb9dbW/9IT
ibv09va80dW1Ld/Xt7s4MPBwcc6cveX5858oLVp0qLRkydHS8uXHyytXVras
Xm2Or11rjq9bZ46vXy+3vG9s+XKztHBh1YHU3/8X/5HyFSm/EruO2BMUDFYT
CPzFFWV5onL8OfuPaG4W+vqkU6k4NCQjXVHKOWXdoxabp6j23u6J4rAniv1F
7FpSPiblTWI3FZ/HfiflTVKuJOVesvmmpKOJz+Xwa96nrsHnW46o0ty5Zpk9
WkuWSBdSibN4cbW/2BtltSlP96s5o1Sd7I2qd1HZ/Uy2KD+VrFfF6oda3cqB
xftUf9mPV1H9Vt/myWJzRcnz+Hyb/4rrz1E/y7Gl6SzDY8/9z+dzDTzO1A8l
6o8x6h+eU+U1a54aW7Xq0fKyZWM0B2+jOfazLeed99Vtz3nOJ/585ZXv3PHO
d75uz/XXX/HIP//z8x79xjcu2fvtb6+//2c/W7735pvnmZnMrIphdFWKxTbT
NNkPFaYElSMKnigAzgpuFd7/Dc7NvKAx3QbOYa4V3s3fARfaBybi1thqPqql
mQEAgOmSFv5Zr7xeU7EuAwD8jFvr9cmSPkVtmse1OY12yh4GAAAA/I3Xz9FT
kfFBfadL5jRtAAAAv+DGmup0TZwJ6/upknbYTnDmeD1HTjbGaY/ramQyJ+9+
AIDLaMI/33u3avFqHQf+xYtnrNN5kvGgNr+0HQAAAAAAADAzeIPw/nfGdHNv
w3sFAAAAAACcCa3t7e0LKVd1dnbelEqlTuuKaoYnqt4VxVv2RHHUfriifMkE
P9RGIYK0DbEfapMQ8a1CdNDrXl2IOflIZHEuHF6TDYUuGo1GnzMaiby4FA6/
Oh8OvzEfCr1nNBT6RDYY/CLl27lQ6N/1cPg/jdbW2/VkUjc6OsbzqdSuQk/P
Q8WBgcdK8+btLy9efHBs+fIjY6tXPzW2du3xLevXm1s5GzaYW887z9z6tKeZ
W88/3xynbKF9Y2vWmGXLFcW+H/YkSb8Qe47YERQMSk8Qe6H0lpZq+LXyRVnO
KLkNhar+pnhcuobYFcUuJXZQ1VxRs2ZNdEUpJ5Q9lueIHVEyNl/VBE8Ub9nD
xMewI4qdRXR9djxx2HvFzqjavZR3SrmvlMeJ3/Nn1jWK7Leimqk/TepP6dIa
W7WqGnZrsQuJXst+Y2/UggV/8Wzx/SzPk6FcTXxt1Ta7D6u+/XRezXNFfaTa
I8NtsZLn/uP7sAuL26a8UvXts7fxNK4qGT7fqoGvyz4q9kFxP8t5ICxXFHvB
eKyVL4prp3OKVCf7okqLFh0rL1v2RHnp0h3FRYvuKixe/JOxlSu/PPb0p39o
+8tffs1973rXi+//9KefvefGG5+2/8c/XnHollvmH7j11oH9mzb1VMbG2iuV
SqtpmpF6PxQ8UQCcNbxLeP/3NzfzwcZ0GzjHmS+8m8Pzmt88UEdGuDO2moNa
vF5DGxEAAJguaeGf9crrNXW6yThsJwAAnAler3HaaerL+KBGrNMAAADOVtLC
389QzeP6GvXvGQAA8ANu/LZy+tvIjVqambTDdoLpwf3sx+e713U1MpmT9j4A
wE004Z/vvFu1NDtpB20F/kMT/p0rGQ9qa3Y0h20HAAAAAAAA+J+vCO9/Y0w3
32p4rwAAAAAAgDNBuqJSqdRJXVHKEWX3RNk/c9MVRe+PUHZTbqHAFeUBZp0f
ihIwq46oyE6aT3cK0b5JiJ4RIQbvFWJRIRxepYdC5xdisWfnIpEXGq2tr6TX
ry+0tr5Tj8X+txGNfk6PRG6kz36YC4f/g17/KReNjubi8TGjvX1nPpV6sNDX
92hhcPDx4rx5B0uLFh0pr1hR9UOxF+ppTzO3nX++ue2CC2S2UsY5F15obuHQ
Z2Pr10v/UXnJErM4PFz1ENGckk4m5YliL5AQtUzwQqmo9+GwdDmxd6jmimLv
Evui2BPF/ibaJx1HypOkvFCT+KHyymGkPFHsr7J5ogy+F3024V5DQ1U3Fd/T
5osq2N1U6h4cvief39s7wRHF/if2Z3HfjK1YUfVErVljjq1bJx1b0rNFr6U3
ij7n46Qzau7caluVE4vbWu9/4pp4y+/5c3Y9cfg43kefy1roWqX586u10JbH
SDqp1PX5GspNZbVLOqHYp8V9ZA/3FX/G/cnH2R1RyiHF/cF9YdXL1+XPpSuK
xtc+D6Q/TI03jwHdX/Zxf3+F2n+I5uQj1I+F/PDwLVT710srVnx46yWXXL31
la983u4PfGDDvm99a1HlV78a3L95c6+5dWuHaZpxyw8Vgh8KgLOaPsrjwvu/
v7mVnzWm2wCQ/Fl4M48Xu9A2MJGMcGdsNQe1eL2OTjcZB20EAIDToQl31iwn
eL2uYl0GAPiVtPB+jZsJNTqJ5qAtAAAAgN/w+vmZngE1OknGQTsAAMBr3Pht
5XQ9zLhQi9fPL9AY3Ji3p4pf68J8BuDsQhPufN8zPqql2dEctBX4E034c754
UZcbAQAAAAAAAJwd3Ca8/30x3byt4b0CAAAAAACmzNDQ0GldUfXOJt5f75Fq
lCuKY78237fumCMUuKJcxpzED5URImQIEaHXsVuFaLtLiO6CELNHhZi/WYgV
uXD4vGwo9Ew9GHxBIRJ5WT4Wuzofjb7NiMU+ZLS2fjoXi31Vb239/2j7KyMa
/aMejd6rx2LFXCLxZ729/QEjlXqk0N+/rzA0dKAwb97h8uLFR8srVhxjj9H4
+vVVR9SFF5rbLrrI3HbxxTJb6fW45YfaQp9LR9TatVXH0eLF0o0k/UbscaJ5
Jr1B7GViXxQ7ggKBqhvI7oSyR+1jJxGdJx1MqVTVj8TeI/YasR+J3UnsE1Ju
o5N4oib4i9hvxLF7opQryn4vvg/7odgTVe+KYv8S18IOJLp/LcrfRPWxY6o0
PPwXN5PKokXSA1VetqzqjKJ+lq6o886rbrkv2RlF/Tm2cqU8rkR9WuQ+ZW8V
O5/sDit2SfGW39vdWdwvXB87r2i/9ERZrqry0qVVFxW9l84oy0elzi8o95bl
ipL9w2NlHy/uL+5HPob62pisv/k1O5+UK4pqkq4odk/xPLB7w3g+8LWt6xbo
uCJfN5U6Tuc+SX26Kz84eE9hcPBH5TlzrisvXPi60oYNzxm//PJVuz74waF9
v/51qjI6mqhUKlH4oQA4p/im8P5vb27lfsqsxnQbAJIbhTdzeYUbjQMToJ8U
royt5qAWr9fS6SbjoI0AAHA6NOHOmuUEr9fV6SbtsJ0AADBVvF7fnKzjmg9q
dJKMg7YAAAAAfoJ/Z3j9/HTyWyfjgzob8W8aAADwGjfWfae/i2bK2n6yaA7b
CRqDG3P3TOa0l3U1OulTtBMA0Hw04f2a5nYtzY7moK3Av2jC/Tnj17qanYzD
tgMAAAAAAAD8zSHh/e+L6ebChvcKAAAAAACYMsoVRam5orq6umquKOVrUq4o
5YlqtCtK3edkrih1T+WKSiaTtyQSCbiimku9H4oTpIQrQkRHhUjkhEhtFaI/
L8QwvV42Gg6vHwmFnp4PBi+jvNQIh/+G8hYjEnm/Ho1ep8diX9ZbW7+nx+M3
5+Px/yokEnfl4vE87dtG2916W9seo6Njn3TwDAwcKg4PHy0tXnystHx5ZWzV
KnN87Vpzq+WJ2nrBBdINJf1QliNqnB1R7DRavdosL19e9UOxd2jePLPE3iH2
FtndQ8oTRHOMHULSFcSeJruryR7lieLP4/Gqg4jmpfQxsXdIuZDYZ1Tvh7LF
sHuLLD+UQfeWUfdWfirliqLj5b16e6uOJW4He68GBqQDSraHfVD2sFeKj7U7
nNgTxf3BrigOu57Y16T8Uexton6Tzijqc3ZGST/UunVVbxT1vexj2l9mZxT7
nRYt+otzivub3yvfE9+Ta5zMFcV1TeaKso3bCb4oPl+Nl3JFKZ8TvZd9yX3F
ji4eB7uri/vdckjJz7geNQdof80VZTnDZKzr8mfSFUX3LVav8ZTR2fkYnVvU
e3t/T339tXx//7uNoaG/KixYsKp42WUDj6TT7aZphuGHAuCc47nC+7+7uZkr
GtNtANR4mfBmLq91o3FgAmnhzthqDmrxei2dbjIO2ggAAKdDE+6sWU7wel2d
btIO2wkAAFOB15aZsr5lfFBro55JAAAAgF/ww78FnKD5oE4n0Ry2BwAAvMKN
dT/jsJaMC7VgzT+7cGP+nixpn9aFeQ3A2YUb3/OMgzo0l2rBmgZOh9vPWCff
Dy/qwvcFAAAAAAAAcDr4v1nx+ndFIxJpdMcAAAAAAICpczJXVHd3t0mvpadJ
uaLsziY3XFH197XqOUL74IpqIubkfqgQJbJJiPiIEJ2jQvTpQszJC7FYD4fX
ZkOhi7LB4HP1YPDF+XD4Str3Jj0See9oJJLWo9H/k43FvpOLxX5ixOP/SbmD
ohuJxLiRTO7S4/GH6fVjejL5hN7ZeajQ13ekMDR0rDh/foWdRVuWLzfHV6+W
nqjxdevM8Q0bzHH2FbEXisOvad8W9hmtWCE9R+xDkn4idiXNmlXzJZWGhqqe
JHYasceIj5szxyzQ59IZRPOMPULS42Q5nGr+KLszyvIGsV+o5iSye4l4vz12
V5TyFSlP1GR+KA47ijj0mj83lJuKvgfSA8V+KA61kd9z/QUVuydKOaLYuaSc
UFaKyp/FziYOO5ms4+Ux3E+WN6q8apW5hX1R3NcUdkexk0v6pNjLZXmeTnA9
8fUsz9NJXVHsqGK/FJ+nPFN8bx4rroPrt11HOrnYF8X9x32jxoMdUcoDRf0k
78Vb+9io8bLqkKFjeNx1Hm/V9+ygUm4wvj47qHgMeNzoPrlk8giNxwN6e/u9
Rir1E72r67PZrq5r9N7ep5f6++fvWL06Nfaud0XZE+X1dxoA4Dq/E97/3c2t
fLtBfQaAnbjwZj4/zY3GgQmkhTtjqzmoxev1dLpJO2gjAAA4wY01yy91YF0G
AMw0eG2ZKeub5oNanURz2B4AAADAD3j93DSnUGvGB7WeLpkptAcAALxAE/5Z
C2fCun6qaA7bCRqLJrwb8/Qp6kp7WFcjkzlFGwEAzccv33PNpVqaHc1BW4H/
cfsZm/ZpXc1OxmG7AQAAAAAAAP7kDcL73xXTzUjDewUAAAAAAJwp0hWVSqVO
6oqy+6DsHqdGOKLsriiVeleU8kQpVxQdA1dUgzFP9EMFKKExIaIVmiO0bd8s
RG9WiKF7hVg0KsQqQ4gL9GBQyweDL8xHIq8qhsPXGNHou/RI5KO5aPTz2Vjs
G7T9US4W+63R2nqr3tqazSUSW4xEYqeRTD6oJxKP0ev9RlvbQb29/YjR2fmU
0d19vDB7dqU8PGxuWbjQ3LJ0qbll5Upzy+rV5pY1a6o+KHYUcfg17S9bfijp
JRocrDqJ2A9keYEKXV01LxEfwy4j6ZSi65bZccRuo0WLqt4oPp/9S+xesvxB
0unEDiH2OanY3USTuKAmdUTZXVGWJ0p6qJQjSvmJbMlZkZ9b91S+qJrnyO5D
svbXXFHsYlKuqPpYjijZXvYv8Tn1vin2bPFx7GxiZxT1l3RD1Yf7k31SVl8q
z5O8j+XsUj4rWTNfn++p6mNfFN+DnVEcPtfyeElvFX/O4ffss2JnFF9TXc9K
wZYT+ocdUfWeKHW+GmseE7uzy/JE6ZYnSo5bNcdyyeRB2u6iOXC73tHxg1xn
Z7pA6yiNz4V6KjWnuHRp26bzzgubptni9fcbAOAqLxTe/93NrTxG6W1MtwFw
AncK9+f0Ja60DNhJC3fGVnNQi9dr6nSTdtBGAABwghtrll/qwLoMAJhpeL22
cbQp1JvxQb2nS2YK7QEAAAC8hH9jzKTnpuaDehv9bxsAAHAbTfhnbc+4UEsz
A7xDE/58zs/0Oa2SPkUbAQDNxY3veMZBHZpLtTQ74OzB7Wes5tO6/NJuAAAA
AAAAgP/4ivD+N8V0852G9woAAAAAADgjhoaGpCuKIl1RlPFUKlVzRbGnqd4V
xa+TyWTN66TcTo3wRU3mo6p3RVF202e3UOCKmgbmJH6ojBAhQ4gIvY4VhWgr
CNFN24GSEPNHhFiZE+JpWSGeNSrEX5WDwZflw+H/pUejb89FIh+m7WeMePyr
udbWfzNaW3+lt7b+tx6LbaZtSU8k/pxLJB6gPGokk48bbW0HjPb2w/n29qN6
R8fxfGdnhf0+xb4+szw4aI7Nm2eOLVpkji1bZo6xz4m9Tio2v5N0Cg0NVb1B
7P9hFxC7mGh+stNHeZXYU1RzRS1dKh1TY2vW/CV259SCBdJdVGAfEbuEbB4h
IxqtxuYOyrMvyu6JmswPZfdEcW31nij2QQUCtUhHFG9VlC9K3Zt9RXwtdT0V
vgd9XwrKF8UeKG4H+5XsUa4lPob7jf1J1HcGh9tqebbylmdLOqP4vOFhs7Rw
YdUbRWMg/VB2R9T8+VXHE/WfclEVbS4q6WZSHiq+P9Uhr8sOKD5HOazY2cWO
Kf7c8kmV+N7sk7I5pYoc273qvVd2F5RqY80VpT6n1wbtO5Urivs8b403zeEK
bY/q8fj+XDy+k+b7bTTHv0fz4H/r7e1X0nUuGOvqGhrt709sFCLo9fccAOA6
fxDe/93Nrby1QX0GwGR8Urg/p5/tRsPABDThzthqDmrxek2dbtIO2ggAAE7I
iOavWU7wel1149kDAABTgf+95/Xa5nQNV2g+qBdrNgAAgLMFr5+XnPQMrPl0
yUyxTQAA4Caa8M86mHGhlmYGeIsm/Dn2M31eq2inaScAoDm4sYZkHNShuVCH
1+s1mFlowt254+R74kVdfmk3AAAAAAAAwH/cJrz/TTHdvKPhvQIAAAAAAM4I
5YpKJBJXxePxm2g73tHRcUC5mU7mirJ7nBrlilJR11T3Ue+t+0hXFOUWeg9X
1Blg1vmhKEFKeLsQMUOIZE6IFG1njQgxj14vywuxXhfi6QUhnpcLBq8oBgJ/
UwyH36JHIn+vR6PXZ2OxG3Ktrd/PxeM/z8fjfzASibvpdUGPx7fpicRuyh7K
PqOt7Um9vf2w0dFx1OjsPGakUpUCzbFiV5dZ6ukxS319ZmnWLLM0OFj1AllO
ohJ7iHjL75UbiL1A7ARSniO7h8mKdDixu4ndSXR9dhaxi6hM12H/lPRFrV1r
blm/3txy3nlyK71R7KNatqzqjKLjpX+IfUN8ffY0sa/J8gcpX5TyNp3UFWV9
phxWfC57n6SPKBSSrqgJbiiVlpZqlC+Kj1UOIw5fg6PqUd4qdiMpXxQ7mbgN
HH7N/WY5sKQ7SdVkD+/jevlzPo77ma9H50u3E43BBHcT+6G4r5TjyX4vrsHm
icrze8s/VXNBKYdV/bk2T5W8D40d+7ykn4qdYTxOixaZRcsZNsGBVe+K4rYo
B5bVPzLsimJHFrVZ53HhfuV+Vn1t+bnYFcXRq56vp3KRyBM0Jrto7G6nc/6V
5sKHisnkK4rt7U8b6eoa/KUQ8TR9v7z+vgMAXOUK4f3f3NzKLQ3qMwBOxsXC
/Xl9mSstA3Y04c7Yag5q8XpdnW7SDtoIAABOyIjmr1lO8HpddePZAwAAU8GN
9blRa7gdr+t1kswZtAsAAABwk7Tw/nlpiqn//ckv/345XbQptgsAANxCE/75
PTRT1vSTBXiPJrwZ+9PN8Zk+tzHHAfAON9aP061hjOZCHVjHwFTRhLvzJ+3T
uvzSbgAAAAAAAIC/OCS8/z0x3Vzc8F4BAAAAAABnhN0VFY1Gb2ptbR1PJpMH
7H4m5WxSHife2t1RjXRF8bXsjqpJ7gtX1InY3U+1pIUIpKsuKPmeD7ReBzYK
EdwkRDgjRGy3EPERITrHhejbEovNGY1Elujh8NpcKHRxNhh8LuUleiDwmnwg
8CYjFPo72p/OhcP/pMdi3zFisZ8a8fjvKXfo8bihJxJbjWTyPto+bCQSj9Hr
/Xp7+yG9o+OI8kOxm6eo3FD9/WZ59myzNDAgU/MGsQ+K/UPsAOLXQ0NVhxA7
gOx+KOWEsruh6kPzhs9hd1DB5otiz9DYqlXmlnXrqq4oyxclnVFr11adUeyo
ojr4PL4nu6FqjqZYTLqFar4o5Veqc0apfZN5oqgvpQNqUk+U3RVVH/W53R/F
TiOuhfvB7njidlupeZO4Lq6H62fPlN1/ZfdF8XFW5DW5H+v9Uza3U145ofi+
fKwV9V7en2upd0Wp8D7liFJOKctPpfxhNVcUe6LYI8ZOL8sfVjvf3l7bfKl5
xJRPy/pMjg+PLY8Lj4nVv3ZXVIFSpNcF+jwbCFSyLS0HaLszGw7fRvPguzS3
3z/W3/+irYODa7YPD8+6ndZW9b0DAJwznA1+d6d5boP6DIBTcVS4O6//2p1m
ARuacGdsNQe1eL2uTjdpB20EAAAnZETz1ywneL2uuvHsAQAAp2jC+3XtTNc3
N54rbj2bAAAAAK9IC++flZzMFOvWfFBzM9oFAABu4pc1MONCLV63ETQfTXgz
B9I+rAnzHICZjxvPRiffbc2FOtwIOPvg56+bc0jzaV347gAAAAAAAADsrBHe
/45oRGKN7hgAAAAAAHBm2F1R8Xj8Jop0RdldUOxron3S3dRIL5QTV5S9Dssd
dYSym3IL5Vx2RdW7oQIZIULsf/oPIaL0Ona7EK1j9Jr3sRvKrHqjQrxvZ/Wz
9pIQPVmaBkY0uigbDq8ebW29cCQavTQXiVyeb219Fe1/Qz4SeXc2EvlYLhz+
PO3/ZjYa/XE2FvudEY/farS2Zo1EYsxIJndSHqRIP5TR1nZQb28/ku/oeMro
6Die7+ysFGhci93dVUfUwIBZHhoyy3PnVh1AnDlzpBNKOn9mz5YeIekgYu/P
qfxQyhFluZlqsTub+Fx2A/G12D1E9yrNn1/1Dq1YYY6tXi39UNIVtWGD9EaN
0Wv+jP1E7Cpi7xA7lKQrih1CDpxRNUcUhz9nTxSfdzpHVL0rin5HnRCbN0r6
oui60vdENShHVq3dHLsviWvhulVbrPbI80/WDo5yLKnwuNiub9jdWPb+51pU
PXyO8k3Vu6J4zOsdVLzlz3h+sD+MQ2Mnw44oGpuCckTxdZUfSrWZ7mtwuCZu
l2qf1R7lzKqNi63/+b1B+/PUL+yJKlE/lXh/MHic+uxxOnc8P2vWH4qLF39t
bMOGt49ffPFzt11yydLSeef1ZIaHYyZcUQCcS7xaeP/3Nrfyiwb1GQCn4+fC
3bn9EneaBWxowp2x1RzU4vXa6kYbAQDACRnR/DXLCV6vq260EQAAnJIW3q9r
Kpkp1q75oGYnSU+xXQAAAICbeP2ctEebYu0ZH9TsJAAA4Feavf5lHNYxU9bz
6bQRuIMmvJkHmg9ranTSp2gjAKDxuPFsdPIM01yoww/tBDMTN74nZzKP3Kyr
2UlPod0AAAAAAAAA77lGeP87YrrJNrpTAAAAAADAmaNcUZSrOjo6bkomk+OJ
ROIAu6HsrijaJ7dqn4obrih1L35NdR2h7KbcQjWdc64os84PRQluFCKyXYjY
qBCJESE6DSG6CkJ0c3JCpO4Uon2TEPHdlKIQbbyftgP02YKRcHhlLhR6WjYU
elY2EvnrQmvrywvx+OuMROIdRjL5YT2R+MdcPP41vbX13/Ro9NdGNPrfeiy2
mfaV9WTyz3pb2wO0fTTf1va40d5+kHKY8hTleL69vVKgMS2qsCuqp0f6gNgL
VZo3zywtWFDN/PnSFyW9P+wH6u2t+n6UH4qdQ5P5oSZzRNX7oupdRd3dVV+U
5R/iOsqLFpnlpUvNsZUrzS3r1lVdURs2mOVVq8zS4sXSScR+I/YKKaeQjM2z
NKkzimP5iXTLzZSr8xHVwu4oe+y+KDGJK0rYnFHKFxWNSu+RofpHtZtj9Yes
h91I7Lmi2tX9ar6pybxXqi2TObDsbVTXtRxak11L1kJjW6j3RbEnjENzQKVQ
745S/jD2QlF4TNj/NcENZfdV1dfI9XAfqdps/SDbz/3AfUkx6HWe9hWoTwp0
TJ7D3ig+p6vraGF4+KEt69ePbH3+83++43Wv+/x973nPNfe9732XbH/Pe+Zt
f/3rOze+6lURE64oAM4l7hHe/83NrTyjQX0GwOl4m3B3br/SnWaBOtwYW80n
dXjdRgAAcEJaNH/NcoLX66obbQQAAKd4vaZN99+eGR/UfLpkptgmAAAAwC3S
wvvn5HSemZoPam7Gv28AAMAt/LKuZ1yoxes2AvfQhP/mQdqDmpoRAIB7uLFu
OHmGaS7U4Yd2gpkLj69bcyntsCbNxZrciOaw3QAAAAAAAADvuUF4/xtiuvnX
hvcKAAAAAACYDq3RaHRhKpW6qrOz86aOjo7xeDx+gCLdTextctMVZb9+vSuK
PzsXXVGmzQ+VrvqhApuECGcsPxT7oCj9tG/uvUIson1LOPz6biEW8P47hRi6
Oxabk4tGF2yORFbkw+H1I6HQ03PB4PNykcgVRjj82lxr67V6W9sHjI6OT9H2
K7T9v3pHxy/ybW0ZPZncRJ8XconE9lxb2/30+R7KvnxHx5NGZ+dhylN6Z+dx
OqdSoHlS5CSTZkGFHUHK0zRrlnQvST/UwoXV0Gvex86gmieKnUKWI8qYih/q
VFG+KL4+1cKeIemNGhyUrirpjFq+3Bxbs0amvHJlzRXFx1H7pFvoBKcTO4bY
N2Q5kqQzSbmIOJYnquZmmsQRVfNPWZmyL4qvYTmrpJ+J+6vOmyWdSTZvla68
VfW+KeVSmsR5JcOf8TF8HW6z1TZ5PSvKPVW7nv2aXA+tLQXV/8oVxXOAM2dO
NcoXZfeH0RjUXFDKC2V3QXFNKqr/68bghFCt0g2lQu9l6DOD/V7RaIVyjO5z
1BgYODy2fv1j2y6/fMuut771jw9ef/13H/nOdz6672c/e9Xe3/52w5M/+MFs
I51Omhs3Bk24ogA4V3ix8P7vbW5lY4P6DAAnLBDuzu+r3GkWqMONsdV8UofX
bQQAACekRfPXLCd4va660UYAAHCCG+vyVJOZYhs0H9TsJNoU2wUAAAC4gdfP
x0b83sn4oOZG//sGAADcotlrqNP1byas5SdL2mEbgbvwuPhtLnhRk1ffaQDA
9HFjzXDyndZcqMMP7QQzF024O580h3W58R3GdwgAAAAAAABQz63C+98Q0827
Gt4rAAAAAABgOkhXVHt7+1Xd3d03dXZ2jre2th6gSDdTV1fXpK4odkh54Yqi
Go5QdlNuoZzNrqiaH8oKO6JC/yFEdJMQ8a1CdIwJ0asLMccQYlFRiNUjQlxA
nz3zHiEu5WwW4tn3CvGs0VDoGblQ6GJONhZ71kg0+vzNkchL87HYlflo9E1G
JPJ3ejT6yVws9iU9mfyu0d7+00Iq9XvKnUZ3t5FPpbYaHR336e3tD1P25js6
njBSqUO0/6jR1XWMUmHvT5HGqEjjVYjHzQLNnzy7gdgTxGG/kOUHyvf1Vb1A
8+aZpQULqqHX7AZijxT7m9jnJD1AylPEmY4jajJnlM0bxR4i6bBiZxTVUl6y
xCyvWGGWly0zS4sWmcXhYeks4vrZO5SzO5ZU2O3EfiR2D1mOpFr4vc2ndEKU
s6juuJzdGaXuI07ii7K5nnTlZLLcWoY9tF+6k+pdUco3ZXNeGZbvSmVCe+xt
sTutVJRDy94+dW2+nuUPK7A/zPJ11RxR7IuiPpev2R9Gc6bAniieE8p1dbJa
6vvUihwbrscWgx1RygtluaGUH4quW8lFIscpR+ncQ7lw+Ema//tKK1Y8tP2K
K7bt/sAH7n74K1/56b6f/OQLB2699dqnCoXnHy6Vlj1+113dpmFEzHQ64PUi
AgBwDXo8e/73Nrfy7Ab1GQBO2Sncm9+vc6lNYCJujK3mkzqaGQAAaBSa8Mea
5fW6inUZAOAX0sL7Na0R65zX9TpJ5gzaBQAAADQTv/47QDtL2jHddgEAgBvw
7xQ//A5qdh3NTNphG4H7ePFvBO00Nc3kue60jQCAxuDGGpZxUIfmQh1+aCeY
2bjxfTmT+ZRxsa5mR5tCuwEAAAAAAADecVB4//thunl6w3sFAAAAAABMB+mK
SqVS0hVFW+mKisViNVcUb+2uKPZEueGKmuw9u6La29vPZldUi7D5oTJChAwh
IhUapzuFaN8kRM+IEIO6EAtHhVjFfqicEM+mY/6K9r2c3l9N799I2zdnA4E3
j1BGw+E3GeHw6/Ox2NWFePx1Rjz+5nxr63uy8fjHcq2tX9BbW7+px+Mb84nE
7/Lt7bfpHR05vatrS767e1e+p+chymOU/fT+IG2PGD09x/K9vccLPT1msbvb
LLInisamwO4fdkKxG8ryENXC75Uvit1M7GViX5RyAtFrdjGxs0n6m+o9UcoV
1UhflN0bxQ4rDnuLuDaqqbR4cTULF1ZdUQMD8nOuRTqKlMfJ7m+qdyQp99Nk
7ijuJ3YeTZZJ/FInOKPqvVHK9cTnsOeJ+9vqNxnuU97yPvYtqTbwNW3X0JUv
yl6zqqPOD6Wfyl9lr1Mdo/qHz+caqRbZ/zwn2AfFc4D6WTqieF7w/GBXlDUv
pOfK3veTOapsY1CLOo5rphiUPO2XsRxRdX6op7KRyGHaPknfn/103qN0nQeo
D7eX16/P77zmmtsf/sIXfv74j398wxP//d/vPVwqvfTo/fefV3nkkSHTNJMU
eKIAOHc4X3j/tza3cmuD+gyAqXCjcG+Ov8mlNoGJ0E+epo+t5qAOr9fY6QYA
ABqFJvyxZnm9rmJdBgD4Ba/Xs5NFm2I7Mj6ouRntAgAAAJpJWnj/bJwsmSm2
Q/NBzc1oFwAAuEGzf0s5XfuaXUczk3bYRuANPD5+et5rLtfj5fcaADA9NOGP
77MbdTQ7aQftBDMfns9uzSnNYU2aizX5Yb0AAAAAAAAAeMsa4f1vh0Yk3uiO
AQAAAAAA02KCK6qzs3M8FovVXFG0T26TyeSkrqj29nYZN1xRfB/liqL3t1DO
OldUWogA/aM5uFGIyHYhYrcK0XaXEN33CjEwKsT8zUKsyIXD52VDoWfqweAL
csHgy/JC/C9diLeNCPHBrBDX0+svUr6st7R8mY75JyMc/nwuGv203tp6XaGt
7VP5ZPKLeiJxo55M3mQkEr/W4/H/oc9GaF9Zb2/fYXR2Pqh3dT2a7+l5vNDb
eyDf13c439//VH7WrOPSo0Qp9febpd5es8RuJXY7sYPI5h+SviGbn0c6jPiz
RMI02A1kOZmkG4jT1yd9QewNkj4jPo5dRyr8nr1CzXBF1Xuj2FtENUlf1IIF
Zmn+/KqzaHDQLFC72SnFNVKfVdvELiIxiSNJ+aKUd4ndSHTOpG1RDicVW/vl
fdgfZfm3TnBG2e/NLiS+Hx+v+k15orhvOfyanUt8DB9b77tSniW764vbYo/l
idLFJI6oumStnFAnX5d9WVwn9wXPI54XljNKusTsfc6OLqvmWvtPdt86d5Ru
xaDkVSxPlLxeJHKcanmKcphyIBuJ7Kc8Sp89SNudtC3TMaNGd/etWy688Fe7
r732+4/ceOMXnvjd7957eHT05Ud37brw0N69803TTFEilBav1xIAgGt8R3j/
tza38voG9RkAU+Flwr05fq1LbQITyYjmj63moA6v19jpBgAAGoUm/LFmeb2u
TicZh20EAIDTkRber2mNWus0H9SMNRwAAMBMw+vn4qmiTbEtGR/U7CQAAOA3
mr1+Ov0NNFPW8cmSdthG4B1uzy/tNPWkXa4H8x6AmYkmmv9dzvikDqxZoBFo
wr055eS7o0i7WFezo02h3QAAAAAAAAD3uUZ4/7thutEb3SkAAAAAAGDaSFdU
e3v7VR0dHTclEonxSCRygPbVXFHsabK7ovg9u6L4tRuuKBW+P9VxtrqiWjYK
ETSEiNwiRCInRIrSnxdimLbLRoVYr4dCl+SCwcuyweBLC4HAVUYg8JbRQODv
cy0tn8q2tNww0tLyfdr+jN7/drSl5ff0+pZcKPQrPRq9WY/F/l1PJjfm29t/
YnR0/Ia2f9Tb2u6lFGn/dsr9lEdo/z6js/OA0d19uNDbezTf3388P3t2pTgw
YJYoZc7s2dIVVeztNQuW30m33EM59u7Uu4xU2MvDviT2F7EfieaQ9EPxlv1F
7EhibxAfw04gW6RjiT7LN8MXxdezh9pT6Okxuc3SETU8XPVG8ZbeF2h/ntrO
tUsPE9fIbatvs/IhKU8U165cVHR+kfuQ3Vu05fvJvqwPfQ8Mq2905eJSfqfJ
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
UlZRBuha9fb5fE+Gq6sfTLS03BafOPG6pQce+MMVJ5542YpPfOKC1V//+jlr
fvzjD66/8cZjNt5996FbHnpo7qYnn5y6fcmSrlQ83roxHq9PrV1bKVesKJVS
einFcEQBAEbgOKHvb2fsoLpUY/ujyfm5mTYAcsIaofd+/23+hgIyKIR/NuH2
ejuWBB2MDwAAsoHXFZ3rlhPcXlt1f+8AAMBIuL2GjTahLMdpFEDNWNMBAAAU
GkHh/nffaJMtbtfrJKFRjAsAAHRQCGtdSHMdbo8PFCaGyN+9YjioZ299DrIZ
IwAgO3SvC06+xwzNNeQjYP8mX9+vTp6nfNeEZwsAAAAAAID9g1nC/d8PcpGq
XE8MAAAAAADICWlXlMfjGeKKKi8vN91N9fX1pi+KX/M+5XHi5MoXxe1we/ya
vVDKR6X64T7LyspMV1RpaemaioqKtCuKxjBaV1SRtEUMxhFByxPVK0R5VIg6
SkdYiNl9QhxB+05Y4vGc3OvxnBLx+U6JBQInRaqqTojU1p7Q39BwUryu7tSB
+vqzE7W1n41UVFzSW1b2o76Skht6i4vvjxQXL+wrLl7RW1S0jtrayf6iWFGR
jJeUDPpz2KlD88GOqIRyNimvEHuLxo+XSSu8j71D7BlKu6LYTaQynLco0xHF
fifleKLPTScVu4y4P+6D+uT3fL7pfmKPEbuirJiuImrHdFMpD5LdMcX9cn90
vU2nlN0X5cQZpfxIyg010jnZxu6MUt4orovHRGOM8tywM4pdW2pcyvGk/FC8
n/1QPK80xqjlalIZ4uHi8NzzHHObljcq3Sa3x23ZXVE8brsryj4fym/F14F9
S3Qd+ihLKAtp39N0/pP0+SOUf9Pre2n/X+ka3EL9/476/Rld1+93d8tvTJ4s
L5w5U3529mz5iTlz5OmUk+n1cbNmbTtmzpznTznkkDs/d9ppX7z5pz89dlUk
siC1a9eBKSkPlVIelUqlTky99dZHdy1fftGm++776Ws/+ckdq84994llRx65
LDlp0nqao11RHi/NRZzGZLqi+H5h31ggkKK636LsojFsC5eWbg77/Rto3K/R
uF6M+nzL6HWEPns6UlPz71hz81/7e3r+MDB//v+uOPbYK14466wvrr7ook+8
dNVVp71+7bXHr7vjjsO3PPDA/E1PPz19w7PPTkglEm0ymWxYt3BhtVyzJgA/
FAAgC24U+v52djHlUY3tjyY9uZk2AHLC74Te+/0P+RsKyED3WmYUQA06E3Qw
PgAAyAZeV3SuW05we23V/b0DAADDoXv91Z1scbteJwmNYlwAAADAaHH7e28s
MbIca7AAatYxLgAA0EEh/M4T0lyH2+MDhUu+fmZwcq8YeaoFzwMAew+6vx/3
h7VJOhgj2LcxRP7uNaMAayqE8QIAAAAAAAD08knh/u8HY00i57MCAAAAAABy
RdoVVVJScitlD1dUXV2dGfY16XJF2cPtsytKOaQ4vC8QCMjS0lLTFUV1pF1R
VEdWrqigEMV3COFh11NUCB/9wOrjbUiIEv7sXU43nVJ8/lM0d2EhatkTtViI
OX1CHNNXXHxWrLj481Gf76KIz/f1vkDgkmhl5deiNTVfijc2fqG/tfWL/W1t
X0u2tX071tp6dayh4YZIVdXfIn7/o+GSkghlNWV92OPZQW3JaFGR6YqKejwy
yp4impeY5WxK+5o6OmSyq0smu7tlcsKEwW1n56DHiR1DyhNF1yvKziK7m0hF
7WMXEbuM2N1khT1OMeVGYocR+4ssLxUn3tYmaRx7uKJM9xOdy44p02tF53Bd
6Tq5RvZZsVOJ68v0RXGUD4nmIKL8TcNF5MALNZKTyu6N4nrYwcR1VlSkPVpp
xxP7nJQfiueV54SOY2dWOuya4nN5XpUzSjm52KvFbfE8KxcYz7Vya/H1U3Os
nFqZNdqdUVRrmOazl7KY8gzlcdr3MOV+auNuquNWavMP1PYv6Fr8kK7Nt6dM
kV+bMUNeMHu2/OScOfIjc+fKD9D2+Fmz5JG0/yD6fM6kSVtmTJy4dNaUKX88
8j3vOfuL3/zmnMiLL46XUo6jdKVSqcm0nUvb9+5csuSc1//wh+Car371jys+
8IFHBubNG6Drvi5aXf1WjOeB54Tmk+aU/VC7o4N+qO2ULeyHorxOz8camrvn
Y+XlMTrvuWhdXSja1vb3ZE/PTUvnzfvZ80cfHVx55plfWfXlL5/74ne+c8Yb
11574rpbbjly69//fuDmUGjmhkWLJm4dGGjfvGxZ0/oVK2pSvb3lVJ+P4oEf
CgCQJa8IPX87e5MyWVPbo82qHM0ZALniNKH3nr85f0MBGehez4wCqEFngg7G
BwAA2WAIveuWE9xeW3V/7wAAwHC4vX7le/0LFUDNWNcBAAAUCkHh/nfeWBLK
crxGAdSsY1wAAKCDQljnQprr0JWgw/GBwiZf95/hoJZgnmpxc4wAAOfoXp9C
DmowNNeQjwCQr+9XJ8+UQvfzXWjjBQAAAAAAAOjjGuH+7wdjzZ9zPisAAAAA
ACBXlFF6SktLzyorK7uVsszr9aZdUexpUk4o9jfZXVG59kRxu5zM/dwXb5Ur
yu/3r6E6H6I4dkVJy+/EfqgVQpSGhKh4XYgqel3DvifaX71GiAB/Li0flLVN
ExSiWA6mZEAI/xI6lz1RlLkRj+f4Pq/3UxGf74o+v//n0dLSP0TKy2+MVFRc
H6mqui7R0PDLZFvbNcnOzl/GOzquj3d33x7v6nog0db2RLS+PkzHLY+Ulb0c
Li3d2EdjDPv9u4e4gNj/4/cPOobY2aRcUcq91NMzGHYwdXUN+oXYE8XeIssF
lemAMt+r8Ht2GnHYZaRi7Us7kdiHxO1y39wHu55aW00XFbfBDiWu06yVfVF0
rumKomOS7LSiGvunTJED06aZW67X9E01Nw/WaXmVTBeS1Y7pZrK5o9jXFFbz
Iob3Pg1xS2UeYz+W3UrcluVWMre2mJ8P44wya+ExsjOK50n5tJRry+6Iso+F
58TyRaVdURzl5KLXceUCY0+U5eNS3i92UJntWq6ocKYryjb+qOWM6qNxLaJj
n6F5fIRyH517B7VxI833r6nNH9M9FJw8WV48fbr84uzZ8tNz58qz582TH5oz
R54wa5Y8ivYfMnWqnEfHzJg4UU6k+2t8e/uWltbWZOu4cde3T5v2ocPOPLPn
Z6FQjZQykEqlqlJSNtLrCbvWrl2w/rbbPvzSJZdcseLUU/80sGDBE3TfP0/X
egPdK2/xte3z+VJhn+9Nem520nYrvd8U9nrfoLxMz8ELkUAgSfO5KNrY+BjN
wz+XTpr0p2Xz5/9yuWF8b9Vpp31t1f/8z/kvfvObH33t178+ef2f/mRs/Pvf
D978n//M3vjMM5O3LVzYkVq+vFmuXFkrX321gmrzU10llHdzwgEAwHAcKfT9
7ewWyrka2x9N7s3NtAGQM8qF3nv+L/kbCshA93pmFEANbo8PAACywRB61y0n
uL226h4fAABkEhTur19jTSjLMRsFULOOcQEAAACjgb9v3P7OG2uMfXTM2Y4L
AAByTSH8vrO3rNmZCTocHyhsDJGf+8Xp8+D2fZ2PMQIAnMHfM24/s4bmGvIR
AJh83W+Gw3p0P994vgAAAAAAANh/eEy4/7vBWPO1nM8KAAAAAADIFaYrqry8
/KzKyspbA4GA6YqiyIqKCtPTpFxNw7miRvI7jcYTxe3zlttVbWe6ovx+/06f
z7emtLT0XV1R0uaHSgnhDwlRwV4oSnNEiPFPC9H9rBATEkJ08Xvez86o0KBL
qoTPlW97o4qjQvhoW/qEEJWLhWjs9fu7417v/CU+38l9fv9n+srKvhMpK7s+
Wl5+b6S8/JFwZeVj4draULSh4T+xtrZ/JdrbH0p0d/+nv6fniWRPz+LkhAnJ
xPjxL8RbWl6O1de/Eauu3hypqtpJeStSUZFiD5HpA2JfEYf9ROwZYicRO5vY
JdTRIRPshuruHtzye9rPriH2CsWUB8pyP/H5ps8pI1EVdhmpfdyX5TUy/UTs
NOI2qW32Q5lhx1Njo4yyi4rbt7udaMvns2OKj2PnEbuh+qdOlQMzZgz6oiZO
HHRFsQepvn7Qt8TOJOWtYk8Vx9oX41q4PmrbdEZZrif2PKk+0/3zPv6MnUl2
l5IY9ESZ+7kNy/uUngc1bst7le4n0xfFbatx2hxQZmznp2vh8LFWH+lxDeeK
4vliH5fdFWU5ufi4PeYgw4lF97OMWnUupjr/S8c+TLX8jWq7meb453TNvkft
XjZpkvzyrFny/Llz5Tnz58sPz5snT54zRx49c6Y8lK7PPPp8Ot1bk+je6mZH
VGenbKG6apuaNlfW1MTLq6quq6yvf3/r9Okdh5x+elkwGCxmF1Nq7drKbZHI
+A1/+tOC17761TNWnXLKtwfmzr0t1tn5XLS2dnWktHQj1b6rz+PZ3UdbugZb
+rzeDbTvVcqqsN8/EC4v7w1XVz8Za219IDFhwm3L58797QuG8f9Wn3rqpSs/
+9nPr7riio+98rOffWDtjTce88bddx+6JRSau+PZZ6dsX7Kk67V4vHVjPF6f
SiQq5YoVpcoPRSkabq0AAACH/EDo+9vZ6WLQte723/Ds+UFupg2AnLJI6Lvn
/5rHcYCh0K9fWtczw0ENbq+5uscHAADZYAi965YT3F5bdY8PAAAyCQr31y83
fjYNFUDNWNsBAAC4jSHc/67LRUL76LiDWY4LAAByDa+vbq/dOmvAGg6ckK97
0HBQSzBPtegKACB36F4PQg5qMDTXoDtOxgj2DwyRn3sumEVNbj8fuYiRxXgB
AAAAAAAAetgi3P/dYKw5OuezAgAAAAAAcoXpiiotLT0rEAjcWlZWtqykpGSr
z+cz3U3KFcXuJn7P/ijlb1L7OLlwRXHbdleUckepvtgVRXXt9Hq9a2j7EOXL
9HoO1W93RRUFhSgOCVEyIIR/oRCB5fT5MiGa2AcVE2JSnxCzFguxICzEobQ9
bIkQB9H+ebSdQdvOeGVlfW9zc/kKIUoHBh1TpdwOva+JBgIt7IiKVlRMj5eV
HRLx+d4frqj4XKS8/Lu07/pYZeUDkaqqxdGamoFYff3yWFPTsnhLy0C8vX0g
0dk5kOjuXpbs6Xkh0dPzUmLChLXJzs4Nifb2LbHm5h107JvRhobd7AOK05hN
z1NpqekkMl1A7CZiJxE7huhz9kGZvqhx42Scw76lhgbzM/Y6RZVXiduwOZzY
jRRWbqVMv5L9PZ/HUf4kdjexy4l9Uews4tBr0xNF1ypiua3SXiQO9WvWy2Nq
bTVdVjR+2T9pkrml8Q86pxobB9vjcVN7ZtiZRPsT7E2isSV4vHwcH8O+JPZe
cWicaecSh+u0xm7On80bpbxbyhOV9jxxjey04jrZw8XzyGOj9sw+LOdTWF0L
y8OUbs/yTQ3nmooon5N1XNQ6LpZZt3ptXdsEzxf7otrbB68xu6K4Lr62lisq
8g6uKN6/hD5/hj1RNMa/Uk1/oOv3I5rDy+g6fIGuwSenT5cfmT1bnjJnjjx2
1iz5nhkz5IFTp8pZEyeafqjO8eNlK91j7IdSaaRrUVldvbnE748XeTzX0nN4
cl1d3Th69nz8AEp2q113XWDdFVd0rjz33MNfOPbYjw/Mnn1VrK3tbprPPrqn
XqF7cGufx7OTsqOvpGST6YjyeleES0ujdD2fjtbW/is+fvyd/TNn/n7ZYYf9
ZMUHPnDFqk9/+ouvXnHFx1+5+upTN9xww3Gb/vrX96x/4IH5m/7732kbnn12
QiqRaNuUTDakXn+9auHChQEppRd+KABAjqEfIbT83WwbxUtZo6n90ebs3Ewb
ADnlu0LfPf+PPI4DDIV+5dK6nhkOanB7zdU9PgAAyAZD6F23nOD22qp7fAAA
kInba1euEspy3EYB1OwkRpbjAgAAALIhKNz/rnPrOzNUADW/W0JZjgkAAHKN
zrXS6Rq3N6zXwyXocHxg76CQvvf31meCYzgcIwDg3eHvGbfXJENzDYWy7oL9
g3x9vxZaPXjGAAAAAAAA2HeZKdz/vSAXqcn1xAAAAAAAgJyRdkX5/f5bvV7v
EFdUfX29rKur28MVpfbx+1y6ojI9VCO5okozXFFBIYopJVEhfKtoTE8LUbVQ
iAbatkdofHH62Toy6Ic6io45kban9grx0cVCnL1EiI/0CfHBsMdzXLSk5KCl
VVUT4w0NrS+2tdWb3ighmujz9pjPNylSUzOH9h0aKy8/NlFR8WHTE1VZ+R3a
f32iru6+WH39onhj48p4U9MbsebmTbHW1k2JceM2mGlvX9/f2bku2dW1IdHV
tSXR3b090dm5K97R8VZs/PiU6QVqbZVJ9iKxH8nyArETKGx5jkwnEXuIlFOI
vUbKs8TOJvYksdtI+aGG8SSlXUcZvqN0+FjlkmIfEbejnFHsYGJXEV0nM/ya
+lQ+JT4vbHcysd+K3UjsQbLcT+y0SrS1DTqiaJwxVT87qPgY9jWxI4rnYvx4
mezulv0U9kol6D2fy/NjtsVbbo/b4tBr06HF88LtcY1Uc0R5m9R8qLEpT5Ry
WXH7HR2DaW8fbI8+Mx1Z7KeidkzXln0e6XeesBqnmiMOXyfLVZWeD+XPso5j
r9UQVxSH+jLngMfGY7LPFdeS4Yoacm2tPqJ8z1Dfi6iGx6mPe+ic69kTRed/
ndr7dFeX/PDEifL4yZPlkVOnyoOmTJGzJ02SUydMkBNonsfT2JvpuAYafx3N
Zz2H+m+kNNC8l5eXby4uKqLHSvze4/F8iJ7PTmFzRa0977zKVz/0oZ5lhx56
zLKpUz9L1+tqmuf7+vz+AZq/DXSf7OwrKdlO2UBZE/b7YzQfT8QaGu6h63zT
0nnzfvb88cd/+4VPfvLLL3/965969Yc/PP2N3//+xE233Xbk1n/968Cdjz8+
Y/tzz/Vs7etr39zb27R+xYqal3t7adKjPimlB34oAIAGpgh9fzf7C2W2xvZH
m5k5mTkAcsthQt89f38exwGGEhJ61zPDQQ1ur7m6xwcAANmic91yu3/dAQCA
bAkK99cuN9dBt+t1ktAoxgUAAAA4xe3vOTe/M40CqNlJjCzHBQAAuYTXVrfX
bZ01YP0GTjFE4dw3+arFzeceAPDuGML951V3DViTQD4xRH7uO6PA6tEdAAAA
AAAAgHt8Qrj/O8FY05/zWQEAAAAAALmkzO/3D+uKYk8Tu6LY1cQOJ3Y3cdjb
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
QcN5moZxPoUzfE8RFeUfsrxGaX+UlbQryuo/ZrmOzDqpjojyIlltpM+19T+s
K6qiwnQhmd4m9iM1Nw/6otjfxD4t9mix76mn522nFr1mr9PAlClyYMYMOTBn
zqAjypalvOX9s2aZ/iduI2HNLzujzL7YycSuKNqXVP2xn4odVNwuu6LofNM9
Ra+TkyfLREeHWSOPm+fSHBuNy7zOma4onhc1txx+bXmiopmOKJ4DPpc9VjZX
VJxdUbTfdI6pOR7GFcXH8bj6Wlvlf2mc99F4b6C6rzrgAPlZmov30RzMp309
VH8LjbeO/VD8/FpeKPXMpV1RVvjZZHebzRUli+laeulZrK+vf7xzwoSfzD3s
sA9edMkls3p/97vJr37uc3OS06a9j+75L9Pc/IGetaf4maPnbT1t19F2JT13
T9Oc/Zmu/5XR5uZP0fU6bvVHPzp73aWXdmy6/vrGdf/+d3Wqt7fc8kN54IcC
ALjIe4S+v5tdQKnV2P5o8385mTkA9NAj9Nz3z+VzEGAIQaF3TTMc1OD2ujuW
AACADkLC3XXL7bV1tAk5HB8AACjcXrcKZT00CqBmrPMAAADyTVC4/92mK0aW
cxEqgJqdBAAA3EDn94XT33H2lnUa6/b+gSEK5/7R+XzqTtDhGAEAI2MIvc9p
qABqwFoE3MAQ+bn/nBLKUz06Y2QxXgAAAAAAAEBumCHc/10gF6nL9cQAAAAA
AICcMsQVRdshrijlbLK7otR+uy8qF64oFeWnsbuieEv1SV9JyVuVXu+GHq83
8YGSktt/4PFc+UBx8Vf6KJHi4m+Ei4p+2FtUdO0SIW7rE+KBsBBP9ArRR68H
aLuatq/Rdj3t30ivN9PrTZS1dP6KsMezJOrzPRouLX0g4vffHfZ6/xrxev8R
8fn+HS0vfypaXd0Xq61dGqurWxWtq3uVtutiNTWbozU12yM1NW9Gqqp2Ryoq
UsoPZfp8bGEnE7uVTJ9Pc7NMWC4kdhelQ+/jra2mu8h0A7FnyO6AYs8S+4HY
r6RcUfb+7K4oux/K7oji4/gc9jwpNxH3xW4jfs9+I3YS2RxH5nnKS8TnKi8R
1Wk6l7heem+2wQ4k9hnxucobpaL8UPwZ18z1c39cA7enXFGq3ZaWt+eJM26c
+T7OW/Y6Wa6ttEtq8mSZnDJl0PM0e7ZcOm/eYNgbRe8HlC+qo8Nsy3RGKR8T
98n9cdvs8WJvFx3bT23yedye6YuaOlUm6DM+luvmsaQ9WDw/7L3iMVm+MNOf
Zb8f1LjfyRVVXy9jXBPPAXuzaGu6w3h+7e4pmlO6Z2WM2ozzvcX10BwuorGE
aJ7upHn5+cyZ8lIa/1mzZskjaSzTqPZ2+qyBjqmxPGyZz6H9GVeuqHLql1+z
K4qPKaF7zefzbamvr4/09PTceOLxx5/3mwsvPDZywQXHL3vPe85ONjdfGi0q
+j09X49SVlA29BUVbaKaX6FxRmIdHQ8kp079+bJ58z6fWLDghGXHHDNr7Xnn
tb0eDFbJhQuVH6rY7QUSAACIy4S+v5tNpxytsf3R5taczBwA+nhZ5P6+783r
CIAdQ+hd0wwHNbi97o4lAACgg5Bwd91ye20dbUIOxwcAAExQuL9u6YyR5Xzo
/O7JZQAAAIBc4fZ3ms6EspwLowBqdhIjy3EBAEAuCAr31+uQxhp0Buy75OOe
NBzUYeShDreffwDAO+P2c2porkF3gg7GCPZP8nH/GQ5rMfJUj9vrCQAAAAAA
ACC3fFy4/7vAWLM057MCAAAAAAByTdoVVVZWNsQVxX6YTI+Tep/pkhmrK2ok
fxRv7a4of0nJ7tqSkq3Tvd7V53i9oV95PDf/x+P5dZ/Hc22vx3NrX1HRP8NF
RY8uEWJxWIhknxAvUF7uFeINykbat43e76K8Se/f4i3v6y0qWhcuLl4d9ngG
+oqLo9ROr+WYilLbSyN+/8pIIPBKtKLidcrGSFXVNsrOSGXlW+yIUl6gWGmp
6e6Jer0yzN4mK3bPkukEqq8fdBOxB4j9RK2tg2F3Ee9n7xK3yV4hdgJxG+yJ
4i23z64o9g0pV5TNy2Q6oZQfSjmiVA18HJ/DTiL2Mlk+JtNPxQ4mDr9mN1FD
g4zR3NMYB91SltdJnWc6lTo7BzN+vHlujMYTs7xRMeWNUjWqNngf909tKydS
zPJNpb1NvF/Fvo+P5SiXFM+f5VJKj4MdUt3dsn/KFDkwY4YcmDXL9ESZrqiZ
M+XA1Kmyv6dHJtkXxePltmz9xS1HE18L5aPqZ2cUncfOKHZH8ZhNVxTPD12L
tJ+L55nvAeXvynSGWY4sNQ+x4VxRPC9cA4+L7wmeZ/Za8dxa90XEfl/QdY1R
2wm+/6iNJfQ8PkVt3EfjuoHq/y6N9TNU8/smTZLzqe5uGnMjja+Gxlqd8exm
PuvKB8drgfLHNVBtvPVR/7RmbG1uaVl2wNy5d335zDMve+hzn/tc8v3vv2Tp
zJnX0NzcTc/RM738DBYVraf52BJtbFyXnDx52fNHHfXYqo997OaXvvKVK166
/PLTV1522QGrg8H2gZ//vEpKWeL2oggAABncK/T83Wy11f5XNbU/llw39mkD
QCvXi9zf97G8jgDYMYTeNc1wUIPb6+5YAgAAOggJd9ctt9fW0SbkcHwAAMDo
XGsLIdmuiUYB1OwkRpbjAgAAAIYjKNz/TtOdbHG7XicJjWJcAAAwVgzh/roW
0lhDIX0Xgb0HQxTO9/7e+nxIgb9xAJAL3F6HDM016E7QwRjB/gnfG7rvPyfP
mMLtZyUXAQAAAAAAAOSXnwn3fw8Ya27P+awAAAAAAIBcY7qiysvLzwoEArdS
9nBFqSgnFHtkKioq0vty7YriflXfykfF7y1XVKqhpGTHfK937ee93vhNXu9j
j3i9D0c8nkfCxcULe4uL431FRSsoayhrKRvCRUWbabuD8iZld4R+VlUJU3qF
SPUWFe2kzzaxM6pPiLWUVymvUF6j/W9ESko2hH2+rZQdkdLSXeGyst3RQCAV
Y/cTp6zM9PVE2d2jvEH2ZHqehvMlcfg17TM/p3ZNHxA7nvh8Dr9WbSj3knJF
WceabihbIjZXlel8YkcR+56am2WSXUhdXTLJ7qSJE2Vy0iTztelCos/YVWS6
n5Szic5hvxJ7lkwfEx3PDqXk5Mnm+YkJEwbdUew2Yn8Tu5fYG8Xj5C23oxxZ
7HVSjire8j7lbeJj6dqb7qTM8H4Vfs/jofvRHJdyYFE7Saqhn2tkzxN7o6ZP
H3RHDeOKiqkaVZvWdUk7o6gtnifzPGqTHVJ8Hl9D0xXFc833E11rdZ2HDd8j
yhVFNQ/rilIOL6qN+0lwnZQ41cBzx76u9L3BfVHYTcaesjDtf47a/Q/lNhrL
z+j4i6idD1M7h9L5U2iex1Hbdex7ojGO5Gjj5423/OzVUT38mtaItCuK35fR
OGpqa7dOmTHjhQ9+8IP3//KrX/3pM1/84k8GTjnl5oEDDvgP1dxH41nZFwi8
QXO5MTFp0rplhx++csVHPrLwpSuuuHvdH//4v5v+9a/Pb3jqqWM3/ve/k1Y9
+GDdwMCAX0pZ7PaiCAAAGWwUev5udovV/m81tT+W/HTs0waAVk4Tub/v8f89
cA9D6F3TDAc1uL3ujjYhB2MDAIDRwOuLrrXLCW6vr6NN0OH4AADAEO6vWflI
trhdr5OERjEuAAAAIBP+3cHt7zTdCWY5J6ECqNlJjCzHBQAAY8UQ7v9+s7es
0ZkB+zb5uC8NB3UYeajD7TUAADAybj+jhuYadCfoYIxg/yUf96DhsJZQnuop
hLECAAAAAAAAcsOjwv3fA8aaS3M+KwAAAAAAINekXVGVlZW30tZ0RbEHhn0x
ygXFzhgOv1beGPZF8etceqKUh0r1rfo1XVGlpbK0pCTV5PW+dZDXu/Uir/e1
W32+FU+WlCwLl5Q8H/Z4XgwXF7/WV1y8PlxUtIm22+n9Lspb9DrFDqcoJcYp
KpJR9vpYLqe+oqJUWIg3+4TYSdlB2U7Z1stb9kxRO32qHY9HxrxeGff5zPDr
IY4oIfYM76fP074ndjux78dyHJn+Hw6/prll/5B5jPJE8bkc5SGiz0xHlJWI
zRWl/EFDYrmi+Fj2EcUbGgadT+xSmjxZ9k+bJvtnzJD906cP635ibxT7khLj
x6edSXye6V6aPVsOzJkj+2fNMttI8vmWb8p0HbHziMPnc3gftWM6kGhrOqnY
2cSuKPZl2T1R7E9iBxTH5lQy50nNlRo7u7D4teViYt9Tgl1P7HmiWsyaLRdW
UvmsWloGXVHshlL9qXANluPKnC92RnHtXC+9Np1edP2437QrSl1r5emyR10D
VV+mK0qNkdo1nVw8V+zkYpcXxfRFZfQbse67qHV/Lab3T9Bc3EN9/I7au5KO
/TTVfjzNwxxKF71upPHwM1U9guMt8xmsr683t+o9u6L4OD6mpa1t2yFHHbXy
s1/60sN3XHPN9bGrrrpx5QUX3L/yjDMWLz/uuOX9c+a8HJ88+bX+2bNfef74
41esOvfcJS9985sPrv/jH3+77emnL96xevXpW9euXbD19dfHvRqNVshQqERK
WeT2oggAADYOEvr+bvYZq4+HNPYx2nx/zDMHgF7KRe7v+xfyOQAwBEPoXdMM
BzW4ve6ONiEHYwMAgNHA64uutcsJbq+vo03Q4fgAAIDXC7fXrHzEyHJedH7/
uDkuAAAAIBO3v8vykVCWc2IUQM06xgUAAGPFEO6vaSGNNbg9NrD3YojCuY/2
xmdEBQAwNtxegwzNNeiO4WCMYP8lH9+vhsNajDzUojtBh2MFAAAAAAAA5IbN
wv3fA8aa43M+KwAAAAAAINeYrqiqqqqzampqbq2srFxWXl6+NRAIpF1Qmb4o
N1xRvJ/qZFeUbPF6U4f5fG9e4vNtv8Pv3/Skz7e+r6RkfdjjYT/Utr6iop3h
oqI32esU9XgkJ0bnmbG8TlHl71EOJssZ1StEirK7T4i3OL1FRbt72SNlHcNO
npjlm4qq861zh3VEiaG+KD7W7Ff5m+yOIxV+r7xP7BxSDiq7K4qdQ+yLYu9Q
5jmZsfWVdkU1Ng46lCZMkP1Tpgy6otgTpXxR/J5DnyUnTZKJ7m7T/WR6i/gc
2jdAnw/MmiWXzp8vlx5wgBygbdoZRZ+Zvin2MtHx7KQyY3mPTFeT5YoynU2t
raYfKTaSKyrDqcSupLRTi8dNY1R+prA1vzwvfHy8vl4mlHtJuZ6Um6qpyfx8
WFcUR+3jOWNnFB9P4RrZVWX2z32/kyOMr7m6djZXVHSYcZmhsaevD8+5be54
H8+R6cni68/3NvUTpdB9K5+lvv6P5uN2av9n1M5X6diPUL3vofam0DjbaF+d
9TwP9/yp/fx8c4ZzRTVSW6Zrio7r6OzcdtQJJ6z66je+8ci9t99+8/N33nnL
a9df/+Br11yz5JUrrxxYee65K54/4YRlzx9/fOyFj33smZcvvfS+tddc8/tN
//jHN7ZFo2ftevXVw1OpVI+UslZGoz76JRKeKABAoXGh0Pd3s8lWHwMa+xht
vjHmmQNAP0tEbu/7NfktH9gwhN41zXBQg9vr7mgTcjA2AAAYDUGhb+1ygtvr
62gTdDg+AABwe73KV0JZzotRADXrGBcAAABgh39vcPu7LF8xspybUAHUrGNc
AAAwFgzh/u82e8v6PJqxgb0b3fem0/vI0FyHzhgOxwgAGB631yBDcw1Yg4Cb
GEL/PejkOVO4/bzkc6wAAAAAAACAsTFDuP87QC7SkOuJAQAAAAAAOWeIK6q2
tnZZdXX1VuWD4rAjRnlklEuG99k9UrnyRNmj+qyrqzP7K/F6pbeoSLaUlMgj
/H55eVnZ7rtKS998yufb2VdSsjPs8bwZLi7eHS4qSkWU00l5otgRpbxMvFVe
JXYKscPH8j6x16dvMIN+KHZNWZ6pKPuhlO/JqR8qI+pcsy9Oht9oiNvJqivt
irL7ouwuqJEcUXZXFLfPc1BW9rY/qaXFdDWZLqeJE2X/5MmD3qipU992RdFr
dkXxMZmuKD52YMYMuXTOHLl07lw5wKHXA7Nnmw4p/sxsi9u02tjDFcXuJvY2
US2mg0l5m+yuqMwoV1QgMOjWovGbc5hxPcwxs0+Jjk27nhobB31PvG1oeNsT
9U79qfAxfCwlSu8j3D/P/TB97+EI4+vG88/10Hlm/SO5orhWqo3nJe2K4rnj
8Jyx44qPoWsZp77jYtAVtZj6eYr2PUBju5nO+z4dfz6de+K4cXIendNF42/k
Z+odnkG7K4p9cfyaXVHK18ZbdkXxM8nHjmtv337E0UevvPCyyx6575///OPq
3t4bN4fDf9++aNFjGx96aOFr11zz3EsXXPDYyo997P41X/rSn9b+5CdXr//L
X76++eGHz9oVix2R2rFjkpSyIZVKldG22O3FEAAAhuH3Qs/fzFbb+nhLUx9j
yYVjmzYA8sJVIrf3/Wv5LR/YMITeNc1wUIPb6+5oE3IwNgAAGA1BoW/tcoLb
6+toE3Q4PgDA/o3ONbYQY2Q5P6ECqNlJAAAAgNHi9ndYPhPKcm6MAqjZSYJZ
jgsAAMaCIdxfp0Maa3B7bGDvxhD67yXDYS1u3/N4VgBwB53fkU6eT0Nj//mI
4WCMYP9G5zOW7X2Yj1p0BwAAAAAAAJAfPi7c//l/rFme81kBAAAAAAA6SLui
qqurb62pqVlG2coeGPYzVVRUDOuKUi4ndsfk2hWV6a5RrihPSYksoZ81Wzwe
0xX1jUBA3lVennqqrCwV9vtTUXbxsNfJcjqZbid2PSmfEnui2C2kQu+jHP5M
eZls3qao5ZeKWsex6yftJBrJDaQ+GyF7uKLsn1tuKrMWW8KZvijrWPN45Y7K
9EfZPVHKFcVzweOheTN9RPX1Ms7eoba2QWcUe4nYR9TTI/snTjT9Ufya3U6m
14mOSR9H+/rZGcWOKXZGsVdq+nTTDzUwc+Zg6H3aE2W1YzqiuB12RI0bN+iJ
4hrY3ZTpbXondxP7osrLZaSsbERXlOmL4rHz9WM/E3uYuG12RlF4a/b3bn2p
WMdxO2lPFV8fdW1Guh8sT5dZB9XLdStXVHQ4VxSF62OXF7uh2BXVT/M3wOF5
Z4cUj4HbsTxhvdTusw0N8hG6Hn878EB57VFHycsPP1x+dN48eQSdN7W1VY5j
59O7PIN2F9xwzz0/iw3Uj3JHtbS0bDv40ENXfuHLX3747n/+8w9rVqz41Y5N
m254a8OGO3YuX37Xxvvuu/W1n/zkule++c0frP3JTy5ef8stn9762GMf2pZM
Hp7auHFKKpVqllJWUEooRW4vhgAAMAxPCj1/N7vfan+8pvbHmsvGPHMA6Ocw
kdv7fn1+ywcZ6FzTDJf715mQg7EBAMBoCAp9a5cT3F5fR5ugw/EBAPZvdK6x
o1m3dPcRynJ+jAKYF6z5AAAAdFFIPwdwjDz1kQ2hApgXJwEAgHyiay0LOex/
b1mbRzM2sPej+/7cl58TFcPhGAEAe6Lz2Xey/hga+8f6AwoBQ+i/D508a/mq
Bc8cAAAAAAAA+wY/E+7//D/W3JnzWQEAAAAAADmnvb29rKqqqqe8vPyssrKy
WwOBwDJ6v1X5YTjshbE7oZRDKtPrlCtXlN1No1xRvL/EckU10fbw0lL5jfJy
+Tfa/wy7daieODuQaL/phlL+HuVesrmiTF+PPez8sZw7EZtXKqqOZc+Q8hLR
/rDdDzSMv2mkDPFAqb5s7qmI/RhVh+W0irxDnyN6opQritu0vFLmfCh3EvuJ
2JXU0CBjzc0y0do66G9ij5NyOVHYJRWnz+ItLaa/aEhof5KONT1Q7INid9Tk
yaYjynRNsXuqu/ttR5TlhzL7YkdUU9Ogs8ruiBrGnZTOSK4onp/hfE08brun
idvgPrivzP6G8ULt4adix1Nmv/brIjKcYU49UZljptoSNDc8t/00twM0j0vZ
FcXzSfuiDQ2pvoqK1JKystQSqnMhze9T8+fLh447Tv75jDPk1WedJb/yoQ/J
Dxx+uDxg6lTZTXPexK6od/G6qWdaPfeZ+/hZrKd21DrQ2Ni4bfbs2S+cc845
D938xz9e09/ff+W2bduCqVTqO7s3b75yRzJ5yaYHH7xgw9/+dvbG++9///ZI
xNj10ksH0ueTKW2UKimlj+KBKwoAUKCwO0bH381+ZLV/gKb2x5qrxjxzAOSH
XN73W/NcOxiKzjXNcLl/nQk6GBsAAIwGXl90rV1OcHt9xboMANCJ22uVPYbI
j7PC2IvnaKSEshwTAAAAwOTjezfb77JC+84spDl6pxhZjgsAAMaC22t0SGMN
uhJ0ODaw92MI/fdTodShK4bDMQIA9kTnd2TIQf+Gxv6x/oBCQedz5vRZy1ct
eOYAAAAAAADYN3hUuP/z/1hzec5nBQAAAAAA5By7K8rv999aVla2rKKiYqty
xbAbRiXTFcVbTq6cUXYnzbCuKK9XeouKZJvPJ48uL5ffps/vaWiQz1HSviE6
jp08aXeQ8iMpX5Td/2QP72efj3JEWX4o5fSJUl9R5Seiz8322fNk90Hxe1vS
XijlclKuKtU2h11Q/LndFcXHquPYK8Sx3ET8mdm3Fbvbao8o/5Wq0+6W4va5
f/YTsTOJ5jjGc8hzaSVmD31mHpPpdKLX5tyza0p5pjo6BsNuKOWcyvRDcZvU
3h6OKMuVlB63mifrfdoXleGKGuLSEkN9UeacqmtP5wxxTg3nhxrGV2WvRTnD
0q4o+/xmer/Udbd5okbs3+6Kohp4jpI0b/2dnbKfHVE9PTLe3b073t7+Jl2P
HUvKy3c9EwjsfrK5OfXk3Lny4RNPlHeddZb8zXnnyW996lPyU6edJo85/HA5
Y/Jk2d7SIuttz/C7PYPq2VfPu3K4sSdKPY8Buj/p821d3d3LjznmmHuu/O53
g0888cT5GzZs+KiU8oxUKnVaasuWk9988cVjtr3wwmHyxRfnpjZunJLatq2T
PmtiTxTFD08UAKCA6RD6/m52jtXH+zT2MZb8YqyTB0CeeEDk7r7flefawVB0
rmmGy/3rTNDB2AAAYDQYQt/a5QS311esywAAXfA64fZaNdyaXGjrY6gA5sZJ
jCzHBQAAALj93TXc93M+vnezwSiAuXGSUJbjAgCAseD2WpaP74pcJ+hwbGDf
QPf9ZDisY298VrJZCwAAe6LzuXfybBoa+89HAHBCPr5fjQKqRWecrCsAAAAA
AACAsbNJuP/z/1hzYs5nBQAAAAAA5JzhXFGVlZVb7U4Z5Y1SUU4ZuzMqF64o
e38c5adRzhqv1yt9xcVyYnm5PJXq+GFjo7y3tVUutHxE8ZYWGad97NlhN4/p
8LH5osKWLyo6ki+K96n97AbK8Cjx1nRGsS/I75dh9jbZ/VCZbigV9hRxm+wA
ymiP/UDsMDK9QnZPFHuF2FnEPiU+js4znVXKW0Ttmc4iVa/Np2TWx59zu5ke
Jd5yfezEssa5hyfJciVF7aF+I9yH6pdrtHxW7DaKK2cUe6bYBcVhL5RyQ9F1
idudXnY/lN2RpMbA/YwwxrS/id8rb5O6FsP5opQfi8dsOZtimc4muyPKqiNm
jVdF1WLOq9VnRLmi1PXjvpQnyurTsSfKPhe05evObi3TudXZuTvR1fVmvKtr
e7y9fVO0oWH9M4HAlv8LBN58oLU19c8FC+Tt73+/vO7ss2WQ8tnTT5enHHec
XDB/vpzQ1SUbaf7fzRPlxBXF+/gzfu59dG+VlpZuo/dLp0yZcseZZ575xRtv
vPHE1atXHyylPICTSqXmUKbJVKqbtm1y06YGdkStWrWqjD4vgSMKAFDg8N+2
dP3dbI7Vxyc19jGW3DjWyQMgT3xJ5PbeB+6hc00zXO5fZ4IOxgYAAKPBEPrW
Lie4vb7q/M4BAOzfuL1OjfSzZCgP/WWDUQDz4yShLMcFAABg/4a/e93+7rLH
sOoy8tiXU/Lxs4kb4wIAgNHi9u80e8u6bE/Q4djAvoHue3RfflZUDIdjBAAM
Redz72TtMTT2n48A4ARDFM73YD5q0Rkn6woAAAAAAABgbEwX7v/sn4s05Xpi
AAAAAABA7rG7ogKBwK20XUbvtypXk/LE2P0xyheVb1cUu2mqS0rkwbT/M42N
8jetrfLhjg65ZMIEmeR0dckEvWc/kelgouOHOJKUM4h9UewNGskZpfxJyn/E
niPLd2T6otibxM4g9jBZvqBhHVHKE8V9sP+HvU/cDtUdb2sbdFs1NJhuoLR7
SDmcuH8+nl1BdHxCHW+5l0zXFPuWOOxeYp8Ut8X76b3ptKJxmL4lbtvmNFKu
qIhyYilPk3Iw2ZxTaUcSH6/Gaxsbz6FyIaU9SLaa4irv5IfK7JtdV3YnE4df
D+PEsruihjix7L4ofq08XDZfVHrcw/mh+Bi+P1T/9mTOg/36K2eUdZ/ZPVHR
kTxR9jmxzUuc9pv3R2trKj5u3Jux8eO3Rzs6NkU6Ol5b1Nr68sO1tRvurK7e
dcP48anfLFgg//ekk+Q3Tj1VfvoDH5CnHHusPOTgg+XUadPkuPZ2WUf3RXWW
rij7c66eRbWf1gpZQmMsLi7e6vf7B2jfLXPmzPnURRdddNATTzzRI6XsSKVS
49kPRWmk9zWUAMVH8cARBQDYS/ia0PM3sxSl2OrjYk19jDV/HevkAZAnekRu
733gHjrXNMPl/nUm6GBsAAAwGgyhb+1ygtvrq87vHADA/gv/7Ob2OjXSz5JG
HvozspyvUAHMEdZ+AAAAucTt76zM2NH9vRvKcq6MApgfHeMCAIDR4vY6pvt7
QkeCDscG9g0Mof+eKpQ6dMVwOEYAwFD4+0bXcxly0L+hsf98BACn8POg8150
8rwp3H5u8NwBAAAAAABQ2Jwj3P+5f6xZkfNZAQAAAAAAWrC7osrKykxXVG1t
7daGhgbTDcOeGBXli6mxnDP8XiXXrijlqDG9NXV1sob78fnkRMqH6fX3Ghvl
3ePGyUXd3TIxebLsnzp1MJMmyWRnp+nYMT1C7Eaye4PYF6W8QZbraIgvyvL6
mP4edhwpT5RyRdXXmx6ntIMp0xs0kiuKHUBUE3uiEu3tMjF+vOm1Mh1Q7J/i
flUt7BVirxL1x8cmaYzJnp5BHxa/ZicWt0HnmqF5MNvj0H7uI6a8VuyMYvcS
u5a4FhXlXrK7omwOpkimI8rumrKSdmNZ7aXnUbm2eA6Vz2oEN1TM7k9Sriju
26o3TO2HbX1EMtxeaZ+UckVxbcoXpa65uu6qXuWLUtfb7ofiz4a7pnYf1HBe
sIz9UXVv2eY4OpwjSiXDFRWncxK0TbD3q6nprVhr67a+8eM3P93dven/Jk1a
9/eJE9fdNGHC1qu7u1NX0n1/8UEHyc8fc4w854QT5MlHHy0PO+QQOWPWLNlJ
90xTS4usZVeUg2dvOFeU/RlXvih2RRXTnNISsrWoqKjf5/Pd3Nzc/NGjjz56
+m9+85umdevWVadSqUpKOfxQAIC9mD8IPX8367P18W1NfYw1T4xp5gDIL6+J
3N37wD1CQt+aZjjo3+11d7QJOhgbAACMBkPoW7uc4Pb6qvM7BwCw/8I/u7m9
Tr3TehzS3F8oy/kyCmCOdIwLAADA/kmh/RwQzKjPyEOfRpZzpvtnk1wFAADy
gdu/z+wta7I9QYdjA/sOuu9Tw2Edbt/7utcDAMBQ+PvGzefS0Nh/PgKAUwxR
OPdjKA+16IyRxVgBAAAAAAAA2fNT4f7P/WPNXTmfFQAAAAAAoAV2RVVXV08o
Ly8/u8zvN11RdXV1W5uamiRtTUdMRUWFpP1pX5Td6WR3R+Uy3I/qj900dbRt
8/vlQV6v/CLVcgPV9nhLi0x0d8v+KVNk//TpcoDCr9mnxG4n03nE/qDhvEHK
dZTpOVKuKHb2UL/snEqnvt7cZ7qiMv1LIziDzHD73Cadb7qi2OnU1WU6n5Id
HWat3F/agcT+JO67udn0SSUnTRr0YE2b9rYTi/1YvJ/Dr3kOrH3slOLz4uPG
DbbNNSsHE/ufrKTHajmbosrVxGNTnih2Ndn9S/bwvuGcUcoXleGBUn3s4Yga
wRUVVn1zbNdKOaPMqGtgd0UN54ui15FMX5Q9mdeQx2Vvy0rEfu+8gx8sqnxU
1hwrV5Q9mWNnVxcnTuckOIPOst3Rhobtfe3tG56YMGHjP6ZN237j3Lk7rl6w
YNe3DjooddFBB8nzDjxQnrFggXz/e94jjzviCHnIwQfLmTNnyq6eHtnS1ibr
6b5T3icnz51ywmXjivJ4PDeVlZWdQevJxI997GNVUsoS+KEAAPsA9ws9fze7
zdbHdzT1MdasGdPMAZBfbhS5u/eBe4SEvjXNcNC/2+vuaBN0MDYAABgNhtC3
djnB7fVV53cOAGD/xe01yp7QMPUZeejXyHLOQgUwV04CAAAAvBtB4f73lT3B
YWrU/b073M8f74RRAPPkJEaW4wIAgNGga412ujbr/o7QkaDDsYF9B0Povaf2
5edFxXA4RgDA2/D3jZvrjqGx/3wEgGwolO/BUB5q0Zmgw3ECAAAAAAAARscj
wv2f+8eaK3I9KQAAAAAAIOeww6XogNbWwLjKykn15eXnVPr9d1SWlz9fV1e3
rbGx0XTCKFcUh91Ndq9MPl1RDbRt9/vlkSUl8opAQN5Fxzzb0CAT7e0y2dMz
1JPEjqT6+kHnEDt9Mr1BYtAdFLb7otiLZDmI0q4jdvjQ2OLsbaLw6xj1a3p/
LJ/REE9Upisq0xdF58aammS8rW3QAcWh+k2fE7druaJMb1Bd3VBXFHui2Ic1
Y4YcmDVLDsyePbidOfPt8HsOHcM+qeTEiTLR2SnjLS2mLypmc0EN8UQpT1OG
q8msm11JmXOXOY+WM2qIz8nybu3RvvJFZbqSbK4oPpevB7eXdj4pz5Nyc/H1
UsnwPA3rihI2X1Sm60ldK8sPFcn0Yqlx8vmZbqxMV1imK8rmH4tmzMGQa8HX
PSPh8vIUHbd9cVPTpke7ujbdNXPm9t8uWLD7e4cfnrrwve/d/emjj5ZnHnGE
fN+BB8oj58yRB9M9MY8yla59F133Zrru7InK5vm0u6KGO0+5otgdp1xRtO0v
Kiq6yePxnO73+7tbaU1xe3EDAIAc0Sf0/N3sp7Y+rtLURy6C9RzsLZwhcnff
A/cICX3rmeGgf7fXXJ1jAwCA0WAIfWuXE9xeX7EuAwByTVC4v0bZExyhzpDm
fkN7+bxh/QcAADBa3P6uysxwGHno19jL5224hLIcEwAAjAZea9xcw3T1X0jf
OWDfQPd95QQjD3XguQGgcAgKfc9kyEH/hsb+dcfJ+ACww/dMIdyThuY68OwB
AAAAAACwd7NJuP9z/1hzUs5nBQAAAAAA5Az6ga3oDiE8tC35SnV1zZHl5bN6
AoHz60pL/1ZdXv5CXU3NNuWYUc4m5Ymy+6F0OKIyXVH8WrmiOv1++d6SEvnd
0lJ5X3m5fI72xdkX1dpq+qESbW2mXynGnij6jF09yncUGc4VZXcc2Tw/EeX5
sbuOLJdRzO5SynQEjeSM4v5pn+kDYu9UY6Pph+Jazdc0j8rRZB7DfVnH8biS
XV2mB4v9T3u4opQvit4vnTtXLp0/38zAnDmmW8r0Z40fb7alXFfpsWQ4m4Z1
RbFbye5MGilqPpXPaZj5e1dXFB/Drii+bpmuKLsvKtPTlIUrKl2nckZZbqgh
fqgRxqZcVcoDFVEZ6V7g49gRZndGWV4oM/wZH2MLtxUuK0tR3qJsX1xevunR
pqZNf504cedvDjgg9b0jjpBfNgz50aOOkicfeaQ0Dj5YLqB7YCZd50nd3aYj
ahw9D8r1NprnjqOe9czPuU3livJ4eAkZdEXRa9MVRe+7KGXurnAAAJAz1go9
fzf7uq2PH2nqIxeZPpbJAyCPVIjc3ffAPUJC33pmOOjf7TVX59gAAGC06Fq7
3Owb6zIAwC3cXp+crldGHvrOFrfnyklCoxgXAACA/YegcP+7yp7gO9TqZt/D
ESqA+XISI8txAQBAtuhaD53+LrO3rMdYm4Hue9VwUIOhuQadcbomAADeJijc
fSYNjf1jzQGFhiH035dOcfv5ydc4AQAAAAAAANnB/w2W2z/v5yItuZ4YAAAA
AACQG4JCFEeF8K0RIrBciOpflZZ2nltaevghZWUXtZWW3l9bXr66prp6O3ti
2NVUUVFhhv0x7Ihhh1RdXV3aI2N3y+hwRfGW+2qkfRMCAXm83y+votxXWiqf
VT4i9h8pD9JwviPla7K8RxHLFTQk7BeyopxAdmdU2vFjeYz2cANluovsDiPl
JGLPELehPE1Up+me4ra5H+UU4s94PDTP7JQyfVEdHTI5YcKgM2ryZNk/Zcrg
ljN1qumFMn1RyhU1d67pkOLP+Dz2abFXix1U5jwpZxTHeh/N8EVFM+ZvWP+S
yHAqWV4snnuzDR6j8kA58EWZfas5Vq4oW/sRdX0y5912LcLv5IsSNmeUQwdW
+tpl+K+idreVNVdD7iObeyxieaDM8OtMp5iqnY4P+/1v9fr9OxaVlm55rLx8
810NDTt+O2lS6qoFC+RFhx8uP3LIIfKoefPkAbNmyRnTpslJdH27xo+XrXSN
GxobZR173kbhiXLyPPMawM8/rwnsiioqKoIrCgCwr1Iq9P3d7GO2fn6ssZ+x
5uQxzB8A+YZ+dMO/C7OXExL61jPDQf9ur7k6xwYAAKNF19rlZt9YlwEAbhAU
7q9P2azFhbZWhlyaI3wHAAAAyBWF9l0WfIdag3noPxuMApgvJwllOS4AAMgW
Xd8lTtevQvsucxLD4djAvoUhCuM73+37fywBAGSHIdxdc3T2rztO11QA7Oi+
Lw2HdYTyUEshjBMAAAAAAACQHecI93/eH2tW5nxWAAAAAABALigKClESEqJ0
oRDVzwjREhZiwj1e7/ygz/ehk8rKvjuprOyR+rKyl2uqqnaxF6a8vFwGAoG0
K4odMQ0NDaYviv1Ndp9TrvxQ9ra4bQ6/bqL+JtNnJ1FN3/f75T+9XvmM8uyw
x4fdRHYfj3Ly2D1Cyiuk3D2ZTiEVdkrZnVHcfqb/KTOqb/YGcdhVxbF5j/bw
HFnhus1k+pXY4cS+qMZGmWhpkYm2NtMblWhvH9xyxo+Xya4umezpMf1RAzNm
mI4oM9OnD3qk6LMkncPeqThdu7QvSvXBXqrhwi4ky2OVnkvLuTWih4n3q/nI
cCvFxuqKokTs12a462D5l97RFfVusd8H3A9fG7ouMeXwojnka8Lh62M6o/ha
s+dJ1Wz5x4a4oNRr5Q6z5jJKidFrTnjwntveW1q68fGKis1319buvLa9PfU9
uo5fWbBAfvTAA+WRdF2n0TXvpGs6ju6J5tZW2djcLOupnhr2uLEnynK56XRF
lVCtdleUz+c73e/3dwm4ogAA+wYThL6/nb3X1s/3NfYz1lw+hvkDIN/8QOTm
vgfuQb+qalvPDAf9u73m6hwbAACMFl1rl5t96w4AAAxHULi/PtkTdLnekOOZ
G8RwYY7yMS4AAAD7B4Zw/zsqM++G7v4NBzXYCeVpXvI9LgAAyAZda6HT32P2
lrUY6zJgdN6v+/Izg2cHgNFhCHfXHJ39647TNRUAO7q/Yw2HdQQ116E7TscJ
AAAAAAAAyI6fCvd/3h9r/pbzWQEAAAAAAGOCfkgrCglR8pQQZY8LURsRYvwS
IWYsEuLQf3k8J//c77/gE6Wlv55dWvpcSyDwen119ZvshGFnDDthlA+K/VAq
yimTK0/USK4o1S+7oqbQPtMV5fPJezwe+bTl8wln+oPsXifL4aQcTKbXh9rh
relyGs4ZJUTaFTSk7czYHVR2z5PyL7GTibbsRTL7sdxAQ8L77G1YfiXTp2TV
mnY3cXsq6n1Dw6ADqrV10CFleaOSEyfKfivJCRPMz97RFVVXZzqQzPaamwdD
x5v7eAzDeJy49j1cTPxeObZ4PCO5oobzRNn74POVd8nWR4Repz1LI/mi7NfT
iS/K5obaw/PEdVA9XB/PXZydXTSXyY4OmRw/XiZo3s055TFx3dx3hncsM+YY
KFFKjBK3wvdDX0nJLpq3NxZVV7/0j5aWzdd2d6eumj3b9ESdeeCB0pg1S86g
69ne1iYb6frUUN9VdH0q+flhP5TKGJ9B+7NYY2uP1wV2xfGz6aW5Li4uNl1R
RUVFN3k8HriiAAD7EocLfX87m2Lr59sa+xlr/jGG+QMg3xwhcnPfA/cICn3r
meGgf7fXXJ1jAwCA0aJr7XKzb90BAIDhcHttyvZnSKMAasgklKe5yfe4AAAA
7PsEhfvfT/YEHdSs+3s35Gjm3sbIw7y4MS4AAMgGXd8nTtcu3d8NOmI4HBvY
99B9vxoOajA016AzTtcFAMAghnD3edTZP9YbUIgYojDuS9116I7hcJwAAAAA
AACA7ODfKdz+eX+s+XbOZwUAAAAAAIwa+gGt6A4hPPSDZulCIaqXCDHuOSFm
RYQwKKc9Vlx8wQ1e7w++5Pf/7RC/f6CjvHxTU23t7oaGBtMLY/fHsB+G3VEq
vI+PqRmDm2Y4T02mj4pfN1M/k+n1SYHAoCuquFg+LWy+H5vjJ6wcQn7/oHuJ
XUV0flx5lZqbZYw9SHV1g34idkaVlprnpN1CGb6fPXxRdk8Uu5O4H/ZEcT+W
uyne1ja4pX75M/NY5Veyt62cRKpedkWxM4nDr1XYRcXhY1TUsTxGdj7xGJU3
il1GHH7d0iLjjY2DTii7K4rD57EHietmF9K4caYLyTyXXptj4PN5zvhc9iLZ
PFuRTB8Tj4nnxu7PUl4q1Se/VrF7pGg85rUYwRUVtpxKQ67HSL4ouysqo409
rutwbSjPGNdP88bzkGQXFzu4Jk0a9HB1dsoEe7X4uvO14Lq5T7Gni2qII4r2
c6IUeg5lnxApOmYX9fsGXY+lT3Z0JK+fPn3L/zv4YPn1o4+WnzjmmN1HH3SQ
nDV5suyi69JC16OerjV7ocpp3gLUNz+fuXoGM59F9ZlyRfFrH43V4/FspfSX
lJSYrihacroEXFEAgH2DM4S+v51V2vq5VGM/Y82rY5g/ANwgF/d9cd6rBoqg
0LeeGQ76d3vN1Tk2AAAYLbrWLjf71h0AAMgkKNxfm0azVoU01xByWIfC0FxP
rhLMclwAAAD2fdz+bhrNd5WRhzoMB3XYcXvenAYAAHTB67eOdSvksP+Qpv6x
JgMdGELvvWU4rMPtZ0D3ugAAGMQQ7j6POvvXnaCD8QGQiSH035tOcfsZwvMH
AAAAAABA4bFRuP/z/lhzSs5nBQAAAAAAZEuRSlCI4qgQvqeFqFokRBu9/v/s
nQmYHFW5909P78ssmS2TSSaTfV/YBL2IFCgYQBAREXFHlPt5FUXc4dpXXPCC
2xURQT7lovcqoCIiioI0n4AECCTT+0wSErKH7OskmZk+3/vW1BkqnZmkeqbP
1GTy/z3P/6nu6uo67zlV51RnHvw5hz1RS4V4/zIhPv+c1/v9+/3+B28MBl94
ayi0eUos1jl2zJgC+2CUK8rukbH7onhfbW3tEccNxVPDW7ufhsPnZ1fUTHp9
YTTavyvK5v9hX1Sfq4iOV/6mXHNzr/+I/T6TJpmv2f/DfiX2JZmeIvYDKdcQ
R7mnBvIJKVdUJGJ6j7id/IQJpkOIvULcTnb8eLMNdf6k3WPEUa4o5VZS/ic+
XnmsuA0+xuZCOsJdxa4p9hpZ7ifTG9XQ0Bt+z54nDn9e7IriY8eO7fVEUe3t
U6b0+pAoeQ57kSZP7nVHsXOq2BmlHFjqWnBNdoeWake1bfdE8XmUF4uOV9fA
HHu7K0r5lvj6Hs3xxPvVMfZx5vOp76nrZh9zy8fFNZvjrvZTjez74vslP3Wq
bJ85szczZpjjlOcx48+5L/xdaqPNdm+yC4qdUP35oSjdlIM0F/dTtlNdK3NN
Tf9MnHTS4h+eddbuGxctkv968cVd71q0aP+pCxcWWi1P1Fi6z+qUz83mVSun
s025otT85rnP73nO82t2Rfn9/n3hcLg9Go3eS+/higIAjCY+IPT83WxPUTvX
a2qnXJk9yPEDwA3+JoZ+zweHvWqg4P8OSddaZjho3+31drABAACduLl2ub2+
Yl0GAJQLt9el4sQd1m0MQy2Gw1oUbo+dkyRK7BMAAIDRDT933X42FccpCc11
lPrM1F1PuWKU2C8AAHCKrmeK0/X4eFmH7QEnNjrvrdE8b1QMh30EAMAVNZTE
HfQPgP7Q/Yw1RkgdOuNkfQEAAAAAAACUBv9vr9z+rV+ONJd7YAAAAAAAgCM8
8vBUJITwdQgRfFyI6qVCjF8mxLycEOckhfhASogb2zyeu57zeP70sNf74jcD
gTUXhsN7psdi3Q3V1YUayz+j/DDsi1H+JrVfeZzK5Yqyu6GO6ooKBo90RQnR
54oyHUGBgOkdMj1FtbUy19Qk8+z6YQcSO37mzJHts2aZDqTcxIky29wsM+xA
YmeU5S46zNOkXE12X5PNFcWOIf6u2Q67ltgppFxL9Nr0RVEd/fmiUpZXyayX
/UTsTVKuKG6f2ujzVinvkXJjFTuyuB4+j/JNUV/sXqi0FfYzmVEOp7q6XlcU
jYNZP9XdMXeu7Jg/X3YsWCA75s0zx8z0RrFra8IE83h2RpljxX3i+tS1KKrl
CFeUckTZPFEpmycqZe+v1UfTE6Wu70D+rmKHlv0Yda3U+Kia2CXG/WefFl0j
8x6gGvvGio+he4P7zL4s0xdF900Hh+8n2p9rbOTjCnTP9LT5/T1tQnAKdk9U
undsTD8UzcUuygF6vZeyg7KJ3q9sCwZfzLW0PPTXN73p0VvOP3/Tpy68sOfD
l1yy+fyzz143berUvfV1dabHjbaylkP1Kl+bfc6Uyxd1NFeUn8Y0EAjsi8Vi
7fT5veFwGK4oAMBo4mNCz9/NXitq5/9oaqdc+eggxw8AN/iMGPo9Hxv2qoEi
LvStZYaD9t1ebwcbAADQSUK4t3a5vb5iXQYAlIO4cH9dGso6pes5oJIYYfWU
K0aJ/QIAADB6GWnPrngJtRvDUE8pDEc95UiixH4BAIBTeA13c90aac+0cj9n
wOhD5z07mueNiuGwjwAAuKKGkriD/gHQH7qfsYbDOuKa69AZJ+sLAAAAAAAA
oDTeL9z/rT/UrC37qAAAAAAAgKNxhB+K4k0LEfinEOEOIapeFqJhqRCTKCdl
hTiP3n+4TYgblwnxs4zH85cXKiqWPuLzrfnPQGDnO8LhgzNjsZ76qqojnDF2
L1S5vTT2FHup7K6oGVTHhbFYryvK65WLlSdJiNd9QnZXVCjU64qi75oOp4kT
ex0/c+bI5QsXmmEfEruj2P+TmzSp14FEx2bZ/cNuJ3YGsc+IXUbKHVXsi1Ku
KDqWv5un85ieqFmzZPvs2bJ95kxzH7uV+HymE0l5jbhWep22u6LYY6TcScoT
pZxJQgwc/pz9Snxey4vE9fadV53bclFlOMolRX3NNjTI7LhxpjuLx4T9UB08
Tief3JuTTjLdUaZni/s0ebLplupzYHGt9uvBfeT2Lf+V8lVlbH4o/swcV+WJ
4rqtcTnMicXXtdgTNZAvqjh8TqsOs790P5huLLrGfL1y3Gf2QFG/cy0t5hiY
15/dUeyR4tTXm/dQbvx4M6Z3jK6peV1bWgqZxsZuGseDyUjkAPW7s83jOUjz
rIvGoovdULTtbrP5oWi7i7bbKBspq+jzVFtFxbOpyso/0L3z40fPOeeOr771
rc98+G1vy1x2/vmJN73hDU81jRvXEYlGd1RVV3fVaJqDxed04oqi9QGuKADA
aOSTQs/fzlYXtXOFpnbKlfsHN3wAuMJ0MfR7fsywVw0UhtC3lhkO2nd7vR1s
AABAJwnh3trl9vqKdRkAUA7iwv11yZ5EifUbw1DTSKvHjXEGAAAwOjGE+8+k
4hgl9iFxgtXjVr8AAMAJceHuv1+OlzXYHnBiYwj3n/e65u1wxOnaAADoxc25
aGhsX3fiDvoHQH8YYmQ8B3XXoTsAAAAAAACA8vI94f7v/KHm4bKPCgAAAAAA
6I8+P1RciIoHhPAuEcK/SojQM0JUpoWofUmI5qQQU5YKMbdNiDfmhVhE+z+S
EuKrtP8Oyh/p9ZLnPZ61j3q9O28NBA6+MxzumRWNFuorK/scTeyGicViMhKJ
mM6ouro6WV9fb275s2g0an5eTlcNu2iUn0Z5qhooyhX1LXZF+Xxy8dF8Qsq/
pBxODQ0yP2GCbJ8yRXbMmiWXz5/f64qiLTuR2tkZxQ4k9kbRMXnljVLeIOpz
mmoznUjFvih+HQ6bHiRuh11L+WnTel1RfE7ami4q9ipRv8xzsBdJ+aIoaeW2
Yq+TFbMdOsb0Px3LEyXEYc4sc1yUV0nVaHdHWT6qjHI4Ud+UP8l0IdEYcN3s
0upYsKDXFXXqqXL5Kaf0OqNoH3uw2K/FviX+Po+1WauqxXJ29fmirDbNqP5x
uC77ePD3uH57eF9/nqhiV1Txfr4HuJ98D7DvaexY8zqwEyrX2mrWb/Z15kzT
IcbXi6+d+Tm7ofg7NC4c/r7p0+JrzOeheyPT3FzIjB3blR4zpjNdWbmrLRze
3hYIbF1WUbHNckFtWybEdtrupO0O2m61/FCvUjqob8uSgcDT6VjsETrPf1MN
t65629s++6d3v/u6T5933ncve+tbf3zR+ed/Y8HChT+sqa9/IhCJrI5VVu5X
c4OdTSpVNsfbUOaf3RflxBVF8x+uKADAaOR6oedvZ7mids7V1E65ckhgXQfH
F9vE0O75xuEvGVgYQt9aZjho3+31drABAACdJIR7a5fb6yvWZQBAOXB7TSpO
fBB90PUsUDFGWD1u9QsAAMDog5+7bj+PilMqhuZ6EiOsHrf6BQAATjCEu2tW
QlP7OgNObAyh9/4yRkANOuN0bQAA9OLmXDQ0tq87cQf9A2AgdN+fI6WOkdBH
AAAAAAAAgDP43/Fu/84fav6j3IMCAAAAAAD66PNDcZQfqiBEkH5IxpJCjEkL
0ZQRorVNiJlpv/+kpT7fmSmv9/ys13tZqqLimraKipvomDvo84dSQjy3TIhV
z3s8Ox+tqOj6fiBQeHckImfHYrKWtlHasiOGvTDsoGEnFPtheJ/yRbE3hh1S
/Fk5PDV2N01/rqjp1L7pigqF5CN+v3ze5+t1E9mSsjuFlC+KXUF0viz7fdiD
NGmSbLdcTuwHYlcUu4862B3Fr9kZNHu26Q9ib1B+8mTTHcTf79cXpXxI7F2i
8co2N5vfMX1RM2bI9unTzfe8nz/n49gtZX5X1Wt5jQ7zJ/F5uY92H5ZTZ5QQ
hzuj7N4oHhPLF2W6omhc2aVkjpHyRU2YYI6T2Qf2KLFbi31R7IqidLAvivbl
qX/m2DQ0yDRdK665r0b2dnGb1vgcFptrK8mxXctUcQbyQtn9UDZvGL823Vvc
Pxpv85pPnWpe075ry+Frb/Vr5RlnyJVnnilX/su/yBXcR75u7PwaN07m2A9F
9zufi8coR2PFyfK9MGZMj+mJqqnZQf1fn4rFltO1zVD/UjQGKZprqaVC5NgL
RfNtBSVPNS6jGv+ZikT+RuP2QH7KlLuozVvWLFr0+TUf+cjVm2666ZKnv/71
82760IcuufpDHzr/Ax/96Bmz5859byQW+1UoHF5J83A/zxMdrii7L6rYG2Wf
nzznfTTucEUBAEYxXxF6/nb2clE7CzS1U85cNbghBMAV7hNDu98nDH/JwMIQ
+tYxw0H7bq+1gw0AAOgkIdxbu9xeX7EuAwCGSly4vyaVY40yNNeUGGH1uNUv
AAAAow+3n0XFiY/Qfhgl1pMYhprKEQAAKDeGcPffLsfL+ou1GNjReX85mTuG
5howhwAYOWCtGVziDvoHwEDw/BgJz0HddeiMUUI/AQAAAAAAAMdml3D/d/5Q
c0nZRwUAAAAA4MTmMD8UpeIuIfwdQgT/KkR0qRA1y4RoXCLERNrOSAqxoE2I
Ny7zes9Neb3vSPn976Vck/T5bqD33056vfe0eTx/omNeoONX0ve3Py/Eob9W
VMj/CgTkeysr5RxKdTAoAxR2z7ATin1R7IiJxWKmI4adMeyLUvvYU1MOR40K
u2iUC4fDr5Ur6gJq/1vhsPwT1fe85QlK2qK8QXavkOmLikRkhs5lupwaGmRu
3DiZb23tdQjNnCnb5841vUFmFiyQy9mFxKHX/Bk7n3ITJ5oeJfYqmb4o9jkp
XxG/ttowzz9+vOlQMn1LFPO71GafK4p9SexIshxHfb4odiip2BxKKT7GymHu
KOHAF6WivFHsUWK3FdfLPiXliqJxZheSGiOuV/WB+9+hxoi9Wjwu7IqaNUvm
6PNsU5P5fT6v2Y7Vdl+/7H2zu6FUf2wxXU983ThcK4fH1x7lmuLjbf3l99wv
rp/9XMupTnZAvXLeeXLVBReY25WGIVeefbZ85dxz5epFi+Srl14q115+uZk1
l1wiV9P+laedJjvovsi1thYyzc09mYaGnjT7oejcObr/OOzZStbUHKS2tmWb
m1dlWlqWZidMeDLd2PhIurLy98sqKv5Ac+2PNM/+QvPtCerz3+m6/yVTV/dg
+6RJ99D99b3Vb33rTWve975Prb3hhg9uuvXWd275+c/P3ffoo6ftev75GW2J
xIRVq1bVSCl9jY2N80Oh0E/C4fBKmhOddpeaSjnnoPJE2eegcrgpRxy7ovx+
P1xRAIDRyn8IPX87e7aonWZN7ZQzvx3UCALgDu8VQ7vfJw9/ycDCEPrWMcNB
+26vtYMNAADoJCHcW7vcXl8Hk4TDvgEATgzcXpOKEx/BfTFGWD3lCgAAgBMX
fu66/Rwq13NJd18SJdZjaK6nXImX2C8AADgWhnB3HU5oal9nANB53zqdO27P
g6HEcNhHAIC7a42hsX3diTvoHwADYYiR8RxMaK5jJPQRAAAAAAAAcGxmCfd/
45cj+P9dBwAAAAAoI9LyQ1G8aSECa4QILxGiOi9EfRv99koJMfVFIeYvFeJ0
ipEU4sK013t5uqLiw2mf71NtodCNyWDwNtrek/b7f0f7EqmKirY2j+dV9kTR
OTpfoGb+xq6oYFBeUVkpZ8diMubzmR4Y9kCxE0r5ovh9KBQyt8obo8NTo6LO
y26aRsoRrijlC+rHRZSye6OUr4idUfRddjWxEyk7dqzMTZjQ63NiZ9SMGbJ9
9mzTh7T8lFPk8lNPlctPPll2LFwoO+bNk/np083jszQepi8qEultT7VlOalM
pxCNm3l+9i01N5veJdMzRe2aninre33eJ+Vxss5lepRsSdlT7IsqJdZYKFdU
Wrmi2KPFviibM4r7yX3IUv2mM2ryZJmfNq1vnNrnzJH5YoeW3RXFUR6s4n4V
16X6r/xQdJ4M+5i4RqtOM+y34v001hk6X5p9VJaTynREUc3tdC1Xnn66XH3h
hXLtVVfJ9ddeKzd85jNyw/XXy/Wf/KRcd801cj1l46c+JTd/4Qtyy003yS3/
/u9y8+c/L9d/4hPy1fe+t7Dy/PN7Ok4/vYv6eTDX2now09BwKFVZ2Z0Kh3uo
/UK2pqaQbWo62D59+tblb3hDx4pzznlu5Xnn/WGFYdzdcfLJt9GYfDtZWfmf
VNv32rze/0rFYj/ONDff3jFnzq0r3vzmr71y2WWfWXPddR/d8K1vXb7tZz9b
tPuhh87a+eSTpx546aXZhVdeaS1s3NhY2LKlUkoZuOuuu/zhcPj0QCBwF21X
0LzYz/NReZvszigdc/BoriiqaR99DlcUAGA08m2h529nTxS1E9DUTjlToMQG
NYoAuMOZJebNlLMob3GjWNCHIfStY4aD9t1eawcbAADQSUK4t3a5vb4OJgmH
fQMAjH7iwv01qTjxIfRH1/NgsOvnSBzf/mKU2C8AAACjh5H2rBrK7wBjGOoz
SqzJ7fF0kkSJfQIAgGNhCHfXq4Sm9rEOA50YQu995oTjbe5gHgEwONych4bG
9nXHcNA/AAbCEHrvz7jDOuKa6xgJfQQAAAAAAAAcm6uE+7/xh5r1ZR8VAAAA
AIATmLgQFUuE8K8SIpQTovJ5IepeCoebk8HglHQgMCfn95+a8fnOSgnx9qwQ
76LtBymfTFZUfLnN672lLRC4MxUO/29bKPRoMhx+Jh0MLkv7/SuSPt/GtoqK
nW0eT2ebEN0vejzyMa9Xfj8YlJdFo3J6JCKj9N5LidJ7dsOwL6o/VxTvY2+M
8tUMNcXem2O6ouyOKKorxR4oivlauZjsXiL2Fimnk/JFsQ+pqUnmxo+X+dZW
mZ8yRbbPmmX6ojpOOun1LFzY60aiz033E/uiqD52GvU5qaxzcx2me4nOn2Fn
FB9LW9MTRX3gzw9zRQnLq6ScSf0kVeyLsnKYU0o5q+yxu6XUMdw2jxU7mHgc
lCvKHuWMomuc4TFqbDR9V+zKylnjxH4tfs37+Tg+F/f/qH06iiPKHDvLYZXh
uqw60jU1hfSYMQXzetH7HNWbo/sga3mkuE6+Jh0zZshXzjhDrrnoIrnh6qvl
5i9/WW75znfk1h/9SG776U/l9rvuktt/8hO548c/ljvvvFPu+sUv5O7//V+5
+/775Y777pNb7rijZ9M3v9m14QtfOLDmYx/bt+rSS3evePObd+TnzduRmzhx
R7qxcVeqoWE39XlP+8kn71lx3nlb1rz//e3rPvvZpzd97WsPbrr55h9tvuGG
r7x6xRXXrnjDGz6SmTDharr2H0+PG/eJ3MKF16684IJrXr3mmg9tiMcv33bX
XRds//3vz973xBOnH3zxxfkHMpnp+5cvb5EbNjTsWLWqZv369REppe/sD384
NKa5uSUcDl8WCATuo+1ymhf7eE6qeanDFVV8PjXPlS+K1wA/XTN2RdFruKIA
AKORrws9fz/7Yz9trdXUVjlzXelDCAAAJWEIfWuY4aB9t9fZwSThoF8AADAU
4kLP+uUEt9dYrMsAgKGga/3UvfYOhDHC6huOevBcAAAAMBTcfgYVJz7E/iQ0
11fqM1N3PeWKUWK/AADgaBjC3TX4eFl7B/tsAaMTQ7j/rD/e5g7mEQCDw815
aGhsX3cMB/0D4GiMhOegobmOkdBHAAAAAAAAwLH5rnD/N/5Q80jZRwUAAAAA
4ATlASG8HUIElwhR/Vw0OvalUKi1rbJy5rLq6pNTsdiZSyOR85OBwKU5v/+q
XEXFJ1JCfD4pxDfahLh9mdf7y5TP93AmEEikQ6El6XA4lwqHV6dCoY2pYHBb
KhDYk/T5DrRVVHQv9XgKL1iuqB8EAvI9kYicGQ7LaEWFrKBE6D37YdhHw36Y
yspK0x/FW7s3ptyuKD4/x+6oaaDX06uqDndFsfOIvU/sPaL9act5ZDqL2MfE
3iK//3BfFHuJlCuJfUTsRKL+ZRsaDndGTZtmOqPYD2V6oxYulB0LFpj78pMn
m8fxd8y22HPEPiflorKdn2tKc00cfk11mi4r/g7XZfcqCXGkR8nuiir2QClP
ljUOpmfJ8mX1hfdZn/XF5oka0BWlfFEqyqvFzigapyz7sjj0mj1YZt+UA+to
fbL1q68Pll/LvIZck+XZStfXF9KNjYVMU1NPZty43tBrqqEny9uWlp789Ond
HSed1PPK2WfLNe98p9zwkY/IzTfcYDqitt1zj9zx4IOF3Y8+Kvc98YTs/Mc/
5MFnnpEHn31WHvjnP2Xn4sVy3wsvFPYuXty95+mnD+5+7LF9O+6/f/drd921
Y/Mtt7y2/rrr1r16+eWvvHLOOR3LTzutffmpp7avOOus9lWXXbZ8/ac/vfy1
b387s+Wee57d+dBDD+5+/PEf7v3rX7+465e//MCGL3950avveMebVyxceObK
008/a82FF75lwyc/+ZbXbrvtLdt+9aszdz7yyOl7n3564YFsdsb+V15platW
NRXWrKmVUsYKhUKQHVEUD68FE974xnBVVdU0mnfvCwQCv6I5uZzm3L5Gug48
94q9ajpcUfb5XeyKouwLh8PtVN+9VB9cUQCA0cRNQs/fz/7cT1v/0NRWOZMq
fQgBAKAkDKFvDTMctO/2OjuYJBz0CwAAhkJc6Fm/nOD2Got1GQAwFNxej4oT
L0OfEiOsRt31lCtGif0CAABw/MPPNLefP8UZKsYIq3E46ilHEiX2CwAAjoYh
3F2rEpraxxoMdKPz3jUctB/X2P5wBADgDF1rjZPnmaGp7eGI4aB/ABwNXXPP
6fxjDI016I7TPgIAAAAAAACOzZPC/d/4Q83NZR8VAAAAAIATD09CCN8/hQgn
hRiTCoVaXo7F5uSrqt6Qqq4+J1VXd3F7ff2V+TFjrslWVl6fjkTiab//B0mP
5xdtQvw+JcQTyYqK59u83kzK71+ZCgbXpSKRLelodEcmGt2TDIcP0L6upN/f
k7Q8RS/S9q+UHwUC8oORiDwpHJYx2u+xuaKUH8buhbI7asrhqVFOqP5cUbxl
V9QMykWx2OuuKOU9ikZfdz7V1ZnbNL3vczOxi8jn63UUsXOJ/UTsULJ8ScqF
xM4j04c0dqzpgspNmtTrjJo9+3Vf1Lx5sn3mTJmfMsU8hr9nnp/PrTxIqg3L
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
tuvhh1N7n3wyt+fFF1d0dnSs7tq4cU3Xjh3rutgFdeDAxp6DBzf3HDiwhV6/
1n3w4IbuQ4dWd3d1tRcKhZcp/+g5dOhPXbt3/6prw4bbD3Z0fGP/4sVf2Pn4
45/c+9hjV+996qmrO1966dpDudynD61de92B9es/071lyye7t2//cNe+fRcf
2rfvDFkoTKXzNMj16yPKASUTCZ9MpwOFP/85yFva5zuWH8qOckVVVVVdEYvF
fhmJRJZT9ik/lJoz5fa18fyzu6H4/OyO4/fKU+Wna65cUV6v995AIABXFABg
NPEpoefvZ0v6aetDmtrSkYWlDiQAAJSArrXLcLFtnUk46BcAAAyFuNCzfjnB
7TUW6zIAYDAYwv21qDjx46h/pa6juuvB8wEAAECp8HPX7eeOzmdQQnO9Ron1
uD2+TgMAAOXCzWeF7meAW/0Cox9DuP+cd3s+DCWGwz4CcKKj6znp5HlmaGp7
OALAUDHEyHgO6loDdMfJGgMAAAAAAAA4NlcJ93/fDzUbyz4qAAAAAACjFGnz
Q1mpYE8UbQN2T1QqGDSSNTUfyNTXfzU7btxPsq2tv22fNu3vlCXszsmNH786
VVu7MRWNbk0Gg7uSFRX72oQ4QOlq83p7UoFAIRMKyWw0KnOVlWay7BhiD5EK
u34sV9LztH2Q8u/hsHyb1ytbfT7ZWFUl6+vr+1xR7JGxu2n4td0lVY7wedlT
Y/fgRKmuMVTvdNp3Eb3+JvXrj37/664odg2xZ8hyOrXPnGkmP316rzOqpcX0
PpmOI3v/rTE4zBWlXitfFLuYxo41z93O554xQ7bzeel1btIk08HE7iV2IJmO
JCH690VZzijTl6S8UZY3SfmuTIcTh+tUHiblt+Lzq2O5vzTu7H7KNTfL3MSJ
Zi2mI4vqyk+b1hvuO+0/zBVF3zMdU8oXNVDs41GUwzxR7LPi2pQnyu6Ksof3
U5+5v+wrY2+ZeV9yX7gWdlhRbWkab0o3vd5H9/56Gvu2fEvLU+1z5jyy4uyz
H3j1iit+ufH66+997bvfvW/rvff+avdDD/1q91//+pv9zz772/1Ll/7x4IoV
jx1Yty7RtWXLP7r37Hmmu7Pzn90HDz7f3d29pLurq62nuztNSVFe7unpeaan
UHisUCjcT/kp5ZbCoUNf6t6379ruLVuu6tq06Z2dr7zy9q5Vq4xDa9a8pWvj
xnNo33ldW7eeL/fseVuhq+tc+s5ZlFMKvZ6oRilljBIwPVE8v3lrZZBLRpDm
wKRYLPYedkWFw+HloVBoX4TGUHmclNupHL4oNceVr41fD+SK8tE193g8cEUB
AEYr1wo9f0PL9NPWSZra0pEHSh1IAAAoAV1rl+Fi2zqTcNAvAAAYCnGhZ/1y
gttr7GASd9g3AMDoRde6qXvNLQXd9RojrJ6Reh0AAACMTNx+3hQnXub+GZrr
TZRYT0JzPeWKUWK/AABgINxce4+XNXewzxQwejGE+8/5423+YC4BUDq65rmT
OWhoans4AkA50HmPxh3WoGsNwDwEAAAAAADg+OC7wv3f9kPNo2UfFQAAAACA
0cVhfqi45YdaIoR/lRChtBCx54Woo/cTX/b7F7Z5vW9NRSIfzNTU3JhuaLgn
3dT0WH7ixCW5KVOW52fMWJefNm0rvd+ZbWzcm6yuPkDHHkr6fN1tHk8hRb/P
0h6PzPh8MhsIyKzli8rY3FBmbD4kzss1NfIvtO+2SEReTN+dQqmn49gTw2Ef
FHtj2BFTDifNQJ4o+/lVe6YXJxyWU6kPF1DYFfUI9Y1dUdT3111R48ebfiTT
5zRr1uG+KPqM/Upmn5XrSHmiil1RRb4odhgpX1SenUyTJ8t8a2uvg4r283Fp
roV9SOxFEgP4opRL6WiuKMvjlLb7otjHxMfRGPBxpieqqcmsx3REsR+K+8lh
RxS/pxpNTxTX2NxsHs+uqOzRXFFFY2C2349brG+/8lhxX5QDy+6LssKv+ZhM
kScqy32sri6kqqoKSU5lZSEZi/WkYrEDlB30WUd6zJinqPbf5OfMuXP5Oed8
Z80HPnDT+htv/OKWu+/+wu4///lL+xcv/uqBbDbetWbNt7s2b/5uz44d/9Wz
Z88dPXv3/rRn//6fFbq6ft7T1fWr7p6eB3p6eh7qKRT+SNuHafubQqFwN+U2
yk3dhcKnafshOv4yynmFQ4fOPHTo0KkH9+yZe+C116Z3btw4udDZyZlWOHBg
Jh2rMl1KOZG2DeyJom2Qtt4yrh1+mnsTY7HYZcFg8L5QKLSc5sM+5XFSnrZy
uaLs8/xorij+zOtlxZ2AKwoAMFq5Uuj5G9qWftpin2C3pvZ05LwSxxIAAJyi
a90yXGxbZxIO+gUAAEPBEHrWLye4vcYOJnGHfQMAjF7cXoeGY12Ka645UWI9
Cc31lCtGif0CAABw/KH7GTmY6GAk1WwMQz3lSKLEfgEAwEC4uUYlNLWPtRcM
BzrvNcNB+8fb/MFcAqB0dM1zJ3PQ0NT2cASAcqDzOev0ORjXWAPmIQAAAAAA
ACOfJ4X7v+2Hmm+WfVQAAAAAAI5/DvNDcdgPRVvfKiFC64WIrBSi+jkhxrIj
ijJrqc93etrrXdTm938kEwp9NVVZeWemru5PmbFjl2YnTHg1N3ny1vZp03bn
ZszopNeHMs3N3en6+oLpfQoGZaaiQqbp95kZfu3zybTyEYXDpneozxPFvqD6
epltaDAdQkvr6uTfa2rk7XTMu/x+OZW+W8uOJssfw76YYieN8smUyx1V7IlS
zpow1V5FfZhM9Syi10e4otifRPWZPqeWFtOV1D59uumMynOmTZO5iRN7vU7c
72Ivknrd3z4+lupgx1KOz88+KnY0sXuqqcn0SKXpeNPnxK4k9iOxG8oediXZ
PVEqNM7smDKvDXurrLaUx6nPF8VeJuvacf1Zq45ca6vpwTL9UJYjKseOKOWx
4hrHjXvdE8XXm8bpCFeUvd+Wn8qsiV1QNk+VuV9FfcbXgK5Fv74oW5+5nxl2
XXFfeLxisR7qVxddv4PJUOhgMhDoSvr9XclgsDMZiexKV1evSzU0vET3+O/o
Wn6v/bTTvrDyoouuXnvttZdvu+22i3b97ncXHXj55XceWLv28u6dO9/XvXfv
h7s7Oz9WOHjw44XOzn8tHDr0b5TPdHd3f7FQKPx7T0/PNyjf7ikUbqF8k/bd
SLmO8lEp5XtoewHlLZTTKHMpUykT9hQKjXLHjhq5eXPMjJTVtL+OtvW21FAi
FD/FU4a1w0fx85bmXjXNsRnRaPSqYDD4PzQXVtD7fWp+cNTcKcccLHbCDeSK
itF9UkH3tYArCgAwemEfkq6/o/n6ae8lje2VO0+VNpQAAOAYXeuW4WLbOpNw
0C8AABgKhtCzfjnB7TV2MIk77BsAYHTCa4Db69Bg1tvBMJLqNoahnnIkUWK/
AAAAHH+4/awpTlxTPxOa6zZGWD1u9QsAAPrDzX+rHC/rban9AicGOu+1uIP2
j7f5g7kEQOnwWuDWHDQ0tT0cAaAc6Jp/pTwHDY01YB4CAAAAAAAw8tkh3P9t
P9RcVvZRAQAAAAA4TpFHOqJYqOLrECK4RIgIbavyQtS3CzE+JcTUNr9//jKf
74y013tuxuu9NOX3f6wtELgpHQrdkY5GH8rU1Dyfrq9fnW1q2pFtaenMTZ3a
nZs5s8AOpPZJk2R7U5PMsyeJHTzs6WE3EZXBjqI+NxF7fGxOojR7gurqZIb9
QWPHmllaXy+fpP130HmuoONmhkKmK4qdMMVuKOVyKnZH6XBF8flD7Iqi+vt1
RXGf2HHEPid2IY0b1+uLorExPUoc9iexO4ldUdzv/jxJR4vNF2V6miz3kumJ
ov08pqY3iceZx5zdUDz+vFWeqP48SurasM9L9UP5opQrikP7TU8U16KcWOyK
mjhR5qiffWEf1oQJMtvcfLgjin1gXDt7olTfi/1QfP9wDeyFsvufrPpMJ5Tl
jepzRKnj7Mfa+6le8+f0nWQkUkhFIl20PUjv9yUDgd1Jn29n0uvdQXNgN73f
Sf19jepfTff4svYzznjslXPOuWPVokXXr3zXuy5f+7GPGTvi8VP2/OY38w6+
8MK8g6tWnXRo587TCocOnU55E+VMCvuezil0dZ1PuUhKeSm9v4LyPlveS7mM
/VD0uUHbMygLKDPo/UTajqXtGAq7oQIULzugKBWWDypEx4StbdDaV1GmJcRH
c64+EomMC4fD49kTRe/fTPkk7fstbVfV1tbuq6d7Xc0Pu+NpqHPQ7mhTrig+
N7/mtYDfF7uiPB6P6YqiXB4MBicJuKIAAKODU4S+v6M199PeLzS2pyPvL204
AQDAEbrWLMPFtnUm7qBfAAAwFAyhZ/1ygttrLNZlAECpJIT769BwrUm6+2qM
sHrc6hcAAIDjB37uuv2cGa7njqG57sQIq8etfgEAQH/wWuLW+qSjbay7YLjQ
ef86udfiGtsfjgAAjo2uee5kjTE0tY31BRwvGML9+1R3DW73DwAAAAAAADAw
M4X7v+vLkUllHhcAAAAAgOMK2b8fykvxU0I5ISqzQtTRtjkvxOS0EHOSQpya
8fnOSnu9i7KBwGVZv//D9P66Nr//5mQgcHcqFHo4HYk8l6qsXJmurd2eaWw8
lJswQS6fOlWumD1brpgzRy6fPl22T5wo8+x7YmcR+3i8XtMTlezPVcROokjE
9A+xcyjDbiX2CDU2mq6oJ9gVVVkp3xuLybmUBnrNThgV5YVS/hi7U6acrijl
q+lzRVG/KgdwRSn/lek9opq4P+xyMl1KNF5m6LXpTaLPzH7TcUc4k44VPp49
TTxmHHZO0XnS7HRilxPVZrqTin1Qdi+U+qz4uiiXVzTa625SHit7LGcV+574
euXYidXc3NfHLPeRHVHUT3aAZbivVKfpxip2RNn9UHw/FPuhbH1IWrF7rQ6L
ckQVu6JsnqgknTsZCvXQPX2I+rmvLRDYRce+RuddR228Qq87UtXVHdmWlnx+
4cJlK9/61mdWX3XVo2s+/elfbLrxxq9tisevWv/1r5+14VvfmrPhnnta9/7l
L+P2ptNNcvPmpsLeveMKhQJnPHueKFPY+USZTZlrOaBOpv2n0vY0yulWTrP5
oSZZ56ilVLIDaiD/k+WLUvGUcRnhcwVpXrXQPf+mSCTydso7aN69h+bGJ2he
3Ebv/x99tqm2tvYAu6KUw8nubiuHK2ogdxTPxQFcUR2U/4YrCgAwymgV+v6O
dlI/7X1WY3s6Qj9pRTmfgwAAwCSEnjXLcNC22+vqYBJ30C8AABgKhtCzfjnB
7TUW6zIAoFTcXoOGc00yNNeeGGH1uNUvAAAAxw/83HX7OTOcz5yE5vqNEVaP
W/0CAIBidKx3Tp8Zx8taqxJ32C9wYqDz/nUyh+Ia2x+OAACOja557mSNMTS1
jfUFHC8YYmTcp27PJ8xDAAAAAAAA3OF9wv3f9UPN5rKPCgAAAADAcYA8ih+q
IERwoxDRpBBj0kI05YSYRK9nZYQ4OSXEmUuFOD/p9V6arqi4KunzXdsWCHwh
6fd/MxkI/Jhe/4a2T6RCoZeTkcjqZCy2LTVmzIFcY6PssFxRy+fOlcsXLJAd
c+bIdnpvuoLYDVRV1esrYr9PRUVvLG8UvzbdPZaTKK38R+xNqq2VSylP0vs7
af+VlZVyPm2baV8thb0w4XC4zxVTLi9NsSeq2EXF+7ntELdNdU+i7fmhkPwG
vf6j3y+fV64o7o9yLLEvSvmc2IPFUe+LPVFOXVF8nDVW7Iiyn1d5mHg8uQ66
bgN7k4o9Umqf5WA6zHtla9N0VKmo9ul+MMOeMLsbaqA+luCHStnvG/v9U1zz
QLGOSdPrtOWKovuuqy0Y3E/39jZ6v4b6mqVaXqRan8pOnPhYxymnPLrqoose
Wfvxj/9+w403/s/mH/3ozi333ffNnb/97f/Z9rvfLdrz8MNzt9577/g1999f
u+WZZyoLy5ZFC2vWhOWqVSHL7RSxPE817HyibT1t66xtI6WZMoF9UrRtpbRY
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
+9+0z/enlNf7j6TXu5Te59t8vlfb/P5NSb9/WyoQ2JUKhfanIpGDqVisO1Vd
XcjU1clsY2OvP6ilReanTpXts2f3eqLmzJHts2bJ/PTppreIfUKmq4h9UeFw
ny8qZfP9mOF97AyyHD9LKI8HAvIO+o5yRY2vrTXdUOyPiUajpjdGuaLYG6PL
F8Xh87OThvd7qc4AXYIWqvG8YNB0RT1MfXhO+YpsvijTt0TfP8IVpd7zZ/bP
S3BFsaeJxzc3YYLp5mqnMWdPlxkef7ouuYkTD3M6pen75rXgsNvJymHnZj+U
df4cn5+vMXuo2AvGDjA6p+mKamg40kPFfbf7n3hru659n5Xqh7J5oZJW+s7L
bXIsL1VfDba2kr3ppn37aC5sor5laHyeWnHGGf/z6rvf/Z/rv/Slz2y6444P
7PrlLy/Z+etfn7/nD384p/Ppp43OVOqc/StXnrVvw4Y3HNyzZ26hs3NyoVBo
LGzcGJVSet1eB8qMPxgMTg2Hw5fQ9ut+v/9Rr9e7yuPxdNFW0nsZomscoWut
5oTyN6k5yVEep3LMyWJXlP2cxa4oqrNAda6n4/9M68JNVOvZ1KdG7pfbAwsA
AGXiCaHnb2mJAdr7qqb2dOcmxyMKAABHh9dHHeuU4aBtt9fSwSTuoF8AADAU
DKFn/XKC22ss1mUAgFN47ru9/ri1Fhma+jDYviQ011OuGCX2CwAAwMhlpP0O
kHq7ewQjqS/GMNRTjiRK7BcAANjhNcStdUlH2zoTd9gvcOKg834zjtG2obl9
3TlW/wAA+uZ5wsW2dcdJ3wBwCt9Puu7V+AioQWcMh/0DAAAAAAAAHMlM4f5v
+nJkSrkHBgAAAABgpEE/eirYEbVMiOir1dVj0g0NTbmxYye119bOzlZXn5KO
xd6cikTOz8Ril6aj0fcnY7F/pfdfoNffaItEbk+Gw/elQqGH04FAIuX1Lkl6
vdmkz7eqzevdQNlK73fSdh/lQNLvP5QMBnvSkUiBvUd0/l6PkOWLytp9Uewo
mjmzz1PEfqFcc3Ovp0j5otgnxP4e5QgaIEu8Xvm43y9/TMe/NxqV8yorZZPN
TcP+GI5yxvB+Hc4odtWwh4bP29DQYG7ZFeUXr7uivq5cUcp5xY4i2s9uLBpz
s99H+KCUI6q/z44WPtbuiho7ttcVNWWK6ejqmDdPdixYIDvmzzdf8/Xgz/r8
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
Ttxhv8CJg5v3m6G5fcwnANzHEHrmX8LFtnXHSd8AcIoh3L9X4xpr0BnDYf8A
AAAAAAAAR/KEcP83/VDznbKPCgAAAADACEBanqi0EIHNDQ2xZGPj2OS4cbPa
x407Kzd+/LuzkyZ9PD9t2pfaZ8++JT9jxk/Tra2/yTY2Ppqtrv5HqqpqKaU9
VVn5aioS2ZSORLamw+FdyXB4fzIUOpgKhbqSgUBP0ucrsKMnzY4oFa9Xpv1+
07ljOo3Y9WR3RQ0Uy2PEHilzS+/T7O6JRl93RbFHyeaLShXFdEXRMT8OBuUV
9J059N0Gm7OJw6+Vs4Y9NuyOYVcNp9yuKH6t2ghSTWGqbxKNy9uptm/S6z/S
2JmuKNHrPzrMd8R95T5z2B1l+aP6HFLKw+XEF8XHqON4rNmLVF9vernY6ZSf
MsV0KHXMnSuXL1zY64tiV9TJJ/f6oubPN31RpmeJw34pa2s6ouj7ucmTe91L
LS0yO2GCzBY5v9KWh8n0RLHfq1RHlN2npcaoONaYmfceu7Ro3LPsiaK6uNaO
OXNM95UZ6mv7zJm99dPneR4LGhe65wttdI8ng8FtdO8vT9fVPZubOfP+leee
e+uaj33sU5u+8pVLt37ve6d3/t//O6Xw/PN1lg+qom/eSemxUjEK/VB2TFdU
OBw+ne7xmyjP0D3/Gt3nPeyKKvYz2Z1Nyh1l90PZ/VFDjb0NnodRuhfU/Ob5
2NDQYIb27amoqMhSP+6ORCLvaG5ubpkzZ07A7YEFAIAyc7rQ9ze1rw7Q5js0
tjkc+Q9HIwsAAP0TF3rWJsNB226vn4NJ3EG/AABgKBhCz/rlBLfXWF3PGwDA
6IF/i7m97gxmfdVB4hh1Def6amiuZTRcLwAAAOXB7edIceJ6uzsghsP6BptE
ifXo/l1Srhgl9gsAABhe691aZ4+X9VUl7rBf4MTBzfvN0Nw+5hMA7mMIPfMv
4WLbWFvA8YQh9N2rTuYhE9dYg84YDvsHAAAAAAAAOJLtwv3f9EPNFWUfFQAA
AAAA9/DQDxxPXIgK9kRRAgkhYsui0caXKyunp8aM+ZdMU9N70q2tn8tPnXpr
ftasX2Tnzn04P3fuU9mpU1/ONjfn6JhVqcrKDclodGs6EtmZCof3JcPhA7Q9
lAyFeiiFdDAoM4GAzPh8Ms3+HvYc2V1H7DeyfD3sCDI9UHZXlHrPqap63QfF
bikrKX7P57CSsruiLF/UYa8pSyjKFXUlnWNeLGa6otgZw+6YMWPG9Hlk+DVH
uaKU20mbK4r6EKO6plBfL6B8k/pzmCtKvO5D6s+JlGTHkvJH0XnM8WIfkhNX
lD3qOli+qGxTk8yNH9/rjJo6VbbPmiU75s0z/VBmFiyQ7fS+nd1K7IuaObPX
EzVtmumIyk+aZH43x36o5uY+R1SmsVFm6up6PVE0vqbnivvB/Svus4ro3xFl
3lc8DsoDxX237o8+f5aKNS7mfUfXN0f94xrNmtkVZfXJ7JfqE33Gx5h119Qc
onp30viszIwf/8/8/PkPrLrggts23nDDp7bcc8+l+/70pzN2PfXU9D1//Wtj
YePGqJTSN4p9UEeDXVF1Pp/vjXSPx+vq6p6LRqPbil1RdieU3QfF80PNEfu8
LJcrSs1tbiNCawHXxHWwL66e7nuel/TZnlAolA0EAj+l1xfRvvFwRQEARiE1
Qt/f1B44Sru7NbaLvxcCAEYy9M9xLeuS4aBtt9fOwSTuoF8AADAUDKFn/XKC
22usrucNAGD0wL/F3F53RspvQ2OAmsqVRIn1JDTXg+cGAAAAQ7j/HCmOm+h+
9paCobmWciVRYr8AAICJC/fWI91rfbkTd9gvcOKg8x52Mo/cnhOYTwDoxRDu
rS+62sbaAo43dN6vTohrrkFXDIf9AwAAAAAAABzODOH+7/lyZFq5BwYAAAAA
YJjp80PRtiIhhC8tRGCVEKHFQlS9KMS4ZCAwKxUKndlWXX15urHxhsz48bfn
Jk16qGPGjH/k58xJ5mfPXpmfOnV9prl5S6amZkcmFtuTjEQ66TuHksFgN32/
wH6ijHJE+f1m0uzvYfePcv3YnT52l5HdE6UyZkxv6DM+rs8FVRzeb/+Mz198
jOWLWkLt/41e/5iOv4rOuaCqSjbGYjJKr5UPij0y7Ithl0x/DptyeGqUo0Z5
cHhrumooM6jNi+n9t0Ih+XCxK0oUuZNs7qi+FI8v9askV5TyRXF4/Gkssg0N
fc6ofGur6YzKswuK/UrsUuLMmmW+z1uOqBwdx46oLH3H9EPR900/VH296aHi
c6fZA8aeKKqV7x/Td0XX6bD+8HuVonup3/uJ67ffP3b/GN9ryp1l9S9LNfX1
i+pWzij2X5lOrLlzZQf1rX3yZJlpaiqkx4zppO9tpD4tpXnx8Ipzz/3Rumuu
+dzW73//8l1///u/HFixYnph5cqxWxcvrpJSBigVbi8ALsH9rvX5fKfTPf81
ytORSGRLIBDoZjeTmlMDuaJ4PnL4PXubyjX/7K4o1T7XE6L5plxRyt9G7/fQ
Nkvbu2i+XkzHtFCf4IoCAIxGVgo9f1Nbc5Q2f6mpTfx3BACAkQ7909y1Ncnt
dRNrLQBgJGIIPeuXE9xeY7EuAwCOhdtrzmDWVp0kxMjpn6G5lnIlUWK/AAAA
jBziwv3niD1xvd09JoYYWf3T/bukXDFK7BcAAOh4/jj9d8nxsrYO9tkBRj86
72En88jtOYH5BIBeDOHe+qKrbawt4HhD5/3qBENzDW72DQAAAAAAAHAkVwr3
f88PNdvKPioAAAAAAMOEtBxRstcR5X1AiEBCiNAyIaKrhKh5ToixS4WYlBRi
QU4IY5nf/95kKPS59JgxP8yOHftQbvz4F3KtrStyU6ZszE+Zsi03ceKeTEND
Z7q6+lAqGu1OhsMF09HDXiifz/RCmW4oy8vUl/5cUcFgr9tHeYzsrij299TW
yiw7itgrxL6fykqZpu+k1PmLU+yO4mPt4X103BLK43TMHbTvKjqn3RWlfFHK
TaN8NbxV/phy+Grsrih209h9NTVUwyzq7yWUb9P7h2n8nuNxE+LYUf4kHnOb
O8kcY+VHGowziq8Ju53szqjmZpmbMMH0QbFfyXRHTZ78uh+KPsvSMX1+KPqu
6YZi7xf7ofh6Ul1mfdRP0xVl+aL6vF/KAWZzgbEHq88bpa4730t0Dq6X75sc
1WjWR3XkWlpMDxTXYdZu1XFYVL/GjjWdVvw97g87ozooKzjTp8v2SZO4T13Z
xsZddP6V+Vmz/l/7mWf+fNXll9+4/vrrr3rt7rvP2vXcc9Pl7t31hUIhKqX0
n8CeKIb7Psbn851G9/sX6R5/PBQKbaD3PexFY1eTzcnUryuK56TdFWX3SpXL
GcXhtnj+8bm5LeVvo+yhz+m2qr2LtnBFAQBGM38Q+v62NmuANi/W2OZwZRNl
tpMBBgAAG3GhZ00yHLTt9rqpq18AADAUDKFn/XKC22ss1mUAwNGIC/fXHHvi
ervrCEOMrDU2obkePDsAAODExu3nx0h8nuh89iZKrMXQWIub/QIAgLhwby3S
uc7rSNxhv8CJg8572Mk8cntOYD4BoBdDuLe+6Gobaws43tB5vzrB0FyDm30D
AAAAAAAAHMmtwv3f80PNE2UfFQAAAAAAjdAPGE9ciArOA0J4lwjh7xAiuF6I
CL2uflmIhheEaMkIMZ1eL0wK8aacEG+nvH9ZRcXnl/n932+LRO7PVlc/k6mr
W5lpaNiabWramx037iBtu9L19T2mPygaldlQSGb8fplm/5PHY8Z0FSlfUT+u
KH7Nfp+0ckXReUyPkXISKU9Ufb3MNjb2+ns47Pih40yfELXb5xMqdkWxI4k+
N89ti/reS5Qn6PUdkYh8Xywm59M5GymVVpS7SfljQnQ872toaDCjyxXF700v
DmUmjcHFlG/R64epT4vZi6TGUBzFFcVjy+PN48BjQH00fUw8voN1RSlflAq7
ldT1sdxK7IRiHxP7mcz3tP8IPxS7oag/fdePrwvXZ7ms7Mmo8Hcsp1RKfddy
SSVtTjC+vqYniq5PnmpgpxN7ntrnzJHts2aZ3ifTG6WcUXxf0bGqPnXfZSw/
WY4+5/N0tLTIDvrecjrfcvZgTZ1ayE6dup/Ou2H5G9+49JVLLnlo3cc+9p2N
n/vc1Vtuu+3cLb/97Sy5fn29lDJ0gjuiFB5Ktd/vX0D3+b/S/X4/ve7weDxd
PK/YyVRP91HxnCp2RfFr5W5Sc2Yo84+/z+fmcxWfW7231WS6oih30edwRQEA
RjPfEPr+tvaJo7S7SWO7w5U2Su2xBhgAAGzQP9e1rEeGg7bdXjN19QsAAIaC
IfSsX05we43V1S8AwOjA7fWmOHG93XVMQujrY6LEWgyNtbjZLwAAAO7Dz123
nx8j8XeAIfT20yixHrevi65+AQBObHQ8g5z+myShoW2diTvsFzhx0HkPO5lH
bs8JzCcA9OPW+mJoahtrCzje0Hm/OsHQXIObfQMAAAAAAAAcCXuW3P49P9Tc
WvZRAQAAAAAoPx5pOaJoW5EQwvdnIYJrhAgvFqJqiRD1S4UY/6IQU5cJMe9l
Id5A7w3KRUkhrkgL8XHa/5VlHs8P2zye36S83qdSwWA+FYlsycRi+1PV1YVs
XV0hV18v8+zSqa6WWXY8sY+InT3sMRKWr4h9Ruw2YmeR8jhx7O6oYlcUe4GU
k6imxvT1sMuHvT6mg6ilpdfzw34f+pz9QVRbrzfI5ogyvUGWIymjHEm283Je
ptd/p/yE9l9Jn8+jjLXcM8oRpXwy7KkJU438mp02/XlthuqKUn4a5capocyg
z9/Brij67BFqf7Hq50DOKMvRpZxZagz6PExD8UQN5I6y3EoZdkZZMd1LvE/5
obhtdZ2U28vu9OLrb7/2Nk9Yjq51TnnC+Nx8TjrOdEaxa4rPyeG+8j1En7Or
qn3KFNkxe7bsWLBAdixcKDvmz+/1RdH+fGurzE2YYLqt+N7K8P3E9XLb7Jqi
5Dj0Pk/ny3MdjY187xVyU6b05Bcu7Fx55pmvrX7nO7Nr/+3fntj8ne/8bMfP
f/757f/7v5dsf+yxhYXVq8cVCoUoPFF9sCsqSHNoPN3n76B8y+fz8b8Rt4RC
oe7a2toC+9eUq6mqaB7y3OA5ofbx5+V0Ralz291Qqm24ogAAJyBXCH1/W/vV
Udr9kcZ2hzN/O9YAAwCADfqnu5a1yHDQttvrpa5+AQDAUDCEnvXLCW6vsbr6
BQA4/okL99ebkbr+6B4bo8R63L4uuvoFAADAXRLC/WeHPXG93S0Jnf1MlFjL
SLtO5eoXAODExhDurUPHy7qqEnfYL3DioPMePtY8MjS2jfkEwMjBjfWFMTS1
jbUFHG/wfNF1vzrB0Ni+zgAAAAAAAAAGx3bh/u/5oebKso8KAAAAAEB56PND
xS0/VFqIwCohQs8IUfm4EHW0bV4mxOSXhZiTFOLUl4R4C71/O71+V0qID2aE
+D9tQnyJ9n2H9v2M8gfKs0mPJ9/m9W5KBgL7U+FwIV9Z2efOybPDiT1BtM/0
AAUCvW4o9hVZnijlLDL9QCrFniDlirKcRn2+KOWKamw0nT651laZnzy5N+z5
GTu210nEzih2ESlvEDuDlHuK3UjqPOz7oe+YaWqSS+m8T9K+O6kP76Xj5rIr
io6tra2VdXQ8b+0eJ/bKqAzVEVXsqyl2RfG+Oso0en0B1fdtquVPVNsL1E+6
Dr3jyGPLXijljKKY7/txcPV5osrtilJuJ5uDi1+zy8lsk31OXK/NcWXWa8V8
z/cAX3s+F99P7CBjNxhdY3Y6tU+aJNunTpV5Sm7iRPNeMN1O7IyyXGHcz5S6
5jRW7BPj77Abqn3uXNk+b55snzNHts+YYZ4nT+fkc5neMXZFsYOKa6fzsfss
y44xTu/YFai2bmrvUKapqZPOuWelYWx59corl2/40pee3XrPPb/Z8+STt3Sm
Uh/b39FxduemTVOklDWUAMXj9uIwwgjGYrHZ0Wj0/R6P56f0vi0YDO6kudbN
/jXlilLzjT1Nxf4o+5wphyvKPvfsfii4ogAAJzCzhb6/ra05SrtnaWx3uPO7
Y4wxAAAo6J/wWtYhw0Hbbq+VuvoFAABDwRB61i8nuL3G6uoXAOD4Jy7cX2/s
ievtbsno7GuixFoSmusZrdcQAADAwBjC/edGcUYSup+9Rgm1GJprGa3XEAAw
sjFE+deghMO2da/x5U7cYb/AiYPOe/hY88jQ2DbmEwAjBzfWF8bQ1DbWFnC8
wfNF1/1qOGjf0Ni+zgAAAAAAAABKZ4Zw/7d8OTKj3AMDAAAAADAETD+UtBxR
tPU+IEQgIUSIEksKMeZ5IZpeEqI1GQjMWub3n7xUiDNp/3mUS9NCXEX5RLqi
4nNtHs9/JD2eHyS93l/Q698nKyoS9H4pZRXlNXq/N+n397A/J1dVJXO1tb3+
prFjTf+S6exhN5DyAtm9UEUeqL7we3Y6Ka9TsSuKnUbsH7K7otgZNG2abJ8+
XbZPmfK664edUVwDu4n4HBzlm7JqzdH38y0tMk/fMUOv2+i7iXHj5J3Uhyup
rXl0/DjLFcVhR41yydRY+9kZE6UaY3T+cjmj+nNFceop06jdC2gMbmlqkn+m
fr5oc2OxE8v0L7EzynIwKU+U6V/isVW+LB2OKHvYF8bpzw9l1Wf6rOh3dV+U
T8xyRZlOL/Z50TVhl1OernPHnDmyY/582bFwoexg39PMmaYrLEfXz3Q88XjY
vFRmf2nc+J7gY8zz0L2St1xTpmestdX8rO/escbUHCPLO0VjV6D6eyhdNM4H
qD/7ktHoLrqXtlA961a/4x3t6/7t3xa/9oMf/H7vo4/+4EBHx2e6tm+/pLB3
78K9e/c2SSkjFK/bi8QIxEPzZ2wwGDzX4/F8nfI0vX6N5lo3+9nsrig173if
3dlkd7aV29umUuyJstqCKwoAcCKxRej7+9qbj9LuyxrbHe786hhjDAAADP1z
XssaZDho2+11Ule/AABgqOhYv9xqV3cAACcGbq81/5+9MwGToyr399f7OvuS
mUkm+56QBAQEXGgWN0ABEQUBRUCFe8V9QUUbr6joH6MoqwaDhCSzZQXBsDUi
O1lmep2ZbGQIWciekD3p+v++qq6hGLL0MF1TPZnvfZ7fU9XVVXXOd7rO6c7c
y2u+rz0Ryp/fwCGT+5KrRLpRkyAIgmAtYbL+e8OYsLnldpsQ5dd3ptm/S3KV
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
fCBM+TMOIZP7It8ngiAIJy5mf591N2Fzy80p+TQOEZP7k6uEulmXIAj9D6v+
DdJX1tEP+j0hnPiY+bwdbx71tfnzQdYIQRDEFdXdhLKoTRC6g5nft6Es2g+Z
2L7MQ0EQBEEQBEHIH54i63/L9zRTcz4qgiAIgiD0G5Qj+KHiRO6XiHzYBrEt
fZ2oehnR0BjRuBaiU5qJPor9TyaILokSXR23278Zczp/2OLx/F/U6/1zzOeb
HvP75yZ9vqfiXu8rMY8nHnO5VrY4nW81Oxybog7HtqjTuSvqdu9FDkQ9Hvbv
pOOBQDpZVKS0VlQobRlXVNvw4Zofin1D2LaOGKGk2O3DfqeBAzW305G8TkZ3
E95X/T/sgOLwfuZ1MhPVDWV0TekOKN059EFdUeyf4nuzc4g9SR5Ppw8ppvuQ
2BkVDHYmwcm4op42uKImIBV4zV4Y9tOwk4b9MRVojx0yus9JdTmZ4Ioy3r+0
rEwpxfFq1HKay6XcjD5NRz9eqK1VPyvVF8WuqIkTlfZx49TPMYUx4dpUzxN7
ovD4dTqjkBg7oxwOzQfFY6TH4Ific4zX6L4p3TN1VFcUf7b8ObArCs9NCv1M
smeM9/kzwnHVJ6X7ofiz4M8Fn09Cd1V5PIfxvO5DO9tj7Ijyettw3uJ4ael/
ErW1T7Sfeur8NRdfPPetm29esP4Xv/gX8tT6H//4uTXXX/+fVRde+CS/33bS
SfUrzj33kY4bbpix8de/nvn2nXc2brzjjoXrfvzjRR3XX//MG5dd9uyqCy6I
rP78559f89WvvvTm17++uOO665atvuyyxcs/+tH/to0b9+jyiROnrTr33PDa
r33taxvD4U9ueOihSbtfeKFGUZSg+KF6DLuiiv1+/8ler/cHyNNOp3OdzWZT
XVG6r4nnIHuiOPo81Odgrl1RfO8jzWndEZXxRPGxXWVlZUn0Q1xRgtAzMv4n
dS3tup5mXuvvq74kJ7aYa/U+okiQ6O+leF1FNHsoMo6o7hRsz8L24zj+UaKZ
p2M7hWjWBBwfobmk6nHNtAKi6d6ML6qX6zX6n3QHFGXq111YXX1Y3FfeRpxd
rutt8NPU1L+5VR+j7Y+b3LbV4b+ZlhyjfkEQ+gchMmeNCWXRttXroFl1CYIg
9BQz1i+r2jUzkSzrEgSh7xEi69cYY8KmVptbQpRfv4cjJvfHqroEQRAEc+Hv
Xqu/G4zpS5j93dsdQib3JVeJdLMuQRD6H1atO2av6blOOMu6hP6Dld/ffW3+
fJA1QhAEcUV1N6EsahOE7mDm920oi/bDJrZvVgRBEARBEARB6D5byPrf8j3N
1TkfFUEQBEEQTnQ6/VBhIju2jsVErtVE3maiwDKiYmwrcWwwtqPxekqU6Ezk
/DjR52JEVyA3YP97Ubv9ly0Oxx9bnM5pMY+nIe71Lor7/S/G/P5oLBBYjv0O
HN/Y4nZvjTmdO1vs9j3NNtt+bA9FHY7DOJaOu1xK0uNRkn6/kmJXVHm50lpT
o/qgWtkLNXy4mtTQoZrjJ+P26XRE6X4o3e2ExDns/MF76pajH+8a3QvUJbqz
qVuuqLKyd11R7CFinxV7iNhBhPo63Ud6dGcU+4gyniPdGdXpikK+jPtPQgZk
/DBGV1Q5xqEM7ebKD3UsV5TuruE2S9BeIWoYbrcrn0d/bsfxeah16ZAhSuuY
MUr7+PFasK+6ovC58TipdeuuKD0G71OUfVHGsAtKd0QZr9Gju6Iwlqp7y/i5
6Z+L7oxiH5TuCjP4wTr9UHw9fw64V4KfSXxeycxn1sJeM/ZE+f1rYsXFy+ID
Bz7dNnZsffvppz+w4tOfvnPt9df/5u0//OG322fN+n87Fyz487ZZs+55+957
71//61/ft/7735/accMNt3dcd92tG3/xi1u2z5z5s13/+c9tu//zn9u3z5v3
hy1/+9vUjXfeedfbv//9X9/+05/u2zJt2rRtDz308KZ7763fcMcdTW/96Eez
13zlK9PWXHLJ7zsuvfSHG2688cubfvObc7bMmjVh95NP1qRTqQJFURxWLywn
AOxGKXK5XJM8Hs//IvMdDscam8122It5ys99ZWWlOtd4/hnnIbuizJiDfE+O
7obq6orS+4H9XeiHuKIE4QOjGJxJ7GtiBxJ7kThh97v7kcx7izPOpJd82BYS
PVhBNGMQUdMoorrJmh9q1iewvRj5ElH91dhegy32Z38e712IbUjzRjUN1/xS
DUWag6mhN9Zz3QFlqIV9Vwv9Wk0R73udUKoXCvuL8f5T6OdjJUTzirU+NwSJ
/ujTnFm90ncjvydz/+Z223Haf8zk9q0O/hlAI48zBoIgnNiEyJz1JZRF21av
gWbVJQiC0FPMWL+satfMRLKsSxCEvkeYrF9juruG5hO8PubL2hsysS/ynSII
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
NU4iahqL90dpdc5F3xqmaP2sOwfvn4djZ2P/NKIZY4geGqj5oup9Wju9yjoy
929vNxyn/b+Z3H4+ZA9y4XHGQRCEE5MQmbOuhLJo2+q1z6y6BEEQeooZ65dV
7ZqZSJZ1CYLQtwiT9euLMWFzyzUNXiPzZf01sy/yWQuCIJx4WP19cCJ8N4TI
3HEJ5VFfchlBEISjkev1JpJluxET2jYz4SzrEvoHIbLueTO7bbMTOvbQCoJg
wIzvykgW7YZMaFfWF6EvYsYc1JMNYRPbNyPhLOsSBEEQBEEQBOFd7iDrf8v3
NM/nfFQEQRAEQTghUDKOKMQeIXLGidyribwvEBVgv/R1ouoU0dAlRONaiE7B
sY82E30qSnQp9q/C9sYY0Y+w/TXevwvbh7Cdh+0zOP5qi82WaHE4VrY4nW/F
PJ63Yz7ftkQwuCtWVLQ3UVKyP1FWdjBRXn44WVaWTpWUKKmiIiVVUKAk/X4l
wZ4edv0YfUnsDuLj7PUJBN51LyHs/+l0QbG/iXMEP1TXdHqD2BnEfiC9TTqC
f4idRexw0r1N7K3ifvD9j+eK0vvA57ArqqLiva4oJIXXXAt7iqJdfVWZMYh1
cUYtwVg8jfG6G/VegTYmYFuG1+yFKi0rU31N7Ilx4H4uXMe+GPbIsJ8mF44a
owvH6KsxuqK4XSfGrwbbc9HfX6A/8/H+a+z6qqpSUgh7stQxwdjwZ6d6m/TP
ojuuKKMjij9THnP2h3H4WWEPlf55s29Ld0PpXii+loPxYj8Ze8p0PxSH3VV4
xtOYB4exPYDt3mVE76Dtzbh+dbyk5PXU6NGPLj/77PvfvPban2363e+u3v7E
E+ezu2lfKjVmb3PzsD2rVg3Zu23b0HQ6PQwZgYzat2/fmPSOHaP3btgwPN3e
Puid1aur0rt2VeK9AWlFqU7v2VOb3rt32N69e0fi3NGKoozdv3//hDSyf9eu
k9Jbt05Ws2vXBNxnlHr++vWV6c2bC1evXu0VT5Qp2N1u9xjMqRvKy8tnVFVV
pfDcv+Pz+dJePFc8B43OJt7nY/weh+dJLlxRfG++h94Gz3c+zsf0++tto032
WO3G8WXY3orjp6KOoNUDKQj5A6+TXZ1JES/RogC2xUSzBrzrf2JPUv3pRHUf
IZp5JtEM9iGd8q5HaRbmVz2OzzoX51+E87+I19fZ7fXfQX5hs9XfiUzDsSZk
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
PvZ1TiHNp7MIOUDWr+89yV7keeSPyLm5HCShT8Ces5+R9t/FHCLrn8eepB2Z
hnyFxB0l5JYRZP3znYtMzvXACIIgCIKQfygZP1Q444d6IOOH6iDyvUJU+CpR
2TKigQm3e1TK7/9QzOP5VIvL9dUWt/vnzU7n37H/VNTrjUWDwTWJkpKNicrK
7Ymqqt3IPuRAvLLycLy0NM2Oo6TfryR9Pi28z8fY9cN+KHb76OHX5eVKorRU
czPhPPY+xXFdZ9jdxN6k4mL1XPUaTkWFel2cHUG6K4o9TbqjSfcDUTecUW63
Es84nXRPUxJtqK6o6mqldcgQzRU1ZozSyr4ovGZfFPdHdVZl+q+6mrg/enRP
FNfGHqruuKJ4XLgPXDvGLDV4sNq26opiT9TkyUr7pElK29ix6nuquwrXcrvq
WJDBFYUar0BfxiIFeM+BsKeG/TC6I0b3x+TSD2V01bAThx04Ri8NH2dnTiHC
rqhPIr/E/jz07RWunx1Ret0TJihtEycqbePGKa3Dh7/PGcafn+r9MriiYhlH
VDyTrn4o5BByoJloL7a7kG3Y34SxW9tss63EOMZaPJ5XY4WFT8UHDJjTOmLE
gytOPfXOVZ/4xK1vXHXVzW/+8IdfWXfHHZ/fPG3aJ7fOnfvR7YsWfWjnK6+M
3/vaa8N3L1s2cOfSpRVbV64semvxYr+iKC7ELo6ofsd7XFHIOkR1RXG8eG55
y3OiHHNYdzmZEb53KdYU45zXvW1GVxT6I64ooS+QcUOx/0mxa44h9iNxFrMn
ya3t83F2Jqlbt+YjigSJHivB6yrNUzR7nMvV8CGns+7jDsfsz7jdc77gcjVd
63Q2/q/T2XCLzVb/W+Qe5BHkUeQ/dnvdMoejvs3prO9wueo3ut0NWz2exp3I
HuwfeNeX1KDYbI1q2J2Ee2LeN2GuzcG8m3u4omLevurq+dsHDnx0zcCBCxbX
1CyYW1W14M+VlfO/X1Iy/wqPp+l8orlnEjWe5XA0hhyOOedynM65Z6MNHJ8z
Ge+PZvcT0b2VRPMxZyNerda7PEQv+bRj9aU4t5po5nCXa87EgoJGzO8F5yIX
V1Y+elVZ2fwbi4rm/TAQaPyVx9MwFf38O2qvRxuPo77/ut31yzye+nbU9ia2
b+Ocbahjl9fbuBfZ7/WqDqzDSNrtblQwfqh1jlqvy1W3D/dZj/FYinvOdzjq
ptrts25ETeehX+OJ7huI/hZp/eXP03K+ROb/PY7/5j7oOP2Y0Av9yNe8k/kc
BEE4MQiROWtFKIu2rV7PzKpLEAShp5ixflnVrpkJZ1mXIAj5j9XrSX9YWyKU
P2NmZl9ymVA36xIEQRA+GPw9YvWab8yJSIjyZ8zM7kuuEulmXYIgnNjwmmDF
GpPrds1OOMu6hBMffhas+p62eh7IHBKE3sWM9eZYa4xOyIR2eyOCkEvMmH/d
+U40s30r1hVBEPoObuQjyHeRmcjryBpkH3V/fdiBJJGnSPMFfQ4p7L1S+gQu
5PPIP5C1ZP2abmbWI39DLsrJyAn5RgC5grR1YwNZ/7yZmReRnyBjczJyQn/m
crL+ee5p9uV8VARBEARByBuULn6oCJEzTuReTeSdT1SA/VKkahnR0JjbPS7q
938oGgyenQgGL27x+2+Ieb0/b3a772nxeBZGPZ6leH9tvKBgW7KiYk+qtnZ/
atiwQ6kRI9Ls7GkbNkxpq61VWtmrxI4ldiIh7EZin5PqOxow4F1PFM5LlpWp
PibVEcUuJXYqZZxPatjdhNed7ib2TbEzia81OKa4DdXPhPOjTuf7fVHH8kbp
7xl9UbgX9/19nibU1zZypOplUn1RI0aovqjUwIHq+4mMv4prUh1WXDv7i/Tw
a90BlY0rSj/X6KxCW6081qNHq76k9okTVVdU+4QJan+S1dWd3iR1PFDX66jv
SXZFYf9LGM8xSACv7RgjdkWV4XPg6H4adjnp7hijS8YMV5TeZgDHi/A5D2NX
FF6H8f4C1PxaTY2S4np5zPVa2Y01frw2/oMHazWj/6qri/1i/Bnis4yj3jjq
5Oh+qLj2ubMf6rDRD4U5sAP7m7G/Dlnd4nAkMX6vRwsKIvGKivkY84faJk/+
88pzzrlt9Re+8N213/7219bffvvlb99772e2NjV9fPvjj5+268UXJ25fsmTk
nlisNr1iRaWyenVxurk5oCiKG3GIH6pf8z5XFPYPsSNK90Tp84I9Tpxczj2j
A06fd0fyw+mvxRUl5D+6Hyqc8UOF3ZobaaFfcyJNL9a8Q48Xaq8fDhA9gPcW
I0/heH0F0ZxB2I50uWZNcjrnnOFw1J3vdjde7HLVf9njmft1t7vp+y5X420O
R9NU5EG7vX6OzVb3NLav2O11+IqpW+V01r2F8zfjuu0eT8Nuj6dxn9fbeAA5
jP205kpqUnA9vnObDK6oJsz9OZhrczHv5h4uL5+7p7p6/obBgxfGhg599Ikh
Qx67u7b20e8MGjT/0srKuWcWFMwfg9oGE/0TeWiE2z17NPo3yuNpGu71PjLE
55tfEwg8XFlUNLOktHQGam4IEt0d1Gqfh7F4uBLHcG39GJer7hSvt+7jJSUL
Pl1auuDyAQMeva66+tHv1NQ89vOamoV3lJbOv6ewcO7Dfn/TfNTxjNvd8Bpq
TDidDauxv87rrd/i8zXt8Psb9yD7AoHGg4FA0yHspzl4T62N4/FwmhR2R2nj
U78W47IY4zIfx+/C+zc7HI2fIZo1iWjGIO1ze9xDqgMsL2gj8/8uNz2Lfny/
F/qRz/l1FmMkCEL+EyJz1ohQFm1bvY6ZVZcgCEJPMWP9sqpdMxPOsi5BEPIb
nstWryfdXS/7IiEyb8wi3exLvn3muapLEARB+GBYvd4bEza5Visxc9xCedQX
K+sSBOHEhf9tYMW/NXLdrtkJZ1mXcOLDz4IVz1rI5HZlDglC/mHGehPJot2Q
Ce32RgQhl5gx/7rznWhm+1bUIwhC/nMl8i/qnXXjZeQbvVNWXsL/fdRXkSb6
YA6uEyE7kUeQL5LmJxP6JmXI9ch8JE3WP1dWhH1630MqeziWQv/kd2T9M9zT
vJTzUREEQRAEwVIUgx8KW3uEyLmYyLWayLueKLCMqBj/qB+AY4ObiUYvJZoc
dTrPjHo8n4j6fJckCgquThYWfitWUHBbzO+/r8XrnRfzeF6Oer2r8Xp7orh4
f7K6Ot02fLiyfPx4ZcVJJykrJk1Ss3zcOKVt6FAlVVmp+ZLY3cPRfUfsXMJ7
qusp41Tq9ETpjih2NrHnCVH3cUx1SLG7ie/BviR2TnF0N5Pui8J5fP57fFF6
jueL6tJeIhB4109VVqb2u9PTNGaM5i4aPVr1FfEx1RlVW6ska2o0Fxa7rHCt
7n3SxyKRrStK90Xxlp1Vui+K+zFokNKKcda9VeyJYmcU90t1J/H4G3xRi1HX
k6jvLmwvxziPwjF/xhXF7qZy9JVdUeyJ4de6t8bocsqlr8bopdFTgGMlaHME
jn8Kdd6Gz/ZRjPfrGNtW9mLpY64HtavjjrFQXVE83jxW7BVDjQl8jgnUm8i4
ogx+qIPIPmQ35sJOzIEt2F+PvIFnoBXjtSTq9z8fKy19LFlb+wjG9u4VH/vY
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
/9i0aNENT51zTtMzH/vYN56//PLPv/CTn1z08l//eu7OlpZzdt9zz/Id//nP
ogPJ5Kx9g4M16RdeKN21ebM3vXGjQ5IkM9rEfChWjlJZUR/CtXarxWLZJgjC
MJ47ihVFa4XWRvaa0ZoVpV7LZsPhZ2ZFsfQQrhOVEUVspC+L2JoBbrQDtOEc
vM1vs91SZbGEZjgckYU2W8up2AZdrtiH3O7oJ1yu+Ofw8+VWa+Qqszn0fUFo
/oHR2PI9gDu/C9BytdEYugrPfVsQwt/DZ/zUao3+zmaL3Wq3R1udzuh96Cfc
7lgverPHE30BvR2f/ZrTGduHfQ7abJEhfPawxRJOq4woiyWW4UTFjmJEZZv6
imIkixUVkW0yhdIYy0GMdRfGsgn7djkc0Ztw3G95va0XBAIdJ5eUxGoaG293
19ffal2wIGxubFxjqa/fbC0tTTnr6h70lZW1l1dWdtQ1NNw1d968jpMXLLj3
rJkzV3+goWHVf9XUdHwRr3/T6439yOGI/RJj/zPGcge6HeO83+eLrauqauut
r+94trGx88U5c1bvmDv3rtcaG1ftx3sPlZW1HcavymG3u3UEa5B2OFol1Qob
SuFDqYwolRM1Nn+y3U6sqEga63kY++/G42fxXT1ptYbWmM0tNwlCy9XE9hKE
FWcArGgECJUo775ovmN7oDB/ozs7h1iuL1Asxe4H0AtzqBeLxSoeBUGb/SCY
w9h671la5cVisViTURC02b9ykd577ETdlGNeLBareKX3PnIi7ildoF0Nu4oo
lnw6OMG8WCwWi5Wb6LtX7z3+RPsdEARt61hMseTLXRPMi8ViTU/RXqDH3pLv
cbV2U455saa3aB5oPdf0GpfXD4tVfNJi7XflMG5Qg3ELYRYrn9J7ruq9nnJ1
U475sFis4hH9N3P13jvezB/QLnXNRf+t6svQT4D+dZwufhgUVhGrsDKjv4re
APrPgengjejPTeQFsE4IER9R77k5WR/Oe1VYLBaLxWJpImkcPlQYf/eHAGx4
7EwA+B4BKH8SoL4bYC7+Q2DpeoAz8Px7sL0gBXAxnv8StlfiuSY89xv8fAv+
0I3g57V4/HDCaEx0m0xPJczm51N2+8spp3NXj9P5esJuP5S02YaTdvuIzGwi
TlFZmdRfXy8NzpsnbVq8WGZGbVq+XPbg0qXjsqKSxPPJMJxkVlM2owmyOE3E
eMJ+MiOK+FI4ZkrlI2WzolROE5rG66urk3pLS+W+R7GixuNFZZhRyfFYUcSq
wuspvJ/GlxlFxHkiXhTxmXCMvspKqb+2VuonRhMZa0Huw3PEZiJOFHGcejDe
npIS5X7iHeWLFUXPonjw+TIvqqZG5kLJnKgFC6SBRYukwZNOkgYWLpRZWj34
LtbjPauxpr/EelxisUhvx+fUEjcGW5UJRdwY4siUYo4lGLd6Pl+cGpVFQ+Oo
rCgaj8byoQN4vRZrfg6+vx9h24F9HiNeFx4TE6oXz/di7L34bnoy7zYhCCM4
Z4fQB/Gdv77RbN7TLYo7EqL4YrcgPIvX+/HakziPH0j5fJ1Yq9sH58//w9Nn
nPGTp88773+2fulLX3zxBz/4xCu///2Hdt1+e3B7W9vpOx94YPHB9etn79+0
qXbv00+XS1u24EROOdPptIX5UKzjFM2ZcpPJdK7ZbL7ZYrFsFQRhCM+NsqJo
3dF6yOY6ZfObJmuV05bNbRuPS5Uxs6JYBZTKh5ItANwoAtxqxZ8nDoC4F2BF
mdV6W53LFZrr8cSX+nzxM9zu2HudztBHXa7WT7vdbZd5PK3fxuOfOJ3RG2y2
yC1mc2SFILTcaTKFbjMYmv+Gvslkav6rIIRuNJtDt1ossZDNFr3Lbo895HBE
NzqdsU1ud/Q5rzf2SklJ6y4cY29JSfwAHh/2eluHXK5omlhIxIIiLhQxolQr
rKjxGUkKKyoqs6IEITyGFxUaMRpb9plMLS/hOfz5EbkL+/0BY/863nee2x06
ze1ub/T726oqKzsCNTUPl1RWdgVKS8MVPl9zLV5vdDjiJ7lcsbeVlXW8u6Zm
9UcaGjo/W1+/5qu1tZ3fqa7uvLa8vP23Pl/r37E2EYz/bnzufyyWcDfWaJPH
E3u+rCz+an195+7GxtWvz53beXDOnDWHZs9ePdzQsGqksrI9jWPjXhHH3wJx
mRFlt5NjsrFustXPKieKaqGytNS60DWqn8KVih7Gczut1vDTZnP4UXwnMXxP
12H+lwhC9ByA1jkAfytV5gDNiaLQF6Awf6fbkGM89xYonmL3QfTnc6wZi8XS
X0HQZi8I5jC23vuVVnmxWCzWZBQEbfavXKT3HjtRN+WYF4vFKk7RGtZ7H1Hd
pXGuxaQgaFvLYoqF5weLxWIVt2h/1XuPV92kca7FJC3rPtE66v3ec3Vwgnmx
WKzpp3zvnbn+G6OYviu1+B5gTU9pPW+PtX6aNB5Xa7NYrOOTFmv/WPtMtoIa
jMt7DWsqKQjazdPptgabcsiHxWIVj34I+u8bb+WEZtlrp/no/0PvBv3rN13d
gl6Q6wthHbfmon8NPJe1cjf6gzm/DdZ0189B/zk5WT+a96qwWCwWi8XKp2Q+
VMbGMIBpHYDYBWB9EcCBx571AKWPA9RiOxv/Mb54I8Dp6HclAT7cA/BfeO4L
6K/jD9kf4vnr0TficQu2a/D8g3i8ET24wWB4LmE0vtwtCDsTZvOepM22nxhR
KYdjiBhRxHnqIWYPsaI8Hqm3pETqq6iQ+uvqpAFiFM2eLQ3Ony8NLlwoDWDb
19Ag9ZSVyX2JE0XMJXymlLRYpATxfVRGk+oMn4muy3wouocYUcRpIi6Symoi
VhRxmurrpYHGRoUXhS1xkojTdExW1FirrKjxeFEUC53HfsSrUnN+Ay8K86dY
iF016gwjiq73YD/qn3dOFNVE5UXhe5B5URQH1lxmZ+E7GFy8WGZ2UTswd67M
kurFWB7F2jZjXZrQ5+PxPHxW2RhOzHg8p3xwasbyarJZUX6sFZlYUdU4B87A
+n8f23as/+MZNlQvvo8eYngRZ8xkGuk2GofRh/B97cPPr+E73Yl+CefwVnz/
A0mHY0PK43ko6fff1VNd3Twwb95fNp122nVPffCD33nu0ku/su3qqz/10q9/
ff6uFSvetaO19e27Vq1a+trjj889sGFDg5RKVbzW2+tP9/W5JEmyogW0kRlR
rEmI5o5fEIR3WCyW31qt1kGTyXQAz6WJFUVrI4BrmbhpKicqmxU12XWYvaZV
NlT2OhzLisI+h/A8s6JYGor2U5URFTYpfKjfWbC1A7ThfLvNb7OtrLJY7pzp
cLQscrtjp/r98WAg0PahQKD9v0pKWr/g9bZ+w+tt+yH6V+ibPZ54yOmMrbHb
ow9YLOFHRTH0qNHY8qDBELrPYGj5pyCE7sVzXXjtP1ZreL3NFulzOKKb0S+4
XNEdeP9r+Nx9gUD8YFlZfKi8vG2krKwtjWPiumjD9aLwkhRelMpDisjHb2Wz
mVhRkSxWFLl5GP06xrYNY8SfY+G7sb0R+31HFCMXWyyh92KMp/t8nYv8/ug8
ssMRWWi3h5fSeRw7aDbHPmS1xj+BsX8RY72yoqLjmsrKzusrK9v/ivHfWVra
1uHztXV5PNF1TmekH+9/1mqNvIT378Sc9+D1/XV1nYcaG1cNzZ27ZnjevDUj
2EqzZq2WampW4b7UjvtBm+R0KowoNfexPCw1T7UmlC/5aF4UcaLiMm/KZgsf
NJvDLwlCGL+2Q50mU8v/GY3NlwJEzgYINdL7x9aGc6RYWFEk+m9iFOJvdTfk
EEsD+pUCxTMVvALty6FuLBZLXwVBmz0gmMPYeu9TWuXFYrFYk1EQtNm/cpHe
e+xE3ZRjXiwWqzhFa1jvfeRE3U+6oHh+L+v97rXKi8VisVhvriDov7dn+0RS
ELSrY9cEY9HyN4meebFYrOmnfO9Xue4rU2WfVN2UY16s6S295pne85/XDoul
j2j95HtNduUwblCDcQthFitf0mLtTWQNajk+rzsW68TV2aD/npGrL9GoBvnW
WehW0L9eJ5KvRztzeTmsCekMdBT0f78nim9Bl+b0ZljTWXeD/nNxsv5z3qvC
YrFYLBZr0pLG8KG6AIRBAMtWABu27l4A/waA6icAZj0OsGg9wKkJgHdg+8Fu
gItS+G9ybC/H9rvY/nwjwJ+wvQPdif3+je36hMHQnzAan+02Gl9E70C/1m0y
7e8WhEMJURxKWK3Eh0oTJ6nX5VJMzCSVU0T8I+IUlZUp7KaaGpnf1N/QIPVh
21tRIXOSZN6TzSaliN2UxW9KKLwf2TK3ifhNKidqDB+KxlEtc5pozKoqmVNF
49G4MicKz/WorCjiUr0ZKyqbFzWWFYXHo6yoTEw9akxqXCqjCceTjTHJLZ3T
ihGVzYrKeg/E7ZLZVfQOiNs1b57CizrpJGlw0SKFFUX1wX7rHQ5pDeZ0A9bm
U5jXEnxORRYrhtg01KpMmXyzolTmzVhGDfFxiJMTwOMqjO/t+E6uwvcTxjgf
ofegcL3SOF+ID3UY5+7+jUbjXnxXu/D4FTz/fEIQnsJ5lkg4nY+mAoF7emtr
I4Pz59/89Nvffv3mD3zg+1svueTyLVde+dlt11330e033/zeHdHombs6Ok7e
88gj8w9s3Dhj+4YN1VJ/fyA9OOiWtm61SZIkok3Mh2LlSTSPXKIoLjGbzT9C
P2kymfZChhVFa0FlRamcqGx2Wz7Wofocda0f69mZ9XnI4XCMsqL8fj+zolh5
ksqHki2gzQD/ZwNY6wCIewFiZVZruM5sDs2121cuczqjZ5aURN5XVtb20bKy
9k9XVHRcVl7e8e3S0vZr/f62P5SUtK0oKYm3+3zxf3m90Sddrkif3R552mKJ
bBGEyBaTKfKMydQyiO43mUKDohiia89ardFt6Fft9tguhyO21+2OHfD5Wg+X
lsaHKyraR6qqOqSqqk7ZFRWdkt9PzKR4hplE/KMjTCSFjxTNWOVHHc2QonOi
SLyocIYXFZIMhpYRg6F5H7YvYttjMITuR9+Bn6+zWMJfs1pj/w/HuwBjOxf9
Xhz3/Zjbh83m6EdEMfoJUQx/XhCiV+Dn79pssZ9ifL/1+dr/Hgi0RdFr0f/x
+1sTWJunPJ7Y82539FXMdTc+Zx8+56DLFTscCMSHams7RmbNWpUmRtS8eXdJ
c+feJc2atUZmRWGdM3nHZNaTksuRPLOt8qEoT9UqL0plRdntcTxuxeeEh/Da
K1gP/DoPtRkMK38FsPILAM1no2cB3F1ShKyo90Hh/l730RziObeA8UwFP5dj
3Vgsln4KgjbrP5jD2HrvUVrlxWKxWJNRELTZv3KR3nvsRN2UY14sFqs4pfce
MtE9cjopCNrVsmuCsXRpGIueebFYLBbrzUW/5fXe21U3aZxrMUrL79/gBOII
ahiHnnmxWKzpp3zvm7n++0LL/VoLN+WYF2v6iuaAHvOsEOPy2mGxilNarP+u
HMYNajBuIcxi5Utafvfm8r2o5fiF3k9YLFbxaCoxKdZqVIN8iRlR+pr+m9dX
vOVbYuUiZkTp553or7z1K2JNY9Fepvc8nKy/mPeqsFgsFovFOi5JGT5UUxYf
ak2GD/UQgCsFUPIEQOWjADOeBJiPPmUdwNnYnrsR4GPozyQALusG+DYeX7sB
4Pf4+R/4OZ4EuA+PH08YDD0Jk2lztyC8kDCbt6dstt1Jq3Vf0mw+kBTFwwlR
HMbzaWI69djtUq/bLfX5fFIf8ZmIR6Syj7KYSb14fZSZlOEl9WD/FF5PORwy
I4p4SzK3KZvdpPKh6BwxpIgnhf1l/hE9k8bE5/aQib1ErCjiL2Usj1dRITOj
iBHVW1mp8KmwP42dxPgnwopKjmVF0Tm6js+Qc6BcVD7TWI5VdjuWD5XNdco3
L0qNRa1XebnMhJJ5UY2N0sCcOTInqh+PiSNFfTY4ndI/8X38FfP6POZ0Mj6j
DGtlx/q78Fjl1GQznfLFihr7rOzPNCZxckqxrcJ6n4z1vwzfzY34nu4ThJFu
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
JurTNanE8YkZUcXrAfQ7jv3qWGP0dmBGVLH6m2/y3ljTTxeB/nNush6GN/3f
dLJYLBaLxdJCUoYPlTExokzrAMQuAOs2ADu23v8AlCUBatcDzE4ALO4GeNtG
gHehz0N/En0pXv8G+od47VcbDYabug2GFvRdCaPxoW6jcWO3ybQpIQhbk6L4
ctJi2Zmy2faknM79SY/nUI/fP9RTXj7SW1Ul9VdWSv1lZVJ/SYnURybeUGmp
1FdeLvXh9b7aWqmvrk7qq65WWEzEi1LZTWP4SDLzyW5XGE2CICVU/pJq/DzK
jCL+EnGi6F7iTxH3Ccce5UTROMSJomvYR342sZroHjId070qLwpzkHlR2NJ9
KYxtlFlltR7hRo3Hi8owo45iRaGTarwZrpXMi8qwrbI5TbowosawomRneFFU
A/n9ETcKLdeE3hnGtB5rcR/W4Ub0ZzCfkzCfUrQd7cS8VE4UHRM7RmXX5JMV
pbJv1OfSeNQSK4r4NSLG5sD6L7VYRi5xOg/+2mrd3SGK2x6zWjclnM4NKa/3
oVRl5Zr+WbNWblqy5M/PnHPOz7decMHVz33lK1/Z+sMffur5G244f9eKFe/a
t2bN215/8MElrz3++Nz9Tz5Z/3oqVbF769aSV1991bW5q8sqSZJAfCg0/yZm
FUrEippvsVi+KoriPwVB2I4ewc+j62CsaZ3kcx2OfeZ4vKhMewjNrKgTTrQf
vpVVPpTKgCJ+D7lLOGL6rF6jz7+zAIRsAGvcADcGAG6qAWieBXDHSQArTzeZ
Vr7LZGo5TxTDn7RY4pc6HLFvut2t13i9rb/2+1tvCQTikfLy9rUVFW2PVFbG
8Sug7eny8vi20tK2V/3+OPGQXne7YwedzigxoIYtlkjabI5JR0x8ozA6hOcj
I1ZrOG2zEauJmE2tsomb5PMRN6ldqqnpkBoaOqWZM1fJzCRqs7lJHg/dc2xu
0lhuFPWj/sSY8nhonDh+37Wmfb7WEbc7OuRwRPZhPK+in7VaI73Yf73DEX0M
83nU44k+irn9B+/tcjrD99ps4bsxl7VGY+g+gyH0ENYVfy629OPPwC2CEHoZ
c99pt0f3uFyt+7GGBz2e2BDGO4xtmuJ2u+OyKV8yHfv9bTILi7hYjY2rpdmz
V8stfaZalJURI4v6H82Lys5dZUWpfCij8YjpPL0DYmVlGFnDeLwfY6V4N+D1
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
GKjeMzhYKu3c6ZHWrcPEU2ZJkkzMh2IVgd7AihIEYQQ/y6woldmkrpNsrlo+
WVEqE05lUdGzs5+fOSZWVC+uz59gX2JsMCtq2mk8PlTYDPCwDY+dAHEvQKgE
4G70bX7l8y2uI2yoW70Ox4oym21llc12ew1ADC23legygDsD2LdMORdqBPjH
YoCVp+PxuwBazjMaQxeLYviLZnPkSqu19RqrNfobhyP2N7e7Ner1xu/xelsf
ReNPmdanA4H4tkCg7dXS0vZdfn/bXjx3EH3Y54uNeL2xDPcojt8ncZn9pPKi
FB/NM1JMfKdohl0Uk+10xmQOkt8flyor26W6uiOsKOImUTtjhsJNKit7a16U
ICim89SHnq1wotql2tpOmctEHKa6uvZ0VVVbury8bRjHPujzte7D5+51u2N7
PZ7Y6/iZvAdz3YWfX8VrL2OdXsXYd+C4uzG3vWjiLh2yWMJDNlt02OGIpokB
RXUZy4hS3JphPincJzomFlRNDeVM+a6R5swhK7krnKxOqaqKWFntco3oHqoZ
jiWzsNQaq7yobFaUyotSa47vZARbjDmCeYQH8Pw/sVa3mEzRn+C8+Bb6SzjH
Pov+JM6Zj+KcORf9DoUd1bYAj2fgtQplftJcJK4ZzWN1ThdExG8q1N/vtqBL
c4hpJvrZAsY11fzDHGrIYrG0VRC0Wd/BHMbWew/SKi8Wi8WajIKgzf6Vi/Te
YyfqphzzYrFYxSW9946J7o3TWUHQrrZdE4ylS8NY9MyLxWKxWEeLfsPrvZer
btI416kgLb9/gxOMRe/5oFVeLBZreijf+2Wu/67Qcp/Wwk055sWanqL3r8f3
sN7zntcMi6WvtNh7unIYN6jBuIUwi5UPabHuJrL+tByf1xuLdWLqGtB/zzge
v0uLYuSgy9Av5xgju/j8KLrqDW/1xNTX0DtA/3fCnri3gcL5Y01fvQL6z7PJ
+st5rwqLxWKxWKyxIk6UcR2AuBnAuhHAkQDwPWa3VzxptdZ3m81zN4risqQg
nJkwmd6L/kif0fiplNH45YTR+D/dBsOP8Z4bkgB/w/ui2N6D7SPdAKmNBsPT
2Of5hCC8krRYdiXt9r1Jt/tAT0nJoZ7S0qGe8vKR3srKdF9lpTRQVSUNVFdL
A3V10sCMGdLg7NnS4IIF0qYlS6RNJ58stwPz5yuMJeJFkTOMKOJFEYOpr6ZG
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
urpNqqpqkyZMWDzgjKLv1c4m4YgSXiNyHInEepiEK0rxRQ3dF64oOk+4osjr
RI4i4YoiP9XRXVGDfig6r6CgZYjvSoTaoDivxD2V6+h+1A6qr8OhuK1EhMNp
0BV1pC/qaFH7mIbzRZEjajhPlNoVFeuLOpor6mhuqEE/lNpp1SCH7ifKoO+o
T6ifKisXy54ocoTRMeojarPd3iCPO3KN4Rg9FPVE7cDx9DaOp25swyvY/ysq
K1v9s2Yt+/uZZz519yWXPHfbtde+dOMNN6z++m23Ba+4667ei+69t+/sf/xj
w0mPPLJ+6uOPv1nZ3r45v709nCFJkjkFPFEEzm/4D4z93/0eS7CeD+tQx3RP
G2Zygv3MMAy7ohJNexztYhiGGQ20zmixfsWD3musFu8ahmH0Re91QsSrdUPH
GdRfqbB2ezSsB7+TGIZhtEfL90miYRJDq+fQnmA92jWsi57tYhgm/Uj2ehTv
upEu66CIN852MenPWI0pgXcMy+S5wTDphQeSP2fbdSp3LNdVhkkErd/Dx3tP
al0+zy2GOTGpAP3XjpHkdyNs780pUHdOeuZ0SC1+C/r3CSf9cgsw6cCdoP9Y
GW06kt4rDMMwDJMGSFFHFMboV/mhXgRw4DYjCJD7CkDxGoCqoNU6pdNimRe2
288M2WwXdFitXwhaLNdEzObvRKzWH0Uslts7bLY/hOz2h4J2ewOetxLzUsjh
CIWcznXhjIxN4ezsd8Nu985Ibu5H4ZycfaGMjINBh+NwkPxA5IMix5DaFUWf
VcfIGSU7icivRB6h3FzZBySHnEDkA1L7odRJsnOJHERdRUWyb6mntlbqnTJF
6ps5U1o7d670xsknS2sp8+bJn+l476RJUndVldRVVqa4mYQvitqijla+qFhX
VGmp1FNZKfVUVyu+KDwm+6KwDrLvKdbzRL4otcOLvFH4LERkx1PUFTXkWSbi
jFL5oqge5G8aqPux2iWeyXCJXiv3tcoRFYmmC9ON6cDvluN592A+i5/LMOSG
ycOxRd4Yh8MhO2ToGCXW6ZQMV9Rw3x3NFWU2m2VXFIZdUcx4It9ms8muKMxG
HPOHcLzLfibyswlHVDJdbUebi2KOC4+bcEVRfbCeB3C7CeefH7fsiho1sX4o
yoMWgHY77mcAtOEat6AIoL4S4IkpuD8XYNEZJtPC861W3+ft9sA1GRmN38nI
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
mUy+v5nNvkUWi2+Z1ep/wW4P4I8pgbVOZ+Bth6P+XZerfmdWVuOH2dmNH+fm
Nh7Iy2s+lJfX1O92N+PzImdTU9QVRZ6oejl2e33UFdUkO47IE0X+InI9TZ26
TJo2bZnsNqqpWSI7jcj/VFambOkzHZ8yZemAJ0q4ougackwVFrbIXiLhJFKc
So1Rh5HiMSJ3ER0jzxDVhTxNwhFFXifhhVIy1PM0GL8c8d3RXFHCFxXrihK+
KLqOyqZ+cToH/VbxhvqR2kttojaSA4ucURUVi+X+qKxsk0N9R31dXt464IkS
vqyReqKO9Dop9xL1UQfHR0wZw3mijt32oY6oWOeU8FY1RdNwGPvyY5cr8AGO
0604btc5nfX4I0z9mry8hs7S0qZwdfXiSG1tW3dNTVtPVVVbBPtmTUlJywul
pc1Lq6paF0ye3PaXU0990nvhhau+881v/ueSe+5546Snn95RuWtXv7u/v98R
9UQZx4kfSk0ZKH//1eNvgzsw5yVY3/Mxm3Sq73jIrxLsb4YZz3hAm3nmiaNs
vdeCkYZhGEZL9Fy79F5ftXjXMAwz9ui9Noh4tW7oCYIHUmMd17Ie/H5iGIZJ
HvT+1XsdFmGSg1bPpz3BerRrWBc928UwTHqQ7DUo3rUiXdY+EW+c7WLSj7Ec
Q94xLI/nAsOkPx5I/hxu16ncsQjDxMtYvI/1Ln808cbViwzDpCr0/x3Wex1J
9rr5cArUjzP+sw+U/95OK+i/S2lKgXZyxn+uBCbV2Ar6j4vR5qak9wrDMAzD
6IwXwIgvOVM7gH0NQA6mCnNqJ8CFYYCrIkbjd4Nm889CFstvw3b7/SGn8zFM
S9jpbA/ZbK/hd12Y9Z0Gwxa85r0gwC7c7sHP+4JG44FOk+lQp8XSTy6hiNMp
dWdmKp4ociORE0rtbBIR7qT8fNmV1FNTI/VOniz1kS9q9mypb+5ceUsOKfo+
4nYrbiByAZnNR7qiMKGoUyhss8n+oAFXk/A2iejhjRJRO6MKCqTuoiK5fbIv
Cj+T+yhI7QOV/wo/y44kckUJv9NInFDHcGeFVQ4vOfhZ7m9yLAlPVKwrKpkR
zinhilI/X1U/UF3ICSX7oYQjSvihRP1U/qowjUn8LkIeKcUVdQCv+QCv3RzK
yOgNud2vdRUXPx2prm5cO2PGP9edfvrvN3/ucz9fdvnlv/jy6acv+NS8ec9e
cOaZSz912mmLqyoq/pOZkbEpw+Xak52d3S98Tuok00sjPsfjisLj7IpixiNu
zCdxbN+Lc6HH6XTuMxqN/eRmIi+UmAs0T8gRRe4mrVxRVNZwrigDrk8mXLew
Pgex7LU4H++hOsOJ64qK+qGEI+pBC8DDdoBWJ37OBni0EGBhBcATdbg/G2DR
JwB855hMCy4xGn1XYr5pNvtuMZl8txsMi/5oMPgeMRj8zUaj/xmTyf+a2ezv
tlr9bzkcga0ZGfXvZ2U1fJCV1bg3J6dpv9vdeDAvr+lwQUGzVFDQKicvr0V2
RZG7x+kc9DBRbDbFiUReIXIVkcOotrZNmjJlmex/Iu8TOaMmTlwqO6SqqtoG
fEe0T66oSZOWyr4oOm/q1KVy6Bh9X1LSOuA/UnuFhDNKcUQpjiHyRFH9yNMk
PFFqJ5TwOcVG7Y8SbinFExU4whMlXFGD9/ZLwhVFoWOD/VIvu6Ko30bmamqU
203PoqioRQ45oUSUY81yv9M5isNp0KuVjJC7SkTxRjUOeKKEK2qo7+n4jqjB
c448b6gjisZcS3Q/gGtD/U7MRkwIPz+fleVfimOjoaKipWny5CVts2YtXzF3
7oon5859ErfLl8ybt6L+5JOffPj001f+7/nnP+P9whf+fdOXv/zitddf/59L
br+9a/5DD71d9/rruwskSXIKT5TeE19DZmLeAf3+RnhNgvUtx6zUsb7pnteA
//tNhiE8oM0c88RRtt7rwEjDMAyjJXquXXqvr1q8axiGGVu8oP/awGtE8tHq
GbUnWI92DeuiZ7sYhmHGE6myVnu1bugJBPVlKvy85tGwHskOwzDjj2S/3+L9
nSFV3qvxxhtnu5j0gp7rWI4hvcdxMsIwzNjhgeTP4XadyuX1iUkltB6L3uOU
3z4GdeC5xDAnLktA/3Uk0fQdoz0LUqB+nBMnvwFtyAT+7yE4Y5fngEklKkH/
MZGMfDLZHcMwDMMweoAvNQPFC2BsBzBj7C8DZL0IUPY6wGzyRHUAXNdhNP6s
02C4t9NsfqjTZmsKOhxPh5zOV0IZGeGQy7UuaLdvDlqt20MWy86gyfQhnvsx
Xrsfcwj3DwcNhn7y+ERMJilisUgRu13qyshQ/FC5uQPeoSGOIvVn8iYVFkrd
FRVST22t4ouaOVNaO3eutHbePKlv+nSpp6pK6ioqku9FfiDZC4TlHeGLEk4h
cgQJnxDWJTa6+aJEueTPcrtlT5bcdnJFlZdLXcXF8nfUvmDUlzTgSLJaZS9S
wnU/miOKPFDUH8K5FNtXUQ9TiDxMWnuiYlxRwaO5osgjRefS86d6CUeUuD7q
maKEo2OyC7/rivqlgi7XoVBm5ofhnJxNkcLCju6ampU4xha8edZZf15/4YW3
b/jKV27a9KMffXXnH/7w+VW//e1lP7jiihsvv+CCX1xz2WU/uOjcc386oaJi
ocvl6sLsIlcUeWPISyOSbFdUbNTuKNrasF3kirLb7eyKYsYrGRaLZTaO75/g
HHjR4XDsNOB7h9xMNN/I10RzQziikjUH43FFFRQUyGWSt4p8UVarlebiG1jf
E9QVJRmUyJ4oM4DfCuBzADRnAjySB/DPUoBHqwEem4afcZ1adJbJtPBCk8l3
udEYuBZzPebnJlPgLjz2oMnk9xmN/uUGw6IXjcaFuLwvesNs9m2yWuvfdTgC
OzMyGj/MyWnc53Y3HsjLaz6Un9/cLxxRhYWLpaIiSiuOkWbZD0Q+plhXFO07
HPXyd3ReeXmrVFPTJtXVLZUmT1ZC++SPEq4o4Ysir1RFxWLcXyx/R6Fra2uX
yKHPZWWLsS4tEtZP9hUpTqIGuTyK2i9EXibyRVF9qF7kc4p1OYkMeqJ8Kk+U
4oESGc4TdTxXFN2TPFM2m9IvVJ+RuqLUvijyQImQO0udWEeU6I9kuKLULijh
hzpajvRGxfqfGoaNcl6THMULRfvN0dB+4yF85ruzsxs25OQ0vI5j8UncLnC7
6+8vLm65G8fK3XPnrvzDJz/59P3nnNN+/wUXPPuniy9edc/ll7/4q2uueekn
3/zmf773/e+/+pVbb11z6e23Rz79+9+vO+WBB96c3NDwbsnzz2/PlCTJOs49
UYLTMXtAv78T3jKCOt+nY33HQ+5OvMsZZlzhAW3mlieOsvWe/yMNwzCMlui5
dum9vmrxrmEYZmzxgv5rA6Vd64aeYFB/psJa7tGwHskOwzDMiYgH9F9/Rbza
NvWEwgOp8zOb3uMq3ngSbBfDMKkPrVd6rH/JLlfreONsF5M+0DMdq/GTbuOd
5wHDpAYe0GY90qPcsQjDxAO9y7Qeix6dyx9NvHH2I8MwqctW0H8tSTQPHqUt
jSlQN86Jle2QfIoxL6VA2zgnVs4BJlX4POg/HpIRV7I7hmEYhmHGCinqh8IY
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
uj8jI2M9jvcDNBco5InC4/KcEA6nZM09UQbtkztKlEFzkLY452RXlAHXJovF
cgAz3lxRUT+UcER5zQB+K4DPAfB8JsAT+QALSnFbAxCYDrDoFPzubNxehJ+v
wHO/hp9vxO0vTKb639vtgX+6XPWB7OzGJzEvud2NYbe7aV1OTuPm7OyG7S5X
wy6nM7DH4Qjsw3MP2Gy+w+SIsljqJauV3EmNKldU0xHeIvL+kLOppKRF9jRV
V7dJtbVLpKqqxfIx8j2RCwjvLzuRyI2k+JECspeJvEXkKiL/kHBGUdQ+JOEn
GnQWKS6i/PwmqbBQKZt8UeXlrfKWPtNx4Zqic8W9hCsqL69ZdklR6Dw6Rt+T
P8lqDQzxRVFon+qvuKIS80QN54uiCPeU1eqP9kP9ECfT0VxRg33ScIQjipxT
FGoDJbYOVJb4TjlXuKQCw2bQJ3WkN0rtihr0Qw16oo7liKLnMNgWtSeqMZom
OYorqjHaJw2Hs7IaDmL24/5e3JIfaieWtw3v/TaOw97S0ubVOPaenjZt6aJ5
85bfN3/+kzedeeZTl5555jOnnXbas3XV1U8VVVY25XzrW69lP/hgT/5TT31Y
tGrVuyUvvfRh0Wuv7c5fv35nzrZt2zIkqd+mdkSJ6L046Mz1oO/fDvHXLZg2
gnpfjflA57qne/4B4+P9yjDHwwPazCFPHGXrPc9HGoZhGK3wgL5rl97rqxbv
GoZhxgYv6L8m8M9q2tMO2jyz9hSph97tYhiGSWdS5WcBr9YNPYHxgHbPzZMi
9dCzXQzDpDb0s70evysku1ytE2+7mNTGC/qPpXSLd0Q9zTBMMvCAPu8zLcod
izDMsaD3mZ7vzLEon+cPwzD07/fqvZ4kmhejdXdink+B+qRz3sV0Yp7CNGEe
xTyA+RPmIYwPswSzCrMeczgF6pyquQVGziRQ+lfvNqRzyLPVgVkJg2P5fhh+
LL+dAvVN1bwJjN5MAP3HQTJydrI7hmEYhmGSjRfASI6o9QB2/GEyIwiQ+ypA
yRqAKtyfgr8ozcN8ssNk+kyH1XpZT07Ol3uKi7/bV1Hxk+7q6rt6amr+1VtV
1do9YcJLXSUl68J5eTvDOTkHu3JypG63Wwk5jMhlRM4hh0MKCeeQ8AcJv0+M
z0d2+kSdQ7LHSPiY6F7D+aLoO4zsNxIOJfJUkT+puFjqqayUeurqpN4pU5RM
miT11tYqvqiCAvlaqhs5oI5wRUGMN4rqSvXW2xUlQv2BbY1gf1NbqL1d5eVS
V1mZ4orC+pEXajj/lex6Iq8SPQPhdaJnJBL7nIQfKuqIkqN+XuT2oudFfinx
LIRzSjz/4bxRI/VEqX1RMZ4otStK1DeM9aREcJ8cUeHotfjcD3eaTAc7jcZ9
2C/kh9qNY/99zFbc34Dp6TAYVneaze3Y5/U9VVV/XnfaaT996/LLv7zp5pvP
3f3II1M/7Ogo7O/vdwzxQw3FkpeXV+pyuc6zWCz32e321W63e2dRUVE/+WLI
UUPRwhNFbppYX43ahyNcUVivd3C/3Wq1siuKGa/gkM85G+fAfbhdhzkgPG3C
FUVzQu1vS0bEXKO5R+XQnBTlUOgYuaIoNpvtAM7Dtbi9B+ub7q4olR/KbwJ4
0ALwsB1ghQugCdu1oAjg8UqAxybj93MAFp6Ox84DWHQpfr4a820A3634+deY
vxgMvsfNZv9ihyOwCpfiNW53Q29BQfOG4uLmd0pKWt4vLV28u7CweW9eXtP+
nJzGQ1lZDf3k6nE4GmRHlOKJasA1r0F2OZHLR+0sEi4j8v8ovqZWacKExVJN
zRKprm6JVFvbJlVUtMo+J3ICkWvIYiHvkk8OuZLIXSR8ROL+wzmihovwVJHr
icovKmqRiouV0GfyVwkH1FBXVOMxXVFUT3IoKW6nI71OI/VEDbqiAkPuRc4m
4YkSLibhYRouwpml9kPR9cIPJepNZSheKt9ATCbfQNmDCcjP5WgRTikqQ3ij
RD1xzAz06ZGuqMZhHVHiWaifseKfaozxRDVG3VH1NC4P4TkHMB9nZNR/hPkA
y96O99uMz3FdYWFLqKys9RUceyunT1/unz9/5d/OO6/9zssue+7Gq69+4fKv
fvWF06+7bvXEa655ofDss9szpk0LW6+4wm99+OH19o6Ora6tW/td9DMJRu2H
MrIfalhuAH3/frgD89kR1LsWs0Lnuqd7NmOuSrTjGSbN8IA288cTR9l6z3Et
28YwDDMSPKDd2hUPeq+vvB4zTPriBf3XBAn4v83TGg+kxpquZT2SHYZhmBMF
vddb/llgbGgHbZ5be4rUQ+92MQyTuiR73Yl3fUiX9Y7XvfGDF/QfR+kYhmH0
wwP6vM+0KJfXK0ZPvKD/GNR7fhwr3rh6kWGYdOAd0H9NSTQ3Rev+XArUJV3y
BiaA+TnmQlBcJBYYGRWgOEDoXm2YnSnQvlTIayPsz3JMJAXqny7pA8X79FPM
BaCMR3PCvQ5gx0zFXIL5HSgOqYMp0L5UyPwR9CeTPC4F/cdAMpKZ7I5hGIZh
mGQTBrC2A2R0AeR14s/lHQCT8NicEMAZQYDzMJdirg4ajd8KW623hLOyvJGi
onu7Kiv/2VNXV987adIzPZMnr+mqq1vfXVX1XqSkZF93YaHUm58vp5s8Tbm5
ss+IXEFHeKKGcRDF+ozk43geuYeGdUVFHVGyj0g4iSi4P+CLorqUlUk9NTVS
DzmiVL6onupq2a1E9xxwRcU4q4aE6hitE50vnEi6uqKi7YxQX2OfR4QvqqhI
/kz1O6oDS/ieVM6oYKyXSbiX1H4odfB4OOrOon6Q/VxYdndJidSNW+p/8lhR
H4eH80aN1hMVG5UrSnaNYf0iFPJDkS8qWudOs7k/aLMd6rTb9+N2T6fFsrvD
bN6Bz3cbPueNnUZjX9hk6sDjL2C9l3YXFCzora29f+0pp9z+1sUXX7/le9+7
fMsdd5z13mOPTfto1aqSbeFwBnkYjjHlLAUFBcUul+vTNpttiCuKnDEO7BPK
WLiixGfhr6FyTSbTQaPR+A6m3Ww2syuKGa+QK+qTOP7vwfEvu6Jonog5IZLM
OUhzjOYaZThXVD6ukfQZ59wQVxTOy3twm46uqKgfSjii2s0AfivAiw6ApVkA
jXkA/1cGsLAW4NEZAE+civsegAWfBfB9Ec/9GkDgRtz/JW7vwe0/MfUGg+9J
o9H3stnsizidgTdzcho3FxU1by8vb91VVbV4T3X14n01NYsP4v5hPNZfVERO
pxbs92bs8ybZF0VuILUf6GiuKPL/kG+puLhVKi9fLFVXt8muqIkTl0iVlYsl
LFf2A7lc9bJ3iJxFWEfZF0WuIuFKou/FPdVlxB5Tlz3ofWoa8D6RI0r4n9zu
QT+R+no6Rt+RL2rwvEbZfUT1IH+V8C4pbiclilcpeRneE3X0Nis+pUFHlPBD
xTqiRB+LDPq5fFH31eCxweODLill61M5rYZ6rahsdX2VPj1+hCNqqAss1hMl
t7Ef23gYcxCzH8fwHtx+gNmB57+D127AZ9ZTXNyyGsfYqkmTlrTOnbvi8bPO
evovn/3sc3dcddULP7zhhv98/Wc/W/2FO+7oPOtXv+qdevfd64tvvbU784or
wlZlrkkGr1f2QRmjbqghfih2RB2Tm0H/vyN+f4R1vz0F6p7uWQjK/8bCMOMR
D2gzbzxxlK333NaybQzDMCPBA9qtXfGg9/rK6zHDpC96rwciXq0byqSMI0Lv
scZjkmEYZhBa6/Reb0fyLmESxwPaPT9PAvVIlTEXTxiGGR/QO0aPd1ayy9U6
8baLSU3S6f2aSvGMoK8ZhkkeHtDnfaZFuWMRhjkaYzH+vMco3ztGddBqTWAY
Jj2oAv3XlJGkGNORAvVI5ZC36I+YL2LKQHs+hXkAs32M2peqmZtgv7kxr6ZA
vVM5/8Hch7kMlLmvJSZQ/h3zRzD7dGhrquS3o+1IZlT8CvQfA6NNV9J7hWEY
hmGSCL6sDPgLk+V5gEz8YbwEf+CcvBrg5BCAB3/R/FwY4Erc/wbmJswvgibT
XSG7/a/BjIwFkYKCtu4JE1Z1T5y4pmfSpLW9U6Zsxu2OntravZEJE/p7Skul
nuJiqaewUHEE5eZKYXJFOZ2DbiC1JyrGSTTE0yQcRvhdGK+NCP9T1BUl3zcz
c9A/RN4mh0OJcDjR+W637E7qrqyUsJ6KL4oycaLUU1V1pCsq1lkVrQs5ogY8
UeS7onKEl0pvVxT1idoXRX1PWzxGfXFUV5S6fRRquyrH8kMNeLywH7qwDl0F
BVJPebnUW1Mj9U6eLPXW1cn7OF7k47K/Sj0mqO+EP0ztDTueK0p4oI7iigpj
Ivg9pSu6JVdUWGlTP+ZQp9l8IGi17u10OD4Mulw7Qy7Xu0GncxO25Y2Q0xkK
ZWS8HM7OfrKrqCjQV1Pz97Unn3zX+vPP/+mWr3zl25t+/OMvbfnTny58LxA4
7YPnn5/c391dKq1fnyNJkvU4HgbZFZWdnf1pp9N5n8vlWp2RkbETP/cLP43a
V5MsR41w06jdUMJV48a5Qcfs+BzYFcWcIJAr6iycD/eSKwrnyQGcixJFuJto
bpA/jeZJsuahmGv0Wcw/2qfj5Iqi+WnBdQ7nYRq7ooQfipx5fhPAgxaAh+0A
K1wAT+Ba8nAxwOOVAI9NBlgwF2DRGQC+83B7KZ5/Ne5/B7c/Nhj8vzYYAvdj
HsdjbZjnDIZFazB9JpNvo9Xq2+Zy1e9wuxt3T5iweO/EiUv2T5my9ND06cv6
p09fLk2btkKaNGm5VF29VJowYYnseyJvEjmAyAckvEDCDaR2GA36mhTnUnFx
i1RW1ipVVrZJtbWKK6qmZrFUWtoi+5jICURuI/IPCYcR+YnIv0THh/NRxRPy
DpH7iZxRFKo/hfbpuPASxTqm1NfQPnmiqHyqh9oVpVXo/jabum8bhnVEDXqi
jnRECT/UoCPKP+B/Eo4oOiacT7HnxBvFIyW8UcrzUvuiBvtUuKAahnihhvNE
UX8rnigldC/ydDmdDYcdjsBBfAYf2+3+j3AM7sL97fj9pszMpjfc7pZgUVHr
SzjOVkybtsx/6qkr/37++c/effnlL9123XWv3PiDH6z52i9/Gbrs7ru7zv/7
39d/wud7a9pjj71d/vDD63P++Mc+G/mhhp2R7IdKlFtA/78n3jvCutO/jbI+
BeqfzvkQ891EO55h0gAPaDNnPHGUrfe81rJtDMMwI8EL2q1d8aD3+srrMcOk
J1quXVqsdczo0PtdJWjXsB7JTHuC7WIYhklH9F5rRbxaN5SRSZV3pt7jLd54
EmwXwzCpCa1Reqx5yS5X6yS6ljOpgwf0Hz/pGO8I+pphmOTiAX3eZ1qUOxZh
mOGg95me488zRuWPNJ74upFhmDSA3Ct6rykjyZspUIdUzHOg/BvQE0BfrsC8
APr3hx65NYF+smNWpUCdUzHPgPJviZcm0J/Jxoa5DtMH+vfHWCeShP5jRk4b
6D8GRpvHk94rDMMwDJMcDPiiMpInajOAswOgMAgwpRPgk90m0+dCAF/Gz9/H
zz/H/Ba/vx/zWMhobA5arc+EXa5Xw7m5XV0lJW92V1dv6a6tfb+3tnY3bvd1
19Qc7Kqq6u+pqJC6y8qkbvICFRTInqYBVxQ5gY7mAYq6gIJqX1SMK4rcQmo/
kuyJokQ9USHhHYpGdkaRx4kcSliXrtJS2VvUXVUlO6J6yB2FdZXrifeTr8d6
DNQhmgEvErmIhCeKXFTJ9ESR60lkpPegdqqD96L6yfWlvlV7uBLI0fxQ8vPA
crqx/+iZ91ZXS71Tpkh9M2ZIa2fPlvpmzZL6pk+X+qZNk/qmTpXdXNT/A84o
8lhRH+K9BsaGcD6NwBUVUaVLtY/Psx9zGOt/IGg0foz7H3ZaLLuCDsd2HJub
cUy/GcnPj4QLC1/FPNNVUdHUO2nSQ2+cfPK9b5533i82Xnnl97fceuuX37nn
nkt3Llz46T1PPvmJ/Z2dMz/esKHmo23biiVJysbYMabjzD9zYWFhUXZ29jnk
qcnIyFjtcDh2YvrJGyM8TslyRdG9EnFFGY1G2RVlNpvZFcWMZwZcUTgH1uH2
gJgf5IkibxPNDZoT5I9KhiuKQvNMuKLo/sIVRcdoHtJnK66tNlwLsVyq01rc
3o31OAPrnK13px0d4YfyRv1Q7WaApTaAFx24zQJ4Ih/AV4aZCLBoBn4+FWCh
B3MxHvt/RmPD18zm+pus1vr/tlj895nN/n9hGgwG31OYV4zGRRGDYdGbuN1i
Mvm2WyyBXQ5HYE92dsO+oqLmg1VVbYenTl3WP3PmCmnOnJXSSSc9JYf2Z8xY
IU2evEyqrm6TiopaZJePcEUJX5TT2XCEy4kcRuT+Id9SYWGLVFLSKlVULJbv
Q64ockZVVLTid82yL4hcR1h3SbiiyENE/iHyHg3no4rXFSV8RCKxXiK6p+Ji
UjJ4XdOA22jQEzXUxTQWnqhjObKEJ4rOU56Jcr3a/TQ05HVS+pXaMej7Cgy0
S1wrItxSR0usM4qeofB7Cc8VuZ9EBvtZRN2eoY6oQVcUjbF68kQdwDbuwfvv
wmzDYxvwum63u/k1HMfPVlUtbsXx+sj8+c/86aKLnvvVVVe98KPrr1/9rdtu
C195552R//rDH974tOKI2jizsXFb7ZNPbi9ds2ZnTn9/vw1/9hjWE8WMmB+B
/n9TbMS4RlB3+jc5FqZA/dM9SzDTE+x7hkllPKDNXPHEUbbe81nLtjEMw4wE
L2i3dsWD3usrr8cMk560g/7rAcWrdUOZAVLhGXo0rAe/rxiGYeKH1m6911kR
Zmxoh9R4hlrWI5lpT7BdDMOkJslec+JdG9JlreM1L73xgP5jJx3jHUFfMwyT
fDygz/tMi3LHIgwTC73P9H5vjlUdkl1vhmHSj1+D/utKoulPgTqkUroxP8PU
QOpxKZx4LqQVCfTP8hSobyolBIprS2/X2XDciNkE+vfRWGZOUnqOGQlbQP/n
P9r8MOm9wjAMwzAjR/a84AvK4AcwkSdqI4AjDOD+D/4e1QXwiZDJdFnIaPxe
0Gj8ZQfA/2Ie7gRoxKzsNBhexuOhTovljZDdvimcnf1uuKBgZ3dZ2YeR8vJ9
3RMmHOiurDwke6LIv0QupvJyqbu0VOoqLJQiubmKzynWB6R2AJF/KZqg8EVF
I/xMA64olZdJ7YqSPU/R6wfuL3xRdA7WI5KfL3uKuktKlAifFdWRnEpRV5R8
PXmRhBtJ1CN6T9kThefTfUftiVI7ooQnStxXnXjvFXVEyf0jPEzUt9E2DTiw
IE5XFDmisP1hanv0GXTR/d1uqbuoSHZE0XPvra2VeidNknrJCzVzprR2zhxp
7dy50tp586Q3TjpJWoshd1Tv5MlST02N4ozC64f0vajncK6oWE9UNGGVG0oO
nhuJnt9pNpMj6mCn0bgP27EHx/Ju3H8fx8jWoMPxFo7lbhzLq7smTFjVNWlS
a9/s2Y+uO/30P66/4IL/efvqq2/aesstX912992X7XrssfP3rlhxxkevvjpv
X2/v1P6tW6v3bNhQ2r9rl1vatg0HQtgap6vBWFJSku9yuTyY3zscjtV2u32n
0+nsJ08N+WLI40TOmGS6ooSbRnhphnNFkZ/GYDCwK4o5EcjB8X8Wzr97ce6t
w3lwgOaE8ETRluYffifPk9HOQzGfqYxYH5x6nqv9VDgvD2A9+vD7u3Aeng6p
54qK+qGEI8prBnjNAtBuB1jhAmjDdWNBEf4oUQVQPwUgMBfgiTMxFwD4Po+f
rzGb679rtTb8xOFo+I3L1Xx/RkbjE7i/xOEI/Ntm83dYLP4+szmw0WTybzOZ
Ajtwu9ts9n+M3x1wueoP5eQ09hcXt0jV1UulyZOXSzNnPinNnbtSOvXUp6T5
85+WPvEJckY9iceXS5MmLZXKy1tl9xN5gMhnRBG+oViXk9jPyWnC8dAse6bK
ylqlqirFFUWh/ZKSFnxWjbIPiFxF5BwSHiLyGpF7iBxIVGairqjh3FGDfqjG
Yb1EwheleI0ah3iiqH5j5YmiMpX6DPVexXqulPo1DNRvOE8UfRZ+KKUfG2Rv
ltvdJD/Pwfs1DLinlGes3I+eiXBCHc8bRWVRPag+g20YPmp31JHPgtrWJEdx
RQUO2u2+vTgW3sf9t/HaSF5e48tlZYtX1NUt8c2du/zBs89++q7Pf/75n3/1
qy9//+abO6/95S+7L7v77p7PPPDAuk/+858bTvb5tkxbsWJr9apV75Zs3Njv
3rZNysCfO+L92YNJnB+D/n9XXIOZMcL6fz8F6j8e8pNEO55hUhQPaDNHPHGU
rfc81rJtDMMwI8EL2q1d8aD3+srrMcOkHx7Qfy1IZJ1jkkM7aPMM21OkHnq3
i2EYJp3wgv7rrAT83+6NJR7Q7jl6UqQeeraLYZjUhH6m1+N3hGSXq3XibReT
OnhA/3GTjvGOoK8ZhtEGD+jzPtOi3LEIw8Si99jzjmEdtFgLGIZJL5aB/msL
Z2RZgLnwyEeaknhB//4aqxzG2OLok8YUqGuq5FHMuXH0md5kYR4B/ftrrPLf
yek2JkHIlab3s09GPpXsjmEYhmGYkYAvJYMXwEiOqHYAcxjA2gHg6gLIiwBU
dgLMCwF8Lmg03hA0me7uNBgexWNtQYDn8bwg7q/tMBje7jSZ3um0WneE7Pbd
oczMvaHc3P3hgoKDkeLiw10lJf2yL6i8XOrF9OA+fe6K1xUlPFHkChKh80TI
T0Qh51OsK0r4osgVhefKninhQyLPE5VDvihyO9F15FHKy5O6yBmFoX06Jt8D
z5HrIeoX4yQSzqrQMPVIiisq6ogib1KEPFTkeaLQfvTYEWWqrxWfRd9EPVFh
6kPhYBJtEX0Ex/FEUR+Spwv7Rr4v9lc3PlN6vt0VFVJPZaXsiSL3Uy+ltlbq
qauTeqdMkfpmzJDWzpqluKJOPVXO2pNPlvpmz5a/o3O6q6tlX1SYnkH0GQ7x
Qh3FFRXGRDBdlKgjinxR5LMKWiyH8byDOGb3Y/334vj9ELMD27sNx/dGHCO9
Ebt9Tdjtfr6rvHxp3/TpC94444z73/rc5+7cdO21P9x8yy3f2Pq7333x/f/7
vwt3r1hx1p5XXjl5/9q10/s3bKjd8/bb5f27dxdIO3Zk93d0uCRJssThaTDA
oGvJkp+fX+JyuT5Nnhq73b4atzszMzP71R6ZZLqi1Pc8miuKPpMrCut30GAw
vGM0GtkVxYxncnDuneV0Ou/FebAO59oBmhfCm6b2OY12DgoHlJh/an8bRe2M
onPIExWdlwfz8vKobn8wmUznUJ317rQoKj+U3wTQbgZYagN40YHbLIB/FQA8
Vg7w6EQA30yABacBLMLfjRdeDBD4otHou85q9d9st/u9Tmf9/2ZlNT6cm9vc
4HY3PZ2b2/Sf7OyGrszMhvWZmfVbnM7Ae3Z7/Qc2W2CPxeLbbzb7D1os/sN2
e6CffEA5Oc1SYWGrVFGxRKqtXSpNnbpMmjVrhXTyyStlV9T8+U9Jp5yyUpo9
e4U0bdoyqapqsZSf3yy7iYQ3iXxC5DcSXiC1m4lcRuQhcrupnBaptLRVmjBh
sVRTs0Sqq1uC2zbZP5Wf3yR7g8gJRW4i4R4iRxG5otSOo9G4ogY9UYNOIuoH
JfUDjiRlXwl5m6hewhFlNisZG09Uw7CeKOF2Ip8S1ZmuoT6ivlK7omif7kvf
0/3ID5WX1yQVFTXLji56HrQljxeFvGG0LShols+jcqgPqP3i/nTvYzmj6Jkp
XqpBh1isLyrWz3Vk6Bk1YZqjqcfx6v8Y67I9N7dxXWFh82vV1W3LZ81a9sT8
+c/86aKLnv3Vl770wg+//e1XvvnjH3d86c47Q5+77743zvnXv94+bcGCt2ct
Xvz/2TsP8MjKsv2/00t6b5u+vS8IKCIMoKKAH4rwB1EpfijwYS+ggkZRERtK
UcQOuCU92WxHGRekL7CZSd/GZrNsZXsvc/7Pfc68ycmQ7M4kMzmT5Lmv677O
nDPnvO/zPG85swv82DJp9ep3C9euPZi9aZOSum3btoQgI8qK3x9kfj/HTvRH
KMP/bnEf+dNDjH8O+fk4yGG0+wXyByKsPYsVb/KI2KwPTxh9G72GY5kbi8Vi
DUUVInZ7Vzgyen/l/ZjFGn2K5b4ViStinSirnzwiPvb2WMbB7ywWi8UKT0bv
r7zPGiOviM04euMkDqPzYrFY8ado7zfh7gujZZ/j/W50yiOMnzOj0TzPWaz4
kkcYs85j0e9ImMXSq0KMzLyrGKR/zwj1P1R7wq4ki8UaLdohjN9b2OEb/378
g+TCgQYzznURuUMYX8OR8FVnqcUjcRCj0d5FfoCcd5ZaxaNuJ58Qxtcw1n4t
WgVjRaRPCuPHPhpOiXZhWCwWi8UaiuilZPIKYSU7twrhfkuI1NfpN+haISb7
hTjPR7/d15rNd/ksll/5zOZqn8n0QrPJ1ELXN9E921XGjtm832e1Hm52OI75
Xa4TvsTEU/6UlAAYUOAtdWRlKR3Z2UpHTo7KEQIfqi03V2nLyxuYFSV5THpW
FK7je3CRgrykFj0vScdNCuUlvYcVJRlIg/GiwFMCMwp8oiBTSeVThcalZytJ
blEsWFFoR+aMHMGsQi1gychC7APlH8qKwneyneDzvfylEN6SZEYNyI3CNbpf
7ZvabQNfi8azvahIY0OVlmpHGNfIYEepxjl93wlm1LRpGjNq7lxl3bnnqtwo
1fg8b576PZ4Bg6p3jkiuVQgrqgUsKDChJCMqaHCjaNwDdP8pOh4nH6H5fKDZ
bN5Lee0k99Dn9fS9j+rxsj8tbVVbcXFV1+zZT2665JKH3r7hhnt7vv71O7c+
+OBndj711NUHm5o8h1966fzj69fPOrZly6TAu+8WHty+PUfZty9N2bEjMcho
sETAZ3CSk8iJpCzyVPInnU7n4y6XqzkpKWlvenp6IJpsGj0rSlq2PRgryk51
F8yKYo0Pqawomve/AY+J1sAJrAU37bNYF1grWCf0XT+u01Ct50GF8qIkIyqU
D0fnJxISErppj3iKDE5IpoH1CvKhJCOqwipElV2ISpcQ3kQ6ptN5rhALS8jT
hJh/Lh0/JMSiK+h4LX3/eau16v/s9prvuly1P09IqH0iKaluYWpq/bLMzIYX
srIamnNz69fl5TVuyctr2Jmb27A3O7vhYFpa/dHk5NoTbnfNKYejOkDPK7DT
CTYSmEP1NEYaI0hjOC1RpkxZpsyevUI555xVqufOXanMmqWxokpLl6gcIbCi
wDcCNwjcJK1NjQsEFlMoK4riUJ8Dl6iwsEltZ+JE8KmW0PlihWJV7wNbCDwi
sIhgjRWlcYok72j4nKg+VpRkQ8GIH0wk7dh3jr4lJyqarKjQdvqzomr7cbH0
fCg970rPstKzovR8LTC40tO1+mOcCwoa1ZpjvKWLi5eoY1JevlQ9Fhc3qfdg
vDA2eB6cKfQpeV5gUQ3EjMI1zAvkgxoil/BZUeBf1avWWFH18pnjlP+urKzG
zpKSJS/Nnr2y4ZJL/v3H66777wN33vn6V7/97bdu/cEP1n76oYf8Vzz+eMdF
zzzz9jl1de9MW7lyW+nrr+/M6+7el75rVyCJfnM4g3xKi2REMSdqRPSQMP7v
F+GKYeTwsziIfyz4Z5EWnsWKI3lEbNaFJ4y+jV67Q3VFGLmxWCzWUIT9JVZ7
Vzgyen+NxbuGxWLFVkbvA/z7zDh5RWzG0hsncRidF4vFYo0G4f1r9P7Ke6wx
8ojYjacnTuKItlks1ugW3jVGvLui3W+sHW5eLONVIYyfL6PVLBYrvuQRxrzP
YtEv72GskVSFGJk5V3GGGLwjFEO042axWKNTZcL4vYUdnrvI3yA7BhzJ0aMi
8hvC+HrG2g+foQbfjoP4jHQr+ctkyxlqNBp0OfmwML6esXZCtArGCltgqBk9
7sN1R9SrwmKxWCzWEEUvJktACJdPiDQwosjlbwkxl84v8QtxLfkun8n0M/IC
v9n8QrPF0tVsNm8DZ4fOD9H5MZ/NdsJnt5/yOZ2n/W53ACyituRkpT01VXNa
mmqVHYVjerrSmpmpMaOysvpYUeAdDcRkwjmug2+UkqK0BNtSeU6SgxRkKbWG
w4oSOuYRGEhgIqEfyYvS86gkU2kQPlEvV0l+F4xVtiM5T0PlRPXGgfb0bCf0
I41zxC65UUFmVIvsG20Ea6DWQbKm9G3pOVF665hRaq0kXwvPgIdFY4BxbJ8w
oY8RBRcXa3wout6en6+xwXJyNNPn9oICpaOwUH2ms7xc6ZwyRemaMUNZN3u2
xo163/tUXhQ4UmgPz6nsruA46seihdwK03lb0CofymIJkE9TvCfIR8mHyPto
7u6iebuV8trQbLW2+hyO1/xJSf9uycqqo1j+uv597/v1piuvvK/n9tvvfqei
4nPbn3jimr319Zfv/+9/P3C8s3POsY0bpxx5551iZceO3MC+femKoiQGAgEH
Ha1D4DK409LSihISEmbYbLbZLpfrguTk5I+R73K73f+k6x2pqakHsrKyAmDT
SF6M5DlFixclmTR6VpTsK5QVRQYr6j/MimKNYYEV9SGa97/OzMzcQGviBJ0r
tEYVWqPq2sA6oe/UYzRYUXpmVOi6RH9gVOEc6xFHiuc0rb89tC6fo73iPopt
LsVtHdky6flQVRYhnrQJscwhxBo3nacI8dcsIZ6ZIMT8SUIsmE2+QIjKy4RY
9Ak6fsZsrrrdbq/+hsNR/SO3u+63CQl1f09Kqq1PTa17Lj297vXMzPq2vLzG
TRMmNG4rKVmyu7x8yf6JE5ccKS1dcryoqOlkfn7j6czMhgCYOy5XncqIcjhq
6bPGSQJ3SHKcwBGaMGGxygkCMwjMqGnTlilTp2qePHmZQn30sqLAAzKZNGaQ
5EWh3VBWlMaLApOqQcnOBquoKcilWqqyqfA5J6dBZRGBfWS3V6mMqD5WVFUv
QymURTV0XlQfKwrtajyoqiCvSeM2hVrPeBoOGyrU8nv0q7GVBs8T1/oYV7W9
TCs8Kw2WE+oItlRGRr1aWzCfMLbgPw3Eieob7+XqWE+ZspTGe6nK8wI7Cs/Q
XKL1XK/GgT4w/oPxouSckPmcnRVVp3O9vB6gPE+5XNXHyXvT0uo2gBN13nnP
1l511fOP33bbq/fde2/z7b/6Vdu1jz++/vI//anr/ZWV3bMaG3dM9Hp3T+jq
CmRt2rQ3ddu2bQlBPqVVMiqZEWWIfi2M/3tGuJqcPMQcPkZeFwc5jHY3k6+I
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
GEhnukdymIJMpPfwinSsKJUxBbYQWFHkVskjkhwifC85UaGsKMl1AmtJDMCK
AtsJLCfJQALvCEY/uj5a6KgypKh9leUEhpOOP+W3WPrYStRnCyy5UWAsoQ/J
jIKD55IlpcYMgxUVjJtqr3kgzpV0kFXVe2/QofH0sqNQ0yDLyj9Y7fWMKN1Y
qKwo1Do9XWNCBcdDMrzadIwoWSu9e3lhkhlG9+FZMKfAheooKVE6J09WOqdN
U7omTVI6i4qUzpwcpYPua0eNNO5XAPPRZ7MdJx9ptloPUv57yTv8ZvMWyn1d
i9Xa7HM6X6YYVrYXFFR2TZ36x/UXXvjzt6+55p4td9xxx7YHHrjx3b/85aq9
TU2ewy+9dP7B9vZZx7ZsmRR4993CwMGD2fs2b04LBAIJiqLYyZYoMBlMaWlp
KW63e47T6bzZ4XD81mq1em022wbyO3RtBxhRqampe5OTk0+AG6PnQoEVA7YM
rsPR4ERJh3KiYPBrMmk8cZSsKIvF0kOxLqfzb9L5OULjPjOrgjWWlElr7lO0
Hv5Oa647IyPjhOQ5SceCFaVfe6HrE+fgtoEVhfMgK0qh/eM4rcf1tC5/S75U
aOy2aCnIh5KMKK9ViCo7HZ1CNCQJUUl9PZNHx1I6TqfvzhXinxcLsfDjQiy4
zmyuutlqrb7b6az9vsNR+wuXq/bJxMTayqSk2hUpKQ0vpqbW+dLTa9dnZtb3
ZGc37MzNbdxbULD4UGHh4qMlJU0nysuXnpoyZWlg+vQVyqxZ4PqsUmbMWKlM
nrxcKS1dqkyY0KSymSQrqj+fqI8XBV4PmFHgOsFgKoELBWYUjM/gA0m2ErhH
oawojedUrbap8af6WFFam30MquzsRpVlBGdno/069RnZtmRFmUxVvcwhxAzm
UB/fKnJOFEw17WVGoR3kjnbRR7i8KMmJQr5gOSUm1ryH7+RySV5UX/xgPUl2
kmRD6a21pecnabGhH9mWrI/mSjU+yYpCPhhrPSsKbCiND6WxocD/wpyg+aSO
RVYWWGAaE0wyoyZO1HhRM2euoPm0QpkyRWNFgTeF51BDxIt+0b82Vv1ZURg7
xKpxsWr68bCQlzTN+SCvq+q01brouNlceYj8LrXZbbXWtNL1V6gWS2me/G3e
vJU/uvbal2+95x7fR554YuOc1avfLdy3T0nr7g64goxKC/OhRoW+L4z/O0fp
R4aRRwm5MQ5yGAv+BzkrkuKzWAbII2Iz/z1h9G30Gh2qK8LIjcVisYaiWO5d
Rvdv1LuGxWLFRvg9ZPQewL/L4kPxsMd7YhgHv7tYLBZrYBm9n/K+Gh/yitiM
qzdO4jA6LxaLFT+K9j4T7n4wWvY33ufiWx4x+uZSPLki4oqzWKyRlEcY8z6L
Rb8jYdb4Ft5pRr8/vSMYQ7RiZrFYY0O7hPH7DLvPy8jvO+OIjT3dKYyve6z8
LV2en4+DeEbSDeTZYnzpD8L4usfCB6JZJNZZdY0wfsyj4bRoF4bFYrFYrDOJ
Xj6mKiEsXiGsLULYu4VwvSVEKrlgrRAzfUJ8pFmI2+nzT+jzn9eaTPU+k8nb
bDKtXWs2b2g2m98Bg6fZaj0OXlCb06lxosA4krwf6YFYUYM5yEkakBMl+UR6
rhFYUXgOXCHwoiQnKsgkCu1f5RKBtwSek2xfsqLAVZJsJVwDzwnto+2cHKUt
P19lFrUXFmpHuKCg9zO+Bx9J5UZR+yqXSfQxm/xgT8GS00S5qMwoHZ9JzVse
pYMsKdVgXNH9PrCoZMxiEE6UCGFGydyC9iMmxIKagluFvtCH5GnhM5hRqHUo
L0rPicL3knmFZ8F5Qv2lMQ46bhd4Uv360LOwQthhbag9jWk7mFBU466yMmXd
lCnK+smTlXUlJUpHXh7GO+BPSjpNdTlB43aU5uZB8r5mi2UXjUEP5biBrrf4
nM7XqN9/tebk1HZOmvTXDeed96sNH/vYfT233vp/W++777PbH3/8mr21tZcd
fuGF9x/v6Ji9f+PGKUf27ClWDh3K3d/TkxHYtSsp0NXliBIfqlfp6enJbrd7
bpAT9YjFYlltMpl2kMFgOm2320/R96eSKMfU1NQAODLgwuiZUcNl04SyoiTv
RrKi9GwasKmyaJ7rWFEnKO4O+m4hxfJFOp9BThbMimKNHZlork+jNfpNWhsr
ae7vyszMPA1GE9aCZKdFixUFS1aUZLUNxnIDKwoxoF/JiqJ94xR5M/n3tDbB
JI4CK0rPh6qyCLHGJsQyBx3dQjybIsTT2ULUFwpRM0mIRXOEmP8BIRZS3wvp
z+uVNwlR/UWrteZbNlvNA05nzaMJCXVPJybWNSYn13lTU+veSEur7cjIqNuc
nV2/LTe34d38/MX7CwsXHyEfLy5efLKkpOl0WdmSQFnZMqW8vM9g/JSWLlGK
ippUPhB4QRkZDSqrCbweMIsk+0hj+FT3soskNwq8Io3FVNvLV8JnfIf7ND5Q
dS8fSLKiwDGSrCiwjvScJvSPIzhG4EVlZGjGZ3CHtPZr1Hj62u6zZFFJVlRo
++GyotA/uFd6o3/kK3PTeFBVQS6TxjsaiBWlcaJQo1rKo643H7SJvtAmaqHn
QvXncr3Xet5UKCcKsUiGluZK1biOuqF+qCP6z8ysV5lO4ELprfGh6vvFKg2+
lMaMWqwyxjCPMJ8mTQInaqk6p8CbAl9KsqLkeOnZXnpeFK5p861KV7eaoMGI
qqNrdfRdDXI5aTYvOkht7bDba9ZTDdZQTCtpzi+YPHn5o+edt+q+q676zxfu
vPPVKx59tHPO6tVHVE4U/f5wyt8hzIgaVYqn/2fCS2J4/wzim3GQw1gw/jnz
LRHWnsUaSXlEbOa+J4y+jV6fQ7U3jNxYLBZrKIrl3mV0/0a9a1gsVmxk9PqX
roh1oqyzCr+N4+E3d6ziMDovFovFikfh/Wv0fsp7anzII2I3vp44icPIvFgs
VvwI7xwj3mHR7nckzIovVQjj58RodkXkJWexWCMsj4j+2vca1O9ImDV+5RHG
vz8rRjAGXh8sFkuvcmH8HsPW3CM0ltB41Qph/BjEwv/U5bg+DuIZCW8k3yDG
p8DGeVcYPwax8LlRrBPrzPqxMH68h+uuqFeFxWKxWKwziF4+Jq8QVnoBOVYK
kfCKEMkvCpG9VojSt4SY2yrE5W8KcQt9/nGzEE83m0z/bjab3yKvByNqrdm8
x2c2H/RZLMd8Vusp8IJa3W6N8QTOD/hMQS5QL/8phAHU6wG4Ui3hsqKCfCK1
XepP5QqFcIlC+1N5ROAtSQaSbB9sKLSva9sP9hHazc7WmFDFxUp7aanSUVam
dEycqHROmqR0TpmidE6bpnROnapea6N7VGZUerraRj9elAjhRumYUegX3Ci/
NGIAvwkcKcmSAt8qGLfabricqEHcy4pCP2B8oX5ZWWq+rWBuUQ4q0wl1QL8Y
D1mz0FgRn+RMyfGX1rOhpCUjSm89Lwrx0LGNnm2nuDoors68PKWL6tuFuk+e
HGgvKzvdVlBwsiUj4xjde8jncOynuuymuoBjtqnZam33u91r/MnJ/2nNyWmk
sXtq3dy5v9142WU/3HLTTV/t+da3btn+u999aveCBR858u9/X3h87dp5yqZN
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
hM9iqfLbbP/yu1xvtCQlrfenpOxuSU4+1paUpHJ82lwupRV8KItFdS+rSPKi
JB8K1+T3MPhFeA5cJ/CEwIrKyFDasrOV9vx8lRPVAQbT9Okamwicpbw8pTUt
TWUNgUcExpEvyEzSt+nXsarAGVJZRSkp/Q12ERhE4DY5nX0xSgdZUS16VhQ4
UXBOjtJOsYCp1F5UpHQgVnCjSkvVODsnT9aYUTNnqmyldXPmaIwlygecKbSp
8pQo3iHxokR/dpTahj53cJqkkQdy0/Gi/Dq2lE/WDffROKisqIICNY8uygGx
gxW1/rzzlPUXXKCsP/98lRnVOXWqyvBqo7FCfXr5XaGsLVn/M7Ci+vGhgm7T
vgv4NT7USV9CwjG/232o2eXaT8fd1NY7NBc20Xxpo7mypmP6dO+GCy5o2HDJ
Jf/Y+PGP/3bjddf9cOuXvvSVLd///s27Hn30k/tqaj68/9//vvD4W2/NDfT0
TFG2bSsJ7NyZF9i/PyOwe3dy4KWXjGYvSFbUzNTU1P/LzMxckZycvNXhcJxw
0jjq2U8DcaIkw0nep3e0GDWyH7BwwKbBESwcirWXFUXx9pjN5hV0/Ep2dvas
iRMnJhtUTxYrVpKsqN/b7fa3aa6fpM8qKwrrAmtGct2wJrFOosGK0vPacJSs
KJyHsqKwVt20/4IVRetRoTjPxorS8aEUcoVViCq7EJUuIRpoX5qfKcQ/CuhY
JsTTM4VYdB59d4nFsuAqs7ny/5nNVbeZzdVftVqrf2CzVf/abq/+i8NRXeNy
1axyOmteoSO9jqs2OJ1VW+nzrsTE2n1pabWHMzPrj+XlNZwsLFx8uqSkKQA+
VHHxUqWwcImSnw9O0WKV/QNmUEpKfS+zB6wkPTsp1JITBaYPWFGS46OxfPrz
ovAZ18H8kQwktA9GEJhF4BLl52tMJbCTKFYlN7dRZRiBG9SfRVUVbKu6lzul
50VJ/hTyAc8I7cPIEZY8Kj2XCt9L5tGZOEfa9YFrE8rTQi0lLwqcJTCbwIia
Pn15ryXjCSwn5Iv4EAPycTqr1dzRH9oBown3gTUFRtTs2StVXtTs2WBGaW1p
DCrNaFeyolBTMJ/Qh8xZ1gPGOdrH94gV44AxwHNFRdpn8KLAjgplRen5W2fj
Q53JGntsIE6UnhWFeVBN86Ca5kGN0seIwjxbdJp8UoiFx8lHhFhwkNYSGFE7
6XwzHdtNpoWvuN1Vi0tKFv/hssueu+eLX3z5xh//2HfJM890TX/jjcP5YETR
7xMn2RZkWZqN2PxYMVcW+d/C+L+T1Puf5OFwPz9B3hAHeYwF15OLIys/ixVV
eURs5rYnjL6NXn/xZq94L0sqnDqyWKyhySPGBgMqXIcjo2OM1J4w82KxWNGT
0eteuiLWibIilkfEZqy9EcbhjVEcRufFYrFY8SC8f43eP3kPjV/F6h3siSAG
T4xiMDovFotlvKK9x4X7LovV3hpLs0ZWHjE650k8uiKy0rNYrDiRR0R/P/Aa
1O9ImDV+hPea0e9Ro+f72eyJpKAsFmvUaqIwfr8Zb36OPD2cwRnHmiSMHyf2
2b2cXD7IGLI03SWMH6doOzuqFWINpB8J48d5uF4f7aKwWCwWixWqKiEsXiGc
rwiR/LIQOWuFmNwhxEU+IT7bLMR9dP57cqXfZFrlM5tf8zudnS3JyT2tGRnv
tmVlHW7Jygp0ZGQoHeA7gfsDNlCQPaQa7CG9wXQClwhcI2nJdwJTCLwgyYoC
hwmsKLCXwFyaNUvpmjNH40UVF6ssKXCH/C6XykdS26J3qGQf9eNQybbBogIf
ivroNZ2r7CIwiagtld0EzpFkLuFccqzS0lRWlMqLkpbMKDg3VzPiLijQOFdl
ZUpHebnKhwJXCe6YOFG9B/2j7V5+lqyNGAInCrVFO+BdgW2F8UBeksuEa3oW
ViivS5evynbCOFBuKi+qtFTporjX0RismzdP40WR8blrxgyV5QVWFu5HHdHO
e5hVsv4hvCiVITUAHwrX/AkJAXoOfKjjlNPhZrf7gM/lepdqtp2ubfYnJ3e0
pKe/2Zab+3x7efkSiuefGz/ykce23HTTj9/56le/sa2i4gs7Hn/8uncXLbri
gNd70fHm5nOOvf32dGX79rLDu3cXKAcOZCp79qQoa9a4g9yFeGAu9LKikpOT
705PT1+RlJTUy4qSzCbJhAplOOmZNJJTEw1OlOxHtolz9OOi+QsWjWRFgVtD
3x1HzPQ9OFdfpudm0/fD4QuwWPGodKvVeonNZnuY1men3W4/CiYTeFFYG3Ld
YU2C4QTLNTtcRpTecl3qWVGSH4XruEZxqrwoivMUeQBWlKJjRFVZhHjSJsTf
nUKsTBBifpoQC3KE+Gcx/RyYQp/nCbHog0Is/KjFsuiTZnPVZ83myjvN5prv
0PnPLJbK31ut1f+02aqXOBw1z7tcNW8lJNR0JiXVdqek1G5PTq7ZQ58PJCfX
HUlLqz2RmVl/KienIaDxf5rIS5WCgiVKXl6Tkp3dSHk0UI59fCjJQepjIWkc
Jsnw0Zv6D+H59DF9+rhOlSo3Ss+JwrNoOzm5VuU5gVOE+MAlAtcIfCN65ajn
+A73om3ZXv82tf4Ri+RPIRcwpsB/0hhIDSrjCKwjjUWlsY80/lEfP4lqFeQf
1av8o1AGkqwJGFkD1UNv3CNj0XhRjWr9y8qWKlOmaJyoGTOWKzNnrlCPkheF
OiBm9I3aoy3J1AKfCTn0b2OFyo2aOVNrDxwpcKImTlyq3ldSsoTybFKfG4gT
hc+ITdYH96LuiEUa9ULdwPLqq9XArKihuK+2/TlRfXOqWmVE2Ww1dNRssdQE
eVGVAfIp8gmTadFRWjuHaO3sJ+8mv0NrahN912qzVb7qclWuongXlpY2PvL+
96+85/rrX/zMffc1X/z3v2+aunr1zrxAIJAsf6uAZylt6C7IirUWCuP/blLv
jeQrh5GPm/ynOMhjLJj2EfGFyMrPYkVNHhGbee0Jo2+j195otFfnCvFerlQ4
dWexxqI8YmDuE+wVY5f/FInDkdExRmpPmHmxWKzoCHuq0es+kj2NNfKKh/3e
E8M4+D3GYrHGu4zeN6UrYp0oa0jCuMRivL0RxuGNURxG58VisYxVtPeWcPeA
0bKn6e0JMzfW8FUhjB/vsWJPZKVnsVhxJI+I/p7gNajfkTBrfKhCjOy8qhgg
Bu8IxxCpPZEUlMVijWr9P2H8njOe/GB4w8IiLRXGjxd7cFcMPnQsnRLJp4Xx
4xVNXxzVCrEG0mJh/DgP19VRrwqLxWKxWDrRj1FzlxAOrxCpbwlR4BdiWovG
ibq+WYh7yU+uFWKZz2R61Wc2d/is1i1+p3N3a2rq/ra8vKPtRUUn24qKAmAJ
gREE5pLKKQKzKIQF5TsbAwlsJ3CFwGQCSyg9XWVBUT9Ke2GhylbqmjlTYxPN
nq1yl1TWUkaGyhtS2UQihJ2k51CBF0Vt97Ki0tKUNvRBz6MvnLdIZpTbrfGU
JD8JnxEXWFKIDXwpMKOCbpNtBdvrZUghfvCjkAPYURMmaOyo0lL1iO/UmoEV
JfsL8qL8Mn5dLv2uif6MKBmjPxhjC2JEXuBaYWyQJ/KTPCx9fqGWbC3wopAv
PYscwOfqxDhMmaLyodbROIAd1Tl9usaKKilRc8Z4gFmlsquCte/lT+lYUW0w
nbfT/XBbkBsFPhT5FPm4z+0+4ne7D1Bue8k7KP5uf2LiOhqrZsrtxdb8/OU0
Fxate9/7nnj7Yx/7Wfctt3xn+/e+98Wdjz56w84FC6468Nxzlxx+883zjnd3
zzy6Y8fEwOHDEwIHD2Yre/emBrZtSwgyFyxxxlqQrKgZiYmJd6SkpDTS8W27
3X5MsqIkF2YgVhQYNXpejOQ6RYsVJbk0si+wotAfroFNE+RYHaf7t9LnleSv
ut3uOZQPs6JYY01Yp+fQuvwh+U2Hw3HQYrEEQllR+vUTjXUYyoqS1yUnDp/1
rChcQ0zgRUlWlN3u/L3F4vgwpZCh8aHAyauw0ivfIcRLLjomCzE/U4h/FAix
sFyIRTPp/Hwh/nkpnV9tNi+8wWyu/AL5a1Zr9Q8slurfWCxVf7VaK2tttsp/
2e3Vrzqd1a1ud83GpKTarWlpNbszM+v3ZWXVH87Orj9Gx5MZGfWn6VoAHKCc
nMWqs7PBIWpUOT9gNKWk1Pdj9YRacqLA73E6+7hQ7+VDhbqPFyWNa3hG40TV
qEwqMIbAc8rJ0ThK4BqBEwVuEgxuFBhGYErhWT0rShptoy/0ixjBckI+kkGF
58E5AvOotFRjUcHoC9c0XtTifgwkPCt5UVpt6oKMqL5agGekZ2VpvCq9tfvA
jEIbaA/xSF4UeE5gPYHzBOOzzBnx0hiqNdK4U1pekheVl7dYV6tlKh8KnjJl
mdqGZEQVFS1R+wN/Cvmhf9RbWrKiUH/JEpOsKBxhxIL6DMSJ0ubQ8DlRyFPW
l+Z1v7kl2VA2W23QNcHrVafJJ2lNHCcfIR+gubDHbF60g+ZJt8VS2WW317xJ
9XshNbVuKcU/f+rUpY+ed97KH195pfcrt9zy8o3f+95bl/7pT+tmNDV1F2zY
sCeFfqvY5W+WOPvdwoqtHhHG//1kqH82zJxuIG+LgzzGgueTsyIrP4s1bHlE
bOazJ4y+jV5z48VeMTBfCvYI5kyxjJVnEOvnqXcAG72uRqPDkdExRmpPmHmx
WKzoCHuy0eteEfzv5cWzYjVHvBHGYfQcjVVeLBaLZaTi5XeAEutEWcNSrMbc
E0EMnhjGYWReLBbLWOG3uxF/Foh2v7y3jQ15xOicG/FqTyTFZ7FYcSePiP6+
4DWo35Ewa+yrQozsnBpovXhHOIZIXRFRRVks1mjXL4Tx+8548Any58IcE5am
G4Xx48Z+rw+Srz/DuLHeq0XC+HGLpr8U3fKwBlCPMH6ch+vvRb0qLBaLxWIF
RS8aU4sQ9jVCpNCx6C0h5tLxsrX0Zwjyt5qFeIyOS5pNprfWms2bmy2WXT6b
bb8/IeFoa2bmifaSklMdU6ee7pgyRWME5eWp3CSVVwQulBiECTWYJfMITKGE
BI3nBO6S5EVRH53Tpinr5s5V3UWfOyRvKTVVfQ5tNA/Qtspeslo1/pFsG3wn
yXPKzVXbadMzlZAHGEdBdpLKVnI6NdZSYqLKlJLMo1bJjyL3cqP0LCk9Qwr9
UD5q3HRd5VyhL4qttz/UQTKj9NZd7+UwSY4VYkJeQT6U2k9BgcamotqBtyVr
pfYJpldIf2qbsi/Ui9pW+VpgOCEPqk871QpsMMmNArMLR7UPMMPA7nK7FR89
Lxlh/mCcaEtlQ1Gc7RRHB45BXhTVM+BPTDxFPuGjOeZzuw8F+VA7ac71UMzr
/cnJ/pbMzFdacnOf7Sgrq+6cPfvP6y6++Jebr732u+/cffedW3/2s5t2/e1v
n9i7YsWlh19++YLjGzbMPtbTM1nZs6cocPBgzr7u7nRlx47EQFeXIw75UHoh
rkS73T4lKSnp5tTU1Pkul6vdYrEcpWsqb0bHZDorK0rep2fKDIdRo+dT4Yj+
cA1MGtkfXWdWFGs8yEWeROvzyzTHVzscjj1Wq/U0mEx0rq4XyVbDms2kvTka
7LbQ9SzXJdaiZFTpWVH4jmJTeVFOp/OUw+Ha7HS6f+9wpHxYiJxsISrsQnid
QlQl0ms/TYi/5wqxsESImqlCVM8TYtEH6fyjQiz4FJ1/zmyuvMtqrbzXYql+
0Gar/r3VWj3faq1aarFUvkBeS9912e1VW5zOqh2JiTV7UlPrDmRm1h/Ny2s8
UVi4+FRR0eIA2D5gQ2Vlac7MbKSYG1ReEdzH6NG7tp+p7fewe/TsJ/CZ+jww
MwrXNY5TlcpPCuVEpaVJVlSDyiTS84/AUsJn5EI5qs9LVpQQfTaZqtTr6At8
JrCZkJ9kUOF5sI/AYCorQ/vaUeNFaVwk3AOmFOLQs6LQDphZaFPPiNLqEVqD
qt5c9TXAvZIZhfbQPvpDrhMnLlWmTVuuzJy5QjU+I2/EBzYT8ka/kj0luVNp
aQ39ckMe4GDJfMB8KihoUplSublghDX24zvJeYDPGRl9vCjcD2ZUfzcGayNZ
U/1ZWsPhROk5ZZgXMle7vUZlQmmcqD5GFM37ANXzFPkEmd7ZVYccjqr9tBZ2
0zx9x+Wq3UA1op80ta/Q3Ho2L6+hpry86S/z5q389aWXeu+/7roXvnz77a/c
fO+9zdf84hdtl/z5zxtmV1VtLXrhhX1p9JvFSbbG8W8XVmz1TWH831GG2kue
OYycwDeaHwd5jAVvF9o/B2SxRkoeEZu57Amjb6PXGzs8ewdxxSD2nMGs+Jcn
DA829oPNFdjoecwOT0bHGKk9YebFYrGiI6PXfCT7GcsYeUR87PkVMYyD5zOL
xRqvipe9tSLWibKGJa+Izbh7I4zD6HnK85nFGnuK9v4W7r4Wq301lvaEmRsr
cnnE6JwT8WxPBPVnsVjxKY+I/t7gNajfkTBrbKtCGD+nvAbEEIkrIqooi8Ua
C3pWGL/3jHWvJZ8T7oCw+mmvMH782H1+lTzjjCPGGkifFsaPXTT9cHTLwwrR
BGH8GEfDV0S7MCwWi8ViQfSSMZGtLUIkviVEAThR9AeuK/xC3NwsxHd8JtPD
5Gqf2fxys8Xytt9q3eO32Y74nc4TLUlJp1pzcgKd5eXKuhkzlK7p05UO+tyW
n69yivzgBIE5JAZgQcGh1/UGWwj8IjCZwCeS7KOsLKVtwgSlY+JEpWvWLKUL
rCjqG/2qDKTsbKUlOVnlEal9D9APeEUq+4jiU9lO4DfRc+0Ud3tRkWbqox0c
JzCjqG+V3yT5TDpmVAvio3ZUgz2FWCU7CjGDG4UjznFd/53ue5XvRG2o3CYw
n9C+5DfpmVH6GKRxP9hXiCGYj1onxI88SkqUDnCcaHxQq04wvShH3AOmlNov
2tAxneQY+WHJeKJ4VMaWZEYFuVgqNwoML/Co9OwrylXldslxCLbVSu20URvt
YEXR8+0aRytAsZymNjGvjvoTEw/53O79NId2+RMStlJ9NtJ3rf709Ndbs7Of
o5zqO2fN+tv6D3zg4e7/+Z/7u2+//Svv/PCHn9/++99/8mB9/eX7//vfDxxq
aZl7rKdnytFt20oCO3fm7e/pyQjs2pUUCAQco4yx4HS5XBOSkpKuTk5O/qXD
4VhtMpnetdlsAXBgsqj+ocwZyYoCF0ayouQ9uBYtVhRYNJKBo+dQSSaOnhVF
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
iKe0dInKiMIYauO3RGV9ISbUsa/+VcF8tXYkh0uynpD3YIwomZfMTRrjDOO6
xvOqfc8YhbYzHFZUaLv6+eZyVQco39M050/QnDpC8/0AeQ95O43vZrqnnfJ7
IyenfnVJyZLFs2atePqDH/zXo1df/Z8HPvvZl7/5f//36he/9721Nz74YNvV
jzyy7tK//nXjBQsWbJhdU7Nl0ooVPYUvvrgte8MGJWXr1q1u+h1jGyu/Z1hR
VZrQ/h8ERv+9Zai7ydcMM7evkE/FQS5jwd+OsPYsViTyiNjMW08YfRu9tths
Nns8ORwZHWOk9oSZF4vFGp4qhPHrPZK9jGW8vML4fd8ToxiMzovFYrGMUKz2
9UhdEetEWVGRR8Rm/L0RxhEv8zbaebFYLGMU7T0l3LU/WvYyvSvCzI01sDxi
dI77aLEn3IFgsVijRh4R/b3Ca1C/I2HW2BPm60jPo4o4iCHaa5rFYo1N3SiM
34PGqr8awTiwBleeMH4sx7vvOOsoscIR/nsRo8cyWu6Ocm1Y/RWP/81UpK6N
elVYLBaLxRLqS8a0SQinT4gc8mzylT6z+SvNFstjfpttSYvDscafkLDRn5y8
szUl5VBLSspp8KE6UlKUdnJbaqrSlpGhtOflKR0lJUpnWZnSUVyscpzALVIZ
ROA7SWYSWEswuEngJAX5RyrHaTA+kWQS6blI1HdrVpbSNmGCxkSaOlXjOs2Z
o3TNm6cewZBSWUiIJT1dfa6XFyX5TmiP4mtFHtQe+FLgQuFZtLdu7lxlHbUH
1hLaUttJSurlKvWyp/TMKMly0nGhellQ+A65hHogBtRgrCj9OdqVOUjeFWoC
htakSRorSm/wr2bNUrpmz9aYWjRmeAb5ow21vbOxonTux4wit4AbRXGBD9VG
cbVRnWCwpKjmAXrm1FohTjSbTEeabbaDPqdzbwvmVmZmT2tOzvrW3Fx/S37+
K63Fxas6Jk2qorH804ZLLvnFlmuv/W7P3XffufWBB27a+de/Xn2wqclz+PXX
zz++fv2sYzt3TjqyZ0/Rwe3bc5R9+9KUHTsSFUUBH8oy1ngKWVlZiQkJCbOt
VuudZrO50WazbU5OTj4K/gwMJgw4UJI/A1YULJlNerZTNFhRkkelY0L1+w4O
sqmO05FZUayxLpfD4ShxOp03uN3uZ2h9bqBrJy20N2It5NBeC66bXKfgReE4
tPXXn/+UkoK1nkX7QC59zqY9IJOuoy+NHZWcnEbGMYP6zKK+cxS3O59cfNLp
nLzV4fhAldV6y9ctlt9cb7Es+rTZXPN5s7nybrO56rsm06KHTKbKPwqxaJEQ
lcvI/zWbF9HPhMp1dntlj9tdvSMxsXpvUlLtIfLRxMSaE05nzSm7vSoAHpPN
VqM4HLUhrKgmpaRkiVJWtlTlDOHzhAmLVfYSGExgCOm5PGdj+OB+yRoCwwc8
IrCawCyy2TQ+lN6RsqIG6jctTeNFZWc3qIwnGBwlGQPYSuhDsqJC+UsaK0pj
J4F3JPlTaAdMKDCjYMmHyshoCDKV+uIIZSqBoyT7pfHpx6jSc5vAzcL3+prI
72SMem6UZGyhRugDcYJhBT4UmFFlZUvUMcQ11AD102Ko0vGxKtW6y5xlfc/E
dgrNTWNhaTmCs4Wjxp6q6WVKDfT8UBlRMj5tfvVxrSTLjPoLuN21pyiO45TX
IfIe8jsuV/UG+s5Hz7ycm9uwcuLEpZXz5q168tJLvb+47rqXvvelL7129733
vnnzT3/a9qlHHun66JNPbrjomWfePqeubtO05cu3laxevTOvpWVfent7IIl+
xzjJVmZEscLQb4Txf3c5kB8eZl7TyaviII+x4HpyQWTlZ7HCkkfEZs56wujb
6HXFZrPZ48nhyOgYI7UnzLxYLNbwVCGMX++K4P/edDTJI2IzB7wRxuGNURxG
58VisVgjKY8wfp+UZo0exeod7IkgBk+MYjA6LxaLZYyiva+F+2eAWO2nsXRF
mLmx+uQRzIiKtb1hjgWLxRp98ghj9oxY9DsSZo0deUR8vFO9BsURzfXMYrHG
rn4pjN+HxpqPka+NZBBYZ5VPGD+u49H7yFeFMT6s8DRNGD+m0fKJKNeG1V89
wvgxHq7vi3pVWCwWi8USwuQVwvqKEMl+IcrbhLiE/qBwW7PJ9KDPaq1usdtf
b3G5uluSkva0pqcfbsnJOdmakxNoB6MpI0NpS09X2UlgQqmcpbw8lbWEY1tm
psofAiuqNSlJaQXbKS1NdQu4RImJih+8JcmLAmvoTIwiySTCvU6n+jz6bsvN
VdqLi1UuUtf06cq6OXOUde97n+quuXNVxhMYSbgHceJZlRcVyp5CnMH2wLrq
nDhR6Zo2TWvvnHNUtlIH9QEOU1t2tpobntXHK7lJ4FDJPnySARVkKan3hzp4
v5791Gs9Z2og03ctsh5U23bJiqIcwIFSjc9FRZrBkKJ6oFbga+EcOavjQm20
oE/EEiYrqjdvcgu5lXJpo3zbKK5WMKKSkgL+lJTT/sTEkz67/WizEIfW0p+L
6Lir2Wx+x+d0bqRatrbm57/eVlb2XOeMGfXrzj33bxsvueQ33Z/85P3dd9zx
5S0//OHndz3xxDUHGxsvO/Kf/3zgeGfnnGM9PVMCe/YUH9q5My+wb196YNeu
pE2bNjkVr1flKRi9sGKlvLw8d1JS0mSHw3GrzWardblcmxITE4/qmU2SFQVG
E871HKloMaKk0WcGrSscQ1lUA7Gi6MisKNZYlpWcRuvTQ2vz53a7/RWz2XyQ
1qq6RrLp3SFZUcF1MYT1mKoz1l06tZNB7WRTuwXUTzF9LqY9oJCuT6Dv8+k8
hz5nk3PJBfRdsZKQUKa43VMVl2vWKYfj/O0229VLLZZv/dRs/uPXzebqb1gs
1T+yWCp/Z7FU/cNkqqo3mSqfM5kWrjGZFrWbzYvetlortzmdVbuTkmr3p6fX
H8nKajielVV/Mj297nRyci21XavyoWibUo3PuAb2DphHeXkaL6qoqEkpLFys
5Oc3qsyloXCiwGxKT+/jNaENXEMcYDCBWwT+EzhHGruqWuU0waG8KI0VVaPG
eiZWFCzZQegPLCdYz4oCwwhtahym/qwosJfATcL3kpuk5aK1hxpprlfblBys
cHhKWr9a++hXcp6Qr8wT9ZCMJRifNa5WdfC5qn68KD0zCvegL+Sbn7+Yxq9J
ZUaBFYWxBO8Lsco2++Ko7OVNaX33sZ1C89LXWbtW2y8/GSss2VMY59A2zzZ3
zjbPJCdKP85gd2n8rkbMswDFdoJqeCghoXoXPbMxLa3hLZrLzxcVNS6eNm3Z
U+edt/J3V1zh/dFNN730ja985fXbf/hD/w0PP9x51R//2H7p0093XlBf3z1r
xYruiV7v7glvvnkga8MGJWXrVsVNv2VsQealyoiSNnqTY8W97hTG//3lQH6T
fNEwc/tuHOQxFryTfF2EtWexziaPiM189YTRt9Fris1ms8eTw5HRMUZqT5h5
sVis4cnotR7JPsaKH3mF8Xu/J0YxGJ0Xi8VijaQqhPF7pCKYOzHa5BGxmQfe
COMwet7GKi8WizXywjo1Yt1Hu9+RcEWYuY13eQTzoXhOslisaMgjor9veA3q
dyTMGhvyCOPnEGLwGhhHtNYyi8Ua2/qXMH4vGkveRv5ARCPACkf/EMaP7Xjz
2+Rzzj40rAi1RRg/ttFyZpRrw9KE/1+60WMbDX882oVhsVgsFoteMOaAEI6u
xMQsv802p9ViuabZbL5nrcXyZzr/t9/lWteamLinJT39WGt+/qm2oqLT5EB7
fr7SlpOj8aDAigIDCpwlMKPomsqQkpwoGJ/xXW6u0hZ8VrKJVF6UZCFJlpIY
mBWl8qLAMQIfye1W+VMqo6qgQGUiqbyoGTOUdfPmabyoc89VOU/rgsyo9sJC
lVMFXpRkMqmcJbCiwLOi7xA/8tPzorpmzVKtspXKyjReFPWL+FUe1CCxvscD
5SU5UYgHsYCvhHikcY54JTdqIFYU8khI0OJHPcDPohxUdhc+w2BIBa+rvCiq
FYy6tdF9GD/UQO3Lah08hyALC0yslqBbwYgKWr2GmBITT9MYn2zNzj5GY364
NS9vvz8l5V3Kddta+rMRud1nt7/hT0tb3VZcvLhrzpynN1166SObr7/+R1vu
uONrPffff+s7jz326d3V1R898NxzHzzU2jrv2KZN0wLbtpUGDh/O///snQd4
W9X5xo9tyZI84z3jkdjOJoswkyJmGaWMUlI2lAItowUK/zJKzaYtlLALZZUA
Sbzi7MESq2EFiG3JK9OJE2fH2YkT6/6/914d+1pxghRLuR7f+zzvc/c53/ed
c64UQX5RduxI3Lp8eezaxYvBU+jVfCgvRVgslrzo6OjryGVRUVEqKwrMGS82
UxuDBowayYrCeZyT93aVFSVZVJIVpedUyX6xpeP9dG0tXVsYGRnJrChWb1YI
rdHciIiI68kltN9E24NYH3I96O3bOjyUDxUbCz5UEjmN1hz4T1m0n0/nh9D+
UCUyEtshtCYLyAPoOIc8kM4NJo9QIiLGKDbbSYrVetrB8PDzNpvNN3wWFvbE
m2Fh/30hLKzkVZOpaJrJVLwgNLT4f6Gh0+i1P20ZuTEsbNpGs7l4m81Wuism
pmxvYuKMloyMWQezs2e7wQxKSZlFec2gPsup/TIlPLxUtcWisXzA/AF3B0yn
lJSZqiUjCnwnXxhRHVlN09Vn0Qb4UxSLyp1KTZ2hMotk22i3nTNU2saLkrwh
yYzyZkUdjjnUzhDS+kc+4AdhC7YT7kF/6EvPXmpnRRW1saLAbQKvCbWRXCLY
Fz6UN1PJm/sENhOMfeQl+VfoR9ZNH7NkXMlnvXlRGjNKixv94VnJ/aI5oBpj
gHa18SxTY5LMKD0fC/Php7hOep6T5EXhuc5YUehHa+/wjK/DMaKOVFt9rbQ5
NpvynUueg7l2MDm5fFdaWvn6rKw5tfn5c74aNmzBzLFjF75pt3/0z0sv/ez+
66//36133vn9NU884br4xReXn/3666tOLSlZOXrBgrWDHY6mnG++2ZXqdDbH
b9igRLndbov8TsOMKFYXdLrQ/juE0b9jdua/djG3ceT/dYM8eoMf97P2LNaR
ZBfBmad2H/o2ei2x2Wx2X7IvMjpGf233MS8Wi3X0KhTGr3VF8N/r64kK1txx
+BmH0XM3WHmxWCzWsZLR70dpe5DzZAVe3WEuOIIYR6DNYrG6twL9PvH1+39P
eo/5m1tflF1o9emJ49oT7RD8HZLF6guyC2M+y4LR77Ewq+erUBg3f+yeGOwG
xhDIdcxisXq/tgrj30e9xUvJI/wrP8tH/VEYP759yVXkfJ9GhuWvyoXx4xso
Dw9wbViaLhTGj20gnBLowrBYLBaL5RDC5ExKinL165ddY7We4jSbr6sMC/t7
pclUVmmx/FAZGdnk7NdvT3VKiru2f3+Vk1RHrs3KUrlD4BK1caFiYzWDDQXm
UFSU4oJxHBen8qHAWAKDCVsXWEt0rY0VZTIdmRUlREdWFBhK4Duh7eRkjRdF
cdUOHKhyoepHjtSYUeBFgRtFx7V5eWoc6Bfxga+k8piwRVuIH8wrtAfWEnIG
V6mgQKkbNEjdqqwoOg/uFfJWGU7gJx0u5sPZmxHl4VU5EQPqCf4WTMfqecQo
GVfevCiwovT1kMwuGPvISbK8wJLysLCQG2qm5uJhRanjAVYU4vPmQ9F5cKBc
dE81TPvV1L8LedD1itBQd2V4+MGqmJj9ND9201jsqB06dGvdiBEb6oYMaaju
37+e5sOPNLe+rIqKmkdjNmXpcce9vOL00x9fffXV92y8//4bNz7//OVbSkrO
27Fw4c92V1Yev3/p0mF7GxoG7t68OdO9bl2SsnJlv6ampkhFUcx9iA+lV2R4
eHhBbGzsDYmJidNpuyoiImIvWeUz6RlQ4DZJhpQ3K8p3Ro1/RvuRNFexRR8J
NOdgurY/KipqLV1jVhSr1yspKSmV5vylNNffpnm/mtbDQclvkww3rEk9Z81X
RlRMTCI5RWVERUdneThQBUpExHDajlGiok6k7cl0DJ9C+zgeq7KhIiKOp32c
O02x2c5ULJbzlfDwSw+azdc3h4Xdv8RkevkDk+m9+SZTsSMsrOj7sLBptbRd
ZTIVNdF2C53fbjYX7bFaS/ZFR5cdSEgob01Pn6UMGDBPGTRogZKfP1/Jypqj
MpNiY8s9rCSNwST5QGD5gNMDFhL4RBoTSbJ7NM5PRx+JFaW1kZiocacyM2cp
2dlzlJycOUpu7hyKC56tgGEFzg/6QUxgJiEesKIkv8hs1qzxoko97KGfZkWh
f/CSUlNnKqgFWELIH3nhWbSDNiV3Sc+K0hhOxW2sI8lx6shH+mlGlLwf5yXr
CTmgX8nAQs6oJ+IFQ0ur1Wy1VtjiGDkgF1knfdzevCiwr9APxlnyolBn1B3W
t5mYWK72DSaW5HFprChfeFzlHrfPEY0XpeUpredEebOi9HwoPSNK1gu56o1z
UVHtdZZsM4wv5ndu7jwlL2++MnjwXPewYfP2jBq1YP3JJ39Ufc45n3520UVf
Fl1xxf8m3XzzN/fdeef3N//tb1UTn366+oKXX15x2rvvrh43e/bq4QsWbMj7
+uvNmT/8sCNp+XIldu3atWBehpPDmA/FCqBSyfOF8b9lduYPyUO6mN+j3SCP
3uC5Qvs3FlisrsougjNH7T70bfQ6YrPZ7L5kX2R0jP7a7mNeLBbr6GX0Opcu
DHairKCoO7z/HUGMI9BmsVis7iZ8/hr9boQdwU6UFRQF6zPYn/lgD1IMwbDd
j7xYLNaxV6Dfab6+y4L1Lg2m/XlP93bZhfZ9qieOY0934U8PD4vF6iWyC2M+
y4LR77Ewq2cLc9Poz1a7gTEEcg2zWKzer0HC+PdRb/GP5By/qs/yR+OF8WPc
V/wVOc23YWEdhfDvkRs9xoHyWQGuDUtToTB+bLvqVYEuCovFYrFY0DwhLEsi
I5Nr+vUbUR0dfYHTar27Ijz8jUqz+bMqq3W5MzKyuTo+/mB9aqqytH9/pR7c
JMmKSkvryIqS/CUwj8At8vCPXJJf1BkrCmwi8I/AOwIrysOLUplROleBEQWD
VyT5SugDLCrJd0Issg/EOXiwUj9smFJ/3HHK0lGjVHYUeE9q34mJasxtzCi0
I1lRiFXXXrWHGVWDuJE3PQ/WkspXonudHrZS1ZEYV6KddaXm4+E7VaFW6B88
LdQQbCd9nxkZ6rErIUGLF/d6atuBGeXFm3JJ3pRkeKF92HMeDCmMXy1yIat9
6FlR1GYbKwo1JzspRxf1UUMx1FIbNWhHi8dN/R+sMJtbyHsrIyN3ulJTt9UO
G7Zx2SmnNC6325ctO/30yqUTJnxVO27cB3XDhhXXDxr02tLjj//7qnPP/cua
G2+8Ze3DD1+x8c03f7H3ww/tLd99d4J72bIR+9asyXdv2dJ/5/r1KUpDQ9yG
DRuidCyFvsxPaGNFJSQkTI+JiVlltVr32mjcwKABd0byZ8CmiaIxkmwobHEs
7wsEKwptyT4kjwrHsBejillRrL4g8Ouiaa4PpTl/PW2nkBvJB8Bzg71Zaoey
og7lQ8XGJtBaSyankjPp+RxyAa2zYeTR1O4Jis02QeU/2Wznkn9Bvph8iWd7
gef8uXTvhbS9VAkP/41iNl9PvrXVZPrL7rCwp1eHhr7lCgubUh0WVrzMZCpp
NJuLN5nNJdtof6fJVLyXjlvCw0sORkSUusEIAhMpK2uuyok67rgPlBEjFir5
+fNUpk5cnMbhkXwgySvy5i9p7CON76Mxejr6SLwoyYpKSNBYUWAVDRgwVyko
mKcMHjxPGTp0vur8/Ll0bZbKLMJzGkupROU0gYUE65lRMlbKs43f1BnHCAyh
hIRylUOFnNE/jH3JXNJqUKq2Db6SNy9K61PjU4F/5J1rZ2wobwYS+mlnKU1X
uUnIEf1Ko+4Yk9TUGTRms1SOVkHBXKrTfNWoGc6B8ZSWprGukD9iOxwvCte0
drW5kJk5Wxk4EPNhnuq8vLlKTs5sJSNjVhsvSmNEaWwnyWX6KVYUxljjik1X
LfPV6nMoX+xIjCg9HwpxeNdJi00//7QYMMbIDzWi3NyjRy88OGHCh3svuODz
TVdcsaj2D3/49vP776+Y9tRTrn9NmlR79/PP11/12mvLznvzzeXjp0xZOXr+
/MZBH3+8Ltvh2JDa0KDQdxolyu12W+j7jMnDh2JGFCtY+pcw/jfNzryffEsX
c7ML7b8hGp1LT/da8gX+lZ7FOkR2EZz5afehb6PXEJvNZvcl+yKjY/TXdh/z
YrFYR6dCYfw69+cdxup+cojgzIdCP2KwBykG/lxjsVh9Qd3lu4A/731W95Fd
dI/vhsH6PhJoO/zMi8ViHVsF+l3i65rvKe8wfp9pn3twoeiZ49abbD/SQLFY
rF4nuzDmsywY/R4Ls3qm7KJ7cKIKDYwhkOuXxWL1DV0hjH8n9QZ/Tk70s/Ys
/9RPGD/OfcH4d7KjfBwT1tHpXGH8OAfKVwe4NixNM4XxY9tVlwe8KiwWi8Xq
83IIYfo6Pj5mSUpKbl1i4gRnbOz1VdHRT1VZrdMrw8OXVFksG+h4H7hJdSkp
Sl1GhlKXna2xnsAxSk1VeUpgDIFBJDlRVTqOkdNi0fhFMTFKdUKC+gz4R+AU
gX+EZ9ruh8FPksZ5GPvgIYGxBCaTh7PklKwoyVlCHNRmdXKyynIC2wnMqNq8
PJURVTd0qFJXUKCe1/OX2jhKXjwl1XFxmnEv+FKercqRwjFYUZGRWuzgWnXG
i5J8KMQuGVf0TBsfCm2iPaoJ6io5V2q8FDeOVZ4T2FyScRUdrTGq0J6uJiov
Cm3jOjhYMPZxDka9PHyttvFAu1QzNRfJivLkA/6VMzRUcdF+NZ2rprGsQT2S
ktzOxMRWaqelKjJyL/W7q8Jiaa60WjfRPFpbk5u7YtnJJ7tWXnjhtysvv/zj
hiuumL7qyivfarj66mcarrnmwcabb75tzV/+cvX655+/aGdZ2Rm7HY6T9tfV
jXQ3Ng5yb92arezalepubo7ftGlTtI6lwOwETSorKjo6+oaYmJjpkZGRqywW
y14rjb2ePwNGE47BppFsKD0rCvymQLCi0B76wH4SzWP0LVlROOfhROFYZUXR
/kIys6JYvVHgRCWZTKbjaT1eRfP9aVqfn9N620puxToB002yorA2OjLbvBlR
4EMlkVPI6fRMFnkgraXB5JHUzjjyqbT+zqB2z1Os1ksUi+UKJTz8OvJN5D+Q
b/Nsb6Rr16q2WrH/B8VkupN8H/kRd1jYv/aHhb22LSzsvQ0m09SNJlPJFrO5
eIfZXLLHbC7aTz5Ix62SaRQZCWbPDCUtbbaSmztXGTZsgTJ69AeqwR3KzNRY
UeABSSYTjH2wecDi6dwaQwi8HsnsORJPSLKEwGuSrCiwihADYjruOM3gRYHx
k5o6U2UM6eMCBwnMJjgsrEg99o71cH2DkZSYqHGqwEPKzp5D9dB4S+npM9W4
cN/hmEsaLwqMqo4src64SZ1zosrV/BFHO0+p3MNF6sjfwjHiQVzgN+XlzVGG
DJmnjBixQBk5ciHVaaFaMzCecnLmqGwk5K1xrko8nKtiRc+KwjnMB8QDXhdq
gPoPGaIxusDrkrwo8KfQv3dcP8WKkrnhWRjMKWmcR/7ePCj983rmlmREaXyo
Es8c0Iz641jPi5JzD+2A/ZWZOdNNdWsdMWJ+y2mnfbJ74sQvt9xxx/crHn64
6usXXqgtff/9Vc/OmtV49/z5TZfPmbPm9IULG0c5HBvyfvxxc8bixTsS6+vd
MfSdxqbjXjIfinWs9FtyqzD+t83O/D45oYv5dVceVk/zX/0tPIulk10EZ17a
fejb6LXDZrPZfcm+yOgY/bXdx7xYLNbRqVAYv84VwXyIniy7MPZzTcoRxDgC
aYefebFYLFawZfR78Wje+azupWB9Btv9iMEepBiMzovFYh1bBfp95ut3/2C9
R4NpX3PrybKLdmZDTxyj3uq+MPdYLNahsgtj3ifB6PdYmNXzVCiMnTOF3SSO
QK1dFovVd/S0MP691NP9GTna38KzjkobhPHj3Zu9kGzyeTRYR6sUYfxYB8q3
Brg2LE1rhPFj21U/FPCqsFgsFqtPiz5cQlcKYf0hNTWpOiVleFVKyoU1CQl/
dsXHv+aKivrYGRGxrMpma66Kjm6tjotTapKS2jlPmZkqi0nlC3l4SyqTCMwk
cIbALAK/SPKRwHWia+AwgTulcpbAmNKzicBPAlPKwzNS+UaSd4QtruEesJBg
eT+4R3S9A98JfYDnlJKiVCNmihV8q9oBA1SDx9TGigL3SM+LQlvoDzFIvpK3
JZ8KfSI+8LEksyk0VGNDwdhHDfR8KLSN59CvjBFcK7C3wLUqKFDqhg9X6seM
UZaOHavUjxql1A0bprKjavPz1TyqPZwttW+wtGStwYtCX6iPpzZtnChZP2xl
3cCLQgw0jpJ7peZP113UDvhQLsoDdrbn0UrxH3DGx++juu2i9rdXRkZuqYqM
XFcVFbWyKja2xpmS8n3tsGGfrjz33JmNv/3tO0133fXc+r/+tXDjk0/+cfOk
SddvfuutS5vLys7e8cknp+5fsmT0vrq6IXtXrcrd3dCQ7t6+PcG9eXOMe/Vq
m4cPFWr0WumGAitqUHR09G8jIyNn2Gy2BpPJtJfOtbGiJBcKTJrOWFG4T3Kc
usqKQtuSeyMZVfIctrgH++T9dLyW7ltIZlYUq7cJv/3E0Vo8xWq1/oXW5VRa
e9/SvF9Pa6JFrgusP8mI0o6xTiQnCms0npxI55LJaeRMWju55AK6dzh5DK3r
k8in0do+h/xLxWa7nHydYrWCCXW3YjLdT/4bGFDkR8mFdP4B8v95/IBiNj+s
hIU9Sf4X+UW657WDYWGT94SFTdtlMhXtNptL9prNxS20BSPKbTaDdaQ5PLzM
w4oCd2iWykYCcwisIXCH8vPnqjwi8HXA5AGDx2QqVq2xpjQejzTu0RsMH83a
cURE2RF5TWAFgRkElg9YRYgHvCOwioYP11hR2CIuXMe94P+gDz0rCtwmjd3U
kRcFbpDGWvppVhT6Bhtp4MA5SlbWbJW3hPgQP9ryZkVpvKhiT38ahwv5ItfO
2EcdOVHTO3CiEAf6S0mZodYCXCVcAxtLu3e6eg7MJsQGdhZYTqjPmDEfqAYz
CnUD7wlj25H3VeKpVbGiZ13hPPJDLKgDOFMFBfNUXhTGAXVHXcDxQmyIVc+y
Qq6HY0XBMkewqGSO0klJ7Xws5Cdz7YwPhbpiTqHG+jmJnGD9/NTmXWkbK0pj
YZXTGM9szcub00K12nXuuZ9uuemmb1cVFlb98NJLS2dNmbL6ufnzm/749dfb
Lq6o2H5SdfX2goaG3emrV7vja2pq9NzLDnwoZkSxjqHGkBcL43/f7Mz43faS
LuZ3Prm+G+TS010q+N89YR2d7CI4c9LuQ99Grxs2m83uS/ZFRsfor+0+5sVi
sY5ORq9xf95frO4rhzD+M8AepBiMzovFYrGCqUJh/DtREcyM7Omyi+DMC4ef
cQTr+4jRebFYrGOnQL9HfF3vPeX91dveZXaPCz12iJ45Fn3FDsF/lmax+rLs
wpjPsmD0eyzM6jmyC+O/fxR6YjE6jkCtWxaL1bf0sTD+3dSTzZyoY6v/CePH
vLeaOVHHVnuE8WMeCP850IVhiQxh/LgGwhcEujAsFovF6tty0HfVLxMSop1p
aVn1GRknuTIyrnGlpj7pTEkpdcbHf++MiVlXGRW1Fzyimn79NKYQGE9gG8HY
13OioqKUKjCTwC4KD1cZSSoriQyWkRO8KMkoApvJw2hySi6ThwvVdi0+XmMp
Sa4UjsFY8uY4SVaUZDdJe5hRYCqpbeg5V2lpWpverCjZrodJpTKvwEfqzJJX
5clX5TRJZpM0zuE+tIuYZE5gM1EMaixgWIERlZen1A0apNQNHarUjxypcqKW
jhunbcGNgkePVuqHDVNqBw5Un0UOKmsL/aDOks1F8ag8Lcnd0rOipHVjgXGs
obhqKL4a8LzoWjXl7vKwrypCQ900jgcqwsL2V5rNeyptth307FYar/VV0dEN
VTExdVVxcT86k5O/rM7Kmrt0+PD3V5555ktrb7rpsY2PPXb3tv/858YtJSW/
3r5w4Xl7vv56QsuyZWN3NjQMU5qbB7g3b87YsW5dkrJ1a6yyeHGEoihm5kP9
pCKjoqIGR0RE3GC1WsvNZnNDaGjoXtqq7BnJpJGcKGzBa8J5b1ZUIAzujWTf
wHr+FOLQeT9dW0v3qKwoim0k5cKsKFZvUUR4eHgBzeubyOU2m20prc9mWm8H
sC7AUZNrA2sxPj6B1mEMrdFIWpNgqiXQGgEjKoWcQdeyyAPp2mDySFrH48jj
yWeSz6fnLlVstqvJN5H/RL5fsVofVcLD/6GYzc8qJtML5BdpH36ezk8iP0P7
T5MnqdfCwv5N/g/5bTp+t9VkmnLAZCpqIR80m0tayR5GVJlqk6lUNXg6YOmA
ywP2T//+GiMJfCHwhySPqZ0x1M5jAmdIz+WBwe3BfdjiWM+VwjnwfcD56YzX
pGc2geUDVlFmZjuzSTKjhg2br+Tnz1Ov4T4witCu5B9JTpSeF4UYZP+HY1WB
Y4T2kpM1VlROzmy1Xzg7e7aSmjpTx6YqVdtEDfS8KK0/5Ix8wcdCrh2ZUIfL
W3KUJK8KfCfkCIMJhfEBUykxUWMqaTXSmFqIDxwn1AaMKBhMrcGDNVZURsZs
tV30BW4S4pdjJJlRMm7MB42nNKONH4Y2NG6WxooCnwoxIRYwqA6X1+HHtzNW
1KFMLMmIknwo1FOLvbRtfoWFFamWOejnpTbmJW2sKDn26IPG8yDls2f06AVb
zz7704brr//6hwcfrJj1wgtLJ02evOr2+fObLqir2zbK7Xb3d7uVBNpG03ca
q/xuw1woVjcQ5uAbwvjfOA/n5zwxHq2s5H93gzx6uqvIY/2sPYtlF8GZj3Yf
+jZ6zbDZbHZfsi8yOkZ/bfcxLxaL5b8KhfFrHHYEO1FW0GUX3WNuGD2Xec6z
WKyeJqPfh9KFwU6UFXThsy0Yc8PuRwyFQYrB6LxYLNaxU6DfZb5+7w/WO/RY
2qFz4U/YHiR31pfDy0bXiX10xliyWKy+LbsI/LvFYVC/x8KsniG7MH6uFIru
wasK1JplsVh9T83C+PdTTzVzoo693hHGj3tvNHOijr1qhfHjHgg/GOjCsMSF
wvhxDYTTAl0YFovFYvVtKWPHmhePHZvoGjJkWO2AAefV5OT8ydW//3+qMzMd
rpSU5a74+GZnbOzBGsmKkvwmWPKVYmM1ThT4TZGRSpXNpvGVzGaNFRUSotmb
YQROEZ7xWOU0oU0d16k6PV1jKWVlKTX9+2t8p8RE7T70K5+VRht6ezGjqmXb
4DSB1wROlMxFtqdjXenZT5WdWL2mt+RDyWO0ASYTYqM+0HeN5ENRTrU5OQrV
XakDI6qgQONEwYMHK3VDhih1w4erzKj6UaNUXtSyE09UDWZUPV3DvWgDuYDD
BaYTal3lYXOptUb/3rwoyYyirYvO1VDutVSLWooPWxyDmUWxuyvN5oMVYWEt
S0JC9lYIsYO8rSokZEOlybSGri+lsa+oSkz8ypmevrAmP7+IYnt1xZlnPrVq
4sS/rL/33ps3vvLKb7bOnPmLvd99Z29ZvvwE95Ytw/dt3Ji/Z8+e/jvXr09R
FKWfu6kpkrbh5DBmKPgslUljtVqvsVgsU00m09KQkJB9YEWBRZNEY4ktmFDg
RGGLY/BpsAUnCuymQLKiJCNKcqH0rCj05/F+OqeyoigWZkWxepsSaU6fS+vt
OXKlzWbbTuv0IFlltmEtxMVpjChsY2PjaE1gncaRwYhKI2fSuVxyAZ0bRut3
DPkk8mnkn1M7F5Enkm8g36rYbPeQ/0b7T5GfJb9Mx68pVuubisXyX9VW6zu0
fUfdDw9/i/ymYjbD4EO9A0YU+X3yVHKR22wu7sCH0vZLVR4QLHk6YDtFRZWq
zB+N3zNTNfbB1NHYSBonCtylzthIks+jt+QowTgG28diKVVZRIfjNWnMJj0v
SmMhgU0EdhV4SAUF82h/rsox0rObwAXS2EEd++7Yv8YN6oxVBTYR2gOzCBwk
2Sf4SNnZc9RzuI64kYOeTSXrActa4LpkUx2OFYW2pCVHSd8/uEwwWFDgeKEW
YFbhHowPtjiWNUKsYGrBqBP4Tng+M3O2yp9C++gL+YO9hPgwJpK7hBoiN1xH
POgjLU1rGzHA2Ed/aE+yovRsp59iRYGJpbGu2nPAFuON8+3sqTJPnKWeOCWD
DPMWYzrNHRqqOSRkmmesi1XreVFyzDEO4HbBaD8pafoBqumOIUPmrj3xxA+X
XHihY+5vf/vt8/ffX3nHs8/WXDhr1toxK1a4s91ut+RERdDW4nAoJmZFsbqZ
bhPG/855OINTdFYX8/s1ubEb5NKT3UK+yt/Cs/q07CI4c9HuQ99Grxc2m83u
S/ZFRsfor+0+5sVisfyX0etbujDYibKOiRzC+M+BYMUQDLNYLJbRwuev0e9C
fif2HtlFcOaGoxvEYHReLBbr2Alr04i1Huh+2ezeYofg34ZZLJYmuwjOO8aI
fo+FWd1bdtE9vv8Viu7129BPxcpisVjeGiyMfz/1VDMnyhg9Jowf+95m5kQZ
ow+E8WMfCD8e6MKwesyfL47k1QGvCovFYrH6tPD31RcXFkbUX3JJ5soTTjip
fujQq2ry8x91ZWeXVPfv/6MrLW2DMzFxHzhLYEVVe/hLTo9VFpOH0aRyiGAw
iCRnSTKWwImi7tqYUTqOEZhMKr9IspTAcMrI0LhQ2dlKTW6uylKqHThQqaV9
nK9OSVF5UpLvdAgfqjNeFFhRMJ5BP+BGeTOvkBdYV97xg7/kYTAd1p57qqTB
iwJnCvlRXcDYqqG46zIzlTrKo47yUflQ+fkaIwpbOlZzRZ45OarVvMGOGjpU
ZUYtPf54ZdkJJyjLxo1TeVFLR41SaNzUumAc1Hg9te4QgxcryuVhRFWDE0Xn
ayl/lRGF+iclKc64uFYa45aqyMi9lRbLzgqTqbkiJGQTtbu2KiRkOeVYRee/
pfs+cmVllS0dMeKN5ePHP91w0UUPrLvlllvXPfro1VvfeOOXez/66PTdixef
5F6zZqR7374C95492TTvUt3NzfGbNm2KBjuBjk3MTTgq2SwWS67NZvtVeHj4
v8PCwr4PCQnZDSZNAo1lamqqugWrCZwoPSsKTCc94ylQvCjJhUJf4EJ5nwOz
iryfjtdSvwvJzIpi9SaF0XweRXP9ftp+SN5I6/OA2RyugOFmpXdxZGSUhxWV
ROsintZFPK2VZHIaOZucR+eGkEfSvSeQx5PPVCIiLiD/SrHZribfTL6T/AD5
UTr/NN3zAj37Kq23t2hNTyZPofan0bkiaquYrhfTfZpttmnkKYrFMkUJD59C
sU0lF6kcHXB/9Iyo8HC41MPZ6chT0vN0IiNLqa+yNnYROD3g64DT0xknSs+L
+qljjZ2k9dPOijqU16RnKoE/JHlR6ekzlczMdmaRZBVpLKvpbdwjfY4aL0qz
nhUlWUjezCbJagK3CG2jD/SVkzNH7RdMJj0rSrKpJJfq0Hw1NhZik+1LnpK+
vrgu6wGOEvpHX5JVBd4TjP3cXI0Z5c2LSk6e0Van/v0l12lOW+ySFQU+E3JE
P95xICcY8eAcrsl4wK4CmwvGPtpCv6iHnhOlZ18dngVWrsaAZ/XW4vJmROn5
UJJD1saHatU89aAQ8LRWslvPMNPzr/SsKKq1Oy5u+t7U1PJNWVmz6gcPnvv5
2LEfvHvOOZ8WXn31V9c/9FDVz6dNWz1u+fJ9BWBi0vec5IaG5rjJk5dEjh37
mlmIwlCjX1QslpdOITuF8b95Hs5PdTG/ePLkbpBHT/ej/hae1WdlF8GZg3Yf
+jZ6nbDZbHZfsi8yOkZ/bfcxLxaL5Z/swvj17c+7i9X9ZRfBmR+ObhBDMFzo
R14sFosVDOE9ZPS7kN+HvUvBmiN2P2JwBDGOQJvFYnU/Bfod4jCoXza7p9sh
+DdhFovVUXYRnHeNEf0eC7O6rwqF8fNDEcyJYrFYvUNXCuPfUT3Ri4X2/26z
jr3uFMaPf2/yF2SbXyPACpTeEMaPfyD8TKALwxIzhfHj2lXPDHhVWCwWi9Vn
BU4U2bx53ryYhjvuGLjqvPPOqB016tbavLzna7Ky5rsyMupcaWnNrqSkVnCO
VI4SmFCHs45DdFhWlN6SGUX3qc+A55SUpFRnZmp8KHCT8vO1LaxnRaWmKq7E
RI3zBMbTkXhRuKa3FzOqjROFa8iDYqmyWJRKir1ScqI6i78ze7hRVTA95zSb
VSZTDThMyclKPcVeP2CAUg82FPhPHkaUei47W6kFHysjQ6lOS1NzVLc4J5lR
dH/9sGHKUjCjRo/WWFFjx6q8KLCnUA+wodriQezgRaHGNps6PpIPVU3jVSMN
ThdqkJDQWp2U1OJMStpH+7uq+vXb7oyJ2VwVFbWuympdWWmxVFdarYsrIiI+
pb5m1mZnv7N87NhJq849929rbrjhj40PPnjd+ueeu6S5qOjsPZ99dsp+l2u0
snbt4L3btuW6d+9Od7vdCe7Nm2Noa2M+VEBkJidardZTyHdbLJap5NqIiIhd
cXFx7kRaI+BCgQUFVpNkN8ljsJuwBTcqELwotKFvG9azqNA/WFEUH1hRjXR+
Pvl2OjdCMCuK1bOFd5mF5nku+ebo6MhyWosNJpNpPxhRNlsErYcYWgtYa4m0
HhJpPSTRekgmp9N+Lq2bwbQdQcdjyCeTT6O18nPyReTfUBs3kG8j30vHf6Pt
U7SdRO2+Qs++Qe3+V0lIeE9JTi5S0tLKlNTU6bRfrvKS4uJm0HXpcpXNEx1d
onKjrFaNhwMelORDdWRElaqMJNibb+TN1AFvSTKDsN/xmaK2ZzRLFtOh/Cg9
NwnPtbdfojKAjsSK0jOjJC8KLCTwkaQ1VpFWG8k90jOPwGjSmFElHh5WSVt+
ehaSnhUlOUZoExwk9ANeFDhLHdlUZR1YUWjfmxWFmko2FvLVs6m8+UyoiawL
aoI+kC/YWOBD5efPVQoK5qrbgQPnqBwoMJsQI9hPiFeylmStJNsJccNpaVr8
uIbnJGcKls9rnCbJeSo7hJ8ln9H31/5MWVtO2HrXV7Kk9OMq3c6ZkjVpn6uS
EYV6SoeETAUn6oAQU/cLMW0vbXfTdhdt92jnph4EQwo8KcnskuOO9sFEi4oq
PUh97kxImN6UklLuysqa+emQIfOmjB//0T+vvfbrux57zHnd1KkrLlq0aOtp
dXW7RjU07B34zTcbUt94oyZ67NjFZs/7gsXqbrKK7s1T+lZoTKuu6Hrytm6Q
S092MTnCz7qz+p7sIjjzz+5D30avETabze5L9kVGx+iv7T7mxWKx/FOhMH59
K4L/P//eJiM/36QcQYwjkHb4mReLxWIFWka/B4/mHc/q3grWZ7A/3xftQYoh
GLb7kReLxTo2CvR7zNfv/MF6f7LZPc0OwZ+PLBarc9lFcN45RvR7LMzqfrKL
7vOdz9GNYvkpFx5FrVksVt8RGB9Gv6d6mmvJWUdTbFZAdI0wfg70Fv9ITvKv
/KwA6nFh/BwIhF8OdGFYYrUwfly76sKAV4XFYrFYfVZKcXGYoijW5tWr4zdN
mjRozZVXnrd83Lg/1w4Y8KYzPf1zV3LySldS0q7qxESVdaSyosCDkj4cKwpM
IotFZRZJVlTV4XhLkhUFhhH1UZ2SotRkZWlcJMmJon2wo8BLUjlR6enqfV1m
RUlelJ4T5Ylf5S0djnHlg530nJNyq6Z2aqjNWoqzNi0NubmrBwxw1wwceLBm
wICDlFMr+FD1GRlKfWqqypOqBi8LpvzULeWqMqMob+RP46NypuqHDlXqR4xQ
OVH1I0eqzKlqel7ldMm4JY+LxsFFY1JNuamOiFBZUci5KjraTeN3gLyP6rDb
mZi4g9rZ4kpNXU/j3+BMSqpzJiT8UJWY+AWdm1Obnf1e/bBhL64cP/7Rhksv
vbvxT3/67Yann75sy+TJ5+758MPxu7//fuy+VauGKuvXD3Bv3pyh7NiRqGzd
GktzLQJsMuZDBVyhVqs1Kzw8/JLY2NinEhMTP4yPj2+IioraDy4TuE16npNk
RtloHtAzKrsJrCgwpQLBikJb2AcnCv3Ic/rz1GcLxbGRrn1J/ivFcqJgbjir
ZyuU5nYizfHTaftcZGS0Kzzcsjs0NEwxm8NVTlRcXLKSmJihJCT0p7WRQWsQ
zlEiIgbR9VF07iTa/ozWx1l07gLyZXT9GvLNitV6J20fID9G55+he16ke1+j
NfUWrd3JSlLSVCU1tUTJyChTsrJmKDk5s8lzlP795yjp6XPo2mwlJWWW6uTk
mRSHxunRuEVlisUi2VB6PlRpG/sJHCJYMo7A3PFmG0mujsad6sjqwTWNudR+
j57FpGdPyfZkm3pOFPrXWD0/zYrS2E1gFWm8KMkrSknROE7gIcFgIKEeet4R
2gcbSPKuYI0XVNrGM9KzjPQcI8lcQl+oNdqHcQ7X8Tza0lhRHfOXNQUfy5sV
pfGXytpi05hW7XXGFvfGxJSpuSBHcKHy8jReVF7eXCU3dw7ND8mKmqmyohCv
xlsqU416oR7gQqFWiF0ytiRDChwqaRzjGvLV19B7DGDJdvLmO8l8tLlW1qHG
8n49L6ojX0obFzlW+jnXzocqUa3Vd2oLeZcQU5qFmLaJ9jeQm8gbyc0aM6qo
JSRk2kEaB7fGCeuwFlqpzxbqeyfl05ScXF5Pdf5+6NB5n5xxxifFN9/8zcvP
PFP92Pvvr7x71qy1V370UdPpDseW4WVl9ZnPP18fM3bsa2ajX1Ys1k/oLmH8
b59H8kNdzK8/uawb5NGTjf/2NczfwrP6lOwiOHPP7kPfRq8PNpvN7kv2RUbH
6K/tPubFYrH8k9Frm9d475RDGD9P7EGKwei8WCwWK5AqFMa/AxXB/79tb5Nd
BG+u+KNgfR8JtB1+5sVisYKvQL8/fF3nPeW9xWYHyw7Bfz5msVhHll0E591j
RL/HwqzuI7vg73pHa7vf1WaxWH1N/H71z2vIQ46q0qxA6Xxh/DzoDV5KzvGv
9KwA60/C+HkQCL8V6ML0caUL48c0EL4w0IVhsVgsVt+VhxUV4Xa7k/Z/882w
TY88cuHKs856oD43d0p1YuK3zri4tc74+L01cXFKbWysUi15UB6DMyR5TG2s
qIgIjVUUHt7OivLwoio740XhmO6TrCgX2EgZGSoXqlbyobKylJrMTPW8ykwC
O4nucyUkdGQ9+cqK0ts7dnCiwLmimNV4he98qCqy02MX5eWi510yt7i4Vor7
QE16+n5XRsY+ymOPKzV1jys5eb8zObkV+dQgd8qpOj5eUWtOxn4bM8rDjaI2
lNrsbJUZBZZW3eDBSt2QIep+dWqq2h/YXFUyJsRC9UcsLnC5kJ/N5q6KiDhY
GRGxn/b3kHeQt1EtNjgTEta40tOXVmdnV7hychZV5+cvqBs6dNryMWP+veJn
P3ty9cUX37vmD3+4uemxxyZufOONC3bMmnXa7m+/Hbd/2bLhe1evztvT2Njf
3dSUrGzb1o+2kTTHwsmhRs/3Xq5+FovljISEhEfS0tIc8fHxTTab7QBYUGBC
SWYTeFBgRYEPhfMw2E24BgeSFYU+9f3C2Mc59En3uOneLXSulPZ/TbFkUh7M
EWP1VIVERESkRUf3+2VkZNTkiIioRnJLZGQ0rbd+NOcTae2l0/rIoXWQT8cF
tP6GkEeRwYg6nXy+EhFxMfk3dO4GxWq9jbb3kv9GforamUT3vELtvEHtvKMk
JLyvJCcXKenpZUr//uVKTs4sZcCAOcrAgfOUvLz5qrGfkzNXyc4GN2q2yvYB
7wdcHzCCoqKm61hRpW2MJzB3NC6TxidqZ/WUqVwecJ70bCON71TUxnbytmQZ
oU3wfTTGTzsjSLKT0K63O+c0/TQnSrKbwCcCwwisKHCP0tNnUi1mqTyt3NzZ
bewk8I7AR8J94DqhPpIbBR4R+tYzjDpjRbX3qT2PfmHJY9LYXBqHqzNWlLTG
3SpW+ViSFaWvm2wD9ZEcLridF6XxsZAreFFgRCFf5JqRMcvDx2rnRElmkxzv
9pppzCjMGcwd2RbmGSzZU+1tlndgQnXGdpI5eI8/8tHzybRYvNtoHw/tuZI2
XtahfCjNQpR4jP2pB8g7ac6uDwmZtopcT/WuDgmZ6hJiWh2dX03bLeTd5Ba6
1qoxy1DrUs9cLGm12UoOUJ33REWVbqWcm6guq0eNWlh3zjmO72+88duFjz3m
fPeVV+qffvXVZX985ZUVv3zmmWVj//zn77Ovu+7HfkOHFocb/bJisXzQz8jV
wvjfQA9nB3lkF3O8ldzSDXLpqaZ3pTjP76qz+orsIjjzzu5D30avDTabze5L
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
LvliWpsTFYvlBtreTtf+j7aF5L/T/iS6/gqty9dprfyX1s57tF6LlLS0UiUz
s1zJzp6pcnq8GVEaJwqe14ETBdaPxj5qZzLpmUXerChwesA3AmMJz4EFBIaS
5CjhPLg94BtJLo/k9GjMqHZWlGT/oE/wicAUQnv9+2tsJlgfH+4Ba0gylvzl
Q3XGimpnHs1W6wE+1JAh85Rhw+arHjJE42rpuVHItZ0XVd7GPzocI0pjGXXm
dj5SO+OonRWlubjNOO/NiWqvg3aMNtEOaqxnI2EfbeB5yYvSs75gcLmQi2xH
4zVpceE5OVa4B/enp89s42uhPnpOlMYf0+qEe9GXZGvpuVb63PXW16GdLyZj
aWeFwUfiQ7Wzobw9zR0SMq2VvD80dOpOun89PVdjNhd9aTIVzaa+poaFlUwO
CSl+V4gpxeSFQkz9kbaNtG2m5/eGhEw9qM3rYtUaD22am9xK7RyIiiptyciY
eWDEiAX7Jkz4eOsvfvH50okT//fFddd9XXTVVV89ffHFi35vt3/28zFjPh1x
/PEL+l955Rdx8+a5LR5eK3/msXqCbhPG/x56JM8i53Yxx3u7QR492Y/7X3JW
L5ddBGeu2X3o2+j1wGaz2X3JvsjoGP213ce8WCyWb7IL49e1P+8sVs+TXQRn
vji6QQxG58VisViBUKEw/t2nCGZG9mbhsy0Yc8beDWIIhlksVvdRoN8dvn7X
70nvLDa7K3YI/q2XxWIdnewiOO8kI/o9FmYde9lF9/m9pae60N+is1isPq2r
hPHvrZ7i64+uxKwgCP+OstHzoSd7ov8lZwVJo4Xx8yEQfjPQhenjmiGMH9Ou
enbAq8JisVisPi9FUazuNWsyd3zyyambJ026tnHixCeXDh48yxkVVVsZFrat
MjT0QIXJ5AZLyWmxaLwoDyuqGjyn+HiV6aQynPr1a+dFgfsk+UuSFaXjMYEX
VenNi8J5sJvQB1hO1JYL1nOp9Iwo/XUf3YFnhb50DCs1BmkZl8dVHjth0ZEP
5cVj2kfevUSIHeRt9OwGyms19Vfviotb4kxJWVSdk/NR7ciRs5dPmFC24qyz
pi8//fR5dePG/a9m6NCqmsGDV9SNGNG09MQTty8bP37f0uOPP1g3cKBSl5Sk
1FGNayUnimpeQ/WvAT8K51NSlLqMDKU2NVWtUUV4uBvxUAz7yLt/1OLZQl5P
bqC4ML4/UFyfuxISZtfm5Ly3bNSoF1aeffYjDddee1fTgw/esOGlly5rLi39
+Z4vvhi/u7Jy7L5Vq4buXb9+wO7NmzOUHTsSla1bY5W1ayNoDpnBPDB6LrNU
xVgsFjt5Unh4+FKbzbYfvCYwmhITE5UEmjc4BisKW/Cb4K7woQ5nyYrSM6Ng
yYqKiopqpTg2RUZGMiuK1VPkxYfCe89hEuJ5ixCTI8PDfzYkImL4DXFxQ2cl
JAzf2q/fca3R0aNprp+gREaOp3V3JvkC8mXkaxWr9RbFYrmT/ADtP67YbM+Q
X6R7X6Nn3qR1M5nW7hQlKalYSU0tUzIyypWsrFkq68ibD6VxjjSDHwWOT06O
xjtKS9MYPhojqp27482IkpwoPSsK/B+0kZs7W+UDSU4QmEtgDqEdcKH0nKjO
WFFoD+wgxAG20IABc1XuEJhWGtdKixncKMkeSk5u5xp5M5r8ZUWhXzCqkEtO
zhw1B/ChRoxYoIwcuVDdghk1eLDGi0KNZSx4LiHh0Fi8GVGSiSQN1pGej3S4
WustWU1oCxwnjRPVnouWV1kb6wvcJG9eFFhGOG+zldDz4EWVqfwm8K40jlNH
VphkVek5Tegb/YGTBVYUaoGaYIzk3MIcADdMjpXGiSpva1+bZ6VeTKjiDpZ8
KMwXvcPCvOvV8ZmfZkS1zcVWund/WFjRTpOpaAO1VUcx/S8iomQ6+RVaD09Y
rWUP0X0PCzHln0JMe0OIqQtCQqbRV8FpjeSt9PwuOt9C592yXQ+HSsE5iq2V
cm/Ny5tz4IQTFu4880zH6gsv/Pz7X/1q0ZyJExf954orvn7gsss+vfKCC76c
cP75nw655ZZFGfPmbY6h703hzIti9SCdQP5eGP+76OFM61Tc2MUcx5I/7wa5
9FRP9r/krF4suwjOPLP70LfRa4HNZrP7kn2R0TH6a7uPebFYLN9UKIxf14rg
/++/t8shjP9MCFYMwTCLxWIdSxn9zuN3X++XXQRnzji6QQzBsN2PvFgsVnCF
94wR761A98tmdzc7BH/esVisrskugvNuMqLfY2HWsZNd8He5QLjQz7qzWCzW
s8L4d1dP8ANHW2BWUIR/f9noOdFTfddR1JsVPI0Qxs+JQPjfgS5MH9dqYfyY
dtWPBLwqLBaLxerTwt9Rb2pqitw2f37Opn/96/T1t91286pzznm2ZsCA+c6I
iPqK0FDwhdxVoaEqS8kJXpTNprjAioqN1ThRYBelpKj8IldiosaLApMJLKbw
8HY2VCesqCpvJhN4TXStUt5Lz6t8KqtVoXgO5UL5wokCW8rDl1I5URQ72pKc
qEpvZpU3H4quOckuj7HvlPdofKiDVKP9tN1D250/CtFM20103LgkJGR5ZXh4
VWVk5NdViYkfugYMKK0bM+bN5aef/lzDr3/9j3W33fbEujvv/HvjTTc9v+rS
S99Zfs45M5eff76j4Te/Wdz4+9/XN95xR1PDVVc1Lx0/fl9tQUFrbW6uUpud
rXKhaimfushIpZZyUplR4Eelp7udyckHq6KiWigvxLPjByG2USwbyKvJ9RT3
koqwsP/RPfNrUlOnUrv/XnHqqU+suvjie9fcfvtNTU8+OXHj229fsOfjj3/W
UlU1bv+yZcP3btiQ5969O9O9c2eysm1bPzfNGQ8fKszoOcw6RLE2m+0k8pNW
q7U2KipqP1hQSbROwYoCMwqcJrCi6JrKbQK/CeclxynQjCj0B2Nffw+zolg9
SF6MqGJ6971mFsJhJUcJMSdOiH9lCHHNyTbbz//Yr9/PFiYkjG+OjZ3gttlO
o/X2c1oDl5Kvov3fKlbrbYrFci+5kPx3On5OsdleUSIjX6d7/ktr8T0lPn4a
rdsSJSWlTElPn6FyebKz5yi5ufOUvLz5bZwosKHAPRo4UGP4ZGe3s5aSkjS2
kcYFaucVtbN6Ds+LkqwoMIDQJlhOQ4fOV4YPB1NpgXoMThC4QBpvqJ35ExJS
3CkrCu2BPZSZOVvlWQ0ePN/T5vw2VhO4UcgHLCLkIXlRej6TtD+sKLQB7lVa
2kyqpcbbQl/I57jjwIpaqLKjwNxCbOBJSRYSWFGIW2NFtcfSzolqZ0MdWuP2
Osh6awyp0jYmlGRMyX20h3YlJ0rmgL5h8JhwDvXE/bL+kp8E4xhjjnZwH+6X
z2jxlrRxpuSYyXGTz+JeydhCHcDZQu2wlYwoXENdcR9i8+ZQabUo8WJCFXnc
zobS+pfx65lRep7UkflQklHW/mwRfID630VxbKKc6unj5iuqX1lKyoxJqakz
7k5NnXVNXNzMy63W6VdT3reSCynuN2y24g+jokorIiJKVlosxRvo/A6TqaiF
tq0am6tYaedFFVFNS9w0Xw6OGbNwz1lnfbrpkku+rL/22q8X3Xrrd9PvuefH
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
Kmef/RnYZgdyc2fvy8yctY/mSgu134q1esYZXyg33/yD8tBDzt3PPlu79I03
li+YNq3hpfLytXfOmtV4YXl546iyss2ZH364PNbpVMKZFcXqBXpYGP976ZHc
QL6kizmeS67tBrn0NG8k/+wo6s3qHbKL4Mwruw99Gz332Ww2uy/ZFxkdo7+2
+5gXi8X6aRm9nv15V7F6vuwiOPPH4WccRs/3YOXFYrFY/qpQGP+uUwT/fcC+
JHy2BWMO2btBDEbnxWKxgqNAvzN8/Y7fk95VbHZnLhQsFosVXNlF4N9dDoP6
PRZmdV12wd/RgmGH4D/7slisrusaYfz7rDt7wtGXlhVkMSvKdx8kH390ZWYd
A+UI4+dIIPxQgOvSl1UujB/PrnpuwKvCYrFYrD4t/P10spWcuK+xcdDmV145
a8XZZ//RmZT0JlhRS4RYRd5ZIUSrS3hYUTA4SuA8gdkUF6dUp6YqtTk5St2g
QUptQYFSk5urVKenK9VJSSq/Cawmlc0ETpSeFQVOFDhO1A7YTirridoD60nl
RYWEqP1VCI1R1dav5EXhGT0zCgYjCu2hXcmGkv3J/sGcAu+K2nOGhrbxocCN
ApOqIjS0tcJkOlgZHr6fYtxTZbPtoHa2kTfSuUbyMtqvrIyI+NrZr98H1Wlp
JZT76/XHH//MijPP/Ovq3/zmjsZbb71+80MP/Wrj3/9+3tZXX/3Z7ilTjt9S
VjZ878cfD9y9aFHGjsWLE5Xly2M31dREu93uSHL0Drc7ibbZ7h07hrasXn2C
snnzWe6dOye6m5v/0NLY+OCemppJe7/99p2dCxeWb3n//Y+3vP32t1umTats
njevascnn3zfPH/+l5tefXXBmt//ftoKu/2VZSef/MSq88+/Z/VNN/2u6Ykn
Lt/4+uvn75gz52ct33xz/M7q6uF7ly7Nc69Zk0n9JdEciG1qaoqkLfhQYUbP
TVaX1IEVFRkZqbKi6Fih8+oWvKbExEQlISHhEI5ToIx24+PjVWNf34/kR4EV
RbExK4plpDphRC02C+GwCjEjWoh3EoSYkm6xFOWazVOGmUxTjhfi/dOEeO88
2v5aiKLrhJh2B/mvQkx9JiTk7SmhoS8tMpv/uT4i4p8H4uJeVJKTX1dSU99R
0tLeU9LTi5SMjFLydHK5kpk5kzyrAx9qwIB5ysCB8Fzax7l2bhJ4OOAbgdMT
FVWqcojA9tGzeCRTJyxM4zSFh5d6XKJyoXC/ZELhHsmKwlayjuR1yYuKiSlT
GTzoHzFLZhSYTmAVSVYU+EBHYkWBaYW2wGtCexovaYbKoQIzqn//2Wo90tNn
qQwg8JNwH1hEkm+kb1fykHANfCJwisAr+ileFOonLdlR3pa8Jj0HSd+GnuWk
cazKPAwrLV8Zl+QtoS/kkpw8U80tM1NjPYEBJvMGM6ozPlVsrBYT6gVWFJ4F
PwxzA3UD10rjI2EM2llRWt31LC0tTllLzIXQ0CKP2zlResaUzNs7Z++a6msF
Zpc3L0oytMAuO5QFVezlQzlRaAPtRUdrdUC9MP/AFpN8MZzDfExMnO6meXaA
8t9ltRavi40tXZKePnPuoEFzXxs//qMHL7980VUPPVR52tSpjQWLFjXHL16s
mJ9/vt7yyitLkmfPbho+ffq686ZPX3v7Bx+sf+nTTzcuXLiwyTV16up1L7xQ
t42e23XbbYu3X3nlV5svvviLjeee++mmE0/8cGt+/pzt5Ga7/ZOtN9307brH
H6+ufPXVpXOLihpepHb+/OWXWyYuWbJ1/JIl2wu++mp9itO5IQr9FhYWMpOT
1Rt0NrlOGP+76ZH8EtnUhRzDya90gzx6mlvIFx1FvVk9X3YRnDll96Fvo+c9
m81m9yX7IqNj9Nd2H/NisVhHVqEwfj0rgv/+YF+TQxj/2RCsGIzOi8VisfyV
0e84aVbfkV0EZw45ukEMRufFYrGCI6xDI9Z1oPtls41yoWCxWKzgyC4C/85y
GNTvsTDr6GQX/L0smC70eSRYLBbryJokjH+ndVf/vgt1ZQVfzIry3dceZY1Z
x0aDhfFzJBD+S6AL04eFf0fe6PHsqh8LeFVYLBaL1eflrq+3uN3uBPf27fnb
ysvtq6655qaavLyXKq1WR0Vo6LLKkJBt5JYqobGiqiSzKTxccUZGKq5+/ZTq
5GSlJjtbqSsoUOqGDFFq8/PV4+q0NMWVkKA4Y2IUp83WzmzSs6LQBhhP8fFK
dUqK+gzaA+8J/bSxouDQUI315OFFqc+CGeUxjtGPyoiSbCiTSTNiBhvKYxe1
BYMVVaXxodzkg+QW8t4Kk2lnpcXSXGWzbaJY1jqjo1dUx8Q4q/r1+86VmPhx
dXp6eW1e3ttLR49+buXppz+88te/vmvtLbfc2HTffRM3PvXUBZtefvn0zZMn
n7h15szj9n3wQb77s8/6u//3v2Tlxx/7uTUmUziYTORQj03gdtFYxNBYJLh3
7Urb53bn0/HxdP4s94EDlx7csuV3LWvW/GX/0qVP7auufoX8/t66uvI9y5aV
71u6dMqeqqrXdn788T+2vv76/esfeeT36x9++Iqml1++cOfs2fbdixadsL+2
9jj3mjX5ytq1WTvXr09RGhriNmzYEKWLhRk9vUMdWFG03W+hNRNOayKS1kgM
rTfJcoJ13Ka2a12xvh3Zh+REefcBVhTFxKwo1rFWJ3yo18xCzLMIMStCiPJ+
QkxOFuKdrPDwqQVmc/Eok2nqKWFh084KC5t6UWho0ZWhocU3C1F0D5n+jFb0
Ivk9IabNCQl57+uwsLdWhIe/tj0q6j+tCQn/VdLTpyj9+5co2dnTldzcGcrA
gbPJ4CyBbzNPteRD5eXNU7k3+fnt/BtwhMAQ0phJZSrDh2JSuTsaS2eaoufp
gPWjZxRp7J6yNnaP5C1p3KjOWFGSN1XUgRcFHhJ4R2BVge+Unj5T5fKA2wNO
kGRFgU/U3n6xGqvGHypp4w9JXpPkNEluFAzukdxPSJih3ofn0IaeOYR9rf2S
Q9pHzp0xjQ7HjmrnR5Ufwj3S2/t+8KRk/O1sqTKv+8o9jKgZKgML4wnGEzhg
Gg9MMp9mt9VTsqL0MaJ9cKQwF8ANA2MK8wNbPa9L1l/P6UJdcA3GWOrHqZ0b
Vtx2v8aK0thSndXMux6yFtKyjnge/ennhORFtbtEZ3lOMqK0Y21el6p9JibO
VBlbWB+DBs1Thg6F56v7OIdaZmbOdCcnlx+guHbRHGtKTZ1RkZc3e96oUfNf
O+OMTx787W+/uerZZ10TFi1qzqPvPv0838FM27Yp/Rob9w1avnznWcuX77px
3bq9f9+wYV9RQ8Nux+LFW7+bO7ep4v33V7pee225c9Kk+sonnnBW3ndfVdU1
13zttNsdFccfv/C7c8/91HH77d/PeO65uteLixsedTjW//777zf/asWKPadt
2bJ/xJYt7v6Vlc1xq1e7bZ5++TOP1VtkI78pjP/t9EiuJv+8i3n+irymG+TS
03z50RSb1aNlF8GZS3Yf+jZ6vrPZbHZfsi8yOkZ/bfcxLxaLdWQZvZalC4Od
KKtbyS6CM48c3SAGXh8sFqsnCe8Xo99x/J7rm8JndjDmkr0bxBAMs1gsYxXo
94XDoH7ZbCPtEPydj8ViBV52EZz3lRH9HguzfJdd8HexYNsh+L/1sliswOoz
Yfy7rTv6ha4UlXVMlCKMnyc9wf842gKzjplGC+PnSSB8Z6AL00eVJowfy0D4
kkAXhsVisVgsDyMolpyze8mSE5sKC3+zbMKEJ1xpabOrYmJcVVbrxgqzeW9l
WJjb5eEsVYLBBBYTeE2xsYorMVGpycxUGVF1Q4cqdYMHK7UDByo1/fsrNeBF
xccrzuhojeFksbRznMB8Au9JtpGerrZTTVtnv37qPSojShqcKj0vCqwpsKE8
fCinvm3Jh/KwoGAnPS8N5lVFSIh7SUhIK21bloSG7qO2d1WEhm6vCAvbUmky
NVG7KymOGldy8mJnevpn1Tk5s+oHD568bMyYF5ba7Y+t+tWv7lnzu9/dvPb/
/u/K9f/4xy83vfTSmdvfeefkbcXFo7bPnz9oz8cfZ+9yOFKbFy2KVzZsiHK7
3RYPFyDUawxCPJbMqHC6FwyBfrTNcGvMqJHuPXsmHNix4+KD27df7969+46D
O3Y80Lpz5yOtW7Y83LJly19aNmy4df+KFdfs+/HHi/d+882Z27/88uT9VVUj
9634f/bOBD6K8u7jz967ue+LhIQjB4RTRMWr61XPUg/UetVWW22ttcWjttU2
b7VetZdXW4+qoEA2m4OEkHBIV0AuQYFkc2I4hXATCLkgmXn//5l9spMQcJPd
zWzM//v5/D4zOzszzznPjunL992e2dbYmCYcPJh4/Ouvo4VDh0Klujgc5Cj4
dhKh1+u7XVFms7lDB88CHJM8TTHwrKGniXuj/OGKCoXnHXOu7zDoioLtIQi5
ogh/08sPxR1ROUbGHGbGFoYyNieasflJjM0bDdtsvf6j6Waz7TtGY+4NFkvu
7SZT3o+NRvtjRmPeszqd7a8aje09SD5jucsYW7BBo8l1arXzd+n1Hx8xm+d0
hIV9JMTF5YnJyeiIKhbT00vFjIwyMStriZiZuQT2l8CxclfKXHF7otAhhE4c
dAOhUyk4WPYlocPJ7YiSwz1R6PhBPw+6e9CzFBdXDNeXSFv0D6HvCb1BJpN8
L6UvCr1LeA+8Fw/3ReF36PvBOuA9uLsIHUh4X6Uryu2iUvqczvRFKT1I3BvV
2zeE3+O5eF+8T++6KZ1R8v3djiyl86m/6e2I4l4kZX2x3ehuio9HZ1aJ5GvC
fXRCKcPdTjiW6DFCPxT3geE+9z0lJ5dI5ypdUcr6y84puTz0dOH98Fq8J94f
r+FOLewPHhwL7Hd0Nik9UXycuCeKn4vfuV1jnrmi+Fzo7fzC+nJnFJ8bsi/K
HZ2OR/KUCdwFJkc+n/vP8F7Yfmw7+tYyMhaL48aVidnZS6SMH78EPmOwj0tP
p6UtaoVzD0B/V0+dumS51brig1tv/ey52bO/fHDevIar9+1rHwfvQ/HwLhTk
ekcLb2pqG3PiROulzc2dt7e3d87u6up6pb296+3Gxra51dXHczdtOlqwdu3h
hf/734HioqK9xR9+uLPo+eed+T/5yYaP7rhj9b9/8pPPX/rzn6ufzs/f89Da
tUdub2hovmb//paLjhzpyG5tFUeinxXLgxh6vw8SxLeEByAtTP2/oZ4r3v5v
O5GQOQHQjqEW+v+9MrywMv/MI6sHZas91ykUCmU4xRPUrmN/Y/WwXQRBnJ0c
pv6z3J91ivh24WDqzyV/1UHtdhEEQXiK2msbT46/G0oEHFbmn7nkCIA6+CPW
frSLIAjfg2uLGmuVr8ulUAIhOYwgCMJ3WJnv1ymHSuUORoizY2XkhxrM5Hgy
KARBEP2kmam/vgVaVnnVo8RgMYapP1cCPUsH3LvEYDKDqT9XfJFHfN0xw5Qb
mfpj6Yuk+bhfCIIgCAI9RVpBEILRSdSxZ8/kIx99dOPOe+55qm7y5Hk1I0du
csbG7qsKD2+uDA7urDKbxSr0MWHQ+4SuqLAwyQVVnZgo1o4eLdaNGyf7ojIz
JV9UbWqq5ICqio6WfVFwjeRzQpcTRPI84T3g++q4OMktVZ2QIFZFREjuJ8kP
xXr5otABhddzZ1VvP5TLESWd6/JCVcK1la57bGWsC3J6M2MdsG2BHN+i1R6F
a/bDPXZVmEx10N7Nzqioz6pHjiyrGT9+Qd2FF/77q2uueWnnbbc9/fWDD/58
zxNP3Lf/hRduPvzaa9898sEHlxzLzT3vxLJl446tXDlK2Lgx8Xh1dfTh9evD
du/ebXH5AHSeepkU3ih0RgWjuwC2sejz6ujomAzbSyFXC6dPfw9yqys3Qa4S
Tp26ROjoOE9obx8nHDs2SmhpSTpx4kTM0YaGcEGuyxmuKuJbB3dFvQKpN5lM
HRp4BrTwTKCfCV1R6IZCVxR+xn2Mt46ovsLvzT1UPEpXFJx3CLaSKwrqS64o
wsf05Yd62wD7ZsbmBjP2QQRj8+MZmzOSsY8yGft4CmMLLoZj1+h0uTcbDPl3
WywFD5vN+U9ZLPkvmM32t4xG2zy93laq1dpWabULNms0uXVabe5unc62X6/P
bTKZctuCgxd0RkbmiQkJReLIkSWSEygjo1zyRI0bt9Tls0FnVLnkj8JwP9So
UYu63UHoH0L/Drp20OHDXU6yK0oO90ShTwfPQ2cQOoeSk9EltFhyUI0evVi6
H96L+6L6cgXJ+7YeTiaNJq/bycSdPVgOdwTJXiPZHYTfGY35Pe7Lr3X7ovKl
8tFFhPfhPiLuYFI6nvB72W1l73ZF9W4791nh/fE8PF/pMfLGEdXXOUo3EvqQ
0NOUmloqBR1GKSklUnAfxxFdTuh04o4oHhwT/A7Pk8dadnqhf4q7snj9ufsK
+xrLRFcUloHXc1cU1gf7FPuB9z0P7/veOdPp1dMVpXR6nS28P7DeSjcWbxN6
o7AtwcGFMPZYvwIoL7/bEQXlCvA8Ybrk5AowBwW5TnZpPnEHGJaF95NdWSVS
v6Jza/z4cnHixKXi5MnLxGnTPhEvuOATcfr05V3Tpi1rnzZt+ZEZMz756rrr
Pl1z330b7L/97dbX//Of+qdXrDh4x9dft86A96sx8F4UA9tQ1/sWOjoniqLw
HdjeAnkQ8lhra+dvmppO/eHIkY4X9u9ve6WhoeWVzz8//Mry5Y1/zsv7+tm3
3tr2+F/+Uv3T11+vvstm2z5z/fpDV8I5FzQ2Nk9oamobffLkycSmJjHS5QIl
VyfxbScdsoSp/3fUc2Uj5BIv24nuo6MB0JahlJ8OqKeJoYiV+WcOWT0oW+15
TqFQKMMpnqB2Hfsbq4ftIgji7OQw9Z9lkdG/CxiuWJn688lfdaDfPYIghgKB
8h4g+ruhRMDiYOrPJ3/Vwddx9LNdBEH4Fl+vFZ4+00NljaJQ+hsHo//GJQjC
N1iZf9YoNcodjBBurIzcUGrEwegdgCAI/zCBqb/GBVpaIeO96VRi0JjM1J8v
gZwjkFED7l1iMLmSqT9ffJEHfN0xw5Q/MPXH0tsc8HmvEARBEIQLQRBM6CIS
2tszm1evtu595pmfbr/hhjfrpk79tCYzc3vNyJHHqmJjO6rCw8WakBCxCh1R
mOBgyf+EXifJ8zRypOSIqsvOln1R48aJ9VlZYt3YsWJNSkq3L0ryTHGvk9Eo
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
UBB6l4q6vTXodIqNXSg5mdAJhE4f9PjgFj/Hx8vfo/cmKqpQ8jYpgz4e3KKH
CK9Bx1By8iLpWnQBoaNH9kXZuz0/uDUa7ZL/CK9DJxE6etLTy8Ts7CXi5MlL
JVfUmDGLpXvy+2D9ebg7iZeP7iIe7gjCLdab3x/vl5FRJo4bVy6F3x+vwTpi
ndA/JLuKckWlL4o7i9DxhF4p2RclO6J4goPdrii8F57bV4xGpeuqoNtvpPRD
ye2UXVj8HGW7e7ulejuR3PeQr0GfFfYTOr2wzehrQi8UOqMwvR1RfPzR84Tj
z91gfMyV7qXe/irlMbwGxwDvNWKEPD+wbPSR4dzCe2E/YH/x+dHbFaX0RfHg
mPCxkd1bsi8K+0tu79lcUTiXsC3YLmwn1kVqvzB2bGkX9MWplJTi9ri4opaI
iIITMAZHzWb7fqMxb6fBYKsyGm1rTKa8RVDWXDj2b/j8LxjPd4KCbLlwf0d0
dOE2eH6aoH2n0Y0VF7cI+m4R1KVY8rJBXwppaYu6JkwoPzVjxvK2665b2Xr3
3evbHn30i44//KHy1JtvbussKtrbsWrVgSOVlU2Vu3e3Fh850vGPtjbh0ZMn
hRvhvXcSJBkSxv1OrhjhmAVdnAofJ74rm12OTnRLRbgSjsfq6+vJ2UkQ5+Zm
Fvg+/48hUV6288kAaMdQyYMD7GMi8LEy/8wZqwdlqz2vBxqCIAh/ofbapfb6
6o/fGoIg+iaHqf8M07sVwXEw9X8n/FUHemYIgghUAmXdy/F3Q4mAx8r8M7cc
AVAHemYI4tuDr383PV2jAuX3mkIZrOQwgiCI/mFlvl+LHCqVOxgZaliZ2wWF
cTB6PxoqyTljNAmCIPzLSab+2hcomeZlXxKDz/1M/XkTaDkFGedNpxKq8DOm
/tzxRbz9tykEYzcw9cfRFxnt644hCIIgCCX4b9vx38m3CkLqqaam81u++OK2
E8uW5TQVFxce+/jjrQf+9Kf9O267raVu/Piu+vh4sS4yUqx2+aKc3BcFn6tj
Y8XqpCSxJjVVrB07VqwfP17yRNWNGycdq0ZXVGioWGk2Sy6oM5xPLi9Uty8K
YzTKgX3JL4XnuIIeKCec3x2XH8rp+n6rRtO1RaPpgOuOQZk7qhIS1tVfcEHu
znvu+eveJ5/8zd5nn/3JvmefnXX4L3/57tG33760ac6c89vLysa3LV8+umXt
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
0EuEfYo+KTwf68Y9SrIjyV1npWcJv8P+c7u+3F6moCDZgxUdvRDGDN1epd2O
KtnvtFiqB3q/kpKKJU9VVJRcV6U/y+27kscf24BjjvfDe+A9sS3oWkJXFM63
3r4xpe8K66wM1lnpeOLzkMd9Dzw335UC1xbngHIu47ifOfa9PWlYD9kTVdA9
LujOQs/ahAlLxEmTlkrb8eOXQPuwn0q7kpJKOmB8jkdHF+6Gdm6CeVMCY/EW
PBtPhITYb42LK75oypSy8Tfd5Mi69trV2dOnO86HZ3HGBRcsu+jyy5dPvfPO
VRmvvFKT1NBwNNzliqK1nCAIf4EuujeY+n+/PVfehVi8bON/AqAdgZKHvehL
YnCxMv/MAasHZas9TweSHA/aRRAEMVCszH/rlyeovcb647eGIIjA+bel9B5F
9Bd/zd1AqIOv4+hnuwiCGD7g76/aa9RA1l+CsDL130n9VQd/xNqPdhEE0X/w
fVuN93dflztY+bZiZYH1bkVxx3H2YSMI4luOlamzpvijXArFV3Ew8kMRBDE8
WMvUX3MHO5k+6TkikJjL1J9Xg51OyGhfdB4RMIxn6s8rX+R1X3fMMCOeqT+G
vsjdvu4YgiAIgugP6GASBCEUki60tV3V8sUXDx3+179e3Xn33cXbpk3bUpWS
sq8qPr6pKi6uFbanqhISutANVZOQIPmhqmJjZT9UZKTkiKoKCxOrQ0PF6pAQ
sSY4WHQGBYkVFkuH02I5WhEcvNsZFlYN537ujI1dXp2SYq/LynqvYcaMv+z+
3vd+8/UDDzzQ+Pvff+/4v/51UVth4Rjx2LEI9ESp3UcEEcCE6PX6i8PDw1+I
i4uDxzG2PSwsTEA3FPqb0BXFnU342d+uKO6JUrqiTCaTqNPpznBFwbXkiho0
uB+KO6LQD/WaibG1FsbKwhibF8OYbQRjC8YwljsB9i/Q6exWna7gRtjertXm
/Yix/J/D8dmQJyGPMTb/p7C9H6PV5v4EznlEq81/SqPJe0Gny/2XTpc3X6Ox
lcHxz7Ra21b4XA/ZrdfbDuj19qN6fd4J+NxmNOadCgsr7ExKKhbQbTNp0jJx
+vQV4mWXfSp+5zufihddtEJy3CQnL5I8OOgWQkdOX/6cvp06bucSenX6ckWh
Xwg9Q+iKQkcQunZiYha6XFFFHriiCiVXFPc9cWdVb7cPuoDQ5YS+I/QTcadR
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
TU19NiMjYxHPEafTGYWfyc2fR7ia4InKzc1tdjchRrmi+PYLHi+vN7mi9EPl
iIIfKmJhrNrO2CdOvk1nrDyXMV9PnoGMvT+SsYnnMzbZw9ikm/ix75pMvvtM
Jv/jZrPvObPZ/2pKSvF7KSn+kpQU33R+3hx+3ieMFc/i+1V8G+Dx8+tKeKby
cz7i539lMhWv4tdvslh8OyyWwF6rNXDAavUfsdkCx+32YIPdHog6HHDwIHAk
wRFUJjua4LkpLKyUhg+vkcaNmy6NHTtNGjZsiuy+gT8IviE4ek7lihI+H+GJ
au2KgrcInh3hLBIuIjiO1J4o4YE6lS9JuI3UrqeYVyjmikLZcArhGpQ3YIDi
OoLPp1evctm3hO/geEIdcb3I6XxR6vbBoyWcUahLzBsVavZGqdsAZxKOK9+d
2EbhVWrrO8UXFXM7weUF/xY+4zu4qoQnCn4jHIPPCE4peJ9E0H7FMaWMAfYR
HFefJ3xecDlhjqDv4IeCDwkZNKha7lecI3xVp3JFYR/jhzqLeQBHlLg/6iDm
HPoS/YqxRR+jf9Em0XfoY5zT0hnlO8k8LY7y56SR7x9XnFDFB3n28+zlx3bx
7W5lv/gAvufPU4PN5m90uQJRxXFV0lTvUl7vMtkPhbqjzegzBH2FNsCpBT8U
Ag9b//7VvH/k/m3Izy85lpMT3p+dHd7K91cWFlYs4M/b59dd9+Hnd989d/6P
f/zFgnvvnfvFTTd9OOO886ZPGjGi+s9jx8546NZbP7r22WeXjQyFvuo1d+7u
dHJFEQRhAD9myf3f9qng6Z1gG99IgnYYnT8n2IeE/niYPmPviaNso+fnmcQb
R7sIgiASQa/1y8iy9YonznYRRFfG6OeU3qGIRPEw439DIjrVweh2EQRx9oPf
X6PXJXoPIBJFj9/hSDvK9+hQvl5pT7sIgmgfWq9F8T6veqyBHZGuhpcZ3+fq
eJK0Xh0V78mHiiCIsxAP034diRhUbkckHtA2LyN/VDIl0hQvo7//EgRBCO5n
xq/PHZn7tek2IsnIY8bPrY7OPZr0HJFsvMaMn1taZJTWHdPFCDLjxzDRRDTv
FYIgCIKIkyZXFFxMGdKRI/349pKoJD1QX1f3j0Pz50/b+dJLy9dcfXXt17m5
jUssFmmJzSb7oOCHWgI3FA8cUYvhkHK74YaS87XTKX3tcDR8Zbcf/dpu3/+1
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
hfupfVHwPwn/FsZAjIOYJ609XYojK9TkYIqNvTqKH6rkBD+UcDQJP5XaUYV5
gHOReP1QrT1RSlktfVRKmaHmNon5pfR3oNmR1uTDijoc/iivX4PLFWjEPLPb
w/xaPDvwTAUbcnLCe/j4LuJzI3zBBVN/f9VVM39w882fXnDfffN7TJ260A1n
56FD0Z4HDhwbdeRI/dWHD0fvPXz4+LN1dfWv1dYen7h375Hq3buPfrB+fV3k
iy92Tams3Bz85z9X/+f55xf/74MPfvHOTTfNeffCC2f+i8+bSfx5CebllZb0
6lVZNmhQVeXQoVVTCwsr5mRmhhfx+m7g47GTz6WdgwZVb7j44plf3XLLx9N+
9KPP/vfxx+d5f//7xQ9OmLDitmBw0xUzZmw595NPdgz87LODBZFIbea6desc
kYhkIVcUQRCdjPN55jPj/w58svwwwfa9kQRt6Mh8mmB/EdriYfqMsyeOso2e
i3q1iyAIIhG8TJ/1Kx6MXmNpTSYIbTD62WzPukMQ7UWPuRppR/keneqgR7zt
aBdBEGcPePaNXn9oDSL0Qq/57WlHHSI61UGPEAShHVo/+xGDyu2IeONsW1cF
/ZNsY2NknTo6BEGcfeixhkXiKNejQ7m0DhIEQRDE6cG/fahnxv+m6hm0r7tW
HUYkLQFm/FzTO4d5crXqMCJpiTDj51qimat5r3QtrmPGj6EWGaF1xxAEQRDE
mSJJkjkajTp50mWvUzQKv9NFUn39rQ11dfc3bNv2y/oNG/569Kuv/mf/lCmB
PZMmTd/j98+tmzZt3sHPP//s0MKFsw7MmlW667XX3tn0ox89t/7GG+/f8sMf
XrP1jTeG7tu4MbvJEUVuAYLQHjfPGIfD8UxaWto8t9t9yGKxRFNSUiS73S47
m7KysuRgn38v+6K0dEWJoAxscX+UBT8VjglXFK9PI/9uL69DhclkuosfK+Sx
GNt9RiG1ckR5eT/4bYytczD2URpj4RzGJvVgLNifb4fzjLNYii8zmyffYDb7
bjeZAveaTP7HeJ5NSfG9ZDb7/5cfC1qtoekuV/CztLTQkpyckrUFBWVbevYs
3d2tW9m+7OySgxkZoaOpqcF6hyPYCP+N3R7i46U4ovLzy6WePRVfkXAY4TOc
UfD3CC8TnDnwRSGnckS1Dq6D4wdun5P5e5TvQlJmZpiXWyo7klCXwsJKeduv
X0WzOyk/v1TKzsZ1oWbPVEunT8xppfiN/M2+KJyr9kW1dge1N3Acwf+EPoMj
Cq6ooUOr+T68T1Vy/eGC6t69XHZKoQ04jnORQYOqpaKi6uZrR46skTN8+BRp
yBDlO3ioevUql/sFdUX9Y/6umLuotTdKOKNaxq9KayeU7xSOqZgvSj3+whnV
2qkkzhGuKOF2Er4oxQ3Vsv+FI6q1q0m4qZSyYo4qxRulzAHhjYrHESX8UMIL
JdKW9wp927LPlH4zmYqj/JlssFh8x2w2/1G73X/U6QwcdbkCx/lz1sjb11hQ
UFo/YEDl/vPPn7rhxhs//PSuuz7792OPzf/lM88suvWPf1wx+s03V+c3vSNZ
eTIlKdo3Gj02pr4+eh3//MOGhob/rq9v/AN/J3uVb986cKD+zU2bDr28ZMmB
5+fM2fF0MLj5qZdeWvbzRx9d8N+33/7JM1dcEfnNxRfPfP7yyyMv3nTTR3+8
9dY5f7vlltlvX3PNrEnjxk2fOnr0tHkXXzxj+be+NWf5ww9/Me+FF5ZMnTBh
5b8nT173u/LyjQ9Mm7bppk8/3X3B4sW7hy1ZcrjvypV1ecuWRdOanKJmepcj
CKIT8zoz/m/BJ8sLCbbtl0nQho7MYwn2F6EdHqbPGHviKNvoeahXuwiCIBLB
y/RZv+LB6DWW1mSCSBy91pD2xqt3Q4kuS4QZ9zspMPr5ijeRdraLIIizA6PX
njNZVwkiXjzM+HdXr0510COedrSLIIhTg3drI97VtS63I9KeNbWrYuRviScJ
69SRiZyk/QRBdF70WL/iWSs8OpTbESEIgiCIzs5YZvzvqd75g2a9RSQza5jx
c03veDXrLSKZ2cKMn2uJ5n8075WuxTPM+DFMNIc07xWCIAiCSAD82/8mBwBc
BQ6eLJ5+UUkaHT1+/LL6/ftvbjh48IfH9+x58tiGDS8cXbny9SMrV753fNOm
ice3bPn3se3b3zi2du2L+2fMeHzXu+/eufkvf7l6z4QJI3dUVhZI6+A+IQhC
J/B8DXU6nQ9nZmZ+4Ha791oslkZ+TOLHmj1RcDilpaXJHidstfZE8bLjdUXt
43WsNplMP+DHBrCu5Ypq5YeSeN62MlZtZ2yqm7GSTMZC+Yz5+zDmG8y351gs
ky8ymwNXmc2Tb7FafXdaLP6HbLbgL8xm/+/N5uDrKSm+iTxVJpN/tsnkW8i/
X+l0BjampgZ3ZGeX7M3PL6srKCg90q1byfHc3JLGzMxwFI4clwsp4XOhRMrO
LpUdRoq/qFIaNKhK9hMNHTpFdhjBf9StWxkfyxLZxQOHjuKLap8nCtfBxQOn
DyL8PvD24N68vnzOlEi8nrIHCj4oOJZQB9QFDqXhw2v4tkZ2MMEb1aNHGT9X
uRaOKXiDRP3UvqTWfiN8Dw+Q4i5K3BWFa3NySmWXE5xOQ4ZMkeuMoC/hgMJx
+K7g4iosVDxRI0bUSKNGTZW9UNgXn885B5kmjR49ladGDs5BX6AMtBdjEXN3
tRyPtpxRp4raI9XaMdXaF6U+L+bhUvq0tadLOMWU/lZcYSfzcwlHlHCStXZP
iXbB+dVyXgVUzqhgm84odVlqP5RwUbWOUq7iiTKZFE/Uid6sYp7JDSkpxUf4
s1fHn89ah8O/lz97e3JzQ7t79Sqr5eO//+KLZ+6+9dY5G3/yk3kLnn/+6ykT
Jqx+7b331j8SCm24ZubMXYMXLZLftyzC2cm3uXxbyDOG71/Nt9/j+RHPQzwP
HznS8HBd3bH79+w5dufu3Ue/vXx53S1lZdtveeml5bc++eSiW3/60/m3Pf74
gu++8MKyO//0p8U/evHFxY8+++ziZ554YsFfH3ts4T+ffHJh5QsvLJkzYcKq
OWVlm6sike3/nj9/9x8XL977yMqV+7+xalXtuevX1xauXh3N37tXyti4Ua6T
hRxRBEGcJdzNU8eM/7uwHv/3gnuSoA0dlX2M/psxyYKH6TPGnjjKNnoe6tUu
giCIRPAyfdaveDB6jaU1mSASx+jnsj1rDkGcCR5m/G9KRKc6GN0ugiA6P15m
/LojMfr//yf0Ra/f4fZg9DMWbyLtbBdBECdH67Un3udTrzVPz3jjbFtXB/1k
1BglY51ojhIEcabosXZF4ijXo0O5Rv4GEARBEERn4UFm/O+pnjnAk6VZbxHJ
Cv7/po2ea3pnJ1P+jSxxdpPJjJ9rWuRnWndMFyPAjB/DRDNH814hCIIgiARp
8kUhpmg0aufbDL7N59s+0bq6YdHjxy+K1td/I9rQcGfDkSM/aThw4KmG2tpf
Nuzf/2TDoUMPHduz586jmzbddHj58osPLFw44vCqVb1r163LhGPA6LYRxFmM
1el09khNTf1WZmbmJL5dbzabj/HjsrMpLy9Pys7O1s0RdSpXVG5uruyLEq4o
k8nUaLVaa3mqePDv2fuzruGKUjmi4Ify8jb7bYzBo/dRGmPhHMZKezAW5P0R
GG6xFJ9nsfguN5sDN9hsodut1uAPbbbAf7lcod+4XIGXnc7AP63WQNhi8c8w
mSZ/npJSvJRnrclUvJUf2+1whPa53eGDmZnhY7m5JfX5+SXRvLxS2WWUkVHK
x6dEDjxRWVmlsgeqd284jiplfxGcTKNG1UhjxiiuIniP4DfKzy/j15fIjh14
f4S751TOKPEdnD7w+cDRI4L7YAt/D9xHqCPqUlBQJjugeveGu6pKGj58iuxO
Gjt2mjRu3HR5i8+oV//+insJ5+fllfB5qPiG4A+Co0jtQGrLbwQv0MncRe0N
fFeoP5xbRUXVzb4tERxDfeGLEj6pkSOnyn0MPxQ8UcKJpXZGYRzGjZsmtxvH
4c+CSwt1Rf/Ba9TWWIjPSmLtPlnadki17Ytq6YzytfBCtVWW8EWhv9V+rpgn
KtTCE4X5FfNOte29OtH9pdxfmWdqZ1SoyUMVbuWhivmthDuspStKlC28Y2hr
cVTpD+GOKj7Oj++3Wv1b+X3X8nm8ol+/8iWjR9csuvzyD5bcfvtHKx9+eN7y
559fPP+tt9bMKC3d/N7s2Tte+PzzvffMn79//Jo1h/vMnbs7vcnVmdLk60yF
L0p+94pGh/Gcx/cv4fHw/avgj6qvr78Sx6JR6byDB4+N+fLLvaMnTdo06rXX
Vo98/fUV5wQCW8d9+OHmi2bO3HRlaemGmydNWnvve++te8Ln2/S7qqrNEz78
cMfkBQtqi1eu3P/u+vWHXty8+cjD27cfvWXXrkPjtmw53GfdutrMdetkb6iZ
HFEEQZyFFPFMZ8b/bbitVPOkJ9C2q3l2JUE7OiJvJtBPhHZ4mT7j64mjbKPn
oF7tIgiCSAS91uV4MHqNpTWZIBJDr/WjvfHq3VCiyxNh2s/bSDvK9+hQvl5p
T7sIguj86LE+nkkIQk88TJ9562lHHZLlWdO6XQRBnBytn/t439M703pD6077
8TJjxuhU88+oOtE8JQjiTNFj3TrVOinw6FBuR4QgCIIgOjsTmPG/p3rmT9p1
FZHEXMOMn2t65zea9RaRzFzCjJ9rWuQqrTumi7GGGT+GieZVzXuFIAiCIDRE
OAuanFEuvs1u8haMiErSOL69LFpff2390aM38e31/PMVPON5Rh+NRouihw71
kPbty9q4caMTrgGj20MQZzHmjIyMzLS0tPF8+weXyzXXZDLt44nC19StWzfZ
FcWPyw4ntdNJ64j7wkklXFEoW7iieBpTUlJqeWRXlN1uL2RnrytK7Yfi8fN1
MMLbGnEwNtXNWEkmY5O68eN9GPMN5ttzLJbARWaz7xqzufhWqzV4p90eeshm
C/633R78vcsVejM1NTSJp9rtDn3kdPq/slh8q/j5m1JSfDtSUop5v/rq+Ocj
drv/eGpqsDEjIxzNzoYjqoyPQxkfe8UT5XKF5cDRk5NTInXvXib7luCKGjSo
SnYVwV8ELxMycqTiJ4IHKTNTuKKCLVxQwtcj/D4xV9GJniDhBFK7ouCxEp4o
1Kdnz3LZuYT6oHx4ks4/fzrPDDn4PHp0jVzXwYOrZAdTr17lsi8KDiKXS6lf
a8+R2hsF/w/qJeqQqCsK16I/e/Qob/ZBwQ81aJASeK/Qj337VsrbgQOrm9xQ
NbJXqqhIaUf//lXyucLbhfYLZxT2cV/0EdxUiherbVdUW94utc8pHpeU4otq
2xXVuk/Vvij1tbHvYs4w4edq7YrCuMHzpXia1PeJ3UtdrtoZJbxRijNKKQf3
E1EcUWKO+k/oC+Va5TwRXKe4zYJRtzsQdbkCjfwejTabv5Hfo95u9x3gz9qm
3NzSr/i4zhkzZuq0a66JVN5xxydl//VfX1Q+99zX0195ZeXM995bW1VZufnf
c+fu/uPSpXUPr1598KZt244N37o1mrdu3TqH8DHB1clj4+9STh44pHL5tidP
Ic9AnsE8Q/nxIfiM97KDB6PdV68+kD979ta82bNX5n322Y6CTZsO9aqtPVK4
ZcvRIcuWHRr75Zf7rl60aN93V6+u+/HatQd/uXHjoRe3bTvy+127jj5dW3vs
voMH62/ct+/QeUeOSP34PTPnzZtnJUcUQRBdgN8x4/8+3Fa+4OmXQLtGsrPj
b+fxZGwC/URog5fpM7aeOMo2ev7p1S6CIIhE0Gtdjgej11hakwkiMfRaP9ob
r94NJbo8Hmb870pEpzoY3S6CIDovHmb8ekPvAURHocfvcKQd5Xt0KF+vtKdd
BEGcHK3XnXifTT3WO73jibNthIKXGTNO3iSsE81VgiDOBD3WrEgc5Xp0KLcj
QhAEQRCdnc+Z8b+neqaXdl1FJDG/ZMbPNT1zlCdLs94ikpnHmPHzTYvka90x
XYg8Zvz4aZEfatwvBEEQBKELTc4o4S5Ia3JGFfBt7yZvwXCEHxvM05/v94hK
Ug7fT8U1uNboNhBEF8CSlZXVJy0t7R6n0/m+1Wpdb7fb64WvCX4ot9vd7IpC
tHBD4f5IW9+hDHii8D2vj3gHbjSZTLU8Z7ErSu2H8vL1z8vb57cx9omTsep0
xibmMvZ/PRmbPICx4hEWS/F5ZvNkj9lcfKPNFviO1er/kc0W/JnDEf4tz9+c
zvA/Xa5wODU1PDMtLfx5ZmZoWVZWaH16enCr0xnYbbEE9ptMxYdTUiYfS0mZ
1GAy+RrhvOHXSWlp8CaV8pTw/TCfA2F+XPE8wS8EN092tuKK6t27QvYXwUME
R9GIEYqf6Jxzpsm+on79KvhcKpXvI+6hdkQpfp6gfFz4ouDfEc4huHlwjvBD
qV1RuCe8R3l5pU2uqPJmVxT8ScOHT5FGjZoq+6tQHziTzj13mly/UaNq5O9R
Z/iZ0Bb4muAeQnm8P6RTOY7gCVK7ixJxRSFZWWEpP79U9kXBvwUvFOolgmNw
WiHoc3yPdvbqVSFfo24/zsWYwB0F1xTGAW4pxRVVLo8d2on6K26lU7ui1D6p
ts5Te6NaOp98p/RFKc6mlq4oBB6n2DliHsScYS37O+aKwrgp1/tO8EOdvHx/
C2+Uel4iMYdZSw+WOq3rBi9aXl45HxeMTVm0oKC0Pi+v5Eh2dugQfw4P5OeX
7Onbt2wDf1bmjx8/veqGG2a994MffPrWU08tfOUPf1j2tzffXPXKv/619s1A
YPOE6uqtr37yye7fLltW99D27Udv3rfv+Pn8falvkw+qeQ1UvXMhFvg6d+zY
gfepjKb3L7ij8njy+X5W03uZvel9yyb8nrt3y/fNOnDgQD7e1/h2RF3d8Yv3
7z96Q23t0dsPHDh298GDx+7Zt+/wdw4cqL+an3sODzxRuTwOencjCKILcRPP
Rmb834lbB66nRDxIRTyLk6Adeqc4gT4itMHL9BlbTxxlGz3/9GoXQRBEIniY
PutXPBi9xtKaTBCJYfQziXh1byVBKESY9vM30o7yPTqUr1fa0y6CIDov+A02
er2hdwGio/Awfeavpx110ONdRK8QBJE4Wj/z8b6jd6a15kzWUkLBy5JvrIyq
U0cmcor2EwTRedBjvYpnffDoUG5HhCAIgiA6M/h3EQ3M+N9TvfKWdl1FJDn4
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
wvfqiHor7Y55g9ryC8GxhWvgPErUFdXaGYV91F+4qxRPVMs2qD1aOA/9Cn+V
8H2JccKYwMmEPu7ZE/OhTN6Hpwt9jvpjzET7lfvE3F5irHEePE5wTSG4p+Kb
UnxWah/YqdxTuD/KQ9nwQ/XpUyH161cp9e1bIfXuXSHXDfdW2q8EZbTlB4v1
U4jfNzbWai9Va9+Z2iOF79XzPdZvYmzDvC7wmZXzulXyelZJhYXVcn179Spv
LCgorc/LKznK5/FBXu/aHj3KtvXpU7ayf//KT4cNq648//yp/7zmmg/++P3v
f/L4E08suPvNN1fdPGfO7qu3bDl88bFj0ZHRaLR3ba2UGXMwRe1834nwz66m
LdxMZp4UIxa0Jl+USIpR9SAIgugk/IYZ/zdkdfbwjE2gPfw9le1IgnbolURc
WsSZ42X6jKcnjrKNnnN6tYsgCCIRPEyf9SsejF5jaU0miDPD6GcR8ereSoJo
mwjTfj5H2lG+R4fy9Up72kUQROcBv8FGry+S7q0kiLbxMH3ms6cdddDjXUSv
tKddBEG0ROtnPd538860xtBaoy1e1rHj5j1NfTwdXB8jcro+IAgiOYkw7deD
SBzlenQotyNCEARBEJ0VM08jM/63VI98W8N+IpKficz4OadXrtewn4jk55/M
+DmXaNZo3itdi2uZ8WOoRc7RumMIgiAIgiCILo/sikpLS/sF336Rmpp6KD09
PQqfE5xNcEXB5wRPlMvl0sQVJe4BHxSCz/BFqY9jizJtNpvE69XIv9vLj1U4
HI47eZ37MuXvb0mGpHJESSbGIhbG/DbG5rkYm57BmC+PsVAvxiYWMRYYZbEE
LjCbg1eYzYFvmEzB75lM/gcsFt+TVqv/Bbs9+KrTGXjP5QqW8cxKTQ1+ybM8
PT28PiMjuD0rK7QnMzNUl5VVcjgnp+RYbm64IT+/JApHVEFBhdS9e4W87dZN
cUV1714uDRhQJY0aNVUaO3Ya39ZIgwZVy24eeIPga4IDSHEGKYF7CK4ceH3g
zoEnSjiShL9JeH8Q4V3CdYq3KNjs4IGXSXh5hL8ITig4fuAEUuqt+IFwreJF
8jU7fXAf3B/1ao93CZ4f1Al1iPmeiqWYL0rtDFK8RsKTJBxDiierbVeU4rAK
NDmswpr5omL1j7miFH9WbAzwGX2C83JzS+UxVLxfsbHDVvQxHFH9+1dJRUVV
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
HvrZz+bf5vV+ddnLL68e+dZb6/r5fCvzFi+WUrds2eKKRqNOSZIcTZ4oI9cz
giAIQl9eZcb/XVmkisnvsWfMD5OgDXrk7QT6hDgzvEyfsfTEUbbR802vdhEE
QSSCh+mzfsWD0WssrckE0T68zPjnMKJ7Kwni9GAeGvXbKTD6WdSrXQRBJDfJ
8C7g1b2VBHFqPMz499xkeBbjjacd7SIIIgbWBCPWGK3LpXWm8+FhHTt+3jjq
5O3gOnV0InH0AUEQyQOeWSPWAY8O5XZECIIgCKKz8g4z/ndU6xzgcWnZSUTS
czkzft7pkR1adhLRKbiIGT/vtMh1WndMF2M1M34ME80bmvcKQRAEQRAEQTDm
5BmVlpb289zc3C9ycnIOpaenRx0Oh+R0OqXU1FTZ5cS/k7KzsxN2RbV2QrXl
i0KZTY4oOfxzlNfloN1u/4JvX+R1u4TX2drxXaX2Q3lNiiPKb2Ms4mCsNI2x
mmzG/tOdMV8h3w7j3421WIovM5t919ts4dus1sC9drvvUYcj/Gu7PfxXhyP4
Lk/A4QhMt9v9cx0O32KetfzzFqczuMvtDtWmpYUPZGSEjmZllRzPySlphB8H
jijhh4q5ohRfDgJ/jgg+4xrFjVMqO3Hgi4KXB34hOKLgDhLeIBHhDxo0SHEP
4T5wAMFT1NqzJLxJ8DAp/qcTfUvCuQTXkXJuLLgnPD5w/AgfkPAkCWcSvlMS
PsEVFTtHRDkXnij4peBxgmtJ7XwSzihRb7W7StQXriHhG1KubenKEq4ofI/6
C4+VlkE7hCsKdVOXJ9xNcEXBr4TxgvcL+xjf/v2r5LHG93A6we00dOgUaeTI
GtkVNXbsdOmCC6ZL558/XR7/UaNq+D1q5DmhOKcUVxPmFjxMwu2E++F7zA2U
AReVco4yz8Rcw/zr2bNc9lZhK5xOIrgXtvgO94QbCg4qBPu4DveIuaIUFxQi
6iKuhb8K94f/Cd9jLODTEuOIfcwF9CnupbjTRNmVvK3Vsh9qwAC576IDB1Y2
8hzn7TzCtweLiir38eO7+OctAwdWr+HbrwcPrpo7bFj1tHPOmea/8MIZ71x7
beTP3/vex0//9Kfzf/LMM1/e+fe/L79hwoR14//zn/XD/P4tfcrLt+RGIjtS
Fy+WbJIkWXjMcETxJOLsIAiCIDoHDzDj/7Yskqgv6udJ0AY90ieBPiHaj5fp
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
9nH+8+d4zuPH/icnp+knOTnNv8/Li9zldDZ1uFzNf/N4Iht8vuhT+fktLxYU
RF8tLGx5o6io7e1gsO298vL296urOw/V13fH4QxauPBedcGCdeq0aavVmpru
PkeOcPvApwS/Dpw/cP+I4Gdj4Ani19X8QzNmrNIcRrheSUm75u8Rvh34cuAF
wrVxfDBX1EidUckR7iD4ouADglsJdU2btlKdOHGF5kPC9VEDahGeJrx3uaJ9
LiOzvqjBPEdD+aGSHVH4rjHCFQUPE3oHPxQiHF3GYB61td2a52vq1JVa3+fO
XaN5oubPX635oWbMWKkF93revNX8+Bp+zuo+jxR6AocW+gJfFO4hxguFdAcY
7q1wRgkvl7HXwhWFc0VNlZV68J6vN21t4DzcD+FzEq4pOJLQY9FDEXjFcAz9
xX3C/cC5wg012D035kiuKOGLEmu3oqKd97Kzz5kF9xnmhTExvu46S9Q4WjeY
0RPldreItXaYP2cH3e7m/fwZ3puX1/R2bm7jLv697TzP8TzBe/GI19v812Cw
tZU/u7fNm7fyN6ec8rcrzz33oYu++91/nXPttZtPv/PObYtWrnx9yv33v161
dWu8QFVVp+wNmiAIgiB6uYPJ+7v00lHWzP8ZnR2WWLfMuRPmsOu+KRLHtjNm
5kUQBJEqMWb9/mUG2Xss7ckEMTRhJv+Zo1Ao+rNollgG1Gs2ygjmRRCEHGTv
ExQKRY9ZlAyo1WxiI5gXQYxVZD13MRvGtjuKybkR1pOu9RI2WU84TfXIiNln
mCAI+5H1jCs2jW13CIIgCCKbWMLk/+60Ku/yOKxtD5FFrGfy16BVec3i3hDZ
xb+Y/DWYapot78rY4ntM/j20IvQ7mSAIgiAIgrADuKKqXS7XmYFAYLnP53vJ
6XQecDgcfa4o4YmCt8nobrLKFSV+zs/P7wt+FmOK8Xht8ESpbrdbuKL+6vUG
vuF01sxg7FsFjMUCjDWVMHZPJWPLx/NMY2zpAv6vVB9krPHDjLV8in/+3zwX
889+yF9/mZPTfEtOTlNzbm7z6ry85ofc7qbNXm/zf/z+6MsFBS2vFxe3vlVc
3PZOSUnr/lCo7UBZWdth+HvgTqqrW6H5oebPX6cuXLhOnTVrtVpfv0ItL+/Q
/Dlw6sAThcDvI9w6cP4MFnwHvp2GhhWaowguIviH4B0yepmEBwgOIFzX6O6x
yhklXFF63a2a92fChG7NXwWvUlVVhzaXZFcUaoK7R3cN6T2Ao+hIvijhERqN
HwpuqOQkXFHwLyVcUfB4ITgOXxde8RnuZ01Nlzp+fLfmfYIzCv2HI2rq1B5+
bAWfe4/28+zZq9U5c1b3fr5Kc0VNmtSj3fu6um7NFYU1gvHgUOJrSHMmoZ7k
3grXl3BFYe3As4TroJbx47u0ulAfroc1gr7jfOEcE14y9Bh9TPQl2RMVHdQD
ZVwfyb4ouKn0DO2LQi2oC26sysp2Pn/dcyWcaRgbNQgnmFgvZpxR+lpP3HPc
W90TpV0zznOI3+v3+et7fP57nM6mtxyOpp383G38dSs/tpGP/w9e4wq+Zpfy
e3jTkiVrr/nEJx647PzzH/3alVf++3PXXff0R++558Xj29p2zo3FdjY8+uhr
lRs3qkWqqnqam5vzZG/QBEEQBGHg50ze36avHGXN35JYsxV5fZTzJsxh131T
JI5tZ8zMiyAIIlVizPr9ywyy91jakwliaMJM/jNHoVBG9t+DKhlQrx3zIggi
/YSZ/H2CQqHoUZh5YhlQrx3zIoixhsKsf+ZiJsfOpn2E9hP5KCzz7nM2rmGz
CZvsAUEQ9qEwe57vmMSx7Q5BEARBZBPfZPJ/d1qVO61tDZFF4L+Dyvb/rV9j
/mBte4gsAv/Ns+z1Z0WusLoxY4xGJv8eppoNlneFIAiCIAiCIHScPNVer/eM
QCBwj9/v3+ZyuTRXFD+mOZrgikIG8zul6ooSTihcHz/DE2U8bvwMrij4q3hd
cf5+j88XiHm9wYsdjnkLGQuPY6yFJzqJsWWz+b8GHJuX13RSXl7jJ3Jzmz/v
dEbOdziaL8vJabw6J6fpBv56N3/tzM2N/I1//i+Ho+lpfs6LHk/kVZ8v+kZB
Qcue4uK290Kh9vfLytoO8cTLy9vV8nJ4gLq0jBvXrXmT4IiaP3+t5hDSPUqd
miMIDh14duDKQfDe6Njp742Cc6dF8+vADyScRPAT4Xo4B84p+H+EYwfvcczo
8TmSM2ok3ijhNMJ7eIzgMIK7CoEPCX4gOIBQBwJXkc/X0uu90j1MhYVt2nWE
K2hoV1RkgENoOEeU0Qs12PXgq0LdcCmhp/AsCVdUMNiuHReOI7zHMXwGbxTm
WV/frTm78Ir7UVene6RwbOrUlZofCg4p3B9xHvxONTWd2v2C8wnjoQe630n3
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
78vPb9lYUtKyNRRq3xYMtu0sKWl9s7CwdU9hYcu+goLW9wsKWg4VFbXG4fkp
K+vs80MlHFGdWuCJggMJbh7hf4IjSLiE4AjCZ3D1wOWDV5xvdErB3ZPwFBn9
TC0DPEZ4HwrpvihcC9fBMbig4NERnigE3ij4onT3ULPBlaQ7o+D60X1Jgzuj
RA2DHcf3jK6oQCCquYww/8S89HOFRwr1wlsknFnl5QlXFDxDwzme+vuiBvqh
MH+RZF9U8ndwjj5/fQ7CC5WYU2J+Q7m0BvYkkWSnlPBBGc/DexwXLim4jjCu
7lcSc4oO8FoJ/xh6WVfXpY4f360F73X/FtZgu/aKn8eP18+BN6qiolP7DGPh
vvr9EX7tZi36PURtbb3OqMGdUPBLJTuj4G3yeFo0P5TT2cL7DG8ZgjXZFE+k
WTuW7Pwy74mK9Dq04LjSPVElJR3anHhfDvJn+F2+zl7mc90wf/6qzo997L6b
v/zlh37y7W9v+NaVVz5+7q9/veUTt9zywkmNja8eu2rVzjn33//ylPXr36x9
/PF3yl98cXfxjh1xv6qqLp48nhzZmy9BEARBWMASnh0s/X+vPnEUtX5WQp1W
5fOjmC9xZOy6X4rEse2MmXkRBEGkSoxZv3+ZQfYeS3syQQwkzOQ/axQKZfCY
RcmAWs0mNoJ5EQRhPwqTvy9QKJTBE2bmiWVAvWajjGBeBDFWUJj1z1rM5NjZ
tH/QPpJ54HdVOu652fWspKkeGTHbA4IgrEVh8p5pu8a2OwRBEASRLXyLyf+9
aUX28tD/nvrY5gCTvw6tyGtWN4bIKpxM/hq0IldY3ZgxRiOTfw9TzUbLu0IQ
BEEQBEEQAyngnBoIBK7zer1P+v3+ffznOPxQIvA5Ca+TFa4o4YES1xbHBzvH
+LPuiirc5/NNeM7j+dRat/vaqNu9vNXlalnrckUf9niiTwQCLc+VlLRuLy9v
f72mpnN3bW3X3qqqjv0VFe0Hy8raDgeD7fGSEvhnOtTSUt0TNW6cyEBHFDxI
oVC75j2C/0c4geDcEX4feJFwvtErhe/pniCjR6i/K0o4h4xeouJi3Rcl3FQ4
V7ii4IdK9kUNdEY19zmj4AEaygk1lBNJeITgDYI/CN4lvAovFPxHiN4P/RW1
ClcU3EXoIeaP83Eds64okYQjSvcpoQY9Ee1nBD0Rriijc8joizI6kMR7cTzh
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
YXiEJkxYodbX96gNDSvVGTNWqwsWrFWPO+5edcmSder8+WvU6dNX8s90VxQc
PsLZU1zc35t0JEeU0a+ECAcU/Ebw7MC3hMBBJDxECRdRf2dUfx+R7g/Ce/iB
4C2Cy8jpbB7gbkr2ROG48EThOxgP3x/OFZWYi1670ROF6yWPAccProtroW/w
NaGPcCDB34RUVnZofqdgsF2bB+YpfFHohT6f/oE3SDikhCsKY4RC7ZpnafLk
HnXWrFVapk7t0XxfcC9hDMwR9Q7n0Brcq9Xc1zN8X/QNdQpnFHo3mBtqsIg+
il7jGHoEN5Toj96b/q6oZNfUYNczeqISvqhWzRelJ9LrdLqNf3Ydz1U8l/Fc
zOdyAb9nF/J5fZfP8Ro+5xv53P/Me3AXzzIe3Odob/+beQ8a+fnL+XeXaY6o
QOAuXsNtvJ5beF03xgsKfru/qOimF0OhOx8IhZrai4palgUC0abCwpYVfG6P
1NV1PcefsV319Sv28vkeLizs5DV08Ou28utrayzu80UOu1zNB3Jylu9jbPm7
vI7djDW+npvb+DI/51mfr/Vx3puHKiraV0+c2L18/vyVN5522t+uPOecB8+7
/PLHPv673z11THf39rpeT1Se7A2VIAiCIDKIM1l6/3599ShqbE1zjVbkslHM
kxgahdl3rxQT48teT3bNiyAIIlVizPr9ywyy91jakwkiQZjJf8YoFIq5KMw8
smsdSQiCkIfC5O8BFArFXGLMPLEMqNdswiOYF0Ec7eB5kLV3ZNO+IaKYnBuR
ftK1npQMq0dGwiZ7QBBEauBZs+MZjpkYW7Fp7EzZowmCIAhCJpcw+b8zrciV
VjeGyDr2Mfnr0IpcanVjiKwC/81znMlfh6nmCqsbM8ZYzuTfw1SzyfKuEARB
EARBEISOx+VyTfX5fF/3+/0d/PUFj8fzrtfrPQxvE/xMwtGEV3idcByuKCQV
T5TRFYX38FEZx8R7HBPn4Rje8/o0V5THo7mi+PFF8YqKSw7X1d0Sb2joUCdN
WtmXhoYeLdOmrVTnzVutLlq0VsucOavUKVN61PHju9Tqat3ZU1LSqvl6BnNE
De1VSniidIeP8EMlu5CaDUl4iBLOqKj2fbiA4AYqKoKzSrirdI8QxvF6W7Tv
GZ1RcBzl5jb1eaOMnijhpsIYCR/VcJ4ofS6oB98V1092L+Fn+IRwbVwPfi04
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
+7/8/v2POnXq19UZM77A+/7Zg/Pnn/Xq8cd/qfUzn7nm2xdf3HXGd77z6KmX
XbbhE1df/cQXbrnl2cvb2l66qb395fbbb3/u/quuenzzhReuf+Gii9bv/OEP
H9/5m9889cqNN259/ic/2fzU2Wc/uH7KlO6/lZS0tvF1cceMGSt+e/LJsR+d
e+6D3/r+9//1xeuvf+aTd9314iltbTuPi8V2zn344dcmb9q0d9z69XtCW7bE
81VVhScqV/amShAEQRAZzK9Y+v6W/dER1nZ+GmuzKr4RzpEYGoXZd58UE+PL
Xkt2zYsgCCJVYsz6/csMsvdY2pMJQkf2s0WhUEYehZknlgH12jEvgiCsIczk
P/sUCmVkiTHzKBlQrx3zIoijmTCT93zFbBjb7igm50bII13rSjFZjx3PWKYk
bLIHBEGMDrv2j5iJsRWbxs6UvZkgCIIgZOFn8n9fWpGlVjeGyDp+z+SvQyvy
J6sbQ2QdtzD56zDVPGN5V8YWJzP599CKfNDqxhAEQRAEQRBjHl9+fv7kgoKC
C3h6PB7P9ry8vAM8fc4m+JngbYLPCX4oeJsQfAZvE2KFKwrj4D3cUGJcXFuM
Z3RFifPgi/L5/JorqqRksVpV9W11woRb1YaGDnXixBWaNwhOourqTs0vBIdQ
MNjGo7/C06O7ekbviRJuH93dk3A16W6l4R1ExghfFPxM8BihFtRbXd2hOZcw
j/HjuwfMCT4p3bWk14Dvwxs0uCsqanAWCWdUS5/PSPiTcA3hiXI6m/tcUcnB
cZwDd5JwUQmHEupCjah50qQV6owZq9R589aoCxasVefOXa15o+CQwuc4D3OF
Bwq9TPZtCc+TcDThXsGfhV7AB5bwgnVrvQqF2rVadH+S3g/MCz3Cd3HvxVrA
3DFXjGHmfuEcXA8uqpG6ohLOqMTa0c9rUZO9Y6hf3A+MJfxQ+nGjJ6qVz7Gl
t09LeW7nP9/Aj1/L7/0V/LwL+Hc+y6+p8GvP4ZnM08B/ns5fF/IenMZ7d756
6qm/Ur/ylWXq97/fo15zzTr16qtXq9/6Vov60Y/+UZ016xre6+/xPl/C790F
/D7+Nz92pjpz5qk8yqHZs094efHi0+8+44xvfPGKKxqPWbbsmRltbdsXrF37
uvLgg2989vHH3/rOpk27r/vHP167p7V1W/fddz93/9Klz21sb39509q1r27g
ub+5+cVVV1/9ZONnPvPAH0488d6fnXba37/7pS89dP5VVz32uZtvfvajTU3b
Tuzp2X7Mww+/MePf/949cdOmXeNeeUUN/fOfuwpUVfXwOHhyZG+oBEEQBJEF
rGTp+Vv2I6OobWeaarMqS0YxR2JwFGbffVJMjC97Ldk1L4IgiFSJMev3LzPI
3mNpTyaIo/u/j6NQjubEmHmUDKjXjnkRBGENYSb/2adQKCOPwswju1a75kUQ
RythZv2zFTM5dsyGsWnfIEA61oLZdc5Ydq51eiYIQj5hJm//Umwam/YkgiAI
YqxzPJP/+9KKfMXqxhBZx31M/jq0Imdb3Rgi61jP5K/DVNNkeVfGFpcz+ffQ
itD/TjlBEARBEARhNUUej2dJfn7+zwKBwCb+fq/D4VCdTqfmZ4LDCZ6o0tJS
zc+EY/AzwdOU7G6ywhUlfFTi2vjZ6IoSbioch08Kdfj9Af4a5McXqRUV31Zr
a29R6+ra1JqaLrWqqkMtL9edQHD4CBeP0dOTnJF6ooyuKLiMhKcJ7qeRuKJw
rnAvwRFUWNjC+96muaLghpo4sVudOrVHnTFjpTp9+krNvwTPEtxI8CbBj4T6
UQf8UPAsIXA9ud26c0g4owKBqMFbpAceKXyO7wpHlLjGYJ6oZFdUwkelX6+4
uJXfjw5+P7o0b9fMmavUBQvWqIsXr1OPOWat5o2aM2e1dnzy5B7tfpWVdWi+
KDEH3d+UGCvZFwVX1rhxnX0R9xuf4Rr6PHRPFK5bVtauealQE4Lv4HzcQ/ii
xFyPdK9QC+qA42kwR5RxHQn3k/A/JXuj+ru7Wg3erpZeb1eitzjW3xMFHxY8
URFe9zKeO/kcbuLHr+HnXM7PPZ9f67P8mqfyWhbwNPBU81Tx1PI6J/G1s0hd
uPCz6n/914/UK664Tf3lLyPqdde1qNde+xf1u9/9g/r5z1+tnnDCt/m9+yo/
71z12GPP5u8/ok6bdpza0DCP39uZBxsaZrw4dersPy5e/KEzrrgiXL9jxztl
b775Zu327XumvfTS3mNfeWX/mdu377vguef2XPXEE7uvf/zxN+/YtOnN6ObN
u1u3bHl7Oc+t//znruva2l7+0e9+9/Q3w+HHvviznz3xyT/96T+nRCIvHBeL
7Zz7wAOvTH3iiffqNm/eWbF7t1q8Zcvr+fF43K2qah5PruyNlCAIgiCyiFqe
11h6/p79tRHWdkOa6rIqF4xwfsTQhJl990kxMb7stWTXvAiCIFIlxqzfv8wg
e4+lPZkgyA9BoWRzFGYe2bXaNS+CIFJH9jNPoVBGlxgzTzgD6rVjXgRxtILn
QNazZcfYdkcxOTdCLgpLz3oIZ1g9MmL2eScIYuRgj5H13Co2jW13FBNzIwiC
IAiZXMrk/760IhOsbgyRdbzD5K9DK1JmdWOIrMLBc5jJX4ep5vtWN2aMsYzJ
v4epZrPlXSEIgiAIgiAIxkrcbrfi8Xiu93q9z/r9/vfhYIKXCa/wNsHLJHxQ
cDPhmDgHnyFWuKKMDijhhRLuKOGmMo4nXFGBQL7miiosPEYNhS5Vy8v/yAPP
UrtaUtLGj7dpzp5AoNXg5hna+TQSR5TRC4TrjsQVlfyZcEXpPqSI5gyC4wr+
o/HjuzQ31KxZqzTH0vz5a9TZs1drzqgpU3o0j9S4cV2aLwq1wCsETxKup19T
dzq5XLoLKuF1Sjij8DPGxfhwJonvJvuh4G4Swc8OR6TPFyW8Rrgu+hIK6fXD
dQUf1OzZui/qmGPWaL4oPevUuXNX8/n1aO4mMQdcS3dFif4kfFFwX6Fe9AiO
JnipkJIS/RXfh08J5yJwNKGXuH59fbc2FvqGTJjQrTmncK2En+rIXi/MGdfF
PI2eqIFrqqWfKyo5xjU5lCtK9FUEP6MHqMHhwLrRPVG5uTfz+f6Cf345v/Z5
/Dpn8RpO4VnMM52nhtcI71uIv8drlVpRMYWvqQ+pn/nM19XvfOcaNRz+vfrj
H/9WveKKn6kXXfQD9XOfu0g99dRz1eOO+6S6aNFH1IULT1FnzlzE7+lk/t1a
3rvqg2Vllc+VlVX9vr6+9qQvfOHUsng87lVVtZC/lu3bt2/8u+++P+/dd+On
7d793rm7dx+68I03Dnzv9df3/fiVV/b+9NVX91/56qsHLt22bd95Tzyx+3MP
PfTGR9es2X5iZ+f2Y1av3jbz0Ud3Tnz66b3Vr7yyJ/Sf/7xZuH79Kz5+bSf8
UDw5sjdQgiAIgshSPsXS8zftp0dYV7b97zHdPML5EUMTZvbdJ8XE+LLXkl3z
IgiCSJUYs37/MoPsPZb2ZIKQ/1xRKJTRJ8bME8uAes0mPIJ5EQSRGnjeZD/z
FApl9FGYOZQMqHUkIYixToxZ/1zFJI6dKXshIZ8wy6w1ka56ZCRssgcEQYwM
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
vaWzyCEtMQ+V/SIIwkJn6mtXBEEQk5H5DNazyEP13iCrXwRRiMSY2t/RMvcl
2heIbJFVD0dSG4wVZn04DYIgDo/O1O5FMtunPYYgCIJYSJQx9c9GN6LT7YEh
Co4vMPXr0I2oc3tgiILju0z9Osw1HnF9VBYWOlM/h27EqS6PC0EQBEEQBJHf
2PxQZmiMjQQZG4gwdnMZY7dUM7alkUeH39+1VtM2HevzJU8JBLrfGAr1nF9U
1Pf+0tLuj5eW9lzJ47qSku5botFUfzjcfUcwmIQj6pFAIPkEf/1cJJJ6ubi4
+2B5ecqort5k1NV92Vi8+DyjpGSF4fdHefgPcdIIV5TwReEz+KIQbrqi4KaZ
zhWFdnBNZWWleQyHw664ouARgicIvqGlS4fMwGucw3WRSPe452iqL8oKuJpE
CNcSXk/nfBIuqKkx3XcP542azRWFfOG4gqMJnicc7YHPRAh3VMZzJe5pv1dq
4l4YD+GMgttJhBhXu5sJ44vr8X2/PzE+hof2Be2hHb5eTf8UHE9wPcH5tHhx
v9HQMGA0NQ1NzA/8UI2Ng3zdDpg+KVwDv9dUT5Q9puaV8V2Jz3vNKCuDJ8x0
hY0VFaX28n7/nY/Dw5rW3atpqct47a236lIw1fkU8zY1pUMrVqSLli3rK16z
Zlv0xBPToQ0b/tcfi6GuHREOBoOtoVDoQh7dgUDgCU3TDvDjhLtpqtfJDV+U
/R6itu01Luof9Yja43GQ5/Q8z5XvMcH/x/NexsgVRRAEQRDzib8y9f83kC9L
zMGtcPobj5gZmfOjK25fZb8IgiByQWdy9i8nqN5js42Yw34RRL6hunaohghi
ZtJM/b8ldIk5qOwXQRAWeP6qrlv6HUAQ06MzeTWXziIPmb9HVPaLIAoRWc9t
p7VTSPuBCN1h34jCZC7WZCyLfFSvd1nhdI8giIWMztTWoMz2ZQdBEARB5BMn
M/XPxlxjt+ujQhQiw0z9Wsw1HnN9VIhC5F6mfi3mGl2uj8rC4jKmfg7diEq3
B4YgCIIgCILIS+yOKI1HgLF0iLG+YsZ+xH8Tbq5jbFOL3795paZtPlrTNp0Y
CGw5IxCInxMK9byrpKT30oqKvs9UVfVdvWhR3w1VVb1JHtsrK3vvKS3t+V1x
cc/OoqLUk5FI6tlwOLWbx8vRaGp/SUlqDE6dmppeo7HxBqOh4TKjqupkIxqt
NUKhiBGJRCa8TXaf01RflJuBtoQXqqKiwgy8FjkIVxTaDgaDhsfjMTRNy8kV
hdcYh9raAaO5echobR02mpoGTQcRH0PTL8THzvQmwWl0qLMp43mCb0lExrsU
t8VkJ5T9/aHfm945ZfdLTf2+3RMFrxPcS5OdTj2miwnn8Bn6FQpZ1wtflNVm
wuahSk54qAIBuzMqNeGMyniXRFhji89xrbj/TL4t9AcuKdwT9xFeJzic4H6q
ru7j67R/IuCGqq6GHyrjiKqs7Bt3RPVOfF/cY3pfVCb3ydHLP7M8Ybxu9vH+
vqBp8Ud53mkeX+T/XD+J12fR7CVteM491/CdeGJaO/fchI8d4pM6LLz+WSOv
v7N5PfwgHA4/HAgEXsGat3vUhMPJbVcU2kDt4/44J2oQr1GT+Mzn8+HfrGO8
/vbw3O7n8Tn+fiOP4iPaBQmCIAiCyEeuZnL//t3sIId3S87BjQg56AcxMzqT
Oz+6gxxUr6EjiZiDfhEEQeSCzuTsX05QvcfSnkwsBLBuVddONvsCQSw0dCav
5tJZ5JGWmIfKfhEEob5mRcRkd5QgChSZz2Cn6BJzkBF6Fn0jiEIDz0uVv6Fl
7km0JxBHgs7yax3NVT5USwSRf+hMXv2lFbcvOwiCIAgin/g4U/9szDV+6vag
EAXJU0z9Wsw1+lwfFaLQwH9/uY+pX4u5xifcHpgFxm1M/RzmGn9yfVQIgiAI
giCIPAWOKPhkrg0yNhDhr0sZu6WasR8t4dHh93et1bSeY32+rlN9vi1v8vvj
FwSDiQ+GQqnLi4u7v1Be3vfNRYv6bq2pGRisrR24o7a27/7a2v6Ha2r6Hlu8
uPdp/tk/Kip6Xywr6/1XSUn3vqKi7gM8xoQjqbp6wGhs7DKWLPkfo6bmbKOk
pMWIRouNcDjjixLOmKmuKDd9UWgDbQlXFJxQwgtlb1+cCwQC5m9nn+/IXFF2
XxT8QnAPNTUNGW1tw0Zr6xAfj0HTSyR8UXAewZlk9zhZjibLgyQ8TQjx3u6O
sn8OdxLCfu3U79idUsIPNZ0jKuOZsr6P+8LnBO8R8kb+8Cllotc8V14uvEnw
I1nuJ+SDe2V8TnZnlOWNyvioLG/UVGeUiEik2/wc14l+IseZfFE4D28Vvouc
Mq6nXtMXJQJrVjihpobwQImYzhVl91ghd8zr5IBHC76oXuRykF/zL78/sYuP
wW94njcxtvl8xrprHRR2tn4oO3xPYCWhUOhYXhOf53V4RzgcfoHXxthUp5P9
vduuKOFnE+fwOeoPr+Fo83g8Yz6f7xW/3/8Qjy/xc6/heZfl0G+CIAiCIPIL
eCBl/g38Igc5HCc5BzdCc9APYmZ0Jnd+dAc5qF5DRxIxB/0iCILIBZ3J2b+c
oHqPpT2ZWAiorhuqH4I4PGkmr/acokvMQUboWfSNIBYyeP6qrtds9yOCWGjo
LD9+g8v8PeJ2pLPoF0EUGrKe3U7rppD2AhG6w74RhYusupga+ZaPiiAIYmZk
1n7aQfu6xPZpbyEIgiAWEpuZ+mdjrvE110eFKDQamfp16EbE3B4YouBYz9Sv
QzfiVLcHZoHxe6Z+DnONhOujQhAEQRAEQeQhwhG1LcpYvIKxG+sY29Ti929e
qWldGzUtfqLPlzozEEie6/enLtK07ksDgdRnw+Hua4qLe24sK+tJVVb27qip
6f9FXd3AA42NA39uahp4srl58NnW1sEXmpuH9ixZMrC3vr5/f21t38Gqqt4x
y7PTZ0ZFBdxB/UZdXZfR0HC1UVNzvlFa2mpEoyWmKwreJuGjcdNJM50nSvhp
7K6oqqqqiTaFK6qiosJ8D1eUx+MxnTW5uKIsNxGcSn1GY+Og0do6bPqi+Njx
MRkwFi+2fFHFxd2my0g4j+y+pOkCn4nP4SCClwht4T4i4CvCZ9b107um7M4o
uyPK7qESnih8V/ib4EWqru4z6usHjKVLh8xoahrkfRzg5/qN2tp+04W1eHEf
H2esCeRj5SF8UdOF8GOJMeDr0eyn6KOImcclaTqnpvqivN64eT/kYHdF2f1P
GDPhosLYZRxVGe9XZnwzvij7fcS4i1zsni4xp+Ew1kU/vx7znjrA5/0Fny++
k+c5yNjmjzHWtcqqXal4QqFQI6+HC3hdbOb18RRf9weEo03UDI5u1yPqULii
RL3ZXVFo0+/38znz8rn07eOv/8jjal6LxzNyRREEQRDEfOMfTN7fwL/loP3F
Ett3Iw446AMxOzqTO0e6gxxUr6MjiZiDfhEEQeSCzuTsX05QvcfSnkzMd7Bm
VddNNnsCQSxUdCav9vQs8khLzMPtSGfRL4JYyORLXcdkd5QgChxZtZrN81KX
lIOs0LPoG0EUEnhmqtwP8uW3A+0HxFTmYm06rZO5ykdFZDMGBLHQiDG1tadL
bF92EARBEEQ+8TBT/2zMNS50fVSIQuNNTP06dCPe4PbAEAXH+5j6dehGlLs9
MAuIEqZ+/tyI/3J7YAiCIAiCIIi8wsPY9X7GBiKMbeK//zfXBQKb2v3+rrWa
tuU4ny/+Op+v681+f/fbNa37g4FA6nK/P/mFQCD5bR6bwuHUUHFx98/Ky3vu
r6zsfaSmpv+xhoaBp5ubB55rbx95cfny4ZdXrBjZx+PAsmUjB9vaRozm5mGj
oWHIqKkZNP1QVVV9Zixa1GcsXtxl1NZeY1RXXzDJFRWJRCa5ooTXSYSbrii7
Lwrn4KRB2P1UwheFa4PBIDw1hqb5c3ZF4QiHVm3tgOmIam8fNlpbLbcSvEpw
LvGxnnApIeBGyriKJgfORyJW4D08RRUVveZ4414IjDvO4TPhQBKOJbszyu6E
muyISk6E3XWE7+NeuDc8UZj7FStGeWw1OjpG+Pshs284op/wYi1dOsj73mc6
sUpL7c6opNmm3euE1xlvVXKSp8ruxhKBMcB4CIcTcrN8Ubhv3HbfOL9PwhwD
XGefH2s8U+NereT4HBzq4hJt2Z1cwg9ld3MJL5fdxWWFcGBhrvv5WCC6D0Yi
yRc1Lf4oz/MOXqtXMZY8hbEbi+dgn6jgNfj6aDT6XV4bf+E1sM9efzJcUeK+
wg0FV5RwU4n3+Mzmitqvadqf+PEackURBEEQxLykn8n7G/gvHObwisQcco09
DvtAzIzO5M6R7iAH1evoSCLmoF8EQRC5oDM5+5cTVO+xtCcT8x2sWdV1Q7VD
EM5IMzn1l84ih3zZM5wGQRCzozP1dUr1ShDO0Jm8+tOzyEP1XpFNxLLoF0EU
EljbMmom7bD9tKT2ZYbusG9EYaOz/FpPc5WPiog5HAOCWGigNmTVXdpB+7rE
9mUHQRAEQeQLcHmofi66EavcHhii4LiCqV+HbkS9y+NCFB7fYerXYa7xsOuj
srDQmfo5dCNOc3lcCIIgCIIgiLzB8DCWCDC2LcrYpqpgcMtSvz++WtM2vdbn
i78+EIif4/cn3q1pqf8IBFKfDwaTX+XHHwSDqW5+/vZAIPHLUCj5YDSa+nNp
afeTFRW9z9bUDLywZMngntbWob2dncP7V6/eenDdutGxtWu3G6tXbzdWrtxm
dHaOGu3tW42mpiHTIVRTYzmQLGfUZqOy8itGefnbjOLiViMSKTZCoZARDocn
nDHC2WT3RNk9Tm66anCEE0o4aoS7Rvhq8Dk8VoFAwHRGhUJlR+SKyviIekxn
E/xNjY2DRmvrsBlLlw4ZDQ0DRm0t3Fq9/PqMswjeIXy/rMzyTJWV9ZqvxT3x
OQL3xTjjPrgfXFRwUPH5MurqMAf9fOz7zHvgu8JnBAeScBoJb1TGHZV5bw/h
sIIXCfOKuV6+fKuxdu02M1at2srfj5ixatXoxHl4pOCPsnIaMPNFX+Bcwv1w
b+GMEiG8UcIdhbysHDL+JuGIwr3groKLCkecQ5/sDioE2kAf4KqyHFGpibGw
xiAxyZ1lHwt8z+6NwnetOUhNzJkYT9wHbSHvTJ+SE+HzoU1rXfBc94VCid2a
Fn/M4+m6l7EtNzDW9XbGehvnYLMoi0ajOl/rX+exk7/ex8P0qcnyRE2tb1GH
4j1cUWhf0zQ+Vh74ovb7fL4/8dfX8HzJFUUQBEEQ849PMHl/A9/PTIfuYfmz
xBxyjecc5E/Mjs7kzpHuIAfV6+hIIuagXwRBELmAfUbG/uUE1Xss7cnEfEd1
zVDtEIRzdCavBvUs8lC9X9DeQhDugRpRXaeItOyOEsQ8AbWiugZl5SArCGI+
onovKLR9AKE77BtR+MRYfq2pucqH6oog8gOZNZ920L4usX3aUwiCIIiFwilM
/XMx13jJ9VEhCpEBpn4t5hqPuz4qRCGC/z/UqtdirrHF9VFZWFzG1M+hG7HI
7YEhCIIgCIIg8gIPY2mN/zM8wqMqGLyl2e/ffJTPFz/ZckQl38+Pl/v9iS8G
AsnvBAKpzcFgcpi/vjMQSPxG0xKP8M8e4693hcPdzxUVdb9YWtrzcnV13ysN
DQMHWluHxjo7txqrVsEBtMNYt84KOKPWrNlmrFwJX9Sw6SoSvij4kSoqNhul
pV8yiovPM4qKLFcUPEwIeGFmc0W55Yua7l7CE4UchB9HfAZnTigUNJ1Wubui
us0jfE21tQOmYwlOJ7idGhsHTKcTxgnep6Iiyz2E78APBScTPhO+J1wj7omA
Gwlj3dY2bHqbEJ2dI8ayZSPmOctHNWjOBe6FeyIvy5V0qDdqOkeUCHxud0XB
e7Vs2VZz7uGEWr16lK+BraYzCu/Xr99ubNiwfcIjBWcUPFLwRiFna22YviTz
vrg//ExwLGUcT4f6okKhpDlGcGuVl/eYnq2amj5+z35zLJEb+gZfk90V5fHE
zXtY3qfkJLcTzlt+p7gtrHZxHp/zujCvx/fsceg9hO9KRHI88LprzOPpOqBp
8f3BYAKeqD1+f+oZ/r0/8Tbv0bSuW4LBrkt4/qsYiwUk7xdlfN0fHw6Hr+Gx
k8c+y40WMutBhqdtam3b61K8hqfN5/MJV9Q+Hn+EK0rTNHJFEQRBEMT84zVM
7t/BNzrI4WeSc8gl/uYgf2J2dCZ3jnQHOaheR0cSMQf9IgiCyAXsMzL2Lyeo
3mNpTybmM7JqW9Z+QBCE+v8uXGYOqvtFEAsR1TUqIia7owQxT9CZvDrU8yAH
lf0iiEICv3FV/naW1T7tBYRbzMUadVovc5WPishmDAhioRBjamtOl9i+7NAd
9I8gCIIg5oLLmfrnYq5xp+ujQhQi8CypXou5Rr/ro0IUIvuY+rWYa1zu+qgs
LG5l6ucw1/iz66NCEARBEARBqMTDf+aNR8zL2EiQsd4yxm5r8vsT63y+3lP4
8e2BQOoyvz/1ZX68IRhMdAcCyR/z17/ir3/PP/8Lj6d4/J3Hbv7ZnlAouTca
Te0vKek+WFkJF8+A0dgIvxEcRPARwQsEP9A20xUkXFEdHSP8mkGjoWHAqK21
HEhlZZuN4uIvG0VF5/PoMMLhUtMFg4CTqby83AwnfqdcPDXTeWvs58V7eHLg
sUJ+fn8gJ1eU8EUh4HnCeNTXD5o+rSVLMk4tjDHcR3zMJ1xRcEPh+urqPtN/
hPe4HzxIkYjlesI53KO9fcQcf/ia1qwZNdats+ZkxYpR8zO4qeB2gququrrf
dE/BG4W87M6o6XxRmmaF5WnK5IZ7tbRYjiq0DU+U5YPaar5G+8gDrigc16+3
Ajl2dAybOWEM4HcS/Uff4V8SzigRcC/BwyRcUVYOPebY1NUNmOPZ0jJkBtZe
WVmP2Rf4oey+qIxzKnGIIwrXzhT4XDijpgbOT++IEmG2fZCxLft57GVs8x7G
unZ7vVte8Pniu/g9dvJc74tGE9sqKpLX8/wvWbZs+9HLlvUVS9474Io6IRwO
fzUSiewMhUL7sOY1TTPrcqrLya0aRK1XVFQccl/xnucDR5T571ePx4OcyBVF
EARBEPMb/vtI2t/CL3LQ/haJ7ecaf3GQPzE7MSZ3jnQHOaheR0cSMQf9IgiC
yAVZ+7MTVO+xtCcT8xnV9UJ1QxDZozN5tajnQQ4q+0UQCw08f1XXpwiCIJyT
ZnLqMJ0HOajuF0EUCqr3gULaA0ToDvtGzA90NjfrKpZn+agIp2NAEAsF1ISs
eks7aF+X2L7s0B30jyAIgiDmgi6m/rmYa1zn+qgQhUYdU78O3YiY2wNDFBzr
mfp16Eac4vbALDAeZOrnMNdIuT4qBEEQBEEQhALsfqiEj7G0Znmi0kWMbeb/
Ft+8xudLner1pi7UtMSn/P7Ut/x+OKJS6WAweX8wmHiEv3/c708+o2nJ5/g1
L2pa/GUe+/i5A/yasVAI7h74jnqN8nL4ivqN6uqBcTfPkNHaOmy6oZYt22oG
nERw9QgHUsYVtcUoLv6qUVT0TiMaXWm6lzweLzww/P4R0xsDf8x07hg3PDVw
1BQXF5tHcT/7e+GqwmucQ05w5mCQNc3viiuqqMh6XVHRayxe3G+Oj/BEwQMF
jxT8R3A2IeBvwjlcD48SvEjCEyW8TjjCrwT309KlQ+YcrFpleaI2bNhhbNy4
wzjqqO2mmwkOp87OrUZb27A5d/BVIY+Kir5J94WnaaovSriiEPgcPifhvWpo
GDR9UZh7+J/a24fNdYF2sDaWLx8x24a/Cp6oDRu2m/khJ+QKp9SyZcOm60mM
BTxPGAvhrkK7wtOEc8XFlidq8eI+0wsFN1lbG/o/MuEqq6rqNa+13E0ZV5Td
+zSdI8p+7dTvie9mIuOHOtQRhc+7xjSt6wAfw1d4Xf2Lv/8nY1ue57GLsa7H
PZ6unbwOfxeJJH5eVdXT39jYf8Pq1VuvOPHE7Re++c2/2PDe995dYdW4NCa5
ooLB4D7UJDxNdofbXLuiQqGQuTeYmxy5ogiCIAhiIXA7k/e38P9x0P61EtvP
Nf7gIH9idmJM7hzpDnJQvY6OJGIO+kUQBJELsvZnJ6jeY2lPJuYrsupa1l5A
EESGNFP/DJOVg4xIZ9EvglhI5MtvgWz2HoIg5P733/mQg4zQs+gbQRQC+H2r
8nezrPZpHyDcRGf5tbZic5QP1RdBqEXmMzLtoH1dYvu0lxAEQRALhUeY+udi
rnGR24NCFBz/xtSvQzfiDW4PDFFwvI+pX4duRLnbA7OAKGbq58+N+LTbA0MQ
BEEQBEHMFXY/lDHuiPpfP2PpEGPboozdUMFYvJ6xrlWMbTnF602+y+tNfcbn
S3xX0xIDfn/yXn58RNOST/Dj33ns9nq74LDZ6/XG9/E4aDl04AhK8eg2AgE4
e+CM6jb9PfAelZX1mp6g2lrLGwXnEZw9CLyuq+s3vT/V1X3j7p84/963jWj0
Yn6f9fyeFROuKDhpKisrJ7lj4JQR4Zajxu6Fwjm0W1RUZJ5D28JXhcC1wWDQ
9EVZrqjSnF1RIjB2GBN4mhB2N5LlgLJ8TPAcwckELxK8TDhmfE6WQwmB9/gc
4w1fFJxN8C9ZvqjtpivKHqtXbzOdUvA5wemF78FHJXxRaBftT3VFCbcS3uMa
5Fte3mt6qjDnuBeisTGzHvC+uTnjFIMzCo6oNWu2GWvXbjPzsdxRo6ZTCp4p
XI/vYWzgg0K/MQ7op3BUwQMFDxmug5vM8lJZgdc4j2vwHbicZvI+Hc4PNZsz
6tDv2x1R8YOBQGI/H8+Xeb4vlZZ2745Gk38PBhNP8Zr7i6bFH+RjfG9RUfIn
ixf39Le3D920YcPoVaed9pNPvvOd97z7Ix/51ZlXXvnQ6muu+UNVIoEal0aZ
pmkzuqJETbhRg1NdUeK+9joXbjiez4Qriteg6YriQa4ogiDyne/w+BGPH/K4
mcdNPH7A4wYe3+dxPY/vzRBfn/t0CSKvQA3I+lt40kH7X5DYfq7xcwf5E7MT
Y3LnSHeQg+p1dCQRc9AvgiCIXJC1PztB9R5LezIxX5FV11QzBCEfncmryXzI
QUboWfSNIBYKquuS6pMgjpw0U1+PqveObCKdRb8IohCQtQc4rRVZ7csM3WHf
iPnFXKzVbJ4xhVg7bo8BQcx3ZNa5k1rTJbYvO3QH/SMIgiAI2VQw9c9EN2Kt
2wNDFByfY+rXoRtR7/bAEAXHt5n6dZhrPOz6qCwsTmTq59CNOMPtgSEIgiAI
giCkMu6HEo4ouGOu9zM2EmTs7jA/ljC2qYqxWxv4sZ2xrvWMJU9hLP4OxrZ8
2uOJf8frjff5fF33+nyJP/HY5fUmd3s8XS/zeIVfc4B/Z8zy4CR4JM3g15gB
P5CmwRGUMN1E8BTBFQSvENxHwocE31FlZa/p6MERAQcR3EglJXBFfZ9/5+NG
OHwcv9ci/rvUZzpp4GuCKwph98cUFxeb4ZYvSnii4L/B+0gkYvpw7K4ohMgD
n8EXhQiFynJyRdkD44RxgWsLgXGC/ygatTxRGGPhaBIuKMvR1T3hcrL8TWJe
rGswzvA2wdEEZxTcTMuXbzW9UWvXjppOpo0bd4z7okbNz9raRkyvEpxe8D6h
DctFNb0nSqwFfA53GPoj+oJ7IES/EPA9wekk3FFNTZY3atkyyxsFX9T69XBY
We4o4ZBCzi0tw6ZzTIwR2sHagtvKulfGQwU/VGvr0IRnqqZmwOwP+oKcs3FB
5RZdY15v134+b3BE/ZPn/zyfi11Llw4+xsfhkcrKvvt5X+7i4zTc2Ni/aeXK
kW+95jU7vvjGN951+fved+/7P/OZ+8/92td+f9oNN+w8Jh5/rI1HRTptaBL3
FniXTuBr/KvhcHiSKwp1KfxtMpxtU71wwiGFNlF7yIHnZrqiNE0jVxRBEIXA
j1luf68jiIXMh5m8v4X/xkH7n5DYfq6RcpA/MTsxJneOdAc5qF5HRxIxB/0i
CILIBVn7sxNU77G0JxPzFdW1QjVDELmRZnJqUs8iB9X7RzaRzqJfBLEQwPNX
dV1SbRLEkaMz9TWZL/uI09Cz6BtB5Duqn8tpiTnQHkC4zVysr1ie5aMishkD
gpjPyHxGph20r0tsX3boDvpHEARBELI5lal/JuYae10fFaIQ6WHq12Ku8bjr
o0IUIvcw9Wsx19ji+qgsLP6TqZ9DN2Kx2wNDEARBEARByMDuhzJ4pDXGEgF+
DDG2LcrYUDljN9fwWMrYpk7LEXXbCYzFz+Jxodcbv9zn67qWH1Neb+Iuny/+
CH//jMeTeIlfu1/4ofg9eSTHI2ELy3/j8cQNfo9JviDhDLLCchrBcwTfEbxG
9oB/qLg4zl/fwONT/JpT+bUN/B4BeGBMZ5NwxNjdNMIX5aYryu6oES4qu0dK
5IH3yMvyRIX56woeG4xwGK6ob87oioLzaTZPFD4vLxdOLcunhKPwNEUikz1N
lpMpNeGYspxS3eZ4Yw74vJohfFFwd8EZhXvCqbRkyYDR0jJkupnWrBk11q0T
TqZRY9UqyxcFxxKcTMippCSTA9oQcyzmHG3hKNrD/CIn5IZ+oR/2gN9JeMOQ
E1xW8EbBGQUXFHxWcEbBXQVPFLxR8FnhiPPIDe6nxsZB0w+FwPulSy1PFAJe
LATO497wU1VW9pljBq+WE1cU1rgVifHI1hFl1YzH03VA0+L/4mPzQk1N79Od
ncN/PfrobQ8effT2e/m471i1altq7drtN7761bdffdppP/3MO95x94c/+tFf
vevKK3939rXXPnLaLbf89bju7sfX/vjHu1rT6V01fX0PFafTaamuKE3TTvD7
/V/lx53wMsHRxF+brijhbsNrN+pQ1LW4l/09Au3B1Ya6xN4AbxXPhVxRBEEU
Cn0st7/XnTn3KRNE3oD/3way/ha+x0H7F0tsP9f4poP8idmJMblzpDvIQfU6
OpKIOegXQRBELsjan52geo/NNtIO+0UQKpFV07L2AYIgDkVWHWfzHEtLykFW
6Fn0jSDmO6rrUURMdkcJYh6j+nmpS8xBRqQd9osgCgHVdZKWmIPqvY2Yf+gs
v9bYXOVDdUYQapD5jEw7aF+X2D7tIQRBEMRC4JNM/TMx17jH9VEhCpG/MvVr
Mdfod3tQiILkFaZ+LeYal7s+KguLW5n6Ocw1/ur2oBAEQRAEQRCuMu6HEo6o
hI+x6/2MjQQZuzvMjyWMxRfxn6YN/NjGYzVjm1/l83WdxOMNXm/8fE2Lf4jH
Z4LB1LV+fzzp9yfu0rTEw5rWtYtfs4dfc9DrTRkiPJ7keEzvyBEeHXiCZrtG
+KPsniP4hCKRbiMa7TKKin5gFBdfweNs/nq5EQgU8ev8/JrwJE8MjnafjNsh
7iv8UDOdQ16BQMB0RUWjVROuqGj0m6b7ajYnFJxNliMrE/AwwakEfxIcUXAa
weeEqK7u4+d7zGvg28K4wQmF+8C5JK7HEfeAz0m4nKY6nCxvV8psE46mmpo+
07EEZxTcTJ2dI6YjCi4myxU1bDqWkBfaw73h/cJ9cD97G/Z2+PoyrxV9Ey6s
6SLjybKcUehLbS3cT4Om56mtbZjnBWfUNuOoo7bz2GasWrXVzLW9fcT8HPnD
EdXUZIXdIVVXN2DeD+MIT1RpaS8fvx6eYzfP11rb07uhMmvbHs59UcKzZtWR
zxffz9f9C3yOHmtuHnrwmGNuv/v00+8YftOb7rzt7LN/ft0559x95UUX3XvZ
pZf++n2x2IPnXX31w2d973t/PGnz5sdfNTz89Op0elfb3Xf/vT6dfrLqoYce
Kn7gASNgGPDESaMsFAqd4PP5vurxeHZ6vd598DOhLuFrkumKmhr4HJ62qqoq
8z18VePeKnJFEQRRKOT6d8Ob5j5lgsgbOpjcv4lHDtP+2yW3n0t8ytkQErMQ
Y3LnSHeQg+p1dCSRdtAvgiCIXMA+I2P/coLqPZb2ZGI+Iqums42Y7I4SxDxH
Vm3qDtvXJeZAew5ByAO1oLoeRRAEceTIquV0FjmkJeVAew5BzI6sGnFa/4VW
+wjdYd+I+UmMyV9jTuuHscKsIbfHgCDmKzLr20mN6RLblx0xB/0jCIIgCNnE
mfpnYq7xbddHhSg0FjP165B+HxJucBRTvw7diFPcHpgFxoNM/RzmGj2ujwpB
EARBEAThAnY/FNwwMY2xRICxeJixdBE/VjB2ay1jtzTz4wrGNm1gbMvx/Pzr
fb7k2X5//MJgsPuSUCj56XC4+yoeP4hGU/2RSPLucDj5x2Aw8WwolNjDPz8Y
CnUboRA8Oj1GINA97gNK2nxAMzt0hEdnOm+OdX18kk8IziK4ooqKUjw2G8XF
3zBKSj7Ej8cb0WgtjyLTQ1Naarmi4IqBMyYajU64aoSvxi1PlPDS2O89uysq
xPtQwd+v568v5sdv8pzjkxxQCOGHKirqNj1P9sA54YqCKwl+KPiZGhutgO8I
Tie4ncrLMz4pXIfPhB8JbiScs7xO3aZTCk4nMXeW48h6jfP4HG2jXdwPTiU4
lpqbh0xHFALv4W4qK+s1r7VcUSnT9WX5omZ3ReE7dl/Uoc4sK4QvCu3AGYU+
WGNhOaOamqyc4IeyPFYjxrJlI6bfyu6KmuyH6jdzr67uN+9VXt7H2+njY95r
rnG/X7ii7I6oyX2xx6G+qEO9Udb6F2F5ohjr5t/BeMX/xfv5GM/zvuOOu330
7LPvvPVDH/rl1y6//Nef/vznf3fxl7704Duuu+6Pb77ppkdfd9ttf31NX98T
R42OPtl5zz3PL73jjmdqH3vshYpdu4yisbGxoGEYPh4eyRvPhCvK6/Xu9Hg8
+7AZ8fdm/Ql3myxnG9pA4DVqD/WPNnEOvirkwWtwH39NriiCIAqB77Lc/ma3
e+5TJoi8wcfk/k288TDt/7vk9nOJixyNIDEbaSZ3jnQHOaheR0cSaQf9IgiC
yAVZ+7MTVO+xtCcT8w2dqa+TbPYAgiBmRtbzOZtnmawcaN8hCHnEmPpaNBj9
7/wJIld0Jq8+9TzIQWW/CCLfkVUjaYftpyXmQPVPyGIu1m0sz/JREdmMAUHM
R2TWdtpB+7rE9mn/IAiCIBYCf2Tqn4m5xvtcHxWi0Hg9U78O3Yg3uD0wRMHx
XqZ+HboR5W4PzAKimKmfPzfis24PDEEQBEEQBHHEjPuhhCMq4WPsej9jI0HG
BiKM7Shl7JZqxrY0Mrapnb9ey1jXq/n7UxhL8X+ndr/N642/X9PilwWDySsi
ke5vFBX1/KikpKe/tLT7p6WlPb8pKUn9hb9+trQ0tae8vOcAHD3w6ZSV9Zne
Hjh84DKCUwh+IOEG0jQRyUMi4yWKHxLCFYXv4l4ZV5RwKf2QxxW87XN4Dit5
LtWmI6asrNT0xCDgiYGfSbhqELjGTUeNc1eUn0fQCAbLeBzFX1/Mc/sm71N8
wgElAu/hTkJgPEXgfTSaMn1KU51NS5cOmd4mBFxQlgPJ8kjhc/iR2tuHTV8S
vEkIvMdn1dV9plcKbWOcMeZTfVGYK8wZ5gJ5CFcVvgvnlHAtVVb2mS4n+1qA
K2qqLwptwBOVmduMK8ryRc3uirKH8EahbYwJfE/IR/Qbfii4oyxH1JB5HuNS
Wztg5o7r8T18H2u6tLSPt9M74YkKBDAm8TG+Jg9aIcYkOdEXxHSeqOkjOR4p
MyxPlHBGxcd8vq5X+Njt4nP7f695ze2D7373L7575ZW/jX3nO49cfPPNf3pb
Mvn4GUNDT52wY8dTG9Ppv626665drfffv6f+Zz97cdHOnUbpk08+GTEMw8/D
C0fUHHiiQJmmaaYriseEK8rr9Zr1V1VVZdakW/Vn1XrmXsIVJeoRbeEIfxxc
UTw3vgaD+wKBwB/5kVxRBEHkO1ex3P9ud8ycZ00Q+cNOJu9v4usO0/aZEtvO
NU5zOH7EzKSZ3DnSHeSgeh0dSaQd9IsgCCIXZO3PTlC9x9KeTMw3Ykx9nVCt
EIQ76ExejeZDDjJCz6JvBDFfUV2HImKyO0oQCwD8plZdn7JykBHpLPpFEPmM
6hoppLoXoTvsGzF/0Vl+rbW5yofqjSDmFpm1lXbQvi45B5kRc9A/giAIgpBJ
JVP/PHQjNrg9METB8Wmmfh26EfVuDwxRcHybqV+HucbDro/KwuJEpn4O3Yiz
3B4YgiAIgiAIIlum+qHSGj8G+DHEWF8xY/EKxoZqGLulmb9ewdjmoxnrOoGx
LWfw1+cwlnwXP/9hrzf5aZ8v9eVAIPW9cDjZVVTUs7W0tO/nFRU9v62s7NlZ
VdXzZHV13z8WL+7dU1vbv7++vm8MLiL4duAjEp4g+HYqKnpNjxC8P3AFCUcQ
IhhMmQE3kOUQspxSds+O3SM01SUknEqWM6iLx7VGaeklvM3jeTTx96WmGwYO
GbhpcIxGo6ZDZqpbZi5dUZFIhPcjMO6KKuX9WsfjYv7+Ov6+y+yf3QllOZaS
E44lETiHzzAO8CPB1YQ5aGoamuSC6uiw3EjCHYXXOLd8+YixcuVWY82abcZR
R20z1q3bZqxYsdW8BvOI+cPc4f5oD+MPH5LwRvG1Yh4xP1PdXcLXJDxRYn7F
fE/tl+hLxoHVPasr6nCB9kUOCKxDeKwwPlir9vVq+aH6zPGz1msv/27vuO+s
h+fTw/NCH5JjfP0d4P3d5/PF93q98Ze93i68PphxoGU8UZYHKuM5m+qHstxS
8E5187G1Av4tfv0Yr8sDvC5f4cc9/P3f+Xg8wufzJ2effecN11zz0KcHBp54
9913P/uGe+557rX33rtr3W9+s7vjvvuea3rggZdqHn3UKN+1yygaGxsLGoah
zbEjSjCtK4q/Nmtg0aJFpr8J9SFqREaIOkft4ShcUYhwOLyP1+IfeVwTCoXI
FUUQRD7zOZb73+2umvOsCSJ/2M7k/U38lMO0farEtnON1Q7Hj5iZNJM7R7qD
HFSvoyOJtIN+EQRB5IKs/dkJqvdY2pOJ+YbqGhERk91RglggyHpG61nkoHo/
oec0QTgHz1/VdSiCIIjc0Zn656WsHGSFnkXfCCIf0Zn638ppiTlQ7RMyiTH5
a81pHc1VPioimzEgiPmG6trSJecgM2IO+kcQBEEQMsH/j1DVz8NcYz+Pufxv
m4j8JMnUr8Vc43HXR4UoRO5m6tdirrHF9VFZWHyUqZ9DN6LW7YEhCIIgCIIg
HDHuh7I7oq73M3ZziLFtUcZ6yxi7pZr/bG9kLNXO/zm9hrFNx/L3pzAWfyOP
8/l3PsDjY4x1XcnfX+fxdN3i9cb7A4FUOhxO3ldS0v1QRUXvX6uqep6uqen/
R3394IuNjQMvL106sL+lZfBgW9vQGLxEbW1W4HV7+4jpHGpsHDRdPJWVljcI
PqGpPiAEXiMO9UklJ1xSM7uE4AdK8rjZKC29wigv/3d+XMG/X2w6mYSbRvii
4IqCrwneGJWuKL8fvqgSflxr+HwfMjTtOv56y6S+i7GwXFmJSSGuwZhgHOA5
qq0dMJYsGTRaWixP1PLlW81YtmzEPLd0qeWLwjx1dlquKDiiNm7cYRxzzA7T
GQVfFOYQ18GnBIeSmDu0CQ+SxxM34IqyfFGWC8nyJGV8XmK+hAPM7vqKRlNT
XFBW4LVYE0fqiZrJHYXxgf9KBPpVVdU74TPDdWgX68vyWKXEHBwMBBL7eez1
++N7eP93+3xdz3u9Xf/w+eLPa1r8Jcsd1bXP49myn4/JQTEmdt+Z5Y9K8vGC
DyrF31t+qFCo2xxb3u5B3u4+3gY8VC/xGn2B3+tpfu8/FRWl7u3oGEpecME9
X/zOdx55z/33v3Dao4/u2fD443vbH3tsT/0TT4xVPvLIWMnY2FjYMAy/8EMp
3JdmdEWhFqqrq816QC3KcEVNdcGJ96h5y9MWQB3ui0aj5IoiCKIQcONvhzvn
PGuCyB96mLy/ib/pMG0fL7HtXKPE4fgRM5NmcudId5CD6nV0JJF20C+CIIhc
kLU/O0H1Hkt7MjGfiDH1NZJN/RMEcXh0pv55lk97i5PQs+gbQcw3VNefiJjs
jhLEAgLPbNXPS9V7SjaRzqJfBJGP6Ex9fcjad2SG7rBvxPxnLtZvLM/yURHZ
jAFBzCdk1lXaQfu65Bxo3yAIgiDmM//F1D8Pc41fuj4qRCHyJ6Z+LeYa/a6P
ClGI7GXq12Kucbnro7KwuIWpn8Nc4zHXR4UgCIIgCII4DFP9UGmNHwOMxcOM
3VXM2I5Kxm6sY2xTCz+3grHk0Yx1ncDYljP4+3N4vIu/v5QfP8OPV/P4Pn+d
4MdtHk/8bp8v/rtAIL4zGk09UVra/WxVVf/ztbV9LzU09O+FI6q1dfBge/uQ
6SDq7LR8RCtXjhpr1owa69ZtN446aruxevWo6SuCn6iubsCorOyb8PEghMNH
+HyEJwiunkx0H+KFstxQUwP328LjW0ZZ2aX8mlOMYLCBR9T00VRUVJghfE1w
xuB8PriiNM1yRXm91/Lj5gm3ELxLVgjPUCbENcK9hPEpK+s1Fi/uNxoaBs0x
b221fFEIuKGamgb5ZwNGY+MAf219jvlbtWrUnK+jj7bmbe3abXwet5nzh8/h
noJXqbS015wPOJ+83owramp4PJn8hNcK/RCuKOG2gp+pvNxyNYkQzqbZwloD
2XmksM4wPiLEurOvuVBIeLnE+MfHeOyHu4nHS35/1wv8+Cw/94TP1/VnXiOP
8OMfPZ4u/u+hLbsY2/w8P8Lx9Ar/bCwQsDxZCL8fbqiU6YiyPFHWed72GB+D
A5WVva/w/u/hee3muTzHx+oZfo9H+Tg/GAzG766q6u1buXLrdW97292XXnfd
H8747W+fW7Nnz56G3bt3VxqGUcQjwMMnHFGKPVFgVlfU4sWLzXpAHbrpipqu
3uznUPPBYNAMckURBFFAvJe58/e7lrlOnCDyhNuYvL+Lv/Uwbb9KYtu5xKNO
B4+YlTSTO0+6gxxUr6UjibSDfhEEQeSCrP1LZdu0JxMLEaxP1TWCiMnuKEEs
MGTVtu6wfV1S+/SsJgh3wfNXdf2JIAjCPXSm/nkp67eIrNCz6BtB5Bs6U/87
udBqnuqesKOz/Fpzc5UP1R1BzA0yayrtoH1dcg6q+0cQBEEQMkkw9c/DXON6
10eFKDSqmPp16EbE3B4YouBYx9SvQzfiZLcHZoHxAFM/h7lGn+ujQhAEQRAE
QUyHzQ8lHFHX+xm7OcTYtihjvWWM3VLN2I+WMLalg7Hb+L85thzHWNepPt+W
N3m98Qu83sQHvN7kxz2e5H8zFr+Of3YrPw7w40/5tb/mx4e93q5HNS3xdCiU
/Ec02r27rKz3X9XV/a/U1/cfaGoaGGtpsTxDra1wEI2YPqGVK7eafqENG7Yb
r3rV7carX327+XrVqq1Ge/uw6S6qre03fUAZt5Pl8JnqixL+HuGHwnnhFRIx
1fmTiU08vsrjEv79E41odCmPUh7RCTeUcDnBHZMvriiv94OGx/MNHptN15Ld
C4XweOwuprjpahIuJjiO4DpC/+HjqqnpN+rr4YQaNJ1QcD3BH4Xxr67uMxYv
7jNfwxslnFJiDuGNwjzCGbV+/XbT/dXePmLeb9Eia7zhekLbs/miEPYc4WAS
Xiu4v3Af5AoH1aJFVlRVZXxRYl1knE4Zxxi+b/eHibU0kyPK7pgS38d4oR8Y
u2DQ8kPBb4Wxt8a6i8eWg7wWXta0+G6/v+sZft2j4XDyIf79/41GUz/jr3fw
793Or/05Y5t/x+NR/t1neR9f4u0dKCvrNxDFxb28rR7eTo/ph7LGIXmwrKx7
H6+pl9vahl7q6Bh+gdfVs/z9k3xMdvK8H+B9u5ePxWhdXf9tK1eOfvV1r/vJ
ZR/4wH1nf+c7D2146KE9deOOKP+4I0q1G2oqpivK7/ebriiv1zvhikINVFdX
m/WAmnTbFYVAvcENJ/xQ4hxeh8NhM/ieQK4ogiAKhfOYO3+/I98/sVD5PpP3
d/F3HqbtfHVFjTodPGJWZM+Tngc5yIi0g34RBEHkgqz9S2XbtCcTCxHV9SEi
JrujBLHAQE2pfqalJeUgK/Qs+kYQ8wVZewX9DiAI9ah+XuoSc5ARaYf9Ioh8
RGfqayMtMQfV+xmxMIixuVl3+ZbPXIfTPYUg5hOqa0qXnIPq/hEEQRCETP7E
1D8Pc40Puj4qRKHxOqZ+HboRb3B7YIiC4z1M/Tp0I+i/pzxyipj6+XMjPu/2
wBAEQRAEQRB2DJsjCn6otMaPAcbuDjPWV8zYjyoZ21zH2KYWxpIrGevaqGnx
E32+rjN9vuS5fn/qIk1LXMrjsz5f4mp+7gaPJ57ksd3jSdzDj7/zeLp28ngC
rhv+vRf8/sSecDi5t6Qktb+iovcg/EL19YNGYyPcQ8M8hkwXETxEcEfBNQQv
1Lp124yNG3cYxxyzw3RFwTW0fPmI6SNqbBww3UDw9tg9UFM9UfaA6wduKDiE
8F0EHEPCF3WoKwr3vIXHNfyz9/Hja4xotNaIRKK8zSJ+rmTC25RvrijGvs5j
kyF8UCKm8zDhPNxGcBzBdQTvEcYU4yHGCv4luKEsD1PfhIdJeLfgZsLncEvB
G9XcPGS0tQ0bnZ1bJ3xR69ZtN1as2Gp+Vl/fb94L4wznk+WLSkybo8hP+KGQ
H/xMCOSJucM8ZjxRGVcUcpvqiJrsd8rcLxpNTaylmbxR4h52PxTywtihD8hz
eu/Vlv28FnYHg/En+H0f4vn9oq6uf7SpaSC+ZMnAD2pr+79dWtr93UAgcSu/
32h5ed/9vB7+2tEx8lxHx/ArbW1bjaVLR/m4DfMxHoCja4yP9wHex1d4H/fw
MX9x7drR544/fsfTJ5xw+6OvetWOP/B6uY/X0h3t7SODy5YN33rUUdu+ceKJ
6c+ef/5dF3/0o78655pr/vDaoaGnW55//vkywzA01TvTLODvBCcEg8Gv8rW+
0+/3m64or9dr1kRVVZVZD8LtJKMGKysrzbpD3QtXFI6ov3F33D7+GbmiCIIo
BM5g7vz97t65Tpwg8oRrmby/i7//MG2fLLHtXOJrTgePmBXZ86TnQQ4yIu2g
XwRBELkga/9S2TbtycRCI8bU10c2tU8QRHbIqlfdYfu6xBzoeU0Q7qC67kTE
ZHeUIBYgeK6pfl7KykFW6Fn0jSDyCZ2p/41caPVONU9Mx1ysY6c1NVf5qIhY
FmNAEPMB1XuKLjkH1f0jCIIgCFksYuqfhW7EMW4PDFFwfIKpX4duRL3bA0MU
HN9i6tdhrvEH10dlYXECUz+HbgS57wiCIAiCINxn3A9ld0Rd72fs5hBj26KM
9ZYxtnkxYz9awtityxi7bR1jW47z+eKvCwRSb/b7UxcEg90f5K8v58f/DgQS
3woEkrf5/YlBny95h8+X+DW/9mGfr+tRfnyan/uH1xt/kce/NC2+LxCIH4hE
Ugfh2qmogM8HrptB03mDqK7uH/cM9Y17hgaNtrYho7Nz2Fi5cquxdu020xu1
ejVcUVtNBxG8UvACwd0DZ4/l++k2PT7CBwT3j+UAyriiLPdR74RTqLKydxZX
lIhb+WdX8uO5/D6d/P4ZLw2iuLjYVUeN266ow4VwMcF1BO+R8EVh3DIerkzg
vd23ZF2bMs/DHYXxra21nFFLlw4ZHR1wf42a8wgHWEfHMD8/aNTXZ3xfcDb5
/UmeQ9J0RomwO6zQnphHMTfC/yXcX2gbc4oQPivhE8P6QK7BYMq8H/oqwupz
cpKDyu4Zyzimus1cxfenOqIOdV0lcBzjdfCvsrLuJxsb+3/D1/XtGzdu23zi
iT++9vTT01ecdNKPL1+3bvt/8PH4z5qans93do5+77TT0tvOP//uB84//+d/
e8Mb7nxJ13964DWvSRvHHnv72PHH/2TfSSf9ZC8/vrRmzdbdra2Dzy5fPvLE
CSf85E9vecvPf3vuuXf94k1vunPb619/R/x1r7vj+rPOuvPL55xz56fe975f
fejyy399/tVX/+GMm27663F9fU+tuOOOZ2p/85u/RQ3D8KrepGbBdEWFw+Gv
8vW+MxgM7vN4PKYrCu4meJxEPciqwelcUfgM71H//PU+Hn/k76/RNI1cUQRB
5DOvZe79Da90jnMniHzgS0ze38UvPUzbb5TYdi5xOMcV4QzZ86TnQQ6ygiAI
QiYq9y7V+yvtycR8QXVdiIjJ7ihBLFDSTE7NpvMgB1mhZ9E3gih08PxVXXMi
CIJwH52pr1mZOciIdBZ9I4h8QuYz3WldpCXmICt0h30jFg46m5u1F8uzfKj+
CEIeOpNbS+k8yEF1/wiCIAhCFqcz9c9CN8Lv9sAQBUcXU78Oc43HXR8VohC5
m6lfi7nGZtdHZWHxUaZ+Dt0Ict8RBEEQBEG4xlQ/VFpjbCTI2PURxu4qZmxT
FWM/5L+/ftjK2C2r+D+RNzK2Rff5Np/l98fPi0S63x2Ndn+kqKj7czyu4a9v
jEZTyXA4tT0YTP0iFEo9EAoldwaDySf5+2f58YVAILHH70/s1bSu/ZqWOGh5
fuDf6TGKi/uM8nL4mTIBnw9cPwj4feBwqqnpN+rq4BrqN51CcAvBEbVixYjp
HWpuHjI9RLge/h7h7UE78PgIl484j/e4Ds4gtIM2hUsI72d2RCF6ecR5XMXj
XfzaNUZZ2aIJRxRcMTZfTF64ony+DxoeT3auKHiOhC8KzqbJ45k0wz6mcDqJ
64VjCh4mOJWEkwtzuXix5Yxqb4f3a9R0RnV2jpi+L3ikLF9U74TPSbicAoHU
xNwJRxS8T5brK+P5Qkz1RIl5FZ4ozL24L/omnFQi90wfLCcV+mo5xjKB99a6
Ek6ryX4oEVPHFu3wXPa1tg79/VWv2v4AHFDnnXf3Dy655Jdf+MQnfvORT37y
N++8+OL7zj799DvOamkZPoOP0Vve+tZ7LvvSl35/4403/vFn3/rWw/+fvfOA
b6M8//ijZVny3ntl7wkkQAFBS6Et0MEuXUA3hULpgP5LRVltaVNGaQu0JZCQ
2LLkPTKJGAFSZpghISEhCQESQvZybN3/ee78WmfjJJJ9r06Kn+/n8/ucdDrd
u98zov2y5ne/e+PjH/3oxb1XX/3ioZ/97JUDN920cs+tt76x/Ze/fPWjSy55
9v1TTlm66qSTFr/85S8/+eTVV/+v6brrXn7shhtevvf661/x4jXX//73b175
l7+suuiBB9af+8gj607z+zdPffrpzaNeffWTkldfVTIVRUnCWMzerY5Cpt1u
73FFJScnd5AnymazqWtPrBHhbzJyDVLo3tnZ2T1uKOGKouh8cR342btYv79i
/dgVxTBMPDMZjPsN78oY151h4oFbQN7v4j88RtnflFj2YPK5SDuPOSqyx8kT
B3WQFYZhGJmYuXeZvb/ynswcD3jB/HXB64Nh5OIB89etzDrISDCKtjFMomP2
ehPxym4owwxh6LkmY916oqiD2XuMzLYxTLxAz1Kz/z6Wtd/wemdijcz1NJD5
F6v6xDqR7i0Mk+h4wPy1JLsOZrePYRiGYWRxM5j/LBxsXjG8V5hEZDWYPxcH
mybDe4VJRA6A+XNxsPml4b0ytJgD5o/hYLPZ8F5hGIZhGIYZeuj8UEq3I+ol
B8DsZIBFKQANmQDzCwAerwDwjcbXU/H1qQDVXwSo+ZrVWnuFy+X/cVpa/a8y
MurvzM5u/AdmXmZmfSu+fzo9PbAyPb1udVpa3caMjMDHePwUsxuzPyWl7pDb
Heh0OmtD5PlxOMj3U6ckJ5Ovh1xR9aq/JytLO2ZmNqghtxBFnBPuKHL+FBY2
KhUVLcrw4W2qX2jYsFalrKxZ9UnRNW53Xbe7qFb18vT2+GhHOkeeH/INhcup
7ym3f0dUnZqMjFrMI/j693i8GMuciPUq7PHGiAiPk9muKIcj7IqyWOb18hgd
zWmk+aK0/rLZhEsp7FTSzmt9qv8+uZL0rijyKol+Fn1Nzqjy8hbV80XOr7Fj
25XRo9uVkSOF96tFyc9vUj1PmrurQZ0rInr3VFFRk+qXohQXa/OgoKARv6+5
ojRPlBjXuh5PlN5vJdqhxdcTba7UdnuyNGcUroUe95j+HsIRdWT/Fl1fj/Vr
Dk2fvmTv17++fMM117y0/JZbXp/zl7+svu3hh9f+eM6cdRfW1Kw/86GH3jnx
qquenVBaunDE5MlN4//0p7e+9OSTH/125crttU8//fELfv+mtQ8/vO7DBx9c
u33u3Pe2t7Z+8MGSJR+t9fvff/2229587rLLnlt4/vlP13z7288/+NvfvvbH
e+9d8+uHHlr7o0cfXX/5nDnvn+/zfXhWe/tHMxcu/Hjyk09uHfnCC5vL1qzZ
krdixSfpa9aEnIpC+0Rck4lrrJcrym6341g5YuKKEuuNXutdUaLM7vMdKSkp
7IpiGCYRGAbG/Y7XFuO6M0w8QP8OQ9Zv4985Rtk/kFj2YJITaecxR0X2OHni
oA6ywjAMIxMz9y6z91fek5njAS+Yvy4UYD8Ew8gmCHLWrieKOpi9z8hsG8Mk
KvHyd4Aiu6EMM8TxgJx1G4yiDrL+FpGVaNrGMPGCzOd6pGsi0dY6xRNh25ih
RyzmczTPm0RcX5HEG0UfMEyi4gHz9xLZdTC7fQzDMAwjCz+Y/ywcbP5jeK8w
iQb9/7bMnodGxGt0xzAJxxQwfx4akbOM7pghxhtg/hgONs2G9wrDMAzDMMzQ
oNsPJRxR5IcK2gHanQDPufCYDjAvF8BXAlA9HODxiQBzZuDxTMx5eO5Sq9V3
ld0e+LnbXXdLenrDrJychv/m5zfWFRY2LcH8r6Cg4a28vIb38vMbtuD5T/Dc
Tjy3r6Cg8SAeD+fmNnRlZ5Ofp0H1QiUn1ylOZ516JJ8TOXuicTWRI4iOmi+q
SSkra1GdUeSJIl8QeYPoHm53QHVBhR1Avh6PjwidD7uM6pTUVK0uooz+PVEB
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
OsiKJ8K2MUMbD8TXfIxVfWKdSPcahkk0vGD+2vFIroPsMAzDMIwZ1IH5z8DB
5lGjO4VJOOh/v2z2PDQiXqM7hkk4JoP589CInGV0xwwx3gDzx3CwaTW8VxiG
YRiGYRKbbj+U0u2IeskB4HMBBFMBFmYDzC0CqK7EjAWYNx3fnwYw/1x8faHV
WvMdu732p3Z74CabrfZPNpvvQYvFV2Ox1LZbrf7leO41PPeuw+Hb5HTWfpyS
EtiRmdmwJz+/8UBZWcuhkSPbOidMWBCaPHmR6oaaMmWxMmnSYmXiRO1I78kd
ddJJS5WZM8kZtRSvW6yMGdOuVFS0qA6fjAxyOWmuHuFnIk8ROXzI53M0VxR9
Rn4hzf2jeZz0Ed4j8vr09UT154rq6wmiz+ga4Ywip5AWH+ZxzB/w/l/AYxFe
b8P7WFVXDHmihCtG74sy0k9DPpr+zgsvDZWdnZ2ths4nJydjW+w9riiXayrW
9RrMA3i9T+1P4XDS+7fIh0QhP5beHyXGS+s/X7dHSRs/6nMaF5wrqh+qryuq
txuqb+p7+ZdwriklJc1KZWWrgvNNGT26vSejRrWpjqiqqlZ1PpWVhb1M5Gui
7+blaZ4oKpvaR20S80I4xMhRRvU/0thr46/5s5KTtf4Q7SM3VFFRK5a9AOuw
UBk+fCHWbaEybhx5rRap3rQZM5Yop58eVL70pWeUb3xj+eGLLlq+/stffrp+
2rRFN+fltVxkt887w+GYPzUjo6nq7LOfzZ8795N0RVGSMY5IXE4ffhhKCYVC
ZYcOhSZgpuLryeSHwgzHlGLy8B4ZGHf3PW3Hix+qDz2uKMw6nPcdYv2JdXG0
tTNQT5twstH7lJQU9f60BwhXFO0JwhlF/ip8z64ohmESBaN/0/trbKvPMKay
DOT9Pp5+jLIPSix7IOH/LpNxeEH+eHkiqIfZc0pm2xiGYQaCzP05EszeX3lP
ZhIZs9eCiFd2QxmG6YUH5KzlYBR1CEqqg6xE0zaGSRTo+Wv22hJhGCa2yFrL
ngjL90isg9ltYxizob9bzf6bWGYdZMUbYdsYhuaK7PkY6VqLVX3MSDR9wDCJ
guz1Gsm68Uiug+x4ImgjwzAMwxjNejD/GTjYXGd4rzCJxulg/jw0Iucb3TFM
wvE9MH8eGpEMg/tlKJEC5o+fEbnN6I5hGIZhGIaJIyy6o6X3eaU7+mu83X6o
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
ztP3GpWCghbVDzVx4iJlxoylXWedtezwBRc8c/A731mx74YbXtl1661vfHr3
3as+vuuutz7+9a9f2/qDH7zw0SWXPLfmi1988pmZM5fOP/HEJX8///xn/vHT
n77cctttb6z+17/e3V1Xt7Fr+fLtyurVB5WdOxWlq0tROjsVZffujo3793fd
HwqFzlIUJcvsDek4ITM5Ofl0nPuz8vLyVFeU8KcJj5NwORnpaxNrrr91qHdI
dV/bgfVhVxTDMInCK2D8b3svxrQFDGMOl4K838dnH6Ps+RLLHkj437Ubixfk
j5kngnqYPa9kto1hGGYgBEHe3hUJZu+vvCcziYgXzF8H0axzhmHkIGtdB6Oo
g8y/I8xuG8PEK/H0d4BXclsZhjkyMveCSPFIrIOseKJoH8OYQTz8LRyUXA8Z
8UbYNobRE4u5Hum6i1V9eH0yzMCRvUYj2S88kusgO54I2sgwDMMwRlIP5j//
Bpu5hvcKk2i4wfx5aES8RncMk3BMAvPnoRE50+iOGWIcD+67dsN7hWEYhmEY
JnZ0+6GEI8prB6hNAggmAzSmATyWAzC3CGBOFUD1WPxsCkDNiQC+k7TQ68dO
wEzVMhffz/scwPyz8fqvYr7pcPh/YLcHbnQ6/bcnJ/v/npJSNyclpb4pI6Pu
yayshpfz8hreKShoeL+kpPmjysrmT6uqWnZVVbXuLy1tPlRU1HQ4N7exi3w7
bne96odKStKiuaKEt4k8PuGEHVDCD6X39ghnU0D19tBRuICEy0lLfbfXSXNH
kddHeKI091NvZ5DwA2llNfSUTZ4qbIMa8lWRU0p4jIQv6liuKM0X5fuML4re
W60+vM6H1z+K37sD73ch3rcC48Zzdnyf1MsVlZKS0uOK0rtlZLmi9N6aI7mi
rFYb1pPqM00pL79eGTPmv8rEiW09PijyRU2cqHmipk5d3B3t9bRpi5UpUxYp
48cvVEaMaFN9Ufn5jeqYHM0VJRxONP7C16Tvb3I3CV+UNk/6zrOje6M0P1R9
z5wSTipcBz2OMBEaa6vVj2OqhVxoaWkNSmFhC/bFgtDMmUs7zzvv6Y7vfe+F
/Tfc8Oqe229/c8ff/75665w56zfV129c09i4eaXPt3H5PfesXvyrX62sv/LK
Fx6+4ILlvz/55MVXYh9dcMklz1/2hz+8cdcjj7wXbGnZvG3Fiu2hDRs6lB07
NE+U4PDhzo2hUOhBzJcxBXjKZvYGdRyguqJw/s/Kzc1dh+uww+12KxRaD3hO
XQ96t5MRfjbhhurPFaVfm90hf9W7+Bm7ohiGSQSeAjm/7+XGshEMYwK3gbzf
x393jLJXSSx7ILkn8m5jIiAI8sfME0E9zJ5XMtvGMAwzEGTuz5Fg9v7KezKT
aHjA/DUg4pXbVIZhjoHZz3DCK7EO/BxnmP6Jp3XHMIx5eCA+npVm70PRJhhF
2xjGDOJh/gcl10NGvBG2jWH0eCA289MTRZ3MXkvx0AcME6/Ifj4GI6iDR3Id
eC9gGIZhjjc2gPnPv8HmF0Z3CpNwnArmz0Mjcr7RHcMkHN8D8+ehEckwuF+G
EseL++4OozuGYRiGYRgmBnS7ocgRdbEN4CEHQLsTYE4KQEMmQF0+wGPlAHNH
Azw+BcB3MkD15zHnYb4B4L8Yz12Cry/FzzHzL8L3X7fZ1OM3rVb/VXZ73bVJ
Sf7fulz+u12uwL9TU+trU1PrFqWn1z+fkdHwRk5Ow7qCgsbNJSVN2yoqWnaO
HNm2b/z4BQcnTFjYMXbsws4RI9pC5eWtqi8nK6tJdTdprqiAGuFvCrubwg4f
4YrSu5vC/p6wu4e+L+6hfU+7PiurUcnOblRf03nh+xE+KXIA9eeKCvuhGpX8
/CalqKhZKSlpVkpLtWNRUZOSl9eo1kXzUB3ZF0X+IPIVCX+RcEWJaI4o4TTy
Y388hrkD23Ux1m0E3j9d9URRyA+Tk5PTyxUl3E2yXVF93wtXFJVPdbNYLBgr
tpn8VVOxj36uDB/+H2Xs2BZl3LgFasaObVeD80N1R2neqIWqJ+rEE5eoIV/U
6NHtSnl5i4LzSu1jrX/96lyh8RauKPpMzAuaD263cDaJvtZCY6D17We9YvQ9
/ZzTRziiyC0mfFVUD4ejtmdMw+ntiaLXWFYI507XhAkLDp999lMHv/e9F/be
fPPru+65Z/X2xx9/78Pm5k0bgsGP3n722a0vvvDC9sUvvrj98Sef/Pie6uoN
t9x11+qfXX/9q1d861svnj1jxtJJBQUNlRde+L/xs2e/9+2lS7c8/sorn2x4
773dnZ9+2qns2dPZ1dHRdfDw4a49XV1dmzFPhUKhuzDnYIoVRUnCWMzerBIc
1RWFa24Wzvl1eOxwOBzq3Kc1kZeXp3rcjPBE6f1Q/XmjjuCJovXY44rCup5G
dTa70xiGYY5CK8j5fe/7sWwEw5iAzP+e0teOUm66xHIHmnOj6jnmWARB/ph5
IqiH2fNqoPFG0DaGYZiBIHN/jgSz91fek5lEg+af2WsgmjXOMIw8PCBvfXvi
oA6yEoywbQwTr5i9hkS8shvKMMwxoWea2c9KWXWQGU8U7WOYWBMPfwcn4rqO
Zt9iGD1eiM0cjRRPjOrDa5Rhokf28zGSdeKRXAfZ8UbQRoZhGIYxikIw/9ln
RM40umOYhONnYP48NCIlRncMk3DcD+bPw8FmleG9MrT4HJg/hkbkQqM7hmEY
hmEYRhIWUN1Qwg8VtAPUJgH4XACNaQAP5QLMLwaYNwyP4+32mhPxszMA5n4F
oOZiAP938f01mF9h/s9qne+1Wmsw1b/H/NZun//rpKQaTOD/XK66u9zu+gfS
0+vnpKfXNWOezMyseyUrq251Tk7D+7m5DR8VFTV9Wl7eunvYsNYDY8a0H5o4
ceHhqVMXd5H/Z9Kkxcro0QuVioo2paioRXU3kVtJ8+1o/h5yLJGHRziA+rqi
wr4oLWFXFHl8NFeT8D/RZzk5mt+psLAZ06QUFGheJ6yv+n29B6ivG0hzRWn+
IfJEkauI3FDkLaqsbFVTUdGK75uV4uJm9Rr6DrmEyEPUnyuqry9KOKMowhFF
11CfaH0wB3MX3vcyJTt7LNYnB++d3MsVRV4Y8kSlpaV9xhcjwxXVnzuKQm4c
ek91A5qQ3a4ot3sK9vm1SlnZQ8rw4U3KiBFtaoYPb1VwnuBRez9qVJvqjiJn
1LRpi5Tp02nOLFTPk5eLxo3mAs0Pba74e5xgNH7kiCIXGI05jRvNAfI5JSVp
fdvXxyXuQddQX+u9Ufp5JxxRwgOmH9uw98vX46KyWPzd0cq02Xwh/F4nzp9D
2J4D55//zJ6f/ezlHXffvWrr44+v39TevuXd557b9trKlZ8+t2rVrgVr1uyu
Xr9+770bNuz95Zo1e765bNn2c+bM2XDKHXe8OeWGG94cMX16M67pa51nnBFM
Xbbswxn4nVs3bdq7/NNPD27Zt6/j446OznWHD3e+3NnZtayrq6s2FAr9FfMD
zKmYIoyTXVGDRnVFud3uWSkpKeucTmcH+dFsNpu6LoUryqg1JpxQfdf10VxR
eK4D94R3cW8gVxT9czq7ohiGiWeqQc7vewti2QiGMYHVIO/38ZFHKdcjsdyB
5CDGGk3HMcckCPLHzRNBPcyeWwONN4K2MQzDDASZe5fZ5fOezByPmD3/eR0w
THwRBDlrPBgHdZAZTxTtY5h4gp6/Zq8fXkcMEz94wPw1LrMOshKMsG0ME2s8
EB9zPyi5HryumXgjFnM+mjnqjUF9zIg3ij5gmHgkHvYJTwzqwfsAwzAMc7zw
FTD/2WdEMozuGCbheATMn4eDzSbDe4VJRJ4B8+fiYDPP8F4ZWlwH5o+hEaky
umMYhmEYhmEMpo8j6iEHwOxkgEUp+CdtFsD8AoDacgDfaIDHp2BOtdl8Z9ts
NV+zWmuvwPM/Bqj5NR7vwPwdM9tiqZmPqbFYqqvxurl2e83s5GTfv10u/3/I
D5WZWV+PWYJ5Pju7/s2cnIZ1ubn1H+TnN2wrKmraWVratK+8vOXg8OFtHWPG
LOicMGFBiPxQkycvUTNu3CJlxIh2paysRXU2kYOJ/Dvk3dEcSZq/h9w9mgMo
0MvZczRflD7C70RuIayXUlraopZJR3I9FRU1q/4ocgrRdeQYEs6pvqHzdA25
pfLzG5Xi4ialoqJFqarSHEfkO6LX5I8iF5VoE9VfOLCO5IsSbqiwI0q0X/Mf
UdnZ2fMwf8Jcju0Zj8c8vLcb7+3s5YoiTxT5YrKysqQ6ovRumv5cUXQUrigA
K7YrDes7Da/7Gfbfg9j/Dd1j0ayOBYU8W2VlzT39OnJkG86VBaozauzYBapP
ivqdxoDmA80P0Y+aW0y4wRq63WCN6tjTWGi+qIDat5rPqbcvSt/vmjeqt6eM
jhTyf2ljGug1fnQvXDu61HbHF8K11GW3+w7j+jmYl9ewD9u06+yzg9uvuebF
LbNmvb2+tnbj20899fELK1duX7Zmza6GTZv2z/7wwwP3bt160LtzZ8dPdu8+
+LVduzpmbt0aGvXGG/vLmpo+KrjhhjezR4y4zyk2gS1bdufhdRfu33/4/gMH
Ots6Orrau7q6qjEPhEKh2zA3YL6DOQczAZPHrihDUF1RLpdrltvtVl1RVqtV
oZC3jdYlrUWZrihxTu+KojIpdA7rhXPP9W5KSsrdWKdT8Rp2RTEME888DPJ+
4+NnHnO8kgPy1s2+Y5R9p8SyB5KmyLuNiZBYjJsnTuohI94I2sYwDDMQZO5d
ZpfPezJzvEFzz+z5z+uAYeILD8hb5544qIOsBCNsG8PEG2avHX0YhokP4uFZ
GZRYD1nxRNE+hokVHoiPv4ETcU1Hs2cxTF88EJt56o2iTom4DiOJJ4o+YJh4
Ix6eZZ4Y1CNe9kGGYRiGGSy3gPnPvsHmHcN7hUlEXgXz5+Jgw/9bbIag/w+B
2XNxsLnR8F4ZWjwK5o/hYLPV6E5hGIZhGIYxCJ0fSrECeO0AtUkAPhdAezrA
Yzn451gJQPVwgJoJAPNOwtcegPlfweOlVmvtlVar/zqr1fd7i6Xmb3juEfxu
wGLxLcb3z1ks1S/i6xfw8+cdDt/ypCTf0263/8m0tMDTWVn1K7Kz61/Lyalf
k5dXv7GgoOGjwsKmT0tKWnaXlTUfqKhoPVRZ2Xp4+PC2LvJBjRq1QBk9eiEe
tYwcSc6fdtWpRP4mcvmQC4kcPOTeIe8ORe+L0jt7ju6LaujxOeXmap6ggoKw
J4ocRFg39UieIs0X1aQ6heg7whUl0tcXJdxTdC3dlzxHlZUtqsOIQn4j4b+i
e+ldUdSWI/mi+oaudbn8apvDrqsavO/dWNcr8P04JTs7X3VFJScnqz4Y4WcS
Hhn9+75Op4FG+Gn0bhr9vUW5ubm56mvyWIH6d7UV25WJdZ2BfXIdXvsv7MMA
toPGSUQbLxoLcm1RaHxovEaMaFN9XDRnqN9pHMgfRv0Uni+aL4rmEY0d3Y9c
YOSWontq3wn7ooQrSu+MovR1lYm5RxHjSffQvGZ+/I7qg+pOjf51CNOF6cD7
HsDr92Rl1e2oqmreesopSzZddtmza2655bWVs2evfXbJkg/aX311x/y1a/f8
c8uWA3dt397xm337On966FDo24cPh85TlNBJoVBoOCYfk/7ccxtdXu+bSdr6
11AUxYafjQuFOq/o6Oi8GfO7zs5O8kNdjbkU8xXMaZhJeG05JgPjYFfUoMm0
2+09rihcjx02mw3nhh3nS0ovp5NRrii9D+porihai+Srcjgch7E+72Id/4qf
ncauKIZh4pxZIO93vq/FsB0ME0suBnnr5oVjlP2ixLIHkmsi7zYmQmIxbp44
qYeMeCNoG8MwzECQuXeZXT7vyczxhtlzP9r1zTCMfDwgb50Ho6hHUGI9ZMUT
RfsYJh6gv0HNXjciXsltZRgmcmQ+gz0R1sEjsQ6yEoywbQwTSzwQH/Ne5r5i
dtsY5kh4ITZz1RNhfTwxqg+vVYaJnHhYH54Y1ENmvBG0kWEYhmGMogHMf/YN
NtWG9wqTaCSB+fPQiNxqcL8wicdEMH8eGpEzje6YIcbrYP4YDjYLDe8VhmEY
hmGYwdHth/JaAWptAA85AGYnAyxKAWjNAphfAPB4BZ4bA/DYVICaUwGqv4jn
v47XX4GvfwLg+43FUnunxeL7p8VSMx+P7ZjlFkv1Sny/GrMBs8lq9W202Xwb
HI7a9S5X7frUVP/6jIy6Dbm59Rvz8xs+LCxs/KSkpHlneXnL3oqKloOVla0d
w4a1dQ4b1hqqqmpXKivblYoK8vu0KWVlrUpJieZmKi7WQj4lcgQJh4/w/ghv
j3D2kGeJ/DzkBurrihK+KM3hVK9kZ2vOofx8zTVEHigqi5xOwhM1EFdUWpoW
fZlUFn2P7kEOIwqVQ+XSveg68gwJT1SkrijNURRQ+4TqQ/4kakNZmQ/L+gu+
/ya2dTTeP1v1RJGPKS0trccNpXfF0JE+i4UrSnxG5ZIriuojXFE2WxLWtQjH
8fN4vAn75d8Kzid1PHFO9fJ8Ub+KUD9Sf5Lni8aLvE90jr5HHieaI+Rqoghf
FPUdfU5zS4wNjQt5qagccj7pv9vXGaXNv7CvjO5H/ikaDwqNadgVVavO1bAf
ir4v7lnTabXWHMTP9+I62oFz+EMcy/Xjxy986+yzgy9cddX/nrjrrrfqA4H3
/7tixSez1q7dfcvWrQev27tX+d7hw4cvCoVCX1IUxYOZjq9HYvIUJZSC7+1H
8jvh+cxDh5QpeO0XMedhzqV74HEGZmK3b6qIrsOjE4/WGO9fxyPkijoD5/rf
XC7XOjx2kCcqKSlJdUUZ5Yjqby3254rSu+KEKwrr02G1WsljdW9+fv7n2RXF
MEyccyvI+51vbuyawTAx5V8gb93MPkq5JRLLHWiqouo5JhJiMW6eOKmHjAQj
aBvDMMxAkLl3mV0+78nM8YQXzJ/7Il7JbWUYJjrouWTms5zwSKwDP88ZRkPm
Wpe1NzAMIx8PxMez0ux9aSDxRNE+hokFHoiPv3/j6W8OGfsVwxyJWMz9aOaq
Nwb1MSPeKPqAYeKJeNgfPDGoh9ltZBiGYRijeB/Mf/YNNr8yvFeYRGMmmD8P
jcgFRncMk3B8F8yfh0Ykw+iOGUK4wfzxMyJ/NLpjGIZhGIZhBkC3H0o4orx2
gNokAJ8LoD0dYF4uwKMlANXDAR6fiO9PwuOZmPPw3KV43VUANddjvPj6HovF
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
+Ji1hmHksx3krZWbj1KuX2K5A8l3o+s2JkI8EJvx80RQF7Pn2EATjKBtDMMw
0eIFuXtXJJi9v/KezMQ7stepjHXNMIw5yFz7ngjr4JFcD97bmKGI2etDH6/k
tjIMM3A8IG/tB6OoR1BiPWTFE0X7GEYm9JyVOdcjXcuJuI6VCNvGMJHigfh6
BsWqPrx2GaZ/vCB/LQQjqIcnBvXgNc8wDMMcD9B/B9jsZ95gc7T/vS0zNDgB
zJ+HRuQCozuGSTi+A+bPQyOSbnTHDCFcYP74GZE/G90xDMMwDMMwGno/VK0N
j0kAPvwbKpgK8O9sgLlFAA2VeG4cfj4doPo0gPnnAsy7EKAG/972XYPHm/Gz
P1ksNQ9ZLLU+zEKHw/ec0+l/PTm5dm1ysn9zcnJgK2aHyxXYg+8PJCXVHsZ0
ORz+kMNBjhxKnXq02wMKOaM0Z07YE0WeHPIWkVNHc/kIF1RdjwtKRO+JItcP
5ViuKHqvj3BFCV+PcEXRd/u6okQZIuRUEr4ofTIyGnrq0p8jitpG0eoY6OWH
0telf0dU2O0k6peSooVei/vq3VOf9UT1dmVpbizNTxRuL/XrXHx9F97zom5X
lFP9u1W4osjN1NcVRZ4Yma4o4a3Ru6Iooi4uVwrWMx3rexL2yS+wTf/C9zWq
I+porijhyCJXVFFRk1JerjmiRo5sU0aNalOGD29VysqaVScY9TX1r94xFvZF
ac4t7V6a44y8W5mZ2hwWrij9WIejOdOsVpoXNGfou5p7rKCgMVRc3NxZXNx0
qLCwaX9hYeOegoL6HVVVzR+efPLidd/85opXbr75tYV/+9uqhx9/fMNv2to+
vPTpp7ec8eqr28e/8cb2ss2bd+W8+aaSGgqFnIqi2NkPldCQ+z3N5XLNxNye
lJS0HNfkTrvdHhJrwQhHlH7NibVIXjaxHqkcclLRe9oP+rqiLBYLzndXB9Zp
XXJy8r1Y5zMx2Sb3HcMwTH9MA/m/+f02Zq1hGLlcDHLXymlHKDdLcrnRphOT
Gm3nMRHhhdiMoSeCupg9zwYThmEYo5G9P0eC2Xsr78lMvBME8+e7iFdyWxmG
GRwy94tgFPUwe68aSDxRtI9hYgk9e81eH/owDBO/eCA+1r/seshIMIr2MYxM
aC7Gw1yXXQ9Z8UTYPoaJFC/E1zMoFvUxI9H0AcOYRbzsB54Y1EN2GIZhEgn6
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
UuT40buEIvFEHckRRfcS5YQdUZpP6GieKO1zzeWk91dR/+TlNaguo6qqFmXE
iFZl1Kg2ZeTINnzfqvqN6LPCwia1/8kZRd9JTdXapPdFaZ6o2p66aM4ofZmP
Yt3vxO9donNF2cj/ovqZyBOTlZWl+mjID0OvhVMmVq4o4a8R5WdmUoqwj05X
iot/g/PwP9gPdfiZ6AdtLlL0/jEx12i+kmuroKAJv6/5oqqq2nButykVFS1K
fn4jXhdQ54wYxyONn/CPaQ4yf080T1RA9URprijND4XpwnV6GI8H8LjXYqne
abf7tuH8+cDt9q/D+r6ekVG3Asd/cVlZk3/s2PZ/n3rq4ruvuOLZm26//fUf
+XzvXfLyyzs+//HHhyaHQqFSRVEyMEnsiTpuSUtOTj4F5/9duC7ewRxKSUkJ
ud3unjUp/G2DXYN6B5xYayJizdOR1iVd43A4VKec3W7vxNfvY/7BriiGYeKY
FIjNb38/ilWDGEYSPwW5a+TCI5Q7VXK50ebtqHuOiQYvxGYcPRHUxey5Npgw
DMMYTRDM37fM3lt5T2biGbPnuT5eyW1lGMYYZD7bg3FSj3hoH8PEAnr2mr0u
9GEYJv7xgNx9wBMn9TC7fQwjC/p7VOYcD8ZJPXgNM4mGF+JrDntiVJ9YJ9I9
imHMIBb7QCRrwBODesgOwzCMmbgw38W0gzl74GbMPZiTZTd0iENuGrOfd4NN
veG9wiQiHWD+XBxsbjW6U5iEYwKYPw+NiMfgfhlqrATzx3CwWWp4rzAMwzAM
MxTo9kN5rQC1NoCHHACzkwEa0wB82QD/KcZjFcD88ZgT7PZ5Z9hs1V9KSvJd
5HTWfi8lpe7a1NTG/0tNrf+Ly1X/b6fT709Kql1ktfqft1pr3rRYatZhNtts
Ndvw/E63278vI6PuYF5eY0dpaUtnVVVraMyYhcrEiYuVKVOWKJMmLVbGjVuo
kDeKvDpFRU1KdrbmcOrriqLX5FXSfD31qtMoK6sBr29QvT6ZmQ3qOXL3HMvV
dHRXVNgRJaJ3RYV9UZ/1RIm6Hbm8ozmiovdDaY6h2h5HFEV4hqhu1C7qG+rX
ykrNETV2bLsyfvwCHIOFeFyojBmzQO1/8kbhGKnOI3IfUV9S/9A96F6iXlRW
f54jqq/N9ii2IeyKcrs1BwyFXFGamykzJq6oozmk9K4oLUXY7jOU8vKbcB4+
gv3QoBQWNqqOLeGMEn4oet13bGnu5eTQ9U1Kfn6T2t/FxdprmqM0l8kVJTxQ
R3NGiXHENYXXBnpC77XvVIdwbXbi8RBmH77ejcftmI9w7W2w233vYHkv4zp6
CuvRPGJE+2NTpy6878wzn/jDxRcvv+EnP3nxaq/31Utmz3733Oee+/jUdev2
TNqx40BlKBTKwbgURbGzJ+q4Jc3lcs3E9XA7zvtVuAZUVxSeU9cFeZvEmjTS
1xb2svVeg3QtnafXSUlJ5ImiYyeGXVEMwyQCsfjtb3HMWsMwcnga5K2P/Rjb
Ecp9UGK5A8lvou45Jhq8EJtx9ERQF7Pn2mDCMAxjNEEwf98ye2+V+cxhmMHg
BfPnOf8dwjCJhwfi4/knux5mt49hYoHZ60Efr+S2MgxjHEGQtxcE46Qe8dA+
hpFBvMzxRFy/FG+E7WOYgRCLdRHNc8gbg/rwOmaYMPGyB3hiUA/Z8UTQToZh
GKOpxNyN2Qfm74MiyzEXS2zzUIacXGaP72DzO8N7hUk04u2/wzvQXGB0xzAJ
x3fA/HloRNKN7pghBLk6zR4/I/IXozuGYRiGYZihADmignaA+5wAzW6A2ZkA
/y4AeKwcMwqgZjLAnFPw+AWbzf9Vq9X3TYcj8MPk5LpfpqTU3Z6WVv8A5vHU
1LoWfP9UcnLgFaezdrXd7ttos/k+wmzH7E5Kqj3gcgUOpafXH87NbQiVlLQo
VVXtypgxi1RH1IwZTyinnPKEMnPmUmXaNPJFLVCGD29VSko0T5FwFGmeKL8a
4WMi3xL5oMgRlZvbqIa+ozmjNMdRJK4o4W8S7ia6v94HFUn0nijNJXTkMno7
ooQfKtDjnrLbNUfQsdxQws3UnyNKhO5HbSFHkXBFkQtq9GjNEzV58iK13ymT
Jy9WJkxYqIwdqzmjyClVUtKsOqOoT8mNpPdFUVlHrtcjWP7t2LZLcYxGY3Lw
uykKuWiEn0m4oehIbho6Rx4pcc4oT01fX5T+nPBSaeeysB4lSmHhmUpFxc3K
sGGzsQ+alLKyZjzXhPPryHMq7P/S3tO8pGjeMi10XpvLYd8YeaNovPt6o7Qx
9auxWgNqcB1ifCGrtabTYqnpAKg+gNkDMH8nHrdhNuN31+J9Xse1+HxWVt2i
8vJm3/jx7Q9+7nNL/nTeeU/ddOWVz//kl798+Vt33PHWV++/f/UXHnts/ckt
LZsmv/LK1pGffBIq2bw5lPPBB4qbPVHHPcIVdYdwReHaC6WkpPSsRyNcUcda
l+yKYhjmOCFWv/8lxapBDGMwY0Hu2qg+Qrn5kssdSAqi7TwmKoIQm3H0RFAX
s+ea7PYxDMNEg+x9Kx7qwHsyk6iYPcf18UpuK8MwxiJzPwhGUY+g5LqY3T6G
kQk9e81eD/owDJM4eEDufuCJk3qY3T6GkYHs+R2MsB7BGNRFRrwRto9hBoIH
4m8eJ+paPVY8UfQBw8SKWKy3YAT18MSgHrzGGYY5njgB8wiYv/cdLS9hvi2r
A4YgpWD+mBqRrxjdMUzCcRWYPw+NSKnRHcMkHPeA+fNwsHnb8F4ZWpwC5o+h
Ebnc6I5hGIZhGOZ4hzxRtUkAi1IAfNlu99wigHnDAOaPB3j0JHx9BkDNlzEX
43Xfs1rrrrXbA79zOuv+6nLV/SclpS6Qlla3JD29fkV6et2bKSmB95KT/R8k
JQW2JSX5d9rttfvsdt9Bh8Pfgee78PpQVlajUlDQrFRWtiljxizs8USddtoy
5fTTlymnnvqEcsIJi1V/0bBhrUpxcbPqJyKvkt7dRMferqgG1Q+Vl9eo5Oc3
qkd6T64ocvVoHp+6ngi3j3D56COu1VxOAdXr43L5e7l9juWJou8ezUOl+aF6
O6I0P5S/ly9I5OieqM+6ocg7FI6/lyuKPEfUR+XlzcqIEW2qE2rSpEXK9OmL
se+X4HGJMnXqYhybRcrEiZozavjwNqWiokV1JdF4UP9Q3em+VN6R6/gI1k1z
RWVnj8MxyVe9MOSCEn4m8sLIdEX1ddNQuZT+/FGaqyYb61mK89SDfXST6oqq
qiJXVIvq2KK5JeaVmC9ifIVjTHOaafOBQuMd9ofVdbvCAj3OMG2O6edCAMeN
vFCBbkeUv3uMfV2Ywzg/DlosNftwbe4CqN6Ox48wG3AcVtls/pdwvj6ZnV3f
VFHR+ujkyQvvPeusZd4rrnj259de+8JVt9322kX33ffuuQ8++N7p8+e/f8KC
BR+Of+KJj4c/99zGkrff3pUTCilpoVDIqSiKjT1Rxz3p3a6oO4UrCtddiNaf
8DbJckX1XZN9XVFOpxPXgYOO7IpiGCZRiNXvf/zf+GESlVtB7tq47Ajl3iK5
3GjzeLQdx0RNEGIzlp4I6mL2fJPdPoZhmGiQvW/FQx14T2YSES+YP8f18cpt
LsMwBhOE+HgGeiTXw+z2MYxMzF4H+gQlt5VhGGPxQPzsCWbvX7znMYlGvMzv
YAzqIiPeCNvHMAOF5lgs5rInwvp4YlSfWCfSvYphYkksno2RzH1PDOoRL3sc
wzDMYKD/7uvdYP6eF02WYk6U0RlDjAvA/LE0IkVGdwyTcDwA5s/DwWaz4b3C
JCJPgflzcbDh/3/B4PgZmD+GRmS00R3DMAzDMMzxDHmi2p0AtRm5uXVFef/P
3nmAx1Gd+/toe1Ovli1LbrLcK9gOASaFlEsCCfzhhpCQAqmQXklyswRCEiAk
ISQEJyEFgq1t6sWSTZZmimkOGBxK6MYYO8YYcPfO//xmfKTRWrJntVN2pe99
nt+zbXbmO9+ccyTr5r5URqaXlMTmu1yRFU5n5DTGVn2Uf3Y+zxcYi3yHseYr
Cwoiv+ef3ep2x7r8/vidoVB8Y1FR4snCwviL/Pm2QCC+0+eL7/Z643s8nth+
tztyyO2OplSvE9xJrXJFRbs8cWKXPG1ajzx3bp/iJVq2bJ38jnfcJq9YsU4+
4YS18vz5a+TGxh558mTVTQQvDzw7cDVp3Uzw6sDBo7qiWhSHETw+FRVtyvOS
ktYhjiZt8B4+gzcJKS1Vv58evM/HqPh94FnS+qqGeqJiA04g7fmHd0QNOoHw
3aGOqOgQRxTv94D7afDz6FF+KOGDOlZQI5xEGA88WvAewf8EX9Ts2b1K3+GH
WriwX168uF+5N/BHLVjQp3w+Y8agLwr3ZNAXFR3wW2kdV+muqJKSJv69SsUH
I3xNwhGDwBkjXFFaf1S2EU6qdFeU9r2hDqlSxRVVWXkqn6vf42O+ic/FdsVb
BsdWRUXrUa4o1feUUO6ruKfoy3AeMfQN3xNzTszZ8nI4qNr4Z238fC3KmvF4
cL5oCmuJr80DfD7s5XnT4WjeVVDQ/BrPy7zXTzudzY/ya97Dz72mpqatecaM
nj+ceGL/zz/wgdu/99nP3v/F73znkfOvumrTGTfe+Mx7br316RWJxEsL1q59
rfGuu7ZMvvfeN6ufe04u2bp1a1CWZc8RR5TD7h2KsATFFcXXmuKK4lFcUcFg
8Jg+NaN8bcINJZxx4jU+I1cUQRB5iFV//7vVqgERhIG4ef7LzFsXe3h8I1z7
ZROvO5qclmnziIxJMmvupaSjFrvnm9njIwiCyASz961cqIH2ZCIfCTP753im
a5kgiNxBYubuCeEMarF7/xpNkhmMjyDMINd+D8hkzRMEkRvgZ5mZ+0Ku1GFW
pAzGSBBGIbHc+T03X9eu3vERRDZYsT4ymcthC+qxI+EMekAQVpAra1+yoA6z
I+kYJ0EQRDacz/M8s3+/G21+ZnhHxhc/Yfbfw2zzouFdIfKR9cz+uZhtOgzv
CpGPvMnsn4vZ5puGd2V88Rdm/z3MNrsM7wpBEARBEGOYqJOx67zl5XcXwhNV
U9Mya+LEnuWVla3vD4Vaz3a7o59xOCJfYyzyY55rGWu+iT8mCgoi6/j7G9zu
2OM+X/Q5vz/2SiCQ2MGzKxCIv81f7+PvH/R4Yof5MSm3O664brxeeJJaFHdT
VVW7XFfXKU+bpvqJ5s1bo7iIEDyfNauHf9alHDNhQofi0IFXB44j4WiCh0fr
Z4KnR3XvtB6J6vBJdzSJCF+PcEXheLiT+Pjl6uo2xYUELxCC58I9pZ4zodQC
bxWur41wAcHzg2urSWhqGOqI0vqhtI4o+JbwPlxDOC+uJa4nvFLC/yT6oB6n
+oj4fRg4ftBbNOjXQj0YN8ZbW9uuOLmmTOlSXFAzZ/YMeKPgi1q6dK28aFG/
8lr4onB8dXW70hN4p+DQGnq9QYeVw/FX/ngF/+xc3otG3sPyAX+T8EEhwksD
T0y6S8YoV5T23MJLo70m3gsGQ/xzvDeRj+8UPl+/w+fAn/hcVOcuPFHCIaZ6
ohJHeaKE10sb9F/be3ihamo65IkTO+WGhh7e/x7lcdKkLuV9/nmKn/9wKBQ/
GAhgXcXe9noju93uyH95tvIeP8/P+QQ/5wP8nEleVxu/L3+dO7f316ec8s8f
n3XWXV/70pc2fOb//u+xs6+//tn3//nPz54Sjb6yZN26V2bfdderUx96aHvt
gw9uqXjqqVSRLMs+HvcRR1SB3bsTYSlDXFF8TQy4ooxytY3kitK6oYZzRfl8
PnJFEQSRb+xl1vwNcL9VAyIIA8H//cLMdbFyhOt+1uTrZppHM+4cMRqsup9S
DtVi1/gIgiAywex9KxdqMCthneMjiEzB3LJ7ftNcJ4j8Jxd+xoOkBbXQ3keM
NXLtdwGCIPIPiZm7L0g5UodZSeocH0EYicRyZ24nLaiF1i6Rr0jMmvkczqCm
fF2zx4uUQQ8Iwmxy5eeYZFEttLYJgshHPDx/Y/bvc0ZkE89yQ7szfuhk9t+/
bNNueFeIfAT/nV6752K2uczophB5xxxm/zw0IpLBfRlvbGT238Ns80/Du0IQ
BEEQxFikgP/q4GAs6mGsL1hT01NZW9vSOHVq+0nTpvWeWV/f+dmqqvZvBYOJ
n7rdsRsKCqKr+LHdjDXfxVhkY0FB81MOR/RFlyu6zeOJ7fT54rv9/vhenv1+
f+yQzxdNqb6guOx2J5R4PHDoJDR+ojbFT1RX1yE3NKiOooaGLplfW3kPn8HP
VFXVpvh0iotbFc+S8PAI7xGidUXB+wR3j/D3wNGU7mdC8Bzv4TMcp3p7WpXr
ibpQC+qaOrVLeRTeKriCtH4krZMJj6KWQU9Uy1GeKDEG4YiCG4r3diDwRMG1
hPPhGqrTanA8uAbOI7xQ6ljEddVjxfH4DDWm+6JEndqxT5jQLk+apI4d44Yz
au7cQY/X/Pl9ymv4oqZPV31RcGnBrYVz4FzpPVf7/nd+3Sv583P4Z9N5baX8
uKIhjijhchIeGcRIP83xXFFlZWXKI/w4Pp+fP6KuGv7eyfyzb8kVFX/kY1T9
TnCRYaxDPVGD91Z7X7XeL3yG4/C9ysp2xREFP1RTE3q7Vl64cC3vb5/c2Nid
4uvi0MSJHfurqlr3lpW1vFlamni9uDjxGp/jL/HrPc3n1b9KSuL38M97J0/u
WN3U1HvDsmVrr/zgB2//7gUX3PeFb37zX+f9/OebP3zDDc+8+5ZbnlueSLy0
YO3alxvvumvL5PXr36x65JHXSzZu3BqUZdlzxA/lgCOKPFHjkgFXFM/mUCi0
n68DxRXFnw+sUaPWoNYVhfOnr0txjHBFeTweckURBJFPvMas+zvguy0aE0EY
xfPM3DVx8gjXfcLk62aar2TaOGJUWHU/pRyqxa7xEQRB6EVi5u9berB7bx1t
wjrHRxCZgrll9/ym3z8IIv9JstzYGyST6zAzBGEHufZ7QNjc4RIEYRISM3dv
SGZQS9LkWsyKlMEYCcIIJGb+vNa7dvN13WayNxFENkjMmjkdzrF67AhB5Aq5
8nNMsqgWMxPWMU6CIIhMWcbzL2b/Hmd0Pmdkk8YJW5j99y3bXGZ0U4i8Yz6z
fx4akTOMbgyRd3yS2T8PjUih0Y0ZR/iY/ffPiFxrdGMIgiAIghgzwA91JGEH
YyvdjHUEQqFbK6qq4lOnTOk8cdas3jNnz+67ePbs3p/W13f8sby8Je7zxde5
3ZEHHI7mzYw1P8fzCs+OgoLIG05n5G2XK7rP44ke9Hpjh3lSwsUEN5TbHZdd
LkR1E8F7BE+OcDPBtwS/UEWF+qj6d9SUlrYox8D9pHp4EkfOO9QThddaVxS8
TPgOAmdRusNn8HuDvigch2uhjpqaNsUTxfuhuJDgSpo1C+mVGxt75KlTu+X6
+i7Fj4TjMRb1/LGB4LW2Fq0rCnWiDt43xR2U7ohC8B4+R32oDV4h9AP9Qo/w
WoxNeKFQP45BH+HhgvcJj3hdXIxj4wPX1jq2tLXCx4Vr4HvwdE2c2KG4oNAH
jH/OnDWKJ2rePDVz5vQq/Zk2rVtxaU2a1Km4ptTrqtcWNRcV/YNf6+c85yqu
qMLCYv48qHiZtL4mrSPKaGeUcNDACQUvzXCuKDz3+/2Km8bvhyenih93En//
m/yYlfwxfsQPJZI4cm/jQ+5tQUF0yD3FvUa/MQcwv6ur0dtuecYM9LFPXrx4
nbxs2boUz+ElS/oO8v7umzmz++2pUzvfaGjo+O+kSW1b+Zx7jvf3CZ4Nkya1
/7OhobOVz82/LFvW/6vTTkv+38c/vv6rl1zy4KfD4SfO+vWvn37/TTe98M7m
5i2Le3qen33HHVun9Pdvr33iiTfKN29OFcqy7ONxCz+U3ZsTYTuKK4qvxysD
gcBmnv08KR5LXFF4HM4VheuSK4ogiDzkP8y6vwNeZ9GYCMIIPs/MXQ8Pj3Dd
i02+bqaBT86RafOIUWHVPZVyqBYzEtYxPoIgCL1IzPx9Sw927620JxO5ht1z
ezTrmCCI3ENi5u4NyQxqSZpcC/2sJ8YSmHd2z31aBwQxNjD756+ksw7J5DrM
SlLn+AjCKCSWO/Pa7P3D7vERhBFYtU4knfWELaqH1jUxXsmV+S5ZVIuZCesY
J0EQRCZ8kdm/t5mZ641r1Zinjtl/v4wI+XWITzH756ERmWR0Y4i849fM/nmY
bZ4wvCvji3cw+++hETnf6MYQBEEQBJHvaP1QUSd/dPFHD2M3Bxm7taK4OD61
rq5t6fTp3R9qaur58sKFa65evLh/9ezZvesmTmx/uLg48ZTPF33J7Y685nRG
Xi8oaH6Tsea9/PGAw9F8yOmMplQXlOqHEoEnCj4ifAZ3DiLcTnAgwasDT5EI
XiPiM+1rrd9IPZ8a7fnS/UzDuaLcbtXPhKAe4YvCMVpX1OTJHfLUqV1yY2O3
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
FSIf+Sezfy5mmw7Du0LkI28w++ditvmG4V0ZX9zE7L+H2eYtw7tCEARBEITd
aPxQSlyMRT2MRfyMtRXyx7JAIDGhuDgypaambXZdXdvShoa2UyZN6vpAZWXH
2YFA2wVeb/wSlyv2g4KCyFX8+JU8zfz5Gocjut7lijzm8USfCQTiLxcVxXeU
lLTurqho3TdhQvuh+vqO1MyZPYofauHCfp4+ee7cNTLeg2sIjiN4htL9RsKT
BK+Rz6c6l+BCgpcIXiF8D24huIREJkyAUwhuoy7FbTRjRo8SuIWmTetWfEzw
D+E8cCXBFyU8T8IVpXUqCUcTnEbCFTXoUOrg12xTPsN5hJNJ65nS+qJEcDzG
oPqshANJOJ86FP8UjsO1tf4pXAPvwyWF7wrXFL6H51VVbXJp6VBXlBib1oWF
11r3VFnZ0D5qPU04p+gzroG+oo/wRE2Z0qU4pFA/jofvCefDvRyakV1RWmcU
vo+xoTd4FBnufqOWyZNx/QSv43f89YX8PDN5r1VnU7rTSThljPJEaV1RWl9U
up8G73s8Ht7/An4v3BpX1Ff5/LqBP8d9wr2Oi/lyOBSKH+Dzcy8f91uVla27
qqpatvP+buFz7z98fjw2eXLHfTNmdPXPn98bW7583R8/+MHbr/74x++59Mtf
fuBLP/rRo5/41a+ePvOmm154byz2/Dv6+rYtvPvuN2Y+9NDO+k2bttW8+OKu
sm3b5FAqlfLKsuzicZAfijAB/rOFVfv9/jN4/urz+Z5yuVz73W63sj6xNrJ1
RWnXNc4ZDAaV5xUVFUM8ccIfle6K4mvykNPpfIHn916vl1xRBEHkMt9l9vxt
MGDF4AgiA+AwM3vefyjtmlU8Oy24bqZpGl0LiSwIM+vur6SjHrvnYLYhCIIw
ilzZs+zeV83+uUMQx8PueUxzmyDGPkmWO/tG2IJazEpY5xgJIhNycU3QXCeI
sYXEzN83khnUY/cel00IwkysmMN612rSonrMSFjnGAnCDCRm3VyXdNaUz+uZ
1jqRK2C+WTGvkzpqkSyqxewQBEFkwmyet5n9e1eu5v+NvrVjim5m/73INmsM
7wqRj+xi9s/FbHOZ0U0h8o5ZzP55aERONbox44xHmP33MNvcZXhXCIIgCIKw
gyN+KOGIijoZW+lm7K8+xm4OMtZawh+rfL7VdR7P6saSksSCqqqWFbW18fc2
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
sOLnfyY/G+3e87JJOINxEsRw2D2HaV4TxPhDYtbsJZLOepIW1WNWCMJI8DPY
inmb1FkPrU+CMA6r1pPe9S1ZVI/V0Tt+ghgNuTSPJQvrMTOSjrESBDF+KefZ
z6zfm67S1JCvrihkeSbNHiNsY/b3PdtcbXhXiHxjOrN/HhqRM4xuDJF3fJzZ
Pw+NSMjoxowjPMz++2dErje6MQRBEARBZMURP5TWEbXSzdhffYz1BRm7tZSx
VdWM/aOeP29yu1ctcrli7/B6E6d5PPGP+HyJ8/3+li/6fPHv+v3xKwOB+O9D
oditoVC8q6io5c6iosQjxcWJJ/njiyUlLa+Wl7furKpq311T076nrq5j//Tp
XYdmz+5OzZvXJ8+d2yfPnt0nNzWtkadN65EnTepSfEZlZW1HfEGtAx4frSsK
riF4jOA3Es4i4YlSXU8xxfGk+pMSimtIeIfwGp/hONUVpfqbVIfToDcq3YWE
z/EcviO4o3AO4WoKBuMD10OtuJbwHQnHE/xL+L64FhxNOBe+j2Orq1W3ExxR
U6Z0y1OndivP8V51teqjKi0dPJ/WD6UNxlhWpp6vthauKNVBBWdUTU2Hci30
T4xd+KK0zqjBqF6o4VxRovdaV5QY23DB+cX9OdoVNXKscUQNuqJKSlbzHl3L
Hy/g/ZzJ72sxv3deJcIVBZ+M1hVllC/qWK4orZvG5VJdUR6PZ19ZWeULK1ZI
7Vdeef3la9c+8NX77tt64W23bf9kT8/Wj3V2bvlof/+W999++2sn33XXriX3
3bdj9r//vXfK5s1v17788hvlTz21o0iWZR+PW/ihsEGQI4rIA4J8rZzm8/l+
xdfDE3x97g2FQimtK2o0viitKwoRazt9neM4XAc+KazHgoICckURBJFPTGT2
/p1wqflDJIijuIVZM7+/nnbd2yy6bqaZN6ouEkYhMWvvt6SjJrvnZLYJ6xgj
QRDE8Ugya/YsPdi9r2aTpM4xEkQ6ds/dbNYsQRD5i8Ryay9JWlSP3eMkiHTC
zP75O1zCZg6aIIicwIq9JKmzFsmiemjPJPIBq3430Ls+kxbVY1YkneMkCCuQ
mHVzX+8at2rPsTphneMniEzJpTUsWVgPrVeCIOzix8z6fenTaTXksyvqVr2N
HiNMYfb33IicZ3RjiLzjHGb/PDQik4xuDJF3/JLZPw+zzeOGd2V8AW+l3ffQ
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
8/9+7IQJp3y9uLjyt7m5uU94PJ5PeSLwNyXbFYXrBgIBVbwXgvs4Ltw3breb
1zIHfpr9DofjY6fTGeL3z+MbSjWPXfauRhApQHNF8Xn/c74eVvH1udNutyfs
ijrY2jQG1y4pKdGew3rk61BzRfFs5O0gVxRBEFYg2f/toaHktST3lcgMvs7z
PpMzR/8p6X2HkuU8nuEWl0gpQZb6+aHE0S7Zc9iMhOPoJ0EQxECkem+OB9l7
aqo+f4jsItVrLVnrkyCIzEZh6fl5mep20T5LJAPZ8+9QCSav6wRBWIgwS92+
E07TdtE+S8gmHddhJqzBoew5BJFOyFh/h/rMCkpoE+0RRDqQ6rkfz7xUUtwm
2f0lCCI7WM2St9c8N8w2ZZIrCsm0f2c5gcmvqRn5gdmFISwH/p247HloRkaZ
XRjCcvyByZ+HieZl06uSXRzJ5I+hGfmx2YUhCIIgiMxEOKLCDsYWuhn7Ry5j
daU8YxlrmMVvv26z1f3Mbg/d5nA0NDidDU+4XHUveTwNbwUCoc2lpc1bRo5s
3zZ2bMfOCRM69kya1Ll/ypSunokTF0aqqzvV8vI2taioVXPpeDyNmstIOJR0
r1GD5j+Cmyg3t7Gffweuolj3knBGicT6ooT/B9eE+yeZrihxbQQ+JtwKxxXa
De+SCB77fLqDSTii4E0qKWnhNWpRR43SXVGTJun+o+nT4UDSfVFwKFVVtaqF
hc1ajYw1GdwV1djnPxLtE22E18rvD/VdB69BcD+2rfq49Pc9JeKKEm6syspW
zQUFB1RtLfqt+6LggkJ/YxM9DmdUR9+x2lrdrTV9erc6a1a3OnNmt1Y7uKTg
ioKTCnXDfED/UKdYV5TRj2UcW+PtwGnW5rXwROnpc2IdGDmybT/v196jjlqy
+z/+Y9mu73zn2d0//elzu6+//sVdv/71SztvueXVz+bPf33jX/7yxrN//esb
D9911/rg3/++/rt///ubx/7pT6+NmT79tNq8vLzzA4HA/YGA/+3c3Nx9RteM
8DeZ4YgyRriicFtYWKhFeG3gp8Fjj8cDTxSvof2Aw+H4zOl0tvFcwDcUvm9o
7lmCyHQ0VxTPz/laWMXXws6cnJwIHGpmuKJinx/IFVVcXKw9h/XI1x/fz1w9
fD2SK4ogCKtwA5P/26ExtcntLmFh8O8Mbmfy52g651U2vP/eFyGHIEv9HFHi
aJfseWxWCIIghkOYpd9eJXs/NSPBOPtKZA+y5yTNWYIg4iWV3w3CQ2iX7H2S
9loiETD2suffoUIQBAEUltq9R4mzXVbYR2mvJcwilXMyHGebwilul8y+EkQ6
ImMNBtOwTbRPELLBuki3OamkuE2y+0sQRHbwDkveXtMyzDZlmiuqeph1SFfO
Y/JrakZmm10YwnL8PyZ/HiaaTaZXhbAiS5n8uZhoHjC9KtnFfzH5Y2hGjjC7
MARBEASRgeTojqiwhyfAv0YVM/bQSH47mbEFRzPWMM9mq780J6fhFru9bgHP
coejfh3PJqcz9KnPF9pRWNi0u7Kydd+YMe09tbWdB+A5mjlzsTpjxhJ10qRu
Fb6oioo2zYsEH4/w9SBwHcFR5PFEfVHwGOluo2Yt8O7gdfD5CK+R8EYhsb4o
XFe/ZqjP/ZNMV5RwMOneJ939hPtoe+z7Rs9rUcvKWtXy8lZem1bNmzRyZJs6
dmyH5j6C52jqVN0XNW3aIs2jNHp0O39Ni8rrrfVL1MPhiLq3hCsKz8H1JFxR
xhrANaV7ohr6ObgQXAvHdNeUfg1xnVhv1HB9UWhHcXGz1vcRI9r4/GjX/E/w
RKGfxuAYPFLwQsEPxeeYdj5qITJmTIfm2MK5cEahdriP1+A51NboitLnjJ5Y
V5TRVWb0gH25H8IR1dKbZvGaCBxR/D33w5t2xBGLd86dG95+3nnLt/zXf636
+PrrX/jollvWfvTnP6/b/I9/vPX+gw9ueKeu7t3XWlreD7e3v/ePzs73f97Z
uenMJUs+nrV8eaTs/PPPL/R4PMf7/f7/zcvLeyk/P39XQUFBRHhkUu2KwnOx
rigeuKK2OZ3OhTwX8T1lHCNXFJEd9LmicnJyVvHs5PdNd0UNdA6ugXWI6+N5
t9utuaL4bY/L5drI75MriiAIK/AzJv+3Q2OuTW53CYtyKs8rTP78TOds5pky
3AITUgiy1M8TJY52yZ7LZoUgCGI4hFn67VWy91MzEo6zr0R2EGTy5+ShEkxa
7wmCsBqp/m6gpGm7khUiO5E97w6VcPK6ThCExVBYeu4/qW5XshKMs79EdpOO
azCc4nYlKwRhZWSsw0N9bmXK3jCUPhPZDeZHKudjOI42KSluk+z+EgSRHXzC
krfX/GOYbco0V1Sm/XvL3zP5NU00+02vCmFFmpj8uZho2k2vCmFFPmXy52Ki
udL0qmQX9zD5Y2hG6G/UCYIgCOKQ1NsZe8YLR5TX+9BIl+vRWsYWzLbbH1Xs
9gVn22x1/5WTU/frnJwF9/IstdkWvGa3139ot9d97nDU7fF46vfn5TUegMNo
9OgOdfx4+Hq61VmzlqqHH75UnTFjsebt0T1HrZp3B14e4XgSviiXq15zFwUC
Ic0VBR8SfEKlpS197iW8Fi4f+Irg/RGupFhfFO7jmNvd0OdKGsj5Y0bgfkJb
0T60Fd6nqqo2LbiPPutp0SKehyNp1Kh2zQ8lzoXTCMfgi4LnCHU77LAuzRUF
B1JNTaf2Ot0X1az1y+tt1LxOwqGFGD1PRldU1BPVqD2P+qD2fIz7xkL4onAd
4YxCnY3X031RjUOuldExhfZjXNFv1AAOqAkT0Ge93yLwRAlHFOYQzkWd8DpR
s6oq3TmF51E7BI4oOKVwvLy8RRt79MHp1PuIvuquKL2feE54sIyuKGO7AwGk
uS/CF8XPifBzD/A5sJ+P9d7q6o5dU6d27Tj22CVbv/71Jz688MKVG6644vlX
g8GXn7/ttvWr7r//7dWNje+t6e7evGbZso9WP/XUJ8tXrPi0bdWqT/68evUn
P3n++W1zX3jh08Nef10tueCCC/J8Pt9snl/6/f7nAoHArtzc3AgcUcITZbYr
KtZPI1xR4nnhvoGbRrii7Hb7VofD0cnvX8g3lRpG38OJ7KCfK4rP/6S5omIj
roPA6+ZyuTRXFH/fHp6N/PGdvC3kiiIIIt35HpP/26Ex23m+ndQeE1Yin+cv
TP68TPfs4Tl2mDUm5BFmqZ8rShztkj2fU9lXgiCIWFK9V6Vjm5KRcJx9JbID
2fPRrLVJEER2oLD0/MxMdbtk95fIHIJM/rw7VIJJ6z1BEFYEn1Wp3IPStV3J
ijKEPhPZSSrnYzjONmXK+iMIK6MwOesmmIZtSnaUg/SZyG7CLLVzMRxHm5QU
tynZIQiCALtY8vaZW4fZpkxzRR0xzDqkK0uY/JommlWmV4WwIhuY/LmYaG4y
vSqE1ahl8uehGTne7MJkGWuY/DFMNM+ZXhWCIAiCyCxydE9U2MNYXZHbXTfW
6ayf6fEsOMHlenQev3+Bw9FwRU5Ow29ychbck5NT185vn+e3m/jtTp4em60+
AqcQHEKFhfD+tGm+qNraLs0RdcQRS9Q5c5aoU6cuUseN69Q8SPApwTcEH5Fw
O8HbA4ePxwO3U0hz9MC9BCeS7gLS/UDl5XpwvKSkWfM0we8DnxH8P+J6CB6j
bXAACa9R8lxRzZrXCm2DywiOIuE2EsExEXiMRPCccEXh9cKdhPPgSBK+KATe
JOE/gn+quBgOpOZej1GjNg7GoM5Rt1OT4byQVmvUJ9azBW9U1BkV9UbBKxV1
Rn3ZqzRUX5QYY+HXGjVK90WNH9+hBX2vqRGOKN2tJRxR+vi39HrEmrWUlhrn
S2u/c4uKdEeW3ueoK0p4sdA30Sd4yoxthR/K72/iz8M1pQf3cYxfM8LP6+Fz
YB8fi938Pb/g47N96tTOLcccs+T9r3/9iXXnn7/8ucsuW/X4jTe+2PSnP73+
8EMPvXP/okWbH1q58tP6F1/c1vTaa9ua163b3rBu3Y5/vP7658H163dc8Oab
nx/77ru7x2/bphZeeuml+X6/fxrPzz0ez2qv17uTJwIPDT9muicq1l8DDw08
UcJtI9xReB5uGjhxeA7YbLat/FZzRbnd7rGMXFFEdgBX1HSen/O5v8put5vq
ijqYL8p4DvYCrEfE5/P18Gzk+8WdvD3kiiIIIt35JpP/++FAeY/nVzwVyes6
keb8gOdDJn8uWiHzhlljQi5hlvq5osTRLtnzOZV9JQiCiCXVe1U6tklmX4nM
J8jkz8VDJZi03hMEYUUUlr6fmWEJbUtGlCH0mbA+sucbzUmCIIZKqj9vg3G2
S0lxu5KVcJz9JbIThaXnfEz1vpCsKHH2lyDSFYXJWTvBNGwT7ReEDFI9D8Nx
tEmR0K5khiAIwsaSu8/8fJjtyjRXlDLMOqQrnzH5NU00d5leFcJqlDP589CM
nGF2YQjLcR6TPw/NiN/swmQR+LvuCJM/honm72YXhiAIgiAyh6BN90T92c3Y
wjyv96GRPl/9TLc79FWPJ3Se19v4Y357A398m8NR/5DNVteVk7NgNWML3uHZ
znOAsZCakxNSbbaQ6nKFNKcOfFHwHVVXd6iTJnWpM2d2q7NmdWuuKDiPxo7t
0Jw/8Cu5XFFXFFxF8PbgGJw98PTAvWT0JuG1cAfBOYXgGJ6HLwlOH7xWdx4t
6LsmXEfwSMGXJFxRZvuioq6olj5XFNqKNo4fr2fChE7N84T7woGEc9AH+LPg
ioL7SfiPcB3UCR4pnDtp0kJ18uSFWg3xerxu5Ej9dTi3tFSvA9oRdRw19gWe
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
gwdXLExLK92cmlrSkJpafCwlpUwkJmq9KG4jcSOJm0rcXeIuU2Zmudpb4m4U
r+OuEjeH9Pr2PpRUdqLa+0TtvSjZLtKaUcd3pni90egTVqvWXurYf6KxqmNh
+Tk3jbhtFR5eoMrbys5TSkpJa+eqXAwaVC6yssrV57wPbkDxOXIXit/Hx2G5
B8X74/cnJ7cfh7fnZhVvHxLS3nzSWk+BvadTd6J4ez4viyW3rdOktZra9xPY
jPq6bpTcr91+onwM/lyOv9bHN7zkZ8LytlarL+B6y1ZWUet5c4+rkI5ZQNvl
03vyaD++1s8tp4U8Rv9pdpiWB2i5T6ebsttg8Gyl/W4IDc1bQZ/dgrS0khnD
h1cVjB07Y/LNN8955b77Pn32l79c9PPnn6+971//Wn3LlCmbJhQXb7lk/vwd
IxYt2jVo5cpDqStW7IhfsWJ/5MqVfhfdwxa6h419oBElsZlMpnOtVutTpNqK
MhqNfr1eT/eLra0p01mdKNml4SXvV+77ZK0o7lTxksbRQmPca7FYSun1H9Dr
aEWBvo6e5kYKzYe7nU5nsd1u38PzxGw209d3x3GNN55TsvsU2IkKnHuBbanA
LpzclhtUvG/6GsHrm2n/m2j5L4PBcIWCVhQAoGcQ7J8tQtgdzCEvV8DZINif
NYTw9AXdE7cS/HsDQghh3xZ0b9xK8O8RCCGEvVe3Aro7wb5HIIQQwt5mjQLA
yXErwb8/4XcTnx2EvUe3AkDf5SLyoBL8eRhMp5F94d+2Mb2hFfXLTr8qoKdh
U4J/H3aGCZ19YUCPoze0ohZ2+lXpe/SGVtTPO/2qAAAAAL0Q7ur4/X4bGdvQ
cDh73ry9lz/7bO2D1103c9KwYVUzMjLK1vbvX7q7f/+SQ6mppf6kpDIRH1+i
dpRY7iOxsp2Unl6m9paSkkrUrhJ3iWSTqKOyDWUy+drkDhQrG0ayM9WxFcU9
Je4rcReJj8Nj4XaRbFdJeRzx8VovijtO3IribWUvireh81NNSSlVt+f+Eben
AltRUu1YfBx+X5l6vmlpZa3vL6H1/D6tLcXNKK3rFGjHplNeW9NJNpzkdQhs
NclmVHs3Ku+4btTJGlGyO2U2a8rH2v7bG1GyxSWvsXadPcd9VjyOwF4Ut6Gi
o/lc+doW07Upotf4887jbf16fU6zokw5Qh4kGxTlo73kDnr8lU6Xs9Zs9i6h
6zOPPrPyIUPKPxozZvrrN98858UHH/zsqWeeWfrTv/99xZ3/+c/66wsKto6d
MeOrC+fP33ZObe2+jC++2J20bl1jzIYNe8O2bNliF6LWzL0zvo/7SCNKorai
zGazbEUdpOd+o9GotqJkLyaYrSgaV4ter99H4yqn134UExOTRuM2BPvCARBE
9BaLJZVbUTQnSmi5x263t/C8pSV9f4qir6fR6lziTlTHVpRUdqTkfAx8TXai
eMn7NBgMgvfvcDiO0vu+dDqdr9E67k2gFQUA6AkE+2eLEAZL+v8n5WVF+/1a
4OwR7M8dQnj6gu6JWwn+vQEhhLBvC7o3biX49wiEEMLeq1sB3Z1g3yMQQghh
b7NGAeDrcSvBv0/h6c/rYI8BQtg5AtDXuY48ogR/LgbDStJ15pewxzBFCf41
PxObybBOvyqgJ7JTCf79eCb+t/MvCeiB8PefYN+LZ+pLnX5V+h65SvA/xzOR
m6OOTr8qAAAAQC9FCGHat88fceiQSFu9uunCSZPW3n7nnfP+eN55U/MzMsqW
JCcXb01JKT6QnFzSnJgoW1FFan9Jyl0l7itxQ4nlflRYWIHaNmpvQHkDlD2k
E5Xbyk6R7EWxWrfIp3aQuJfErSStXVQgYmOP70Vx+yk1tbS1F6W1nzqOmZtR
snfF8nNWa0sVqn0o3r+m1oriRlK/flpjKjOzvNUy1bS0UvX40dHclsoXoaHH
d5wCO1HHt6K0lhOfm+xkBTa1tG6U77hu1PHNqMBOlOxCndjgktf1ZJ2okzWj
2q+7R92PzaYdi69FeHghXY8idcnnScdtoWMeMxhyDtM+DijKlP2K8tEusl5R
cr4kl9NxP6Ptqun65NP1enf06Gkv33LLnN898siin7ndX9z7xhvrvvfRR1uu
LCvbcvG8eTuGL1y4c+DKlXtTV6zYEV9Xty9i5cqdLr/fb6F71kjq+1gfKhDu
VautKIvFstBqtR6kx35S7cPIvkxnKzs0X9eKioyMVF+nMflpjPuNRuN0Wv9o
XFwcd4nRigJ9GT2Z6nA47o6IiCiOiora43K5WkwmU1sriuX55HQ6TzmP+TVW
tqI6ttxkr433qdfr6Wu4zk9fJw7T85U2m+1vNDfH0DjCg30xAADgW8D/LRHs
nzFCeDatIn9KWhUQDIL9+UMIT1/QPXErwb83IIQQ9m1B98atBP8egRBC2Ht1
K6C7E+x7BEIIIext1igAfDvcCn4uAyGEZ1O3AgBg+N8t7FCCPyfPph90ypXr
WfDvRg32dT8T3+r8SwJ6KCVK8O/HM3Fc518S0EOpV4J/P56JF3b+Jelz/FMJ
/ud4Jv6/zr8kAAAAQO+FmzvbtwtnU1NTv/XrG8/96KO6q3/604WPjRo17d9p
aSXzkpKKNiYkFO0lj8bHF4vY2BIRFVWktpSkUVFaf6m9s1SgtpC4W8TNovZW
0cn7UCfqDegaedrkdbw/biXJVhR3irjLxH0mrVdVLFJStJYTy72ofv2K28YW
FVWgjo+7TydTvsadqMDWk9ZHKlDPla8Dt6jS08vEgAHlIitLMyOjVD12XJx2
Dfg9gfv4+laUdn20jpPWcmo/98Bu1Ml7USw/5o6W7EQFtqHkfqSyA3WqXlSg
ej3vi8fIYy2gcRe0nkOen2x2OnOPWq2+g3S8Bp1uyl5FydlO1pFr6LiLaSxz
absyuoc+HDSofNLo0dOfv+mmOU8++ujnD/zhD8vvePPNddf5fF+NnTlz5/kz
Z247Z9Gi7RlLlzYlrlnTEL1njwjdsmWLnZtmpIH7UH24ESXhfz9+jtls/j+L
xfIZ2WQymfyyOcPdGG7FdFUrSu47sBUlj8mtKG7VcCtKp9MdNBgMi2j9X2Jj
Y/lnDtwm7uufHei7cCsqhVtRUfSNJCYmZjfNjRaaK/S126HOG9blcqktKDnf
AltQLL/Oyjkp21L8nN8ve228T6PRyL0o/trQSMdZRF8znqHHw5W+9XsqAAA9
l/1K8H/GCGFXO4d8jOyngGAT7HsBQnj6gu6JWwn+vQEhhLBvC7o3biX49wiE
EMLeq1sB3Z1g3yMQQghhb7NGAeD0GKvg5zMQQng2BAC0cy65Rgn+vDwbvtxJ
16yncbUS/Gt/Jg7t/EsCeiiPK8G/H7+rFV1wPUDPJUcJ/j35XS3vguvRF7lR
Cf5neSYO6vxLAgAAAPReuLuzZo3f8vnnDdHLlx/O9Hq3XPLww5/fe8klM/6W
nl5aHh9ftCI6umBHdHThQVr6IyOLRUREkdpNkspeFKs1krQOkmxFad2i02lF
tXeOZC9KtpK4k2S3a20k7hVxi4mPxw2ouLgitQuVnFwiUlNL1E4Ut5u4H8Wv
8fhO1oGS8rpAtZ6TpnYcrSUVE1OoHof3z72ojAzNtLRSkZSkHYuvidaKOnUv
ivd7fCtK6zgFdppk00lrR2nXQ/aiuAsV2IviJTek+DXe5vhOlKetNRV4fU/d
jPK26qPXuWGVS+/jfavHbHE4fMccjtzD9PiAxeJpMJm8uwwGT71en/MlLWvp
c/+UXqum65VH1+nd4cOrXho/fuYzd9/9yaOPP77ohy++uPzmd95Zf6XPt3n0
tGk7hs+bt3Pg8uUHU2prD8Tt2yfCa2uFk+9Luj+N3DNDH+o4uBU1xGw2P26x
WObRspF7MCQ3mtoaM4Fdp87sRck+TaCyXRMVFaW2angcOp2umca2mdYX0Vgm
0lgzaNw2Bb0o0DfhVlSy0+m8leaINzo6ehvNpWbuu8k2FM8hfszK7pPsQ8le
VGCbjeVtZSNOvoeX/JznIc1Bnoe76XENzcGHaAyZpD3I1wIAAL4Nm5Xg/4wR
wq7wc/K35AAFdCeCfV9ACE9f0D1xK8G/NyCEEPZtQffGrQT/HoEQQth7dSug
uxPsewRCCCHsbdYoAHx33Ap+VgMhhF2hWwEAdCSZnK4Ef352pY912tXqefC/
k9mrBP8z+C7+uQuuB+i5pCnBvye/q+d3wfUAPZeJSvDvye/qZV1wPfoiFrJJ
Cf7n+V18rguuBwAAANDrqampMU6btieUTH7nnXUjJ078/KYxY6qf7t+/5KOY
mKIF4eH5m8PC8hrIYyEhBSIkpFDwkhtIshUVHa3JzSbavq0VZbW2t6K+fSeq
vWWktY5kI6m9FcWdpcBWFDeg+Pjx8UUiIaFY7UNxtykpqUR9Hhtb1Do2bdw8
Pm4rBcq9JZZfk/s/2XF4P7GxheoxuEuVklKqLuWx6JqpTSk+ltaL+u6tqI7d
KH6dt+MGF7eiuA3FY9fGrI2f18lGF18zfqxtl9t2rvy8/bNpv9Y6nVdtQ3Ej
ql21N+U3GHKaTSbPERrrQbLBYvHuoX1vp33UkastltzFdIw5dI1K6dr/b/Dg
8kmXXDL1+RtvnPvLiRMX/OSZZ5bc8Y9/rLv23XfrLsvLqzu/qmrrkLlzt6ev
Xt3Ub8sWEbVrlz+krq7OJoQwkQb0oU6JmUy3WCz3W63WcrPZvEOv1zfTOrUN
w40o7sV0VSsqsFcj18uWTYdWFN3XlkZ6fQm97yWj0TiaxhihaD8LBKCvwfd9
tMPhuDIiIuJNcp3T6TxMc4S+Htva5hK3n3g+8fzl5pOcX6fqtvH2/H7eRrai
+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
psGU1vfeQw47y2MHAAAAAAAAAAAA6Gp0l1022XrJJeXRo0dXZw0fXnVpSkrR
jyIj8/7ucPgqLRbfSpPJt9No9B00Gr1+gyFXaHrb7NiL+jatKO4bcSOpX79i
kZKidaLS08tEamqpuk42nsLDtUYUd5N4yetkW6m9J1XQ1nUKCclTt+NtEhKK
RWJisbrk57wvbjXROak9p29qRfF+pLxf7jXxdnzOJ2tFHd+M8rQ1o/g9fEx+
P++be1c8Hu5kxcdr4+NzZhMSikRcXFHbuWk9rHx6bz5dN01+zNJY/XQ+zS5X
7lHa7iCNuSE8PG8vXaMdcXGFm1NTi9cNGlSx9Pzzp8674oqayttvn5MzceJn
bzz11OI//fGPX/zq739fOfGNN9bd9cEHm27Izd06rqjoq4umT9927syZOzI/
+2x30pIljTGLF+8N27JF2Fv7UAb0oYLKca2o8PDwtlYUd2Zkt6mz21C87NiG
6vicOzVoRQFwUnQ0V0Npjox0Op2/pfk6m+bIdr1e38xzRs5dOafk3OPH/Bor
1/N2sgnH63jecT+KX6NlM82/RqPRuJyWb1ut1h/QcdIVbf7h6zYAAICuhr/X
cLfJSjrIEDKCjFa0bmEYaSeNwRogAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AOg18N9XjSHjFe3vrRqCOxwAAAAAAAAAAACAs8tll9UYR45cGDpuXHXKuHFz
Rg4dWv69pKTCZ8LC8jxWa+4ik8m3xWj0NBoMnub2VpTvuE6UySQ9dSeqYyuK
e0jcSUpOLlEbUf37l6rdqFO1ovhxVFSBiI0tFPHxRWpriffB7SWtGaVty895
m6SkYnWfsj/FfSZ+3eHIVccqe09f14rifbHco3K58tRt+L3f1IsKbEbx9eFW
FB+X98tj5vFzxyopqUQ9f5bHy+OUraiwsEI6ZgG9r6C1FZWnXjuyxW73HbPb
cw/TeA84nfn7QkPzdtP12RoVVbQhNrZ4Be1vwcCB5TMuvHBawYQJMyffddfH
rzz++OfP/vnPtT9/881193k8dd8rL98+oaZm+yXz5+8dsWjRrkFLluztv2LF
gfi6On/EypU7XX6/sAghjNyHQiOqW8DNl0EOh+PRsLCwOeRxrajObER1bEXJ
Xg0/l52ajq0os9mMVhQAJyExMdFG8ySF5sxdTqfzPavVuthoNDbynOH5G9iI
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
IVcYjbmt3ShNi8XX1o6S3SjZjJJyR4pfk9vxNtyQ4iZUREShiIkpEvHxxSI5
uVSkppaKxMRiERlZQNto++SeVFxcoRgypFJcffUsMXHiQvHiiyvFBx9sEpWV
28WsWTv806dvPVZYuHn/++9/Wf/Pf65e+6c/LV/+3HO1X7zwArt86bPPfrHw
5z//fO4998yvuuaamd5Ro6a9ecEFVX++/PIZv7r77nkP/upXC29/+eU1V77x
xuoL/v3vL7M++mhngte7PrS2Vpjdbu5xAXAC3IqKsVgsV7lcrjdDQkJWWa3W
g53VipIGdqHk63Kd7NTI49DxaZ4aTmhF0TjRigLg22NKTk6Oj4mJuZLm1z9o
Pi+mebSPVPtQPN9YOQdb52EjrVsRFRX1Js3F6+g9iQrmHAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4JQtNivLfELu9NM5i8fR3
Oj3ZdnvOiOho3+iMjPIJI0ZU3XfFFTXPXnvt7HevumrW1DFjqpePHDl1R3Z2
xdGUlFIRFpYv9HpvWytKUfixT11yN0qv9/hZg8HjNxq9J+1Gac2o4xtRga9x
JyosrEBERxeKhIRiwccdMKBcDBlSJYYNqxKDB1eK9PQykZRULNLSSsXQoZWC
xioeeGCBeOGF5eKDDzaKadO2iQUL9vhXrdp/bO3ahgO03Lp48Z5Vc+fu/GTq
1K1TKyvri8vK6otLSraU5uVtLpw8eb3nH/9Y9e4f/7j8lSef/Nz92GOf/+LJ
J5fc++KLq25+4431V06ZsnF0UdFX586Zsy2ttHR73LRpe0JraoTV7a4xBvsT
Bd0ao9VqTXY6nRNdLleBxWLZZDabj3VsRXXsP31bA7tQbMd+lGxIyePwcQNb
UTqdrprGiFYUAKfBgw8+aLrnnntiBg8ePJbm1os0r2cbjcZd3IGz2+3qHIyI
iBCRkZHqY553ZCPNx+XkG+S19Ho/BXMOAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAJwanaKUWxTF61SUD8OdzvLoiIiSftnZlRnj
xs0Yeeut86776U8XPvboo4v+9dBDC8vuueeTpTfdNHfb+PEzjl54YbVISysX
dnt+ayPKE2COX1GmNNPyKC3ZYzqdp8Vg8AnWaPS1daNkF8pi0RpRsiVltfqE
w5EnQkO1TlS/fiWif/8yMXBgpRg2bKq44ILpYtSoanU5YsRUMXLkVHHppdXi
9tvniSefXCJef32tKCnZIj77bI9Yt+6A2Ly5yb9jx8FDe/Ycqd+58/DS+vqm
6rq6A54NGxrfXL163ysrVjT8benSPS999tmuP9fUbHu2uHjzL32+jT/1euvu
nDJl8/U+39ax+fl1F9TUbB0yd+729EWLmhLq6vZF1NTUOmtrhdnrFYZgf5ig
R2B0uVyjbDbb8xaL5VOz2dxot9v93G7insyZtqJ4GdiFkq0oqWxS8dJqtXIn
Cq0oAM4Ar9drePXVV8MuvfTS4fHx8T+nuTeF5vZqk8l0lOeY0+lU51x0dLQ6
7+g1ttHhcKygOfkOzdubaLsUBXMOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAHwttxkU5S2TonjNtLSnpXlDb7vt07innlqZ9eKL
q654+eU1D//jH2tee/nl1eXPP7/8i1//eumOhx9ecOwHP/hMXHbZbJGYWCZM
ply1D6XTTWk2GDxH6fFhRZnSRDaSDeQBRfEc1uk8Qqfzqer1XmE0etVmVEdl
K8rlyvVHRhaI+PhikZpaJrKyKsQ551SJ4cOnivPPnyYuumi6GD26WlxyyQxx
1VWzxN13zxdPPbVEvPHGOlFZuU0sW9Yotm49Jhoa/KKx8ZhoajracOTIsVVH
jvinHT587IMjR1r+euBA85O7dx95oL7+4A/Je+rqDv5g06aDt61Z03TDunWN
V6xdu3/00qV7Ryxb1jBw8eK9qbW1B+Jqa/dF1NZudwohzKSB1AX7UwQ9Bp3L
5Rpgs9kmmkymKnKv3W5v6diK+q69qI5tqMBGlDwGd2u4JWU2m2ku6li/wWBo
0Ov11SRaUQCcJtyLuuGGG2IvvvjiK7Oysn5H863CaDRuIY9YLBY/z0Geezzv
uBVFc/4APV8dFRX1X5qX99BcHEi7sQT7PAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAABAt0YXoP6yy2qsb721Kmrq1F2Dpk3bfvW0
aduemDp1278rK+tr8vK+Wvff/27c+9prq5ufe26FuP/+BeKii6b54+OLjrlc
eYcdjtwmmy13v8nk2avT5ezU6aZspeUWvd5Tr9d79yjKlKOK4hGK4iO9ai+K
NRh8wmjMJfNUzeZcQfsRISG5/qioApGYWCz69y8VmZnlYuDACpGdzc2oSjFi
xFQxalS1mDBhlrjrrvniySeXiEmT1ovy8h1ixYpDYtcuIY4cEaK5WYhjx1qO
tLT4N/v9/jlCiPdbWlqeo+WD9Pymgwf9Y5qajp539Kj/fPIiWnfhkSP+EY2N
Rwbv2+dP/+qrpsT6+obo9ev3hC5cuNBO7zOR+iB/bqBnYrBYLKlWq/Uuk8lU
RO52OBxqK4obToGtqDPpRXVsRvG+IiMjRVRUlHocp9NJc81I81BRW1H0uIHG
Uk2iFQXAd8Dtdpsfe+yxrAkTJtydlpb2Ls255TTP95vNZr/dbm+bzzTfuRl1
iObj5oiIiFJ6/CRtdxntIkLRvg8DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAPCNlJevsaxevavfhg0HR9XVHbh/9eoDf1+5cl/5
8uX7vli6dO/WOXO2N5WV1R+dPPnL5ueeW37sBz/4+PDo0dMbBw4s35ecXLwj
JqZoc0hI/nqbLXeFw5G7xOXKXRgWlreYnq/V63P2KkqOX1HyhF6fJwyGXHWp
0xXQsoieswXCZMoVVmuucLnyRWRkoYiLKxZJScUiJaXYn5paItLTS8WgQRXi
vPOmivHja8Tdd38sfv3rZeKNNzaKysrdYvnyI2L3biEOH1YbUS3Nzc0Nfr9/
PTmbO1G0/B15HzmBng+jZX8ygUyk56mtz5PIWHoevn27cNJjCz02ohEFzhCD
1WpNJm+3WCz5tNztcrlO2YrqrF7U17Wi9Ho9WlEAnCFer9cwceLEfjfffPM1
48aN++eIESMWJyQk7LXZbH5SnY8RERHqPKTHvO6g2Wyupa8Bk+lrwUS73T6U
duMiDcE+FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AADQfRFC6ISoMe7dK8J27TqcXV/fdOvWrYderK8/VEKPa7duPVi/efPBPWvX
NjQuWLC7qbJyW9PkyV82/v73X+y+997Ptl511ayNF144fWV2dsWC/v1LZyYl
lZTTMj87u9JL6wr69y+ZGR6e96XLlXckKqpcxMRUibCwCmE0lghFKVbV67kZ
5aN1nmNms8/vcBSJ0NAyERlZImJjC0V8fKGfm1GZmWVqJ2rChJni3ns/Ec88
84V4550NYtq0XWL58oOivv6I2L//6NFDh47tbWlpWUfO9/v9+eT/I58i7yLH
kefSeSfTMoKWzlZDyTBa56qr89vosYn7UHx9gv0ZgV6B2opyOBx3koXknpCQ
kJaTNaI6uxfFjShu1fD+uBVlNpu5E4VWFACdwGWXXWa84YYbYm+88cZx3//+
91++6qqrFmZkZOzhVhTNeXUucqstNjZWfWwwGIROp9tNc262xWL5C3kl7SZB
wdwDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF+D
EMLg9/sdTU3+xN27j47eufPQw7ScvGvXoc937z68ff/+w/v37Dm0v77+4J7V
q/fvXrBg9/aKiq2bJ0/esPYPf6hd+sADn83//vfnVl599cycsWOr3xo3rubv
EybM/tNNN83+8y23zH11/PiZ/xs9etqnl1xS3XD11QvF+PFLxODB80RISIVQ
lHzSc0Sny9mr1+d8ZTB4NptM3iartUQ4nZUiLIx7UYUiIaFYpKdXiPPPny6u
u262ePDBz8Rzz9WK9977UlRWbheLF+9t2bjxwKFduw5vO3jwWO3Roy01fn/L
lJYW/6t0fk/T+T1Ay5uPHhWXHDniH9LaiYqkpb21CRWogRtRwf5cQK+jrRXl
+v/s3HmYnXV9+P05+332mXNmEoJsYgRZBYJYDBJEdlAIySQsiUHZBExELS21
auzTR6X111YqjxW3Cq6grdi6YasUtCJ1wSq4UNlUKGuA7JnMnPv3/Z7OyTPG
YBWCJ8jrdV2f63tv577vM1cO/Peu17utqLBOTG07PdFWVO+6Xhtq6md7x3rX
xe1SqdTt1eTz+U6hUNCKgidh+fLl+WXLlk2fN2/eYccff/wlBx988E0jIyMP
h1OxxdZttcVWVOy1xVZb+K3F397qYrH4/TCXhzkpXLtzmFKfvwoAAAAAAAAA
AAAAAAAAAAAA27DYR7r77nToscfW7/bQQxuPfOSRsTc8+ujY1Y88suH2lSs3
bFi9emx81aoNj61YseGeX/xize0/+cnKW775zYe/9bnP3XPd+99/+2fe/vZb
//6ii773N8uWfXf5a17zrdctW3bzORde+N2z/uiPbj73TW/6z9f94R9+75IL
L7z5s+GaX7zlLbelF110Z3r88TelO+zwz2uy2avuHhj4+HcGBq76UibziU+H
/S/k85/8UbH46XXl8mfTev0zneHha9KddvpS+vzn/1t6zDHfSM8999vp2952
a3rFFbETdW/67W8/PP7Tn65cdd9963+6cuXYV9at23jFxMTEO8bHO68Ps6TT
6Zy4cWPnJWE9MMzuYZ4VpjWlE6ULxe9CbmhoaKdGo3FKtVq9plKprKjVahO9
jtPj9aJ+01ZUvE/s0MQ1tmlilyaeq9fraXhW91y8Lp4rl8u9Xo1WFDxJsRX1
rne9a/qiRYsOnzNnzl/ts88+3xseHn40/KY68bfWbrc3daLifmy1FYvFNWG9
LcwVYXt+uM0uYZI+fxUAAAAAAAAAAAAAAAAAAAAAtmG33JIW7723M7JqVWef
NWs6L1+7dvyNYa5Zu3bjz9etm0jjrF079tDKlRtvefDB9V//2c/Wfv5HP3rs
EzfeuOLvvvCF+97+iU/c8ccf/OBPz3v/+29f9L733XHie95zx9HvfvdtR77/
/T857mMfu3v0ox+964Irr7z9bz/ykbu//uEP3/ngX//1j1eeddZ/3Ln//l/+
arX66SsGBj55ycDAx/8om/34smz2qrfkcp/8WKFw1beKxatvr9f/8ecjI59Z
+exnX5sedNCN6YIFN6dvfvOt6ZVX3p1ed93D6fe/vzK9/fZVG++/f919jz22
8Wvhnf9ubGz8DZ1O5/QwJ4Q5NMz+sRGVpulOYR0J0whTCvu5MJl+//15xsgl
SfIrrajYcop9p14z6qloRcU+TXjmpuOxHZXP57WiYCu4+uqrc29729tGFi9e
fMTRRx/9oTlz5tw3e/bs8QMPPDCdOXNmOjw83P0dxt9g7ERN/vbWFovF28Nv
86NhHQ23eXaYcr+/CwAAAAAAAAAAAAAAAAAAAADbpthKuvPONFm9ujNjbKzz
gvHxzsKwLh8bm/jHsbHx2zZsGF+1fv3GR8P6w7Vrx764cuXGDz344Lq/+tnP
Vr/lRz9a9drvfOehV33rWw/Nv/HGh4+94YYH5lx33YMHXnvtf+99zTV37Xnt
tXfu94MfPPyiH/zgsRNuuunh866//v5Lv/Sl//6Hj3/8zmv+7M9ufe9xx33t
4u22+6fFAwNXHT8w8JHDBgY+eWgu94kTstmrzisUrnpHklz9vsHBf/zU9Omf
+dauu35+xUEHfXV80aL/mHjXu37Suf76R9O7755IH344TR96aMPGxx4bu3vD
hol/Gh8ff0un05kfvtchYd03zHPDPCtNO+2HHvr/G1H9/rvzjNRtRVWr1VPq
9fo1YV0R1l9pRT3RiZ/v3WvzVlRsQ8WOVDzWa0Xlcrk4WlHwJMVW1Nvf/vb2
4sWLjz7uuOM++/KXv3zjK1/5yvRVr3pV59BDD+22omKvLf4GYysqm83G396a
8Ju7LRy/slgszg+32WVAKwoAAAAAAAAAAAAAAAAAAACALYidqDD5MLW1a9Od
Op3OH4yPd04L659OTEx8aHx8/CsbN45/Z3x84htjYxOf3rhx4q/Xrh3740cf
HTv34Yc3nHrffetffvfdq4648861B99xx+rn/+hHD+5+yy0rdrrxxvumf/vb
9ww/8MDqGevWrXvO6tUb9rvrrnWH33rrqgXf+MaD5375y/ed/cEP/njB0qXf
nbP33l/Yt1j89HMHBj6xy8DAR3ceGPhY2L7qoLB/bJJ86tRW6x9f+6xnfeay
3Xb74rWHHvrV71xwwbd//IlP3P3AD3+4urNuXZqOjaXp2rXjj4yNbfxOeO8P
hO9yzmQn6jlhpoftobBWw1oIk+3335xntNgo29SKCrOpFbU1elG9zw8ODnZb
UXF6rag4cbvdbndbUbFbk8lkYrOmk8/ntaLgSYitqHe/+93thQsXHjtnzpwv
H3nkkZ0zzjgjPf/889e95CUv2djrs8XfZvj9p+G3FltRq8Jv7/vFYvHyMCeG
24T//w0k/f4uAAAAAAAAAAAAAAAAAAAAAGx7rr46zXU6nVKapoNh3TGss8Kc
FLbPn5iYeGuYvw1zeZhLx8c7bwnz6rVrNyxcvXrjMStXjh366KNjBz788Ia9
7rtv3a4PPrhm+8ce67QfeqjTCPdIwhRjoylMK8z269alu9511/o977xz9X63
3LJ6vxtuuHfPD3zgjp3nz//uSLP5saGBgY80BgbeWR0YuDbMv7QHBv5+l4GB
j+4zOPjJQ3fe+XOnHnDAtRedcMLXLnn722+9/N/+7f6v/Pznq3+xZs3GlWNj
4/eMj0/cGN7xyvCcPwlzQpjdJxtR8bvlYhOr339rGJjSimo0GtcMDg6uaDab
m1pRvV7Ub9OHiu2ZOFs6Fqd337gdezXDw8PdhlSpVErDu8RelFYUPEmxFXXF
FVe0FyxYcPQBBxzw+QMPPLBz0kknrTvrrLPuOeSQQx4Jv71O/G3HVlv8jSZJ
EntRD4e5PvwW3xHmyHCbGQN+ewAAAAAAAAAAAAAAAAAAAABsQZqm2dhTChP7
TtvFxlKY2WFODLMkzLlhzgtzVphTwxwb5kWrV294/vr1nd1iX2rVqlXTY2vq
/vvTWuxDhcnH+8Y+0+R27EbV4jMefTQduvfezsiqVZ1p99yzcvgLX3iosXz5
ncmsWZcXBgaujh2dyaZTGrYvrwwMvL9VLn9khz33vGbPo466/kWvfe13j73y
yjteceutj731kUfGPrJhw/hnYyMqzCXj452lsXM12bvaLr5LX/+48Ku6ragk
SbqtqHq9viLMRLlcTiuVSrfp1Gs9PZFW1NRGVO9Yrz8V92MjKrZq4losFrWi
YCuJrahLL7105JRTTjn8kEMOee/s2bN/ePLJJ3/3Va961XUvfelL/3PXXXd9
YNq0aevjby/+1sNvbW343d+y3XbbfWiXXXY5O/w+9wm3qYXJ9vu7AAAAAAAA
AAAAAAAAAAAAALDtmew5FTqdTjmszbDOCLNbmnZeEObwsH3M5Lw0zMFh9g3z
nDDbh2mHqU+2oAphcpP3686U++cmm1HxmmJsU8XP3HZbp3Tdddfle9f+quXZ
MPmBgUtLL3rR1+vLlt04/S//8gfP+ad/uuuAu+9ed9SKFeOLN2wYPzM2rDZu
7Bwf1jlhDgjz7Niuis/9Xf4t4TeQS5Jkp2q1ekq9Xr8mrCvC/kQ+n09LpVK3
6RRbMnE270X19uM1U4/39nstqKmdqKnX9CZeE4/1WlHZbLZTKBS0ouBJWL58
eX7p0qUjZ5555kFLliy5YPHixZeec845f3322Wf/1dy5c/9h9uzZP9h1110f
Cb/BTi6XG8tkMr+o1WqfO+igg/5wwYIFhx511FGtfn8HAAAAAAAAAAAAAAAA
AAAAALZtaZpmJztOSWw/hZk+2YPaOxzbL6z7hNk9bO8SZrswQ2G/Otl8yk9+
Pvv4zadNzajs1Pkt3zFz6aW3la655sH6DTfcO3L77Wt3Wr++s1t4hz3iu4WZ
GRtRYXYMMxKur2hFsQ2K/yZ3SpJkUyuqWCxOZDKZbrspNpxardam5lOv7zS1
/9Q7tvn21MbU5q2oOOF53emd67WicrlcJ2xrRcGTMDo6mlu6dGnj3HPP3eX1
r3/9i8KccNFFF730nHPOedm8efPedfjhh9/23Oc+d0P47cff3Zrwu7sl/F4/
ePDBB59y8cUX73bppZeW+v0dAAAAAAAAAAAAAAAAAAAAANj2Tfab8pP9p1pY
27ELFdZnTbaj2pMdqdJkVyrX60P15nfwjpnrrkvzt9ySFiffI/agmmEGp0wz
nCtPvuNT/k7wW+q2orLZ7CmVSqXbiiqVShNh/wm1oqZO75rNO1FTPzf1/rFZ
ExtVWlGwVWSWL1+eHR0dLZ5//vm1v/iLv6h/+9vfLpx55pmtY4899s0veclL
Ht59993TfD4fW1Erwu//a8PDw+/YcccdjwzHt581a1ah318AAAAAAAAAAAAA
AAAAAAAAgG3fZO8pO9mAKsQWU5jq5MT2UrEffajf4J3zk+9WmNzO9fu94Nfo
tqLCnFIqla6pVCorisXir7SiNu9C/TatqF93PK7tdrvbiiqXy7ETFds1nUKh
oBUFT4FjjjmmccIJJ7zt6KOPXnPQQQel06dPXxN+f9/bYYcd/n6nnXY6p1qt
7h0uq4XJ9vtdAQAAAAAAAAAAAAAAAAAAAHj6mNKB6nWjcps3ovr9jlNti+8E
v8amVlQ+n78mzIpsNjuRyWSedCuqN5uf7302TmxExVZUfEa1Wk0LhUIcrSjY
+jJLly4tnXHGGfvMnz//A3Pnzh074YQTxg8//PBbDj300CvDLJs9e/Yhe+65
Z6vfLwoAAAAAAAAAAAAAAAAAAADA09+UdpQmEzx5m1pRmUzmmjArwvZEmN9J
KypObEXFZlRsRcVnxlZUWLWiYCtavnx59nWve11ryZIlsxcsWHDZ6OjoXQsX
LvzxokWLPnbGGWe8/pWvfOWcCy64YPtwXb7f7woAAAAAAAAAAAAAAAAAAAAA
wC/5lVZUmIkwW70VtaVr4j1iJypul8vl2IlKS6VSJ2yvTJJEKwq2ktHR0dyZ
Z57ZOu2002bNnz//tWE+vGDBgveccsopS1/xile8JJybrhMFAAAAAAAAAAAA
AAAAAAAAALBN+qVWVDabfUpbUVvqRsX71Ov1NEmSbisqrJ1qtbqyUqloRcHW
kznmmGMa8+fPnzlv3rxj586de25YF42Ojh6ycOHCHQf+578FAAAAAAAAAAAA
AAAAAAAAAPCMkKZppjf9fhf4DWTD7Bzm1Gw2+9lcLtdtRYX9J92K6p3fvBcV
u1Bxpn6mVqttsRUVRisKtpLR0dFcmFrsRYU5aO7cuXuHdeSYY44p9fvdAAAA
AAAAAAAAAAAAAAAAAOCpNtmGqnQ6nVZYm2EthzWvF8XTQG7gf1pRp+Tz+WvC
bNVW1JZ6UZu3ouLaa0XFZ5bL5V9qRYVjWlGwFR155JHVuXPnTovdqH6/CwAA
AAAAAAAAAAAAAAAAAAA81dI0zXY6nXqYmWH7kDBHhO0DwsyI7Si9KJ4Geq2o
hfl8/h/CPPhUtaJ6107tRMXzvVZUpVKJnai43QnXrAyrVhQ8BZYvX54dHR0t
xrXf7wIAAAAAAAAAAAAAAAAAAAAAT5XYf5rsQDU7nc5eYRZOTEy8Nczbw/ZZ
4fisMMNhuxTWXL/fF36N+O/zWWFOyufzH8vlcvdkMpmNA1uhFfV4M/UeQ0ND
m/pRsRcVJ+x3wnUrw9ptRYV30YoCAAAAAAAAAAAAAAAAAAAAAOA3NtmJynU6
nXKY7cPMGR8ff+PExMRnwlwb5l3h2NwwzwnTCNcWwmT7/d7wOOK/zXaYw3K5
3GVhfprJZNYP9KEV1btHOK4VBQAAAAAAAAAAAAAAAAAAAADAk5Kmab7T6dTD
7Bi2DwvrmyY7Uf8Z5rPj4+MXhmMvCDMtNqViW6rf7wyPI7aimoVCYVYul/vz
MN/LZDKrwrHOb9OKmmw8bTq2pYZU7/zjtaLiNXE/jFYUAAAAAAAAAAAAAAAA
AAAAAABPSmw/hal1Op0Zk02oCyYmJj4V5gdhvhHmr8KxE8I1u4ZphimGyfT7
vWELeq2o/ZMkeVOpVPpWLpd7LJPJPKlWVO+6/60VFSd2omq1mlYUAAAAAAAA
AAAAAAAAAAAAAABbTZqm2TBJp9MZCbNHmHkTExOXhblpshd1VTh/Tpj9Jq8p
x8/0+71hCza1ohqNxhvr9fpNpVLp0diKCse2WisqHo8dqKnne9uxE1WtVrvH
tKIAAAAAAAAAAAAAAAAAAAAAANha0jQthGl2Op2dw8wJ88aJiYlrw/w4zL+F
/T8Lc3i4ZqcwtTD5fr8zbMGmVtTg4OAbm83mN8vl8qPZbLbbiqrX65saT722
09SZ2oTavBk19djmLampE58Re1Fxe/JZnbC/MsxXwpwVzj83vGOh338oAAAA
AAAAAAAAAAAAAAAAAACeXtI0zXU6nWpYtwuzX9h+5cTExEfCfD/MzWHeH46d
Es49L8xQmGKYbL/fGzazqRXVaDS6rahKpfJoPp/vtqJ6DafYeIodp143qtd3
6vWg4vbU3lOcLXWlpnajNm9N9Z4R7tNJkuSxcrn8r61W68wdd9zxOQNaUQAA
AAAAAAAAAAAAAAAAAAAA/JbSNM10Op1SmFaYmWGOm5iYuCTMDWF+GObz4dgb
whwUZlq4PtGKYhsU/00OFgqFA2q12p9Wq9WbSqXSY9lsthPWbr+p1Wr9SuMp
tqLi9I71elFx7fWkttSK6jWhttSK6n0uvEOnWCyuCnNDeMaycHyv8I75fv+h
AAAAAAAAAAAAAAAAAAAAAAB4+knTNN/pdOphdgjzwvHx8ddOTEx8Nsx/hf2b
w/q3YT0+zI5hyuH6XL/fGTazqRWVJMmflkqlm3K53GPhWKdcLqfTpk1Lp0+f
3u06VavVbh8qdp16a+w7tdvt7rp5++mJtqJqtVpsRa3J5/PfCe/z/4b3mh3e
p9DnvxMAAAAAAAAAAAAAAAAAAAAAAE9DaZpmYwMqzEjY3jOsp4b50MTExI/C
3BGOXR32XxFmZtiuxVZUmEy/3xumiK2oZqFQ2C9JkovD+vVMJrNiYLIVtd12
26UzZszYYisqTmw7tVqt7vR6Ub1zv20rqne8VqulpVJpLJ/P/yzMp8M7nR3e
Z6fJdwUAAAAAAAAAAAAAAAAAAAAAgN9KmqbFMINhdu10OkeG+X/Gx8e/OjEx
cXPY/liYJWGeG6Ya21L9fl/YTPw3WS8UCvuUy+XXhvXaTCbzQDjWKZVK6cjI
SDp9+vRu1yk2nOIae069XlRc47HYiYq9qN653vEn0oqKTar47GKxuCa8zw/z
+fzlYfvY8E7bhcn3988FAAAAAAAAAAAAAAAAAAAAAMDTTZqmuTC1TqezfZgD
wiyamJi4JMx7xsfH/zjsvzSei02pfr8rbEEmTDlJkp3DnFYqla7I5/P/FWas
XC5vakD1ek9xP06vFdWb2HjqtaI2b0Q90VZUeJ/xMA+F9/hi2D8zvOdzw5T6
/PcCAAAAAAAAAAAAAAAAAAAAAOBpJk3TTKfTKYV1MKw7htk/zNFhjg9z0GRD
St+GbVnsRVXK5fIfVCqVP202m9e32+1HBgcHO7HbFCd2nWILKk5sRfU6T7Va
rTtxP3ae4rmpLagn04oK79Kp1+urwtwQ9i8I77hnmKTPfysAAAAAAAAAAAAA
AAAAAAAAAJ6G0jTNhUnC1DqdTivMSNgemmxIZfr9fvAbyCRJsmOj0Vgwffr0
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
IyMj14T5crlcvjWbzT5arVbHJ1tQ3W5UnF4vqteKiucGBwdjK+oXmUzmS6VS
aekOO+ywz8yZMxv9/q4AAAAAAAAAAAAAAAAAAAAAAABPQ5mZM2eWRkZGtqvX
6y8M87JqtbqgUqksHhoaOndwcPCNYf/DpVLpW+Vy+cFwvhP20yRJ0nBNtw8V
ruk2o6Z0ozaEc/eEa74UPvOacH7fcK9mv78oAAAAAAAAAAAAAAAAAAAAAADA
01im2WwOJUmyU6lUenaxWHxutVrdJ2y/JKyvqdVqfx/OfTfsrwrTia2ocCwd
GhpKW61WtxEVW1H1ej0e3xA+c0+Ya8Msq1Qqzw/314oCAAAAAAAAAAAAAAAA
AAAAAAB4cnJhSmGSMJXJGanVarOr1erSUqn0sUKhcFu5XF7daDQ6sRE1PDyc
ttvtbisqdqK0ogAAAAAAAAAAAAAAAAAAAAAAAH6nMuVyeftKpXJsqVS6JMw3
w/6DzWZzPDaipk2b1u1FNRqN2IjqrvV6fUNY7wn7WlEAAAAAAAAAAAAAAAAA
AAAAAABPvaF8Pn9wpVJ5U5gbyuXyA2HG6/V6txMVm1Fxu1qtdtdms7lhcHDw
nqGhoWvDqhUFAAAAAAAAAAAAAAAAAAAAAADw1MkODQ01g/3CvKFWq/1rkiT3
FgqF8XK5nIZz3YmNqHCuO41Go9uKGh4evrbVamlFAQAAAAAAAAAAAAAAAAAA
AAAAPHWyp59+emP//fffd2Rk5IJqtfrZQqFwVz6f35gkSexCbepFNZvNNJxP
K5XKhlqt9ouw/8XBwcHXhNmn1Wo1+v1FAAAAAAAAAAAAAAAAAAAAAAAAfg9l
li9fXjvppJN222mnnRY1Go33l0qlmwuFwtqwdttQg4OD6fDwcNput2MnKg3H
N4T1nnq9fm2YZeH884eGhpr9/iIAAAAAAAAAAAAAAAAAAAAAAAC/j66++urc
/PnzW7NmzZq92267vb7dbl9dKBRuz+fz60ulUqdWq3U7UUNDQ2m5XI6tqLFG
o3Hv8PDwV8LxP67X638Q9lv9/h4AAAAAAAAAAAAAAAAAAAAAAAC/r5YvX549
77zzdpw7d+7xu++++zsajcY3isXiA/l8fjxJkrTZbKaDg4NppVKJs3FoaOih
6dOn39hqtS4J+yeEa3YKt8n2+3sAAAAAAAAAAAAAAAAAAAAAAAD8vrr44ouH
Tj/99D+YM2fORfvuu++/7LDDDvdWq9WxUqmU1uv1bitqaGgorp1arbYunLuj
Uql8OkmSPwxzSLjFUJhcv78HAAAAAAAAAAAAAAAAAAAAAADA76HM6aef3njZ
y16278knn/yaE0444YsHHHDAL1qtVrcVVavVup2oadOmpcPDw2mSJGkmk1mT
y+W+VywWPxD2F4d1t3CfWrxXv78MAAAAAAAAAAAAAAAAAAAAAADA75nMRRdd
VJ83b95eJ5100nnHHHPM5/bYY4+7kyRZn81mu62odrvd7UTFZlRsRYXjG3O5
3N2lUumfi8XiskKh8Pxwn8EBrSgAAAAAAAAAAAAAAAAAAAAAAICtLXPppZc2
zj777H2OO+648w888MDP77DDDj/L5/MbMplM2mg0up2owcHBtFqtdltRxWJx
Y6FQ+O+wfjXMRWF7VrjP0IBWFAAAAAAAAAAAAAAAAAAAAAAAwNaW+cAHPlB/
9atfvfdxxx33h7Nnz77pgAMOWLX77rt3dt5553TatGndTlS9Xk/L5XJaKpXS
QqGwsVgsPhjma2EuzufzLwj3aQ1oRQEAAAAAAAAAAAAAAAAAAAAAAGxtmXe+
853V888/f6+TTz55+XHHHfez0dHRzuLFi9OwnT772c9Oq9Vqd2IrKpfLpZlM
ZmOhULi/VCpdnyRJbEUdOKAVBQAAAAAAAAAAAAAAAAAAAAAA8FTIXH755ZXY
ijrmmGPefvjhh6845ZRT0qVLl44vXLhw7DnPeU4nNqLq9Xp3isVims1mN+bz
+XvC9pfDvKFQKBwQ7jM0oBUFAAAAAAAAAAAAAAAAAAAAAACwtWWuvPLK6oUX
XrjXIYcccsn++++/4uijj07PPPPMx+bNm7dil112Ga9Wq+nQ0FDaarXSuF0s
FmMr6r/CfCrMqwuFwj7hPs0BrSgAAAAAAAAAAAAAAAAAAAAAAICtLXPZZZfV
Yitqzpw5fzJr1qxbjjjiiPvOOOOMm+fNm/f95z3vefcPDw+vb7fbncHBwbRc
LsdW1IpqtXpDOP7OZrN5UpIkO4X7JANaUQAAAAAAAAAAAAAAAAAAAAAAAFtb
5qKLLqqfd955eyxcuHDxvHnz3nvaaad9/Nxzz33/qaee+snDDjvsP/bYY497
2+32WOxEZbPZVcVi8Qc77LDD+8K5JS996Uv3GfifThQAAAAAAAAAAAAAAAAA
AAAAAABbX2bRokXV8847b8elS5e+aNmyZaddeOGFS8J6ymmnnfam448//quz
Zs16oN1uT2Sz2Ylw/f1Jknx15syZb16yZMlh73znO6f1+wsAAAAAAAAAAAAA
AAAAAAAAAAD8PhsdHc3Nnz+//LrXva61fPny7cNMCzM4d+7clx911FFfnzVr
1sTg4GAaLh3P5/M/bTQan9p+++1f/cIXvnDfI444otnv9wcAAAAAAAAAAAAA
AAAAAAAAAHgmOvbYYw8/+uijb37xi1/cedaznpWWy+UHm83m9TNmzPg/7Xb7
ZUmS7BguS/r9ngAAAAAAAAAAAAAAAAAAAAAAAM8kaZpmli5d2liwYMErTjrp
pNtPPPHE9MUvfvGjBx544NfDXBpm8fOe97y9B/6nE5Xp9/sCAAAAAAAAAAAA
AAAAAAAAAAA8kyxfvjw5++yzn3PaaaddMH/+/FtGR0cfW7hw4U1h/z2LFi06
Y8mSJbPC9lC/3xMAAAAAAAAAAAAAAAAAAAAAAOCZ6JxzzqmceeaZMxcuXHja
6OjoFWE+f9ppp/3N4sWLXxU7URdffPHQ8uXLs/1+TwAAAAAAAAAAAAAAAAAA
AAAAgGeiJUuWJKeffvoO8+bNO+zkk09+zfz5898Q5pQFCxa8IKytcEmm3+8I
AAAAAAAAAAAAAAAAAAAAAADwTDU6OppbtGhRdf78+c8+8cQTXxybUaeeeurz
jjrqqNacOXPy/X4/AAAAAAAAAAAAAAAAAAAAAAAABgaWLFmSvPzlL99+7ty5
M+bMmZOEQ5l+vxMAAAAAAAAAAAAAAAAAAAAAAACbZGIjarITBQAAAAAAAAAA
AAAAAAAAAAAAwLYp0+8XAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgP/L
HhwIAAAAAAD5vzaCqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqSntwSAAAAAAg6P9rqyMAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA4AKMxqkZ
               "], "Byte", ColorSpace -> "RGB", ImageResolution -> {330, 330},
                ImageSize -> 550, Interleaving -> True, Magnification -> 
               Automatic], "", 
              Row[{
                Style["S", Bold, FontFamily -> "Castellar", 30], 
                Style["econd ", FontFamily -> "Centaur", 30], 
                Style["H", Bold, FontFamily -> "Castellar", 30], 
                Style["armonic ", FontFamily -> "Centaur", 30], 
                Style["A", Bold, FontFamily -> "Castellar", 30], 
                Style["nalysis of", FontFamily -> "Centaur", 30]}], 
              Row[{
                Style["A", Bold, FontFamily -> "Castellar", 30], 
                Style["nisotropic ", FontFamily -> "Centaur", 30], 
                Style["R", Bold, FontFamily -> "Castellar", 30], 
                Style["otational ", FontFamily -> "Centaur", 30], 
                Style["P", Bold, FontFamily -> "Castellar", 30], 
                Style["olarimetry", FontFamily -> "Centaur", 30]}], 
              Style[" ", 20]}, Alignment -> Center], 
            Style["   ", 60], 
            Column[{
              Style["Version 1.00", FontFamily -> "Franklin Gothic", 25], 
              Style["", 8], 
              Style["Copyright (C) 2023", FontFamily -> "Arial", 16], 
              Style["", 8], 
              Style[
              "          Bo Wang, Rui Zu, Lincoln Weber, Akash Saha,\n        \
   Long-Qing Chen, and Venkatraman Gopalan", FontFamily -> "Franklin Gothic", 
               16], 
              Style["", 15], 
              Row[{
                Style["Tutorial video:", FontFamily -> "Franklin Gothic", 18], 
                Hyperlink[
                 Style[" Youtube", FontFamily -> "Franklin Gothic", 14], 
                 "https://www.youtube.com/watch?v=YiKRm6i7kNs"]}], 
              Row[{
                Style[
                "This program comes with ABSOLUTELY NO WARRANTY; for details, \
", FontFamily -> "Franklin Gothic", 18], 
                Hyperlink[
                 Style["click here", FontFamily -> "Franklin Gothic", 14], 
                 "https://www.gnu.org/licenses/gpl-3.0.en.html"], 
                Style[".", FontFamily -> "Franklin Gothic", 14]}], 
              Style[
              "This is free software, and you are welcome to redistribute it",
                FontFamily -> "Franklin Gothic", 14], 
              Row[{
                Style[
                "under certain conditions; ", FontFamily -> "Franklin Gothic",
                  14], 
                Hyperlink[
                 Style["click here", FontFamily -> "Franklin Gothic", 14], 
                 "https://www.gnu.org/licenses/gpl-3.0.en.html"], 
                Style[" for details.", FontFamily -> "Franklin Gothic", 14]}], 
              Style["    ", 20], 
              Row[{
                Style[
                "If you used \[Sharp]SHAARP for your publications, please \
kindly cite us:  \n"], 
                Hyperlink[
                 Style[
                 "\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\
\)"], "https://www.nature.com/articles/s41524-024-01229-2"], 
                Style[", "], 
                Hyperlink[
                 Style[
                 "\[Sharp]SHAARP.\!\(\*StyleBox[\"si\",FontSlant->\"Italic\"]\
\)"], "https://www.nature.com/articles/s41524-022-00930-4"], "."}, 
               BaseStyle -> {FontSize -> 16, Bold}]}, Alignment -> Center]}], 
          Grid[{{
             Framed[
              Column[{
                OpenerView[{
                  Style[
                  "Functionality", 18, Bold, FontFamily -> "Franklin Gothic"], 
                  Column[{
                    Column[{
                    Manipulate`Place[1]}, Left, 
                    BaseStyle -> {FontSize -> 16}], 
                    Dynamic[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Set Material Properties"], 
                    Column[{"", 
                    Manipulate`Place[2]}, Left, 
                    BaseStyle -> {FontSize -> 14}], ""]]}]}, True], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Wavelength Setting", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Manipulate`Place[3]}, Left, 
                    BaseStyle -> {FontSize -> 15}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer Selection:", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Manipulate`Place[4], 
                    If[
                    Not[
                    IntegerQ[$CellContext`materialnumber$$]], 
                    Style[
                    "ERROR: The number of materials must be an integer.", Red,
                     Bold], 
                    If[$CellContext`materialnumber$$ < 1, 
                    Style[
                    "ERROR: You need to use at least one material.", Red, 
                    Bold], 
                    
                    If[$CellContext`materialnumber$$ > \
$CellContext`maxmaterialnumber - 2, 
                    Style[
                    "ERROR: The maximum number of materials is set at " <> 
                    ToString[$CellContext`maxmaterialnumber - 2] <> ".", Red, 
                    Bold], 
                    Manipulate`Place[5], ""]]], 
                    Row[{
                    TextCell[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Name: "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`name]]], String, FieldSize -> 20, 
                    FieldHint -> "Enter name here"]}]}, Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Case Studies and Examples", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    Button[
                    "Blank linear", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`blankMaterL[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Blank nonlinear", $CellContext`mtemp = \
$CellContext`setMater[
                    $CellContext`blankMaterNL[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "BaTiO3", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`BTO[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button["Air", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Air[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "LiNbO3(11\!\(\*OverscriptBox[\(2\), \(_\)]\)0)", \
$CellContext`mtemp = $CellContext`setMater[
                    $CellContext`LiNbO3xCut\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "LiNbO3(0001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`LiNbO3zCut\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "KTP(100)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`KTPxCut[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "KTP(010)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`KTPyCut[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button[
                    "ZnO(0001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`ZnO001[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Pt(111)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Pt111\[Lambda]1550[$CellContext`\[Lambda]$$]]\
; Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "\!\(\*SubscriptBox[\(Al\), \
\(2\)]\)\!\(\*SubscriptBox[\(O\), \(3\)]\)(0001)", $CellContext`mtemp = \
$CellContext`setMater[
                    $CellContext`Al2O3$0001\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "GaAs(111)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`GaAs111\[Lambda]800[$CellContext`\[Lambda]$$]\
]; Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button[
                    "X-cut Quartz", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Quartz$xCut\[Lambda]1064[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Quartz(001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Quartz$zCut\[Lambda]800[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Au Coating", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Au\[Lambda]800[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button["MoS2", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`MoS2[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}]}, Left, 
                    BaseStyle -> {
                    FontSize -> 12, FontFamily -> "Times New Roman"}]}, True],
                   ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "SHG Simulation", 
                  OpenerView[{
                    Style[
                    "Calculation Controls", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[
                  
                  Or[$CellContext`Functionality$$ == 
                   "SHG Simulation", $CellContext`Functionality$$ == 
                   "Partial Analytical Expressions"], 
                  OpenerView[{
                    Style[
                    "Assumptions", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Style["Assumptions for Multiple Reflection: ", Bold, 14], 
                    Manipulate`Place[8], 
                    If[$CellContext`mrassumption$$ == 0, 
                    Apply[Sequence, {
                    Style[
                    "Assumptions for 2\[Omega] Inhomogeneous Waves (for FMR \
only): ", Bold, 14], 
                    Manipulate`Place[9]}], 
                    Apply[Sequence, {}]]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[
                  
                  Or[$CellContext`Functionality$$ == 
                   "SHG Simulation", $CellContext`Functionality$$ == 
                   "Partial Analytical Expressions"], 
                  OpenerView[{
                    Style[
                    "Polarimetry Settings", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Incident Angle \!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\
\) (\[Degree])", Bold, 14], 
                    Manipulate`Place[10], 
                    Row[{"        ", 
                    Manipulate`Place[11], "     ", 
                    InputField[
                    Dynamic[$CellContext`theta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left], 
                    Style[
                    "Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\" \", RowBox[{\"(\", \"\[NoBreak]\", \
TagBox[GridBox[{{RowBox[{\"Cos\", \"[\", \"\[CurlyPhi]\", \
\"]\"}]},{RowBox[{RowBox[{\"Sin\", \"[\", \"\[CurlyPhi]\", \"]\"}], \"\
\[Application]\", SuperscriptBox[\"e\", RowBox[{\"i\", RowBox[{\"\
\[DifferenceDelta]\", \
\"\[Delta]\"}]}]]}]},{\"0\"}},GridBoxAlignment->{\"Columns\" -> {{Center}}, \
\"Rows\" -> {{Baseline}}},GridBoxSpacings->{\"Columns\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \"Rows\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \"\[NoBreak]\", \")\"}]}],Function[BoxForm`e$, \
MatrixForm[BoxForm`e$]]]\)", Bold, 14], 
                    Column[{
                    Row[{
                    Manipulate`Place[12]}], 
                    Row[{"                                               ", 
                    InputField[
                    Dynamic[$CellContext`delta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}], 
                    Row[{
                    Manipulate`Place[13]}], 
                    Dynamic[
                    If[$CellContext`RotatePolarizer$$, " ", 
                    Column[{
                    Manipulate`Place[14], 
                    Row[{"        ", 
                    Manipulate`Place[15], "     ", 
                    InputField[
                    Dynamic[$CellContext`phi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]], 
                    
                    Row[{"For \[CurlyPhi] and \[Psi], 0\[Degree] refers to p- \
polarized, 90\[Degree] refers to s- polarized"}, 
                    BaseStyle -> (FontSize -> 14)], 
                    Row[{
                    Manipulate`Place[16]}], 
                    Dynamic[
                    If[$CellContext`RotateAnalyzer$$, 
                    If[$CellContext`RotatePolarizer$$, 
                    Manipulate`Place[17], ""], 
                    Column[{
                    Manipulate`Place[18], 
                    Row[{"        ", 
                    Manipulate`Place[19], "     ", 
                    InputField[
                    Dynamic[$CellContext`psi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]], 
                    Row[{
                    Manipulate`Place[20]}], 
                    Dynamic[
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`RotatePolarizer$$ = False; $CellContext`RotateAnalyzer$$ = False; 
                    Column[{
                    Manipulate`Place[21], 
                    Row[{"        ", 
                    Manipulate`Place[22], "     ", 
                    InputField[
                    Dynamic[$CellContext`samplerotatestep$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, 
                   If[
                    Or[
                    
                    And[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`makerfringescontrol$$ == 
                    False], $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], True, False]], ""]], 
                Dynamic[
                 If[
                  
                  And[$CellContext`Functionality$$ == 
                   "SHG Simulation", $CellContext`fresnelcontrol$$ == True], 
                  OpenerView[{
                    Style[
                    "Fresnel Coefficients Collection Settings", 18, Bold, 
                    FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Step Size \!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\)(\
\[Degree])", Bold, 14], 
                    Row[{"        ", 
                    Manipulate`Place[23], "     ", 
                    InputField[
                    Dynamic[$CellContext`thetastep1$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}, 
                    Alignment -> Left, BaseStyle -> {FontSize -> 12}]}, 
                   If[$CellContext`fresnelcontrol$$, True, False]], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "SHG Simulation", 
                  OpenerView[{
                    Style[
                    "Maker Fringes Collection Settings", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Minimum Incident Angle \
\!\(\*SuperscriptBox[\(\[Theta]\), \(min\)]\) (\[Degree])", Bold, 14], 
                    Manipulate`Place[24], 
                    Row[{"        ", 
                    Manipulate`Place[25], "     ", 
                    InputField[
                    Dynamic[$CellContext`mintheta2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style[
                    "Maximum Incident Angle \
\!\(\*SuperscriptBox[\(\[Theta]\), \(max\)]\) (\[Degree])", Bold, 14], 
                    Manipulate`Place[26], 
                    Row[{"        ", 
                    Manipulate`Place[27], "     ", 
                    InputField[
                    Dynamic[$CellContext`maxtheta2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style["Scan Step Size (\[Degree])", Bold, 14], 
                    Row[{"        ", 
                    Manipulate`Place[28], "     ", 
                    InputField[
                    Dynamic[$CellContext`thetastep2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style[
                    "Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\" \", RowBox[{\"(\", \"\[NoBreak]\", \
TagBox[GridBox[{{RowBox[{\"Cos\", \"[\", \"\[CurlyPhi]\", \
\"]\"}]},{RowBox[{RowBox[{\"Sin\", \"[\", \"\[CurlyPhi]\", \"]\"}], \"\
\[Application]\", SuperscriptBox[\"e\", RowBox[{\"i\", RowBox[{\"\
\[DifferenceDelta]\", \
\"\[Delta]\"}]}]]}]},{\"0\"}},GridBoxAlignment->{\"Columns\" -> {{Center}}, \
\"Rows\" -> {{Baseline}}},GridBoxSpacings->{\"Columns\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \"Rows\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \"\[NoBreak]\", \")\"}]}],Function[BoxForm`e$, \
MatrixForm[BoxForm`e$]]]\)", Bold, 14], Null, 
                    Column[{
                    Manipulate`Place[29], 
                    Row[{"        ", 
                    Manipulate`Place[30], "     ", 
                    InputField[
                    Dynamic[$CellContext`phi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}], 
                    Column[{
                    Manipulate`Place[31], 
                    Row[{"        ", 
                    Manipulate`Place[32], "     ", 
                    InputField[
                    Dynamic[$CellContext`psi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}], 
                    
                    Row[{"For \[CurlyPhi] and \[Psi], 0\[Degree] refers to p- \
polarized, 90\[Degree] refers to s- polarized"}, 
                    BaseStyle -> (FontSize -> 14)], 
                    Column[{
                    Row[{
                    Manipulate`Place[33]}], 
                    Row[{
                    Manipulate`Place[34], "     ", 
                    InputField[
                    Dynamic[$CellContext`delta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}]}, 
                    Alignment -> Left, BaseStyle -> {FontSize -> 12}]}, 
                   If[$CellContext`makerfringescontrol$$, True, False]], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Thickness", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Dynamic[
                    If[
                    
                    Or[$CellContext`matindex$$ == 
                    1, $CellContext`matindex$$ == \
$CellContext`materialnumber$$ + 2], 
                    Style[
                    "(No input: thickness of first and last material is \
infinite)", 14], 
                    Row[{
                    Style["Slab Thickness (\[Mu]m)   "], 
                    Slider[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]]], {0, 1000}, ImageSize -> 150], 
                    "   ", 
                    InputField[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]]], BaseStyle -> (FontSize -> 12), 
                    FieldSize -> 4], "    ", 
                    Button["analytical h", Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]] = 
                    ToExpression[
                    "h" <> ToString[$CellContext`matindex$$ - 1]]]}]]]}, Left,
                     BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Crystal Structure", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    Style["Point Group:    ", Bold, 14], 
                    Style["Noncentrosymmetric -> ", 14], 
                    PopupMenu[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]]], {{
                    "1", {{11, 12, 13, 14, 15, 16}, {21, 22, 23, 24, 25, 
                    26}, {31, 32, 33, 34, 35, 36}}, 1} -> 
                    "1", {"2", {{0, 0, 0, 14, 0, 16}, {21, 22, 23, 0, 25, 
                    0}, {0, 0, 0, 34, 0, 36}}, 1} -> 
                    "2", {"m", {{11, 12, 13, 0, 15, 0}, {0, 0, 0, 24, 0, 
                    26}, {31, 32, 33, 0, 35, 0}}, 1} -> 
                    "m", {"mm2", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 24, 0, 0}, {
                    31, 32, 33, 0, 0, 0}}, 1} -> 
                    "mm2", {
                    "222", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, 25, 0}, {0, 0, 
                    0, 0, 0, 36}}, 1} -> 
                    "222", {
                    "3", {{11, -11, 0, 14, 15, -22}, {-22, 22, 0, 
                    15, -14, -11}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "3", {"32", {{11, -11, 0, 14, 0, 0}, {0, 0, 0, 
                    0, -14, -11}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "32", {"3m", {{0, 0, 0, 0, 15, -22}, {-22, 22, 0, 15, 0, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "3m", {"4", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 15, -14, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "4", {"6", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 15, -14, 0}, {
                    31, 31, 33, 0, 0, 0}}, 1} -> 
                    "6", {"\!\(\*OverscriptBox[\(4\), \(_\)]\)", {{0, 0, 0, 
                    14, 15, 0}, {0, 0, 0, -15, 14, 0}, {31, -31, 0, 0, 0, 
                    36}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)", {
                    "4mm", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 0}, {31, 31,
                     33, 0, 0, 0}}, 1} -> 
                    "4mm", {
                    "6mm", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 0}, {31, 31,
                     33, 0, 0, 0}}, 1} -> 
                    "6mm", {
                    "422", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, -14, 0}, {0, 0, 
                    0, 0, 0, 0}}, 1} -> 
                    "422", {
                    "622", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, -14, 0}, {0, 0, 
                    0, 0, 0, 0}}, 1} -> 
                    "622", {
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)2m", {{0, 0, 0, 14, 0,
                     0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0, 0, 0, 36}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)2m", {
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)", {{11, -11, 0, 0, 
                    0, -22}, {-22, 22, 0, 0, 0, -11}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)", {
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)m2", {{0, 0, 0, 0, 
                    0, -22}, {-22, 22, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)m2", {
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)3m", {{0, 0, 0, 14, 0,
                     0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0, 0, 0, 14}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)3m", {
                    "23", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0,
                     0, 0, 14}}, 1} -> 
                    "23", {"\[Infinity]", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 
                    15, -14, 0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "\[Infinity]", {
                    "\[Infinity]m", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "\[Infinity]m", {
                    "\[Infinity]2", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, -14, 
                    0}, {0, 0, 0, 0, 0, 0}}, 1} -> "\[Infinity]2"}, "--"]}], 
                    Row[{
                    Style["                                     "], 
                    Style["Centrosymmetric -> ", 14], 
                    PopupMenu[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]]], {{
                    "\!\(\*OverscriptBox[\(1\), \(_\)]\)", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(1\), \(_\)]\)", {
                    "2/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "2/m", {
                    "mmm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "mmm", {
                    "4/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "4/m", {
                    "4/mmm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 
                    0, 0, 0, 0}}, 0} -> 
                    "4/mmm", {
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)", {
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)m", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)m", {
                    "6/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "6/m", {
                    "6/mmm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 
                    0, 0, 0, 0}}, 0} -> 
                    "6/mmm", {
                    "m3", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "m3", {"m3m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0,
                     0, 0, 0, 0, 0}}, 0} -> 
                    "m3m", {
                    "432", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "432", {"\[Infinity]/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0,
                     0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]/m", {
                    "\[Infinity]/mm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]/mm", {
                    "\[Infinity]\[Infinity]", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]\[Infinity]", {
                    "\[Infinity]\[Infinity]m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]\[Infinity]m"}, "--"]}], 
                    Row[{
                    Style["a = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 1]], FieldSize -> 5], 
                    Style["    b = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 2]], FieldSize -> 5], 
                    Style["    c = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 3]], FieldSize -> 5]}], 
                    Row[{
                    Style["\[Alpha] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 4]], FieldSize -> 5], 
                    Style["    \[Beta] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 5]], FieldSize -> 5], 
                    Style["    \[Gamma] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 6]], FieldSize -> 5]}]}, Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Crystal Orientation", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    SetterBar[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1]], {
                    1 -> Style["Use Miller Indices (hkl)", Bold], 2 -> 
                    Style["Use Crystal Physics Direction", Bold]}]}], 
                    Row[{
                    Tooltip[
                    Style[
                    "?(hkl)", Black, Bold, 11], $CellContext`hklExplain], 
                    Spacer[3], 
                    Tooltip[
                    Style["?Crystal Physics", Black, Bold, 11], 
                    Dynamic[
                    Style[Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1] <> 
                    ": " <> $CellContext`ZSysExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]], "Times New Roman", 20]]]}], 
                    Dynamic[
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1] == 2, 
                    Column[{
                    Row[{
                    Style["Rotation Angle =  "], 
                    InputField[
                    Dynamic[$CellContext`rotationAngle], FieldSize -> 5], 
                    Style[" degree(\[Degree]) "], "    ", 
                    Button["Apply Rotation Angle", Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1]]]]; Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]]]; Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 
                    3]]]]; $CellContext`rotationAngle = 0]}], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(1\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(2\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(3\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}], 
                    Column[{
                    Grid[{{
                    TextCell[
                    Style["(hkl) \[Rule] Crystal Surface Plane: ", Bold]]}, {
                    Row[{
                    Style["h = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 1]], FieldSize -> 
                    5], 
                    Style[",  k = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 2]], FieldSize -> 
                    5], 
                    Style[",  l = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 3]], FieldSize -> 
                    5]}]}, {
                    TextCell[
                    Style[
                    "[hkl] \[Rule] Direction Perpendicular to Plane of \
Incidence", Bold]]}, {
                    Row[{
                    Style["h = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 1]], FieldSize -> 
                    5], 
                    Style[",  k = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 2]], FieldSize -> 
                    5], 
                    Style[",  l = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 3]], FieldSize -> 
                    5]}]}}, Alignment -> Left]}]]], 
                    Column[{
                    Dynamic[
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1] == 0, 
                    Row[{""}], 
                    Row[{
                    If[
                    And[Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]] == 0, Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] == 0, Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] == 0], "", 
                    Style[
                    "ERROR: The crystal physics basis vectors are not \
orthogonal.", Red, Bold]], 
                    If[Dot[
                    SetPrecision[
                    Chop[
                    Cross[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]], 5], 
                    SetPrecision[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]], 5]] > 0, "", 
                    Style[
                    "ERROR: The crystal physics basis vectors are not \
right-handed.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(1\)]\) is not a unit \
vector.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(2\)]\) is not a unit \
vector.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(3\)]\) is not a unit \
vector.", Red, Bold]]}]]]}]}, Left, BaseStyle -> {FontSize -> 12}]}, True], 
                  ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Dielectric Tensors \
(\!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(\[Omega]\)], \
\(ij\)]\) and \!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(2  \
\[Omega]\)], \(ij\)]\))", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    
                    Row[{" \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \
\(ij\), \(\[Omega]\)]\) = ", 
                    MatrixForm[{{"", 
                    Grid[
                    Map[InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`\[CurlyEpsilon]\[Omega]C]], 
                    Apply[Sequence, 
                    SlotSequence[1]]]], FieldSize -> 9]& , 
                    
                    Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 
                    3}, {$CellContext`j, 3}], {2}], Spacings -> {0, 0}, 
                    ItemSize -> All], ""}}]}], 
                    
                    Row[{"  \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \(ij\
\), \(2  \[Omega]\)]\) = ", 
                    MatrixForm[{{"", 
                    Grid[
                    Map[InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`\[CurlyEpsilon]2\[Omega]C]], 
                    Apply[Sequence, 
                    SlotSequence[1]]]], FieldSize -> 9]& , 
                    
                    Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 
                    3}, {$CellContext`j, 3}], {2}], Spacings -> {0, 0}, 
                    ItemSize -> All], ""}}]}]}, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " SHG Tensor \
(\!\(\*SubscriptBox[StyleBox[\"d\",FontSlant->\"Italic\"], \"ijk\"]\))" <> 
                    " pm/V", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Row[{"\!\(\*SubscriptBox[\(d\), \(ij\)]\)=   ", 
                    MatrixForm[{{"", $CellContext`dgrid, ""}}], "    ", 
                    Button["analytical dij", Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`dC]] = 
                    Map[ToExpression[
                    ToString[#] <> "m" <> 
                    ToString[$CellContext`matindex$$ - 
                    1]]& , {{$CellContext`d11, $CellContext`d12, \
$CellContext`d13, $CellContext`d14, $CellContext`d15, $CellContext`d16}, \
{$CellContext`d21, $CellContext`d22, $CellContext`d23, $CellContext`d24, \
$CellContext`d25, $CellContext`d26}, {$CellContext`d31, $CellContext`d32, \
$CellContext`d33, $CellContext`d34, $CellContext`d35, $CellContext`d36}}, {
                    2}]; Map[$CellContext`indexfun1, 
                    Range[$CellContext`materialnumber$$ + 2]]; Null]}, 
                    BaseStyle -> {FontSize -> 12}]}, 
                   If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]], 3] == 1, True, False]], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer Properties Preset Values", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Press update before setting any preset.", Blue, 14], 
                    Row[{
                    Button[
                    Style["Preset 1", Bold, Black], $CellContext`ptest1 = 1; 
                    If[
                    ValueQ[$CellContext`presetval1], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval1, $CellContext`presetval1 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap1], 
                    Spacer[5], 
                    Button[
                    Style["Preset 2", Bold, Black], $CellContext`ptest2 = 1; 
                    If[
                    ValueQ[$CellContext`presetval2], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval2, $CellContext`presetval2 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap2], 
                    Spacer[5], 
                    Button[
                    Style["Preset 3", Bold, Black], $CellContext`ptest3 = 1; 
                    If[
                    ValueQ[$CellContext`presetval3], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval3, $CellContext`presetval3 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap3], 
                    Spacer[5], 
                    Button[
                    Style["Preset 4", Bold, Black], $CellContext`ptest4 = 1; 
                    If[
                    ValueQ[$CellContext`presetval4], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval4, $CellContext`presetval4 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap4], 
                    Spacer[5], 
                    Button[
                    Style["Preset 5", Bold, Black], $CellContext`ptest5 = 1; 
                    If[
                    ValueQ[$CellContext`presetval5], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval5, $CellContext`presetval5 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap5], 
                    Spacer[5], 
                    Button[
                    Style["Preset 6", Bold, Black], $CellContext`ptest6 = 1; 
                    If[
                    ValueQ[$CellContext`presetval6], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval6, $CellContext`presetval6 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap6], 
                    Spacer[5], 
                    Button[
                    Style["Preset 7", Bold, Black], $CellContext`ptest7 = 1; 
                    If[
                    ValueQ[$CellContext`presetval7], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval7, $CellContext`presetval7 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap7], 
                    Spacer[5], 
                    Button[
                    Style["Preset 8", Bold, Black], $CellContext`ptest8 = 1; 
                    If[
                    ValueQ[$CellContext`presetval8], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval8, $CellContext`presetval8 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap8], 
                    Spacer[5], 
                    Button[
                    Style[
                    "Clear Presets", 
                    Bold], {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = 
                    Table[0, 
                    8]; {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]; 
                    Clear[$CellContext`presetval1, $CellContext`presetval2, \
$CellContext`presetval3, $CellContext`presetval4, $CellContext`presetval5, \
$CellContext`presetval6, $CellContext`presetval7, $CellContext`presetval8], 
                    Appearance -> "DialogBox"], 
                    Spacer[5]}, BaseStyle -> {FontSize -> 12}], 
                    Row[{
                    Dynamic[
                    If[$CellContext`ptest1 == 1, 
                    Row[{"Preset 1 Label: " InputField[
                    Dynamic[$CellContext`plabel1], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest2 == 1, 
                    Row[{"Preset 2 Label: " InputField[
                    Dynamic[$CellContext`plabel2], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest3 == 1, 
                    Row[{"Preset 3 Label: " InputField[
                    Dynamic[$CellContext`plabel3], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest4 == 1, 
                    Row[{"Preset 4 Label: " InputField[
                    Dynamic[$CellContext`plabel4], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest5 == 1, 
                    Row[{"Preset 5 Label: " InputField[
                    Dynamic[$CellContext`plabel5], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest6 == 1, 
                    Row[{"Preset 6 Label: " InputField[
                    Dynamic[$CellContext`plabel6], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest7 == 1, 
                    Row[{"Preset 7 Label: " InputField[
                    Dynamic[$CellContext`plabel7], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest8 == 1, 
                    Row[{"Preset 8 Label: " InputField[
                    Dynamic[$CellContext`plabel8], String]}], ""]]}], 
                    Toggler[
                    Dynamic[$CellContext`presetpopuptextvar], {
                    0 -> "Show Preset Information", 1 -> "Hide"}, Background -> 
                    LightBlue, Alignment -> Center], 
                    Dynamic[
                    If[$CellContext`presetpopuptextvar == 1, 
                    Style["Presets currently set:   " <> If[
                    ValueQ[$CellContext`presetval1], "1   ", ""] <> If[
                    ValueQ[$CellContext`presetval2], "2   ", ""] <> If[
                    ValueQ[$CellContext`presetval3], "3   ", ""] <> If[
                    ValueQ[$CellContext`presetval4], "4   ", ""] <> If[
                    ValueQ[$CellContext`presetval5], "5   ", ""] <> If[
                    ValueQ[$CellContext`presetval6], "6   ", ""] <> If[
                    ValueQ[$CellContext`presetval7], "7   ", ""] <> If[
                    ValueQ[$CellContext`presetval8], "8   ", ""] <> If[
                    Or[
                    ValueQ[$CellContext`presetval1], 
                    ValueQ[$CellContext`presetval2], 
                    ValueQ[$CellContext`presetval3], 
                    ValueQ[$CellContext`presetval4], 
                    ValueQ[$CellContext`presetval5], 
                    ValueQ[$CellContext`presetval6], 
                    ValueQ[$CellContext`presetval7], 
                    ValueQ[$CellContext`presetval8]], "", "None."] <> 
                    "\nUpdate and press any of the preset buttons to save a \
material's \ninformation to that preset. \nPress the button again and update \
to apply those values.\nHide and show this message to refresh.", 
                    "Times New Roman", 12], ""]]}, 
                    BaseStyle -> {FontSize -> 12}]}, False], ""]], 
                Button[
                 Graphics[{
                   RGBColor[0, 1, 0], 
                   EdgeForm[
                    GrayLevel[0]], 
                   Rectangle[{0, 0}, {1.8, 0.7}], 
                   Inset[
                    Style["Update", 
                    GrayLevel[0], FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                 Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
               ItemSize -> 63, Background -> {
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9]}, Frame -> All], Background -> GrayLevel[1], 
              ImageSize -> Automatic], 
             Framed[
              Dynamic[
               
               If[$CellContext`Functionality$$ == 
                "User Guide", $CellContext`userguide, 
                If[$CellContext`Functionality$$ == "Set Material Properties", 
                 Column[{
                   Style["", 30], 
                   Dynamic[
                    Grid[{{$CellContext`heterostructureschematic}, {
                    Grid[{{
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Column[{
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " : ", 
                    Tooltip[
                    Part[$CellContext`zvecplots2d, $CellContext`matindex$$], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}], 
                    
                    Column[{
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " : ", 
                    Tooltip[
                    Part[$CellContext`zvecplots3d, $CellContext`matindex$$], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}]]}}, 
                    BaseStyle -> {
                    FontSize -> 24, FontFamily -> "Times New Roman"}]}}]], 
                   Style["", 30], $CellContext`timecell, 
                   Style["\n", 30], 
                   Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
                  Alignment -> Center], 
                 If[$CellContext`Functionality$$ == "SHG Simulation", 
                  Column[{
                    Style["", 30], 
                    Grid[{{
                    OpenerView[{
                    Style[
                    "Optical Geometry and Polarization", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Grid[{{
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`fig12d, \
$CellContext`PropagationExplain], 
                    
                    Tooltip[$CellContext`fig13d, \
$CellContext`PropagationExplain]], 
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`plot2geometry2d, \
$CellContext`GeometryExplain], 
                    
                    Tooltip[$CellContext`plot2geometry3d, \
$CellContext`GeometryExplain]]}, {
                    
                    Tooltip[$CellContext`ellipticityfig, \
$CellContext`EllipticityExplain], 
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`polarizationplot2d, \
$CellContext`GeometryExplain], 
                    
                    Tooltip[$CellContext`polarizationplot3d, \
$CellContext`GeometryExplain]]}}]}, 
                    If[
                    
                    Or[$CellContext`makerfringescontrol$$, \
$CellContext`fresnelcontrol$$], False, True]]}, {
                    OpenerView[{
                    Style[
                    "Polar Plots", 30, Bold, FontFamily -> "Franklin Gothic"], 
                    Grid[{{
                    Text[
                    "Assumption Used: " <> 
                    Which[$CellContext`mrassumption$$ == 0, 
                    "Full Multiple Reflection", $CellContext`mrassumption$$ == 
                    1, "Jerphagnon & Kurtz Assumption", \
$CellContext`mrassumption$$ == 2, "Herman & Hayden Assumption"] <> "\n" <> 
                    "Consider Backward Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagBackward] <> "\n" <> 
                    "Consider Standing Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagStandingWave], 
                    BaseStyle -> {
                    FontFamily -> "Times New Roman", FontSize -> 22}], 
                    SpanFromLeft}, {
                    
                    Tooltip[$CellContext`figRp, \
$CellContext`PolarPlotExplain], 
                    
                    Tooltip[$CellContext`figRs, \
$CellContext`PolarPlotExplain]}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataRp]], Appearance -> "DialogBox", 
                    ImageSize -> 100], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataRs]], Appearance -> "DialogBox", 
                    ImageSize -> 100]}, {
                    
                    Tooltip[$CellContext`figTp, \
$CellContext`PolarPlotExplain], 
                    
                    Tooltip[$CellContext`figTs, \
$CellContext`PolarPlotExplain]}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataTp]], Appearance -> "DialogBox", 
                    ImageSize -> 100], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataTs]], Appearance -> "DialogBox", 
                    ImageSize -> 100]}}]}, 
                    If[
                    
                    Or[$CellContext`makerfringescontrol$$, \
$CellContext`fresnelcontrol$$], False, True]]}, {
                    OpenerView[{
                    Style[
                    "Fresnel Coefficients Figure", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    
                    Grid[{{$CellContext`figfresnel, SpanFromLeft, 
                    SpanFromLeft, SpanFromLeft}, {
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(R\), \(p\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 1]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(R\), \(s\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 2]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(T\), \(p\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 3]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(T\), \(s\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 4]], Appearance -> 
                    "DialogBox", ImageSize -> 
                    100]}}]}, $CellContext`fresnelcontrol$$]}, {
                    OpenerView[{
                    Style[
                    "Maker Fringes Figures", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Grid[{{
                    Text[
                    "Assumption Used: " <> 
                    Which[$CellContext`mrassumption$$ == 0, 
                    "Full Multiple Reflection", $CellContext`mrassumption$$ == 
                    1, "Jerphagnon & Kurtz Assumption", \
$CellContext`mrassumption$$ == 2, "Herman & Hayden Assumption"] <> "\n" <> 
                    "Consider Backward Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagBackward] <> "\n" <> 
                    "Consider Standing Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagStandingWave], 
                    BaseStyle -> {
                    FontFamily -> "Times New Roman", FontSize -> 22}], 
                    SpanFromLeft}, {
                    
                    GraphicsGrid[{{$CellContext`figmakerfringespar}, \
{$CellContext`figmakerfringesperp}}, ImageSize -> Large], SpanFromLeft}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \
\[Omega]\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[$CellContext`listMFpara], Appearance -> 
                    "DialogBox", ImageSize -> 200], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \
\[Omega]\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi]+90\[Degree])", Bold], 
                    CopyToClipboard[$CellContext`listMFperp], Appearance -> 
                    "DialogBox", ImageSize -> 
                    200]}}]}, $CellContext`makerfringescontrol$$]}}, 
                    Alignment -> Left], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None], 
                    If[
                    Not[$CellContext`noAnalytical], 
                    Framed[
                    Text[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 32, 
                    TextAlignment -> Center]]], 
                    Apply[Sequence, {}]]}, Alignment -> Center], 
                  
                  If[$CellContext`Functionality$$ == 
                   "Partial Analytical Expressions", 
                   Column[{
                    Style["", 30], 
                    Column[{
                    Text[
                    Style["For \[Omega] homogeneous waves:", Bold, Red, 32]], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRpL.mx"}]], $CellContext`equationRpL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRpL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "(\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRpL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRpL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRsL.mx"}]], $CellContext`equationRsL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRsL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRsL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRsL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTpL.mx"}]], $CellContext`equationTpL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTpL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    
                    ByteCount[$CellContext`equationTpL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTpL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTsL.mx"}]], $CellContext`equationTsL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTsL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTsL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTsL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Text[
                    Style[
                    "For 2\[Omega] homogeneous waves:", Bold, Blue, 32]], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRp.mx"}]], $CellContext`equationRp, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRp], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRp] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRp]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRs.mx"}]], $CellContext`equationRs, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRs], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRs] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRs]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTp.mx"}]], $CellContext`equationTp, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTp], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTp] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTp]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTs.mx"}]], $CellContext`equationTs, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTs], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTs] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTs]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}]}, 
                    BaseStyle -> {FontSize -> 14}], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
                    Alignment -> Center], ""]]]]], 
              ImageSize -> {800, Automatic}, Alignment -> {Center, Top}, 
              Background -> GrayLevel[1]]}}, Alignment -> Top]}]], 
       Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
     0., {0., 5.4170899372547865`}}, Typeset`update$$ = 0, Typeset`initDone$$,
      Typeset`skipInitDone$$ = True}, 
     DynamicBox[PaneBox[
       PaneSelectorBox[{True -> GridBox[{{
             PaneSelectorBox[{"NameField" -> ItemBox[
                 PanelBox[
                  GridBox[{{
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["FEStrings", "BookmarkMode"], 
                    StandardForm]], "", ""}, {
                    InputFieldBox[
                    Dynamic[Typeset`name$$], String, 
                    FieldSize -> {{20, 20}, {1, 
                    DirectedInfinity[1]}}, DefaultBaseStyle -> "Manipulator"], 
                    ButtonBox[
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{Typeset`down$$ = False}, 
                    TagBox[
                    PaneSelectorBox[{"Default" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateAddIcon"]], "Hover" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateAddIconHover"]], "Down" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateAddIconPressed"]]}, 
                    Dynamic[
                    Which[
                    And[
                    CurrentValue["MouseOver"], Typeset`down$$], "Down", 
                    CurrentValue["MouseOver"], "Hover", True, "Default"]], 
                    ImageSize -> Automatic, FrameMargins -> 0], 
                    
                    EventHandlerTag[{
                    "MouseDown" :> FEPrivate`Set[Typeset`down$$, True], 
                    "MouseUp" :> FEPrivate`Set[Typeset`down$$, False], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], DynamicModuleValues :> {}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["FEStrings", "BookmarkAdd"], 
                    StandardForm]]], Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource["FEStrings", "BookmarkAdd"]], 
                    "Tooltip"]& ], ButtonFunction :> Manipulate`AddBookmark[
                    Dynamic[Typeset`specs$$], 
                    Dynamic[Typeset`bookmarkMode$$], 
                    Dynamic[Typeset`bookmarkList$$], 
                    Dynamic[Typeset`name$$]], Appearance -> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "SuppressMouseDownNinePatchAppearance"], 
                    DefaultBaseStyle -> {"Panel", Background -> None}, 
                    BaselinePosition -> Baseline, Evaluator -> Automatic, 
                    Method -> "Preemptive"], 
                    ItemBox[
                    ButtonBox[
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{Typeset`down$$ = False}, 
                    TagBox[
                    PaneSelectorBox[{"Default" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIcon"]], "Hover" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconHover"]], "Down" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconPressed"]]}, 
                    Dynamic[
                    Which[
                    And[
                    CurrentValue["MouseOver"], Typeset`down$$], "Down", 
                    CurrentValue["MouseOver"], "Hover", True, "Default"]], 
                    ImageSize -> Automatic, FrameMargins -> 0], 
                    
                    EventHandlerTag[{
                    "MouseDown" :> FEPrivate`Set[Typeset`down$$, True], 
                    "MouseUp" :> FEPrivate`Set[Typeset`down$$, False], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], DynamicModuleValues :> {}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"], StandardForm]]], 
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"]], "Tooltip"]& ], 
                    ButtonFunction :> (Typeset`bookmarkMode$$ = "Menu"), 
                    Appearance -> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "SuppressMouseDownNinePatchAppearance"], 
                    DefaultBaseStyle -> {"Panel", Background -> None}, 
                    BaselinePosition -> Baseline, Evaluator -> Automatic, 
                    Method -> "Preemptive"], Frame -> {False, 
                    GrayLevel[0, 0.2], False, False}, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   ColumnSpacings -> 2], FrameMargins -> 5, ImageMargins -> 
                  5], Alignment -> {Left, Inherited}, StripOnInput -> False], 
               "Animator" -> ItemBox[
                 PanelBox[
                  GridBox[{{
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAnimate"], StandardForm]], ""}, {
                    DynamicBox[Typeset`animator$$], 
                    ItemBox[
                    ButtonBox[
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{Typeset`down$$ = False}, 
                    TagBox[
                    PaneSelectorBox[{"Default" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIcon"]], "Hover" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconHover"]], "Down" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconPressed"]]}, 
                    Dynamic[
                    Which[
                    And[
                    CurrentValue["MouseOver"], Typeset`down$$], "Down", 
                    CurrentValue["MouseOver"], "Hover", True, "Default"]], 
                    ImageSize -> Automatic, FrameMargins -> 0], 
                    
                    EventHandlerTag[{
                    "MouseDown" :> FEPrivate`Set[Typeset`down$$, True], 
                    "MouseUp" :> FEPrivate`Set[Typeset`down$$, False], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], DynamicModuleValues :> {}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"], StandardForm]]], 
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"]], "Tooltip"]& ], 
                    ButtonFunction :> (Unset[Typeset`animator$$]; 
                    Unset[Typeset`animvar$$]; 
                    Typeset`bookmarkMode$$ = "Menu"), Appearance -> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "SuppressMouseDownNinePatchAppearance"], 
                    DefaultBaseStyle -> {"Panel", Background -> None}, 
                    BaselinePosition -> Baseline, Evaluator -> Automatic, 
                    Method -> "Preemptive"], Frame -> {False, 
                    GrayLevel[0, 0.2], False, False}, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   ColumnSpacings -> 2], FrameMargins -> 5, ImageMargins -> 
                  5], Alignment -> {Left, Inherited}, StripOnInput -> False], 
               "Autorun" -> ItemBox[
                 PanelBox[
                  GridBox[{{
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAutorun"], StandardForm]], ""}, {
                    DynamicBox[Typeset`animator$$], 
                    ItemBox[
                    ButtonBox[
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{Typeset`down$$ = False}, 
                    TagBox[
                    PaneSelectorBox[{"Default" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIcon"]], "Hover" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconHover"]], "Down" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconPressed"]]}, 
                    Dynamic[
                    Which[
                    And[
                    CurrentValue["MouseOver"], Typeset`down$$], "Down", 
                    CurrentValue["MouseOver"], "Hover", True, "Default"]], 
                    ImageSize -> Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{
                    "MouseDown" :> FEPrivate`Set[Typeset`down$$, True], 
                    "MouseUp" :> FEPrivate`Set[Typeset`down$$, False], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], DynamicModuleValues :> {}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"], StandardForm]]], 
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"]], "Tooltip"]& ], 
                    ButtonFunction :> (Unset[Typeset`animator$$]; 
                    Unset[Typeset`animvar$$]; 
                    Typeset`bookmarkMode$$ = "Menu"), Appearance -> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "SuppressMouseDownNinePatchAppearance"], 
                    DefaultBaseStyle -> {"Panel", Background -> None}, 
                    BaselinePosition -> Baseline, Evaluator -> Automatic, 
                    Method -> "Preemptive"], Frame -> {False, 
                    GrayLevel[0, 0.2], False, False}, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   ColumnSpacings -> 2], FrameMargins -> 5, ImageMargins -> 
                  5], Alignment -> {Left, Inherited}, StripOnInput -> False], 
               "Menu" -> ""}, 
              Dynamic[Typeset`bookmarkMode$$], ImageSize -> Automatic, 
              FrameMargins -> 0], 
             StyleBox[
              GridBox[{{
                 TagBox[
                  TooltipBox[
                   ButtonBox[
                    DynamicBox[
                    ToBoxes[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100]]], 
                    ButtonFunction :> (Typeset`update$$ = AbsoluteTime[]), 
                    Appearance -> None, DefaultBaseStyle -> {}, 
                    BaseStyle -> {}, BaselinePosition -> (Center -> Center), 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                   DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateUpdate"], StandardForm]]], 
                  Annotation[#, 
                   Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateUpdate"]], "Tooltip"]& ], 
                 
                 PaneSelectorBox[{
                  "NameField" -> "", "Animator" -> "", "Autorun" -> "", 
                   "Menu" -> DynamicBox[
                    ToBoxes[
                    ActionMenu[
                    Tooltip[
                    RawBoxes[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "CirclePlusIcon"]]], 
                    If[False, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateBookmarks"]], 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateBookmarksAutorun"]]]], 
                    Flatten[{Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateHide"]] :> (Typeset`show$$ = 
                    False), Delimiter, Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulatePaste"]] :> 
                    Manipulate`PasteSnapshot[
                    Hold[Typeset`specs$$], 
                    Hold[
                    Clear[$CellContext`wavL, $CellContext`wavNL]; \
$CellContext`userguide = Column[{"", 
                    Row[{
                    Style[
                    "Welcome to \
\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\) !"]}, BaseStyle -> 
                    "Title"], 
                    Style[
                    "\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\
\"]\) is an open-source package for deriving and simulating reflected and \
transmitted optical second harmonic generation (SHG) of slab and multilayer \
systems. Optical SHG describes the process where two photons of frequency \
interact with one or more nonlinear media (crystals) to create a photon at 2\
\[Omega], so called the SHG process."], "", 
                    Row[{
                    Style[
                    "This package builds in the most general approach to both \
analytically and numerically solving the SHG response of crystals with \
arbitrary crystal symmetry, arbitrary orientation, and a complex dielectric \
function (complex refractive indices)."]}], "", 
                    Row[{
                    Style[
                    "Open \[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"\
Italic\"]\).nb in the Mathematica\[RegisteredTrademark] software on your \
computer"]}, BaseStyle -> "Section"], "", 
                    Row[{
                    Style["1. From the menu, "], 
                    Style["Evaluate", Background -> LightGray], 
                    Style[" -> "], 
                    Style["Evaluate Notebook", Background -> LightGray]}], 
                    Row[{
                    Style[
                    "    Note: This process will clear out all the \
definitions from other notebooks and enable the Notation package for the \
analytical solutions."]}], 
                    Row[{
                    Style[
                    "2. After a few seconds waiting time for initialization, \
you will see the main panel"]}], "", 
                    Style[
                    "Use the 'Functionality' control on the control panel to \
the left to set material properties and then view the desired output in the \
display panel.\nIn order to update figures in the display panel, you must \
press any of the three 'Update' button in green to the top right.", 20], 
                    Style["", 30], 
                    Row[{
                    Style["More Resources"]}, BaseStyle -> "Section"], 
                    Row[{
                    Style[
                    "For detailed information of \
\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\), please refer \
to the "], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/bzw133/SHAARP.ml"], 
                    ", ", 
                    Hyperlink[
                    Style["manual"], 
                    "https://shaarpml.readthedocs.io/en/latest/"], ", ", 
                    Hyperlink[
                    Style["tutorial video"], 
                    "https://www.youtube.com/watch?v=YiKRm6i7kNs"], 
                    Style[", and "], 
                    Hyperlink[
                    Style["FAQ"], 
                    "https://shaarpml.readthedocs.io/en/latest/FAQ/"], "."}], 
                    "", 
                    Row[{
                    Style[
                    "\[Sharp]SHAARP for single interface, \[Sharp]SHAARP.\!\(\
\*StyleBox[\"si\",FontSlant->\"Italic\"]\) : "], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/Rui-Zu/SHAARP"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si manual"], 
                    "https://shaarp.readthedocs.io/en/latest/"], "."}], "", 
                    Row[{
                    Style[
                    "If you used \[Sharp]SHAARP for your publications, please \
kindly cite us:  "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.ml"], 
                    "https://www.nature.com/articles/s41524-024-01229-2"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si"], 
                    "https://www.nature.com/articles/s41524-022-00930-4"], 
                    "."}]}, Background -> White, Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Franklin Gothic", FontSize -> 
                    18}]; $CellContext`maxmaterialnumber = 10; 
                    Part[$CellContext`allmaterials, 
                    
                    Span[$CellContext`materialnumber$$ + 
                    2, $CellContext`maxmaterialnumber]] = 
                    Table[$CellContext`mbot, $CellContext`maxmaterialnumber - \
$CellContext`materialnumber$$ - 
                    1]; $CellContext`clearFigs[]; $CellContext`dgrid = Dynamic[
                    Grid[
                    $CellContext`generatingdfun1[$CellContext`matindex$$], 
                    Spacings -> {0, 0}, ItemSize -> All]]; 
                    Map[$CellContext`indexfun1, 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`zvecplots2d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; $CellContext`zvecplots3d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 10]; 
                    If[$CellContext`Functionality$$ != "User Guide", If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = Table[0, 8]]; 
                    If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]]; $CellContext`startupvar = 
                    1; {$CellContext`ap1, $CellContext`ap2, $CellContext`ap3, \
$CellContext`ap4, $CellContext`ap5, $CellContext`ap6, $CellContext`ap7, \
$CellContext`ap8} = {
                    If[
                    Dynamic[$CellContext`ptest1 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest2 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest3 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest4 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest5 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest6 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest7 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest8 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}]}; Null]; 
                    If[$CellContext`Functionality$$ != "User Guide", 
                    Map[$CellContext`ruihklfun, 
                    Range[$CellContext`materialnumber$$ + 2]]]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 15]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], $CellContext`\[Omega]0 = 
                    N[2 Pi ($CellContext`c0/$CellContext`\[Lambda]$$)]; 
                    If[Abs[$CellContext`theta$$] >= 89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`wInc = \
$CellContext`setwInc[$CellContext`\[Omega]0, 
                    
                    N[($CellContext`theta$$/180) 
                    Pi], $CellContext`\[CapitalDelta]\[Delta], $CellContext`\
\[CurlyPhi], $CellContext`n0]; $CellContext`extWave[$CellContext`wInc]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name = 
                    Part[$CellContext`allmaterials, #], HoldAll]]& , 
                    Range[$CellContext`materialnumber$$ + 2]]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    Function[$CellContext`name, 
                    $CellContext`extMater[$CellContext`name], HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`m1 = $CellContext`setMater[
                    $CellContext`Air[]]; \
$CellContext`extMater[$CellContext`m1]; $CellContext`mats = 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name, 
                    HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`noAnalytical = Apply[And, 
                    Map[NumberQ, 
                    Join[
                    Flatten[
                    Map[
                    Key[$CellContext`dC], $CellContext`mats]], 
                    Flatten[
                    Map[
                    Key[$CellContext`h], $CellContext`mats]]]]]; 
                    If[$CellContext`mrassumption$$ == 0, 
                    Which[$CellContext`winhAssumption$$ == 
                    0, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    1, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    2, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = True; 
                    Null]; $CellContext`flagJK = False; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    1, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = True; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    2, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = False; $CellContext`flagHH = 
                    True; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; 
                    Null]]]]; $CellContext`evaltime = 
                    0; $CellContext`StartTime = SessionTime[]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 25]; 
                    If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`FresnelList = {}; \
$CellContext`MFList = {}; If[
                    
                    And[$CellContext`fresnelcontrol$$, \
$CellContext`noAnalytical], $CellContext`FresnelList = 
                    Map[$CellContext`Fresnel[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    Range[0., 89., $CellContext`thetastep1$$]]]; If[
                    
                    And[$CellContext`makerfringescontrol$$, \
$CellContext`noAnalytical], If[Abs[$CellContext`maxtheta2$$] >= 
                    89, $CellContext`maxtheta2$$ = 
                    Sign[$CellContext`maxtheta2$$] 89.]; $CellContext`MFList = 
                    Map[$CellContext`MF[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    
                    Range[$CellContext`mintheta2$$, $CellContext`maxtheta2$$, \
$CellContext`thetastep2$$]]]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported for Maker \
fringes calcaulation;  Either analytical d or h is given! Abort!"]; Abort[]; 
                    Null]]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`SampleRotationList = {}; If[
                    
                    And[$CellContext`samplerotationcontrol$$, \
$CellContext`noAnalytical], If[Abs[$CellContext`theta$$] >= 
                    89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`SampleRotateList = 
                    Map[$CellContext`SampleRotate[$CellContext`mats, \
$CellContext`theta$$ 
                    Degree, #, $CellContext`samplerotatestep$$, \
$CellContext`mrassumption$$, $CellContext`materialnumber$$, \
$CellContext`delta$$, $CellContext`phi$$ Degree, $CellContext`psi$$ Degree]& , 
                    Range[0, 360, $CellContext`samplerotatestep$$]]; Null]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported;  Either \
analytical d or h is given! Abort!"]; Abort[]; Null]]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "Set Material Properties", $CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], \
$CellContext`heterostructureschematic = Show[
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    Rectangle[{0, -1.5}, {10, -2}], 
                    Text[
                    Style["", 15, Black, Bold], {1, -1.75}], 
                    Text[
                    Style["Air", 15, Black, Bold], {8.5, -1.75}]}], 
                    Graphics[
                    Text[
                    Style[ToString[
                    DownArrow["", ""]] <> "Incident Light, " <> 
                    ToString[$CellContext`\[Lambda]$$] <> "\[Mu]m" <> ToString[
                    DownArrow["", ""]], 20, Blue, Bold], {5, -1.75}]], 
                    Map[$CellContext`schematicfun, 
                    Reverse[
                    Map[{#, $CellContext`materialnumber$$ + 2}& , 
                    Range[2, $CellContext`materialnumber$$ + 1]]]], 
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    
                    Rectangle[{0, -$CellContext`materialnumber$$ - 2 - 0.1}, {
                    10, -$CellContext`materialnumber$$ - 3}], 
                    Text[
                    Style["", 15, Black, Bold], {
                    1, -$CellContext`materialnumber$$ - 2 - 0.25}], 
                    Text[
                    Style["Air", 15, Black, Bold], {
                    8.5, -$CellContext`materialnumber$$ - 2 - 0.25}]}], 
                    ImageSize -> {600, Automatic}]; $CellContext`zvecplots2d = 
                    Map[$CellContext`fzvecplots2d, $CellContext`allmaterials]; \
$CellContext`zvecplots3d = 
                    Map[$CellContext`fzvecplots3d, $CellContext`allmaterials]; 
                    Null]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", 
                    
                    If[$CellContext`noAnalytical, $CellContext`fig13d = 
                    Graphics3D[{
                    $CellContext`pltWav[$CellContext`wInc, {-1, 0, 0} - 
                    Normalize[
                    $CellContext`wInc[$CellContext`k]], Red], 
                    
                    Map[$CellContext`pltWav[#, {-1, 
                    0, $CellContext`materialnumber$$}, Red]& , 
                    Part[$CellContext`wavL, 2]], 
                    Map[$CellContext`pltWav[#, {-1, 0, 0}, Red]& , 
                    Part[$CellContext`wavL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, Apply[Sequence, #2] - 1}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, Apply[Sequence, #2] - 1}, Red]}& , 
                    Part[$CellContext`wavL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, 
                    Apply[Sequence, #2]}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, 
                    Apply[Sequence, #2]}, Red]}& , 
                    Part[$CellContext`wavL, 3]], 1]], 
                    
                    Map[$CellContext`pltWav[#, {
                    1, 0, $CellContext`materialnumber$$}, Blue]& , 
                    Part[$CellContext`wavNL, 2]], 
                    Map[$CellContext`pltWav[#, {1, 0, 0}, Blue]& , 
                    Part[$CellContext`wavNL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, Apply[Sequence, #2] - 1}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, Apply[Sequence, #2] - 1}, Blue]}& , 
                    Part[$CellContext`wavNL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, 
                    Apply[Sequence, #2]}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, 
                    Apply[Sequence, #2]}, Blue]}& , 
                    Part[$CellContext`wavNL, 3]], 1]], 
                    If[$CellContext`mrassumption$$ == 0, 
                    If[$CellContext`flagBackward, 
                    If[$CellContext`flagStandingWave, 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 7], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 8], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 9], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 10], {0 - 0.5, 0, Apply[Sequence, #2] - 0.5}, 
                    Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Map[Hyperplane[{0, 0, 1}, {0, 0, #}]& , 
                    Range[0, $CellContext`materialnumber$$]]]}, 
                    Evaluate[$CellContext`options2d], PlotLabel -> 
                    "\[Lambda] of \[Omega] wave (\[Mu]m) = " <> 
                    ToString[$CellContext`\[Lambda]$$]]; $CellContext`fig12d = 
                    Show[$CellContext`fig13d, ViewPoint -> {0, Infinity, 0}, 
                    Method -> {"RotationControl" -> 
                    None}]; {$CellContext`rmpw1, $CellContext`rmpw2} = 
                    Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 
                    2}]]; $CellContext`rules = {$CellContext`\[CapitalDelta]\
\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`factorRp, \
$CellContext`factorRs, $CellContext`factorTp, $CellContext`factorTs} = {1, 1, 
                    1, 1}; $CellContext`Imax = 1; 
                    If[$CellContext`samplerotationcontrol$$, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 2]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 3]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 4]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 5]]}]; Null, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    NMaxValue[
                    Re[$CellContext`dataRp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataRs], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTs], $CellContext`\[CurlyPhi]]}]; 
                    Null]; $CellContext`Imax = 
                    1.1 Max[$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs]; 
                    If[Abs[$CellContext`Imax] < 10^(-10), $CellContext`Imax = 
                    1]; $CellContext`factorRp = Max[1, 
                    If[Chop[$CellContext`MaxRp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRp], 
                    0]]; $CellContext`factorRs = Max[1, 
                    If[Chop[$CellContext`MaxRs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRs], 
                    0]]; $CellContext`factorTp = Max[1, 
                    If[Chop[$CellContext`MaxTp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTp], 
                    0]]; $CellContext`factorTs = Max[1, 
                    If[Chop[$CellContext`MaxTs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTs], 
                    0]]; $CellContext`polarRp = (
                    1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]; $CellContext`polarRs = (
                    1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]; $CellContext`polarTp = (
                    1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]; $CellContext`polarTs = (
                    1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]; $CellContext`polarRtot = (
                    1/$CellContext`Imax) $CellContext`factorRtot (
                    Re[$CellContext`dataRs] + 
                    Re[$CellContext`dataRp]); $CellContext`polarTtot = (
                    1/$CellContext`Imax) $CellContext`factorTtot (
                    Re[$CellContext`dataTs] + Re[$CellContext`dataTp]); If[
                    And[
                    Not[$CellContext`RotateAnalyzer$$], 
                    Not[$CellContext`RotatePolarizer$$]], 
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`figRp = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    2]/$CellContext`Imax) $CellContext`factorRp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    3]/$CellContext`Imax) $CellContext`factorRs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    4]/$CellContext`Imax) $CellContext`factorTp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    5]/$CellContext`Imax) $CellContext`factorTs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null, $CellContext`figRp = 
                    PolarPlot[$CellContext`polarRp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = 
                    PolarPlot[$CellContext`polarRs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[$CellContext`polarTp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = 
                    PolarPlot[$CellContext`polarTs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null], $CellContext`figRp = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; Null]; 
                    If[$CellContext`makerfringescontrol$$, \
$CellContext`listMFpara = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    2}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringespar = 
                    ListLinePlot[$CellContext`listMFpara, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]) \
(a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> "Times New Roman"}}, 
                    ImageSize -> Large]; $CellContext`listMFperp = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    3}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringesperp = 
                    ListLinePlot[$CellContext`listMFperp, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]+90\
\[Degree]) (a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> 
                    "Times New Roman"}}, ImageSize -> Large]; Null]; 
                    If[$CellContext`fresnelcontrol$$, \
$CellContext`listFresnel = Evaluate[
                    Re[
                    ReplaceAll[{
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    2}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    3}], $CellContext`\[CurlyPhi] -> 90 Degree], 
                    ReplaceAll[
                    Part[$CellContext`FresnelList, All, {1, 
                    4}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    5}], $CellContext`\[CurlyPhi] -> 
                    90 Degree]}, $CellContext`\[CapitalDelta]\[Delta] -> 
                    0]]]; $CellContext`figfresnel = 
                    ListLinePlot[$CellContext`listFresnel, 
                    PlotRange -> {{0, 90}, Automatic}, PlotStyle -> Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"]}, PlotLabel -> Style["Fresnel Transmittance/Reflectance", Black, 
                    20], ImageSize -> {400, 400}, PlotLegends -> {
                    Style["\!\(\*SubscriptBox[\(R\), \(p\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(R\), \(s\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(T\), \(p\)]\)", 20], 
                    Style[
                    "\!\(\*SubscriptBox[\(T\), \(s\)]\)", 
                    20]}]]; $CellContext`plot2geometry2d = \
$CellContext`fplot2geometry2d[$CellContext`theta$$]; \
$CellContext`plot2geometry3d = \
$CellContext`fplot2geometry3d[$CellContext`theta$$]; \
$CellContext`polarizationplot2d = \
$CellContext`fpolarizationplot2d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`polarizationplot3d = \
$CellContext`fpolarizationplot3d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`rwave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`rmpw2[$CellContext`A], 1] + Part[
                    $CellContext`rmpw1[$CellContext`A], 1], Part[
                    $CellContext`rmpw1[$CellContext`A], 2] + Part[
                    $CellContext`rmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`twave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`tmpw2[$CellContext`A], 1] + Part[
                    $CellContext`tmpw1[$CellContext`A], 1], Part[
                    $CellContext`tmpw1[$CellContext`A], 2] + Part[
                    $CellContext`tmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`iwave = Normalize[
                    ReplaceAll[{
                    Part[
                    $CellContext`wInc[$CellContext`A], 1], 
                    Part[
                    $CellContext`wInc[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`ellipticityfig = 
                    If[$CellContext`RotatePolarizer$$, 
                    ParametricPlot[{
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    
                    Part[$CellContext`iwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    
                    Part[$CellContext`rwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    
                    Part[$CellContext`twave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]], 
                    ParametricPlot[{
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    Part[$CellContext`iwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    Part[$CellContext`rwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    Part[$CellContext`twave, 2]}]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]]]; 
                    Null, $CellContext`clearFigs[]; Print[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 
                    32]]]]; If[$CellContext`Functionality$$ == 
                    "Partial Analytical Expressions", $CellContext`rules = \
{$CellContext`\[CapitalDelta]\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; {$CellContext`rmpw1L, $CellContext`rmpw2L} = 
                    Part[$CellContext`wavL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1L]; \
$CellContext`extWave[$CellContext`rmpw2L]; $CellContext`rSignalL = 
                    Part[$CellContext`rmpw1L[$CellContext`A] + \
$CellContext`rmpw2L[$CellContext`A], 
                    Span[1, 2]]; {$CellContext`tmpw1L, $CellContext`tmpw2L} = 
                    Part[$CellContext`wavL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1L]; \
$CellContext`extWave[$CellContext`tmpw2L]; $CellContext`tSignalL = 
                    Part[$CellContext`tmpw1L[$CellContext`A] + \
$CellContext`tmpw2L[$CellContext`A], 
                    Span[1, 2]]; $CellContext`dataRpL = 
                    Part[$CellContext`rSignalL, 1] Conjugate[
                    Part[$CellContext`rSignalL, 1]]; $CellContext`dataRsL = 
                    Part[$CellContext`rSignalL, 2] Conjugate[
                    Part[$CellContext`rSignalL, 2]]; $CellContext`dataTpL = 
                    Part[$CellContext`tSignalL, 1] Conjugate[
                    Part[$CellContext`tSignalL, 1]]; $CellContext`dataTsL = 
                    Part[$CellContext`tSignalL, 2] Conjugate[
                    
                    Part[$CellContext`tSignalL, 
                    2]]; {$CellContext`equationRpL, $CellContext`equationRsL, \
$CellContext`equationTpL, $CellContext`equationTsL} = 
                    Re[{$CellContext`dataRpL, $CellContext`dataRsL, \
$CellContext`dataTpL, $CellContext`dataTsL}]; {$CellContext`rmpw1, \
$CellContext`rmpw2} = Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 2}]]; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`equationRp, \
$CellContext`equationRs, $CellContext`equationTp, $CellContext`equationTs} = 
                    Re[{$CellContext`dataRp, $CellContext`dataRs, \
$CellContext`dataTp, $CellContext`dataTs}]; 
                    Null, {$CellContext`equationRpL, \
$CellContext`equationRsL, $CellContext`equationTpL, $CellContext`equationTsL} = 
                    ConstantArray[$CellContext`placeHolderEqus, 
                    4]; {$CellContext`equationRp, $CellContext`equationRs, \
$CellContext`equationTp, $CellContext`equationTs} = 
                    ConstantArray[$CellContext`placeHolderEqus, 4]; 
                    Null]; $CellContext`progress = 100; $CellContext`EndTime = 
                    SessionTime[]; $CellContext`evaltime = \
$CellContext`EndTime - $CellContext`StartTime; ""]], Delimiter, Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAddBookmark"]] :> 
                    If[DeleteCases[Typeset`specs$$, {
                    Blank[], Manipulate`Dump`ThisIsNotAControl}] === {}, 
                    Message[
                    MessageName[Manipulate, "novars"]], 
                    Typeset`bookmarkMode$$ = "NameField"], Delimiter, RawBoxes[
                    RowBox[{
                    RowBox[{
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "BookmarkBullet"]], "  "}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["FEStrings", "ManipulateInit"],
                     StandardForm]]}]] :> FixedPoint[
                    
                    Function[{}, {$CellContext`analyzeroffset$$ = 
                    0, $CellContext`delta$$ = 
                    0, $CellContext`fresnelcontrol$$ = 
                    False, $CellContext`Functionality$$ = 
                    "User Guide", $CellContext`makerfringescontrol$$ = 
                    False, $CellContext`materialnumber$$ = 
                    1, $CellContext`matindex$$ = 2, $CellContext`maxtheta2$$ = 
                    30, $CellContext`mintheta2$$ = -30, \
$CellContext`mrassumption$$ = 0, $CellContext`phi$$ = 0, $CellContext`psi$$ = 
                    0, $CellContext`RotateAnalyzer$$ = 
                    False, $CellContext`RotatePolarizer$$ = 
                    True, $CellContext`samplerotatestep$$ = 
                    10, $CellContext`samplerotationcontrol$$ = 
                    False, $CellContext`schematictype$$ = 
                    1, $CellContext`thetastep1$$ = 
                    2, $CellContext`thetastep2$$ = 1, $CellContext`theta$$ = 
                    45, $CellContext`winhAssumption$$ = 
                    1, $CellContext`\[Lambda]$$ = 1.064}], None, 3], 
                    If[Typeset`bookmarkList$$ === {}, {}, 
                    Map[
                    Function[Manipulate`Dump`bookmark$, 
                    If[
                    Manipulate`Dump`bookmark$ === Delimiter, 
                    Manipulate`Dump`bookmark$, RawBoxes[
                    RowBox[{
                    RowBox[{
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "BookmarkBullet"]], "  "}], 
                    First[Manipulate`Dump`bookmark$]}]] :> 
                    Part[Manipulate`Dump`bookmark$, 2]], HoldFirst], 
                    Typeset`bookmarkList$$]], Delimiter, Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulatePasteBookmarks"]] :> 
                    Manipulate`PasteBookmarks[
                    Hold[Typeset`specs$$], Typeset`bookmarkList$$], 
                    If[False, {}, {Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAnimate"]] :> 
                    Which[DeleteCases[Typeset`specs$$, {
                    Blank[], Manipulate`Dump`ThisIsNotAControl}] === {}, 
                    Message[
                    MessageName[Manipulate, "novars"]], 
                    Length[Typeset`bookmarkList$$] < 2, 
                    Message[
                    MessageName[Manipulate, "nobks"], 2], True, 
                    Typeset`animator$$ = ToBoxes[
                    Manipulate`BookmarksAnimator[
                    Hold[Typeset`specs$$], Typeset`bookmarkList$$, 
                    Dynamic[Typeset`animvar$$], Automatic, {1.5, True}]]; 
                    Typeset`bookmarkMode$$ = "Animator"], Delimiter, Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAutorun"]] :> 
                    If[DeleteCases[Typeset`specs$$, {
                    Blank[], Manipulate`Dump`ThisIsNotAControl}] === {}, 
                    Message[
                    MessageName[Manipulate, "novars"]], 
                    Typeset`animator$$ = ToBoxes[
                    Manipulate`AutorunAnimator[
                    Hold[Typeset`specs$$], 
                    Dynamic[Typeset`animvar$$], {Automatic}]]; 
                    Typeset`bookmarkMode$$ = "Autorun"]}]}], Appearance -> 
                    None, MenuAppearance -> "Menu"], StandardForm]]}, 
                  Dynamic[Typeset`bookmarkMode$$], ImageSize -> Automatic, 
                  FrameMargins -> 0]}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnSpacings -> 0.2, RowAlignments -> Baseline], 
              CacheGraphics -> False, StripOnInput -> False]}, {
             GridBox[{{
                ItemBox[
                 ItemBox[
                  TagBox[
                   StyleBox[
                    GridBox[{{
                    ItemBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    StyleBox["\"   \"", 30, StripOnInput -> False], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzs3P2rZPddB/A7T2fmPM2ZOTN37r3rZWWJbrZGA9IkGom0odCSHxRtXdKK
BROzllBINKvUiLrWWqGoqPi8ggiaH/xB26JFk6DQ2h+SomlAsUWwqOlDstak
YkyT7s2On++4Ey7bRpCEzm739YL3Pef7cL7nzP0D3sfuvPfNP9zd2to6PYo/
b77jXbfed98d979lEoOT95y++x33nLrrtnt+7NQ7Tt337Xf2YvLmwdbWL7Zb
W/0tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAD4qutcDAAAAAAAAAAAAAAAAAAAAAAAAJeXXmQU
yTb9IQAAAAAAAAAAAAAAAAAAAAAAAHyZOrIfWUQGG/4WAAAAAAAAAAAAAAAA
AAAAAAAAwsmTJ3tt247ruj4ew1sjt0SuiTSRzkY/DgAAAAAAAAAAAAAAAAAA
AAAA4Cp3/fXXl0ePHj1WFMVt3W73RyP3Zln2PYPB4Ftiudj09wEAAAAAAAAA
AAAAAAAAAAAAAFzN2rYdN03zrf1+/55Op/P+yAcGg8EvjEajt5Vled14PG5j
WxnJNv2tAAAAAAAAAAAAAAAAAAAAAAAAV5uqqraHw+Eber3eb3Q6nc91u93P
9/v9vxoMBr9UluUP1HX9HVmWvSa27m3piwIAAAAAAAAAAAAAAAAAAAAAAPhq
6TRNM53NZjdG7s7z/M8Hg8EXI8t+v/+Zbrf716k/KsuyH499d7Rt+8a6ro/H
c+NIb9MfDwAAAAAAAAAAAAAAAAAAAAAA8LVsPB63kZsWi8Wp3d3ds9Pp9ONV
VT2f5/kyy7KDXq93rtPpPNbv9/8y1v5oZ2fn5+fz+e2TyeT6rf/tiwIAAAAA
AAAAAAAAAAAAAAAAAODV14lM8jy/saqqu+q6/p3xePxI0zRPRs7HeFkUxTLW
XxwOh1+IPBHjT8T8Q23bvi/1RUWOxxnDTf8QAAAAAAAAAAAAAAAAAAAAAACA
r0Ft6okqiuJUXM9mWfboYDB4Osbnm6a5MJ1Ol+u0bXtQ1/X5fr//Qq/X+2ys
P7S7u/ve7e3tN8WzR+KsbNM/BgAAAAAAAAAAAAAAAAAAAAAA4ArXiwwi2f7+
fhtuaprmrqIofns4HD6aZdnnR6PRhaqqlpPJJPVDvXRdLBarzqjYs+z1ei/k
ef7JePaBWLuzLMvr4sx6w78NAAAAAAAAAAAAAAAAAAAAAADgStbZ3t6uZrPZ
kfl8fnw6nd6yu7t7d4zPFkXxyGAweLosy4PUCxXrq36o8Xi8zPN8mbqj0lw8
v2yaZhn7vxT7P93v9x8cjUbvivVb6rqebfoHAgAAAAAAAAAAAAAAAAAAAAAA
XKG6s9ms3tvbO7FYLN5QluVbI6dj7vfn8/kjRVGcy7LsQuqESn1QsWcZa6uu
qNFolLqhltPpdLWWOqNi/qDX630hzn08rr8ZZ31/XdfXxniw6R8KAAAAAAAA
AAAAAAAAAAAAAABwhelFqtTldOTIkdtns9m7+/3+2U6n82dFUfx927ZPj8fj
83meL8uyXMa+5WQyWXVFpWvqjzo8l7qimqZZ9nq9F+Pcp7rd7sPx7HvirDfG
8ztb+qIAAAAAAAAAAAAAAAAAAAAAAAD+P/pFUexOJpPX7e7u/sz29vYHh8Ph
Y91u99/Ksnxu3QmVeqJi3yqpG2o6na6SeqFS0p40TvvTOMuyZZzxfJz1iaqq
Hoj8UJzxzfG+OtLZ9I8GAAAAAAAAAAAAAAAAAAAAAAC4QgyGw+E3tG37lr29
vd9aLBZ/W9f1k3meP5+6n2K8jLVVP1RVVauk+9QHNR6PVzncFZWuaZz2lWV5
Pu4/M5vNHor5+0ej0XfG++ab/sEAAAAAAAAAAAAAAAAAAAAAAABXiul02tR1
fXPTND8yn8/fP5vN/nUymXwx9T3F/aorKnVArfuh0n26Hu6OSn1R656odX/U
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
HnmmhmEYW+R57pbrf1Ge4fWO40yXZ/NkEhP8OwMAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAHgh6OZSmEqlDpR5UxiGN9i2XUkkEk8ZhhH5vt/sQOlWVNxy
yuVyoz0nvRYEwbi0ouJ76A6Vvoe+rmVZu+R5HpL9X8mz/aPrui+VbZs8szHR
vzgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAXgG5FpcIwPETmHUEQ/Myy
rJWJRGKHbJv9prjd1NqI0mtx36m1JbU7nSi5f/NacY9K73ue17Bt+3GZux3H
+Yzv+2e4rjtV0YoCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvDroVlQ6C
YI7Me8Iw/J3jOGtM03zadd1ms6mtrS0qFArNPpTuROl93Xcaj0bU2FaUHn0c
96lkvSHP8YRhGMtlvuf7/kVy/kh5Zn+if3EAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAvgGYryrKsOdls9r0yv0ulUo94nrczCIJmr0m3ofTIuUiv+b7f
3OpWlF7TXSe9HY9eVDz6erpRVSqV9L12JRKJzclk8i659zVy/vUyM+S53ZHn
BwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2F+NtqLy+fwlxWLxlmw2+3A6
nX46bjbpXpTuQelj27Yj0zSbvSjdd4rPjUcrSl9Dj76PPtadqM7OzmaTKpFI
NAzDeCgMw1/K+ctd132pPHdRxpzg3x8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMCepFtRKdu2D0mn0+/K5/O/yWQyD8s8PbbjpLdBEDQ7UbrnpDtRek3v
x32n8WxF6QZVoVBo3tOyrMjzvI3FYvGuUql0taydLM/dqWhFAQAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAACA/ZtuRaWDIDhM5pIwDG9JpVIPp9Ppp5+rA6Vb
TnHDSW/1Od1yku/sditq7Ohr6+vqNpXneQ1Z29Le3t7T0dHxBTn3SnnuLhlr
gn9/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe1Qmk8l5nneMbduXWpb1
n67rPpJKpXbqLpQe3W3SzSbdbsrlcs1O1AvViop7UTINma1yXJHtF33fP1Ue
vVPGnOjfHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwB6UKBQKXel0+jTD
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
eTf2qVaU67q0ogA0tfahFsrf9EVKWQNKOXcq5a2WWamUq9f0uZF+FO0oAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAACAvUAmk8mlUqnjbdtekEwml8kMGYax0rKs
n7iuuyAIgtfLnCjHh6vhZpQ10c8MvIB0KypvmubR6XT6Q9ls9lZ5L9bqVpS8
M3t1K0qv+b6ve1G0ooB91Ejb6S/2mvT5BfJv1V/4XCJuRMV9qIXDTSj/T0ql
qvJv3FKlSrLtWD68zffKuu5HLRr+m08vCgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAYOIkU6lUIZ/PH1Mqld6ZzWa/63neesdxIsuythuGsTyRSNwi268GQfAv
bW1tF8vn5qfT6Rny3XCiHx54gehWVFbeibny3/57ZH5q2/YK3YrS78pEtqLi
ie85dl23ouTd1b0oWlHAPqSl/aTH0H2nqKUFFXef9Nw8cl43nfREf/7s2O+b
VXnvdR9KtuGdSuXvUapjiVLTepSaXVbq8KVKzdPb5UrNks9N0f0o+W72JqW8
lmdITvTvBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4MUkk8nk0un0Mblc7sK2
trbri8XiPXK8OQzDyPM83Yt6OplMrjUMY2kQBH+Qz3yvVCpdIZ87Q/eijjrq
KGuifwbgBaDbLL7MNHk3zpX/9q+Rd+OORCKx2XGcxt7citJr+n2mFQXs/cb2
oXT3aUApR7edFioV6r6T3l+plPtrWR8YGTnnrpH1XqVSci6rR+/rtdVKeXr0
99YqFcg2o/tPugOl+1C6DVVR6mX3KzVf9s8oK/UaOT5D9k+S+x2zWKnD5dws
2e+4W6m0vtdIiyox0b8vAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAF4GkTMHz
vGPDMHyHbK/zff+eIAg2ZDKZHa2NGVnbIec2OY6z3nXd/lQq9dNisXhFZ2fn
K0ulUrtcx5zoHwZ4AeguSiDvxjx5Ly40DOObcly3bXswm83u2ltbUfK+xu9x
sxWl33VaUcDeQzeXRqbZh9IdJt1/0n0n3XuqKpW/Z7jT1H2vUpPrSnX2KVUs
K5XTTSi91cd6fYlS0xYrNbOi1IwHlJpyn6zJtdrul5HPtetr6POyPUK2L60p
dbLM2XKPN8p3LpTPvXepUh+U+YDMxTJ/r9tRcv4k2R7eI9/X99TPFg3/7acX
BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAel0+m87kT5vn9REARfdxznHtM0
dQ+qoXszunsTT7FY1NuG67pRIpHYIZ/pLxQKP2hvb3+37ubI5bJquD0F7O8S
8t50yXtzqmVZH0smk3fKe6H7akO6ExV3oeKJW1HP13F6IVpRLc23ZitKtrSi
gD0obj8tkL+LC4b7T8/qKbV+5uaRPlRV3kfdYJJtuEqpnGw7dPuprNRBsp1b
Uepo2R6j9/Wa7kHp7tMi2z6oblmHlS3rqCWm+TJZP1HOn9Cj1HGyf0RNqUPv
U2rOUqXmjaydKPtnyPb1cnyhzD/IXCHzCVn7gszX5Pw35PgrI2v/KNd7m2xf
GfeidJ/qzuFeFH/7AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxtG5555rdHZ2
+vl8Pt3W1tZRKpWOKxQK70ylUtc5jnOvzGO+7+/SXRndvNETt2d0K0q+E8ln
I9u29ejP/jEIgn+TOcXzvElyC2Oif0bgBZAY6awdJ+/Ah8IwXCjvxTpZG2pt
NcXvkB59rN8dPfG5uOE0Ho2ouEf1fGu0ooA9L24/RSPtp4VKmYuUsnT/SY/e
1z2ohWNGn1uplLtUqWCJUlnZlmRtSo9tz65Z1jzZf3lZqfk9Sp0l8zrZP1e2
Z+tuU9UwTuoxjJOXOs5pFXmnZV5bdd039ljWW5ckk+eXk8nz5HrnjHxXf+e1
sn2jXPN8mUvkWv8k8zFZ+5Lc+0bZ/7Hs/1bmdpk7ZW6VtR/J9lqZf5HvX1hT
6hS55mHy+UnyM2X0zzXRv3sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAID9ycyZ
M9NTpkw5IJPJzM3n86e0tbW9u1Qq/UcqlbrHtu1Nnuc1CoVCJGvNLpTuzMha
5DhOc1+v6fPy/YasbUkkEhXDML7muu4bwzA8WNGcwYtDQibj+/4R8i58UN6N
W9Pp9Fp5j4Z0j0lP3FuT9+xZrSj9LrW2osajFzW2FRUft7ai9L1pRQHj7ll9
KNm3BpRy1ijl361UuqxUrq5UYZVsZT2tm1C/ldHbqlKh7i3dr1SbnOuu2fas
Pss6vO55x9Uc5+Re2z6rmkyeJ/N2uc57K8nkZUuSyX9emkz+U08y+f6Kab5L
5uKy511SCYJ/qKVSl1Z8/4qq4/yb/IH+ZDmR+Jh89solSl3eo9RlPcPbK+S+
/yrX+7ys/0dFqZt1H0qO75Btj0y/zEqZB8vD+/fI/ErmGzIflbU36X6VPPMs
/XPJz+yq4X8XAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHsS+Xw+3d3dfVhn
Z+fZYRi+07Ksj8r2O8Vi8b5MJrPBdd1dugul2zKy1mxC6Z5NEATNXpTuzeg1
fU6vO46zU667NpFI/E6+uyCdTr9SPluSteRE/7DAHha3ouamUqkPytwqs1be
p2YrSjeZdJspbkK19pri9bFru9uKer52lJ64E6WfjVYUMD50H2qB/L2LhsdY
NNKHkq3fq1RKN5RkOpcoNe0epQ5crNTBNaVmPaDUFL0uax16W1FqssyMmmUd
2u95x/QGwYn9vn96LQheX/H9Cyqe976Kbf9z2TA+WTOML8r26z2G8e2lhvGd
sml+vceyvlR2nM+VXffzlTD8UiWd/lo1DG+suO4Py5b186Wm+f96TPMHMt+Q
710n37++YhjfrCQSN8n8sqzUf/Uodf9Spfpku0q2a2Vtg2w3yvEmmfUyy3Qv
Sn6WX8j6l8vJ5CVLDONUee6D71CqpH/miL/9AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAu0v3G8J0Oj2zo6PjXJmrfd+/SdYWOo4zkMlktuZyuV26IyPrzTaU
7sroxkw+nx/t2eit7t7oXpRed103kms8nUgkBuQ6P5DvXSLfnyefyci6MbE/
MrBH6Xcqq/97l7nU87zbZLtO3oFntKLiZtPzNZxeiFZUfA9aUcDuG9uHkjGr
8v6sVspbL39ny0rlHlCqvabUVNk/aKlS8ypKHS/zf+R4vhyftFipl/YodaR8
b67sv2Sxab60bJon9DnOab1h+LreVOqt9XT63TKXV1Opf6uE4RfLnvfNimX9
pGpZvy1b1u09lnVv2bbvqdj2f5Vd9zcV3/9/1SD4eTmVuqWWTi8sp9N3l4Ng
iXyvWvG8snzmXvnMH3o871b53sKltn1n2TAW9xhGTeYBmTU9yeQGmY0yW3oS
iS3yjPE8JvNgOZFYXDHNX1Vc96uVIHifXO9UudZB9yvVpn/+iL/7AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAuysZhmExn88f19HR8UGZn6ZSqR7TNB/xff8p
3X7So3syuhOle1G6KTO2cxO3Z3QvSm/1Zy3LihzHeVSud7t85pPy3VM9z+uW
e5oT/UMDe9CzWlEy62R/KG6ttfafWrtR8fvT2okaj1bU2Ou0tqLiThStKOB/
TvehRiZ5s1LGwpE+1Eql3LVKBUvk34KlSpUqSk1eatsHLrGsuUtM82Vlw5i/
xDBe06PU35WVOl/mIj09yeRbKsnk6+X8uUtluySZPK+aTL614jgX1+Tfk95M
5l9q2eznqrnc16v5/E31bPY31XT6jqrn9ZQdZ6BiWSsrtv1QxXUfKvv+Cpl6
JQx75DPlSibTJ99bUc1mH6pks2urmcwG2T4qx2v0upxfVg3D5fL5BytB8HBF
/t0qu+7jcq1Ncu0tZdveItffVDbNx2U2VAxjrTzng3KuLPe5Ta7z/Wp7+6d7
J016R9+UKSfVisVZdaUKd9KKAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGA/J
XC43RebVHR0dn5K5U/bXhmG4XbdkSqVS1NbWNtqUiXszequP47Xn6tzIuYbs
bykUClU59x9BEJxn2/bBck9non9oYA96VivKdd11MkO6tabfmbEdJ73V708+
n39WK2p3O1F/qRUVv8e0ooD/kWf0oaLhsXQfao1S/iKlMn1KFe9Wqruq1Mwe
pebUTPPYquOcVLHtMyuu+4aKZV1YSSbfJ/PhciLxb5VE4jNLDeOaHsP4tMxV
PaZ5RcU0/7lsmlfKZ6+qOM5nKkFwbS2b/V4tn/9lvVD4r2qhsLiaz/dVMplV
lVRqXdnzHq943uZqEGytheETlTAcrKZSGyvDTagNlVzucfnOZvnuYL1Y3FYr
lXbUOjp21jo7t9c7Ogbr7e2b6qXSRlnfVC2VNlfb2jbXisXNtVxuUy2Tebyc
Sj1aDoJH5Pora0FQk2svrmazf5LP/bLW3X1j76xZnx2YM+cfB4488rwHjjrq
5X0HHnjAkkwmq9tZ0fC/iwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPhfyufz
6VQqdWw6nb4kk8n8QLYrZNvsROluTaFQaDZs4iaUXtOjezMjbZnmNm7dxE2p
+Puy3SHf0+2p3/q+f4XjOPPlO+1ya2Oif3ZgD0nKe/CMVpRt2+tkhmR/tK02
thUVv29xw2m8OlHP14tqXY97Ua2tKFmjFQW00H2oBfJ+R8NjLFLKGlDKWa2U
16tU6h6lCouV6iorNX2JUodWlDpa9k8oG8are237dVXHeWvV8y6p+/4/VRzn
4xXD+HKPYdxYTSR+VEkmf9Vjmr+T+VXZNG8u2/aNMjf02Pa3q7b9A/nuz2th
eGstm723VizWam1tK6ptbY/I/qO1fH5zNZvdVpG/3bVMZofsD1VzuUZNRrZD
st1Rzee3VwqFHfKdnbWOjqF6V9eu3smTo/6pU6O+Aw7Qs7N3xoyn+mbMeKJv
5sytvbNmbe6dPn1jberUx3q7u9f2dnU9WO/o6JPvLq51dd1e7+7+tXzn5r5Z
s77Rd+ihX+g/6qh/GXj5y9+/Yv78t6w8/fRXr3zta+f1nnVW19LDDw9u5u89
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADA7ki2t7cHqVTqwGw2+ybZftW27UWG
YTzh+/5o90nv676NbkLphk2pVGqO3tdr+rzexq0o3Z3RzRl9vlgsNhs0pmk+
LdcdkOt8Xz77HvnsUbqlo+hHYP/0rFaUZVnr5B0Ycl23+Y7odyXuRbW2ouIO
m35v9FZ/prUrtSd7UXErSqYu92+2ouQ5aUXhRU33oUam2YdaqJRZlXdC96HW
KxWWlcrJcUdNqakVpQ6uK3Vkj1KvWKrUaTLnVJLJv6+Y5sU1276s5nlXVcPw
mloYfqPq+z+uuu7vK4ZxV08y2dNjGL09ptlfNs1q2XEWlW37dpk/9jjOnRX5
21xxnKp8Z3k1k3m4VixuqJVKm+rt7VtrbW1P1dvadsh2Z7VY3FUtFBr1QiHq
k+mX6ZW/w/L5qNrW1qiWSo1aR0ejt6sr0p2ovmnTov4ZM6K+Aw/c1X/wwTv6
58zZNnDUUZsHjj768WUvecm6ZfPmreo//PCBvjlzlsq5O2T7u/4jjvjRwLx5
N/QdffSX+o877hP9r3jFFQOnnPIPy8844/wH//ZvX/vgRRedvOHDHz5y0+c/
P23TDTdkF113nTXR/xsCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADs44x0Op2X
eUkmk7lUtr+0bXt1Mpkc0m2osa2o1v5TW1tbc1/3bPS6nrhro9firpT+rN6X
e0WJROJxx3Ful+NPysyX63YqGjTYPyVlspZlzXNdd7QVJe/AkLwDo12osa0o
/c7pdX083q2o+DrxteN76rX4XY9bUXKuLtNsRcnz04rCi05rH+rmkT6UbG3Z
ukuVCpbI+y3b0iLXnVK37QOrljW3YprHlw1jfs0wXlNV6o0yF5WV+kA5mVxQ
sazPlG37+orv31RLpX5Tz2Rul+1SOV4m5x7qMc11Zct6VD7zeMW2H6s6zpqy
4zxYdt0Vsl0l64/IbKi47sZqGG6t5fNP1kulHbX29p3Vjo5duv9Ub2+Pekul
Zhuqr2Xq8ve6OXJOf6be0RHVJk1q1CZP3tU7bdrOvhkztvcdfPC2ZXPnblp+
7LEbHvibv3nogfnzl6945SvLD5x66t3LTjnl1uXz5/9M9r+1/FWv+soDZ5xx
9Yozz/zIA2ed9f4Vr33t21e+4Q1/t+qCC8586IMfPHHD1VcfueWmm2Zvu/vu
7sbq1fnVq1d7URQlJvp/TwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgH2ckUql
CjIvzefzC7LZ7O3pdHqDHDdaOzW6IxPP2LZN3J+Jz8UdGj16rVAoNFtRyWRS
z1bHcZb6vv/vMqd7ntetaNBg//SsVpRhGOtkbci27dGOWtxo0u+Nnvhd2hOt
qLHv6Ng+VdyKkhmUz9Vl7TrZ0orC/qLZfvprH2rtQ0XDY+k+1Bql/EVKZfqU
KvYo1V11nJk9ljWnx/OO63Gck2V7Vt1139DnOBfUbPt9Fdu+omwYV/cYxlfL
pvndsmX9ouZ5f6iE4f3VTKavmss9WMtm11aC4PGK42ytWNY2+cx22X+66nlP
Vzxve9l1t8lslbUtcr0nyrb9pOxvl+/srORyu2ptbQ3dfeqV6dPT3h716VZU
W1uzF1Vv7USNTK1U0k2poXpn547apElP9U6btqV/1qxHl82Z8/Dyo49evuLE
EysPnnnmPQ++4Q0LV775zb9Ydf753119/vnXPnjBBZ9d9fa3f3T1O95x6aqL
Lnrn6ne967xV73nP2Q9dfvlJj33yk8c8/q1vHfbU7bdP37ZqVVdjy5ZC47HH
0lEUuTIGrSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDdZpZKpfYgCP5PKpX6
pMx9mUzm8Vwutytuyuit7sjo5pMe3ZXRnRndlIk7M3pdfyb+Ttyg0Wv6vG5F
mabZsCzrCd/3e+X4657nneW67hRFgwb7p2YrSmaebduXyjyjFaXfi7GtqNYu
1Hi3olqbb7Si8GIy0n5q9p/iUcPNqObE5xf8+byxSClLtvZqpbxepVJ1pQqL
leq6T6kZSy3rsIppHl0xjBPLtn16zfPO7U2l3lpPpy+pptMfqqVSH6+E4ZfL
QfCtsuP8rGxZt8ncW3bdWiUIVshn1lRzuUerhcLmWi73RCWd3l7x/aflWkMy
jarjRL2eF8l1I/lOQ66xU9Z3yjV29pjmLplGxfMaNXlfdQ+q2YeS6dWNqJFO
VD3uRI1M78jUisVGrVB4Wta21Ts6Nvd2d6/rmz79wb6DD64PHHnkfctf9rI/
rDjttF8+eN55P3j4kkuuf/hDH/r8miuv/Ne1V155+cNXXvnuR6666s0y56z7
zGfmr7v22pdu/N73Dn9q4cKZjYce6m5s3doWRVF2/fr1YSOKHNm36EQBAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAACMGyOXy03xff8MwzCukbnfdd2N6XR6V2uz
Rree9Fb3ZOKmTGvHprVBo6e1H6U/o78v1214nveEHPfKd66X758l96cVhf3V
aCsqmUxeaprmbYlEotmKchxntBX1fA2o1ubaeLSi4iZUa4eKVhT2V619qJvl
71w0PM3+00ql3AGlnKrs6ybUdTILlTL1tjpyXrZhWamcbDt6lZpWse2Dy5Z1
VM00X1F1nNPqtn1OxXXfXPO8iyuZzD/Wcrmr6m1t19RKpRtqxeKP5fh31Uzm
rkoYVno874Gy6z5cCYIN1Wx2k7xYW+UzT8nnd8h2ZyWb3SXnmo2ommVFcu2o
rvddN6rItse2Gz2W1SibZlQxjKgqU9OfkXe1Lu9uswfV2oeSv72jI++1nl49
8tlaPj8kz7atVihskGddWZ80qdw3a9ady4844jfLjj/+hyvmz//Gqte97guP
XHzxx9YsWPDhtV/84nvXX3/9+Ruuu+7c9TfccNrWH/zgZZt++MN5W269dXZj
2bLJjXXr2qPNm3ONRiMl40VRZMuYcSOKThQAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMD4aG9vD4rF4rwwDN9uGMa3E4lEn23bg6lUqhE3oHRTxvO8Zu+ptSkT
d2aeq28Tt6LifpT+rkxDrjUo63WZr8n+mfIINGiwv3pGK0reredtRbW+S/E7
1Lo2Hp2ov9aKan1XaUVhXxT3oRbIuxcNT7MPtVApV7b+gFLpe5Qq3K9U28Oy
1S0ovfYnpVK6DdUr2yXyzt4lfxrleEqPbc+uWtbcimm+rGIYp9Zs+zVyfF6v
41xUd90P1H1/QS0MP1vN56+vl0o39XZ2/qZ30qQ/1bq6euodHQPVUumharG4
Xs5vrGYyW2u53JO1UmlHrbNzp3xmV62jo9FsPMk7WZf3rib/LlRNc3gsK6rY
9vDIfnNNd6KSyeHRx64bVeWdrcnf5Jr8vW2O3tdNKD1yXT31kalmsw15ju0y
G2S9Tz5/V23SpFsGDj74e8uPO+4rD5xyytUrzj77I6vOP//9ay6//MK111zz
hg033XT6xl//+oRtt9121PbFiw9+auXKadETT3Q0oijfaDTSug8l47T0oZL0
oQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMaVbjk4mUzmgHw+f242m/2853l3
Oo6zKQiCXbonE09rv2Zst6a1a/Nc7ah4dJcmDMOGfGYwl8vVi8XitXKd0+We
kxQNGuyfRltRMs1WlGyftxUVv29xxyl+18arE9V6vbHvc+s6rSjsa8b2oRYp
ZQ3I37c1Svmyn/mjUm1LlJpUVmq6HB9UVeoQve2X44pSk/W5HqW6Fys1tWbb
s8qWdXjd846rOs5JVds+q25Zb6g7zoV12/6HmuteUfa8T1V8/9pKGH6vms3+
sl4o/Fe1o+P+end3X+/Uqat6p01bW5827XGZLXK8rd7Vtb3W0bGz3tk5JJ9p
9E6ZEvVNnhz1dXVFvboVJe9hzfOaTahyMjk8ptk8bo7el7VKIvHn0ce2HVV1
Y0p/P+5DyX51ZGq6IzWyrcq/KTI7K0GwRWaFfO/Oajr9096urq/1z5nzyeUn
nnj5yte85p2rL7jgjQ9fdtlZaz/3uZM2//znR2+vVg9prF17QGPbtq4oiooy
GRl/pA9l0YcCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADY44wwDIupVOql6XT6
cplfyP5q2TY7UbpjEzdq9DafzzfXxjahnq8VFfduxqw1W1G6QSNzvdz/bNd1
pyoaNNg//dVWVKFQGG2pjW1FjX0P98SM7USNNN2arSg5r9/T62SNVhT2Rs/o
Qy1UytR9qNVKeb1Kpe5RqrBYqS7dh1qi1KGyfUmPUq+QOXmpUq+8X6lT9HFN
qWOrSh3TY5rHLTLNV/Q4zskV2z6j5rp/W/X98+ued0nddT9U87yPV1z3yxXP
+7Yc/0zO3VZLpe6t5nL1alvbylpX1yO9U6c+1jtz5ua+2bOf6DvooO19Bx/8
tGyH6rNmNXqnTYv6pkyJ+qdOjQZkX291K6ou/wbUdMdJ/k3QTajRVpRuQelG
lB7DGF5LJEZHr+mOVNXzmh2oZhNKN6L+3IVqXrcu73Pd96Oy7zfkmZ+q+P56
mbL8HL+sBsFX+0qlK/sOP/ziZWee+ber3vOeU9d99rPHDd5005zGfffNaGzb
NqnRaLRFUZSVbSBbV8aWMeM+FI0oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA
PS6Zy+Ump1KpV3ue91nXde8Jw/DxbDbbaO3TxK2n/2mz5rn6UTINuccTMn0y
NwZB8EbbtmfLszgT/csA9oC/2orSDbbWNtTYVpQ+H6+NeZf+V9N6nb/QiYrk
3RyUqctasxWl/61QtKIwwSKlEiOTvHmkD1WV/y51H0q24Z1K5WXbsUSpaWWl
DupR6kjdg1qq1GkVpc6RtfNk/wLZvlOP3pf1v9fr5WTyTVXLekvFcS6se967
q75/eT0I/rUShl+QuaEaBD+uhuHvK0Fwd8X3K7L2QDWdfriaz2+olUqb+rq7
B3unT3+qf/bsHQOHHbaz//DDdw3MndtYNndutOzQQ6NlBx4YDUyfHvUfcEDU
P9KN6u3qimryjsu1o4ptR+W4CRW3onQPaqQX1Tw3MnEnSn+n4nlRTd5Z3YWq
yXvc3OrjkUZUn5yXnyeSZx6SZ95SyeVWVPL522uFwjdr2ewV9ba2N/fNm3fa
6gsuOGbLt789+8lKZXJjcLAUbd6cazQaqTF9KIM+FAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAwAvOz2Qy88IwfLvjON91XXdA92F0zynux4xty+zOxNeU+z3p
ed6Dcr+fyv3el0qljs/lcpmJ/mUAe8AzWlEyz9mK0o2muA2l1+J3Lj6v3x99
fk+2olrP6Xvpfwt836/LllYU9rS/1h16zj7USqXcpUoFS+Qdk21pkVJT7lVq
9hLLmnu/UsfXlDqlR6mz5bNvlLlI5gMyH6ko9YmyUtfI9kt6K5/5xJJE4qqK
YXy0x7Kuqnnex2th+PlyKvX1Wip1cz2TuaWeTv+pmk73VFKpZbV0enUlnV5f
TaU21rLZrbVC4cl6R8eO+uTJO3tnzNjVf8ghjYE5c6Llc+dGy+fNa26XyfHA
QQdF/TNnRn3Tp0d9U6dGvd3dUb29PZJrRFXfH+5BtXSimq0o3YmyrKhq21FV
/s1otqHi0ceu22xF6dZUXd7b0dGdKL0m06u7UfJ3vVosPtU7adIj9QMOWNJ7
0EE/6589++reqVPf1jdp0kn1l7zksDULFkyJ1qwpNqIo1Wg0PBkniiJrpA+V
pA8FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwgkvk8/l0EASHuq77Jt/3r0mn
03elUqlNYRjukvVmN0Y3anRDZrwaNXH3Rt/Dtu2tjuMsLhaLX+nq6npLR0fH
wd3d3Z76680QYF/yF1tR+n2Qd2C0z9TahtJrcTtqT7Sixjaj9H3ie+l1eU8H
5d8CWlHYE+L202j/SW/1LGiZ6JljLFLKGlDKWaOUL/uZ+5Vq61Gqe7FSM2U7
R9aOW2oYJ8mcWUkmX19LJt8m817Zv6KcSHyqlkhcW0kkvivzs55E4rdL5X0s
K3WL7P9Ezn9vqWl+t+w4368GwY+r6fSvZf5YzWbvl+mvZbOrZNZWcrnHZbul
ksk8WcvlttcLhadrpdJQraur0Tt5cjQwfXq07KCDomWHHtrsQy07/PBoQKZf
jvtnz476ZsyIeqdNi3onTRruRMn7Xg3DZvepbBjPbEXJcbMT5brNllRN/jbr
7ejoRtTI6HPNPpTuQsk0rxkEjUoq1ajm84361Kk7lx1xxMblxx/fv+zEE29d
ceqp16+YP/+yFccff1b1kEPm9h9xxKSVCxZkdSOKPhQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAMDeob29PcjlcocFQfAGx3E+67rurXL8SFtb2y7diNENmzAM
x70Vpa9XKBSa17MsS99nndzzPydPnvyvU6ZMOblYLHYecsghtGiwP9GtqJzM
kaZpXiazMJFI7BOtKPn3YVDuWZehFYXx0uxDLRjpQy1UyqzKf1N3KuXp/tNS
pYJFsr1JjnUT6tcy+rzeXy1rf1IqVVeqsFiprrJS05codej9Sh0t+yfIvFrm
3Hoy+Zaqab67bJr/VLWsjy21rC/3mOa3ZX4uawuXJpOLegyjKjPQk0wul+M+
2V9STibvrljWXRXHua/i+z2VMOyrptMrq/K3sZrPP1bL5zfXcrknZH97Vfeh
CoWhWrG4q97WFvW1t0d9nZ1Rf3d31D9tWtQ/Y0bUf+CBzTZU/0EHNadPjvum
T490T6re0RHJd6OavGu6+VSx7Wd3omQquhUl55otKHn/a/JeNre6BxUEw6Mb
UiMdqZFGVKOsx/d3lT1vp+zvqHV2PjVw1FFbV5xxxppVb3rT4tUXXvijR97+
9k+sufjiCx56y1tOXHXOOdNXnnBCduA973HiRtRE/4cCAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADwIpeQsdrb2w+YNGnS6/L5/NWmaf6nYRgPZ7PZ7R0dHc1O
TRAEzS7N7jZpxo7u0OhWVNyjsm17MAzDJXLPr5RKpbOmT58+ZebMmc5E/5KA
cTTaipJ36jL5b/8P8t/9ejkeku1oP+2/04pqbTuNxzxXK0pv9ZpuxelWlOzX
Za3ZinJdl1YU/jeabahoTB9qpVKu7IdLlMrer1RbXanOXqW65FzHIqWKZXlv
5DPZTTL3KFXQ6/LZaRWlDu6R90nmFUuVOk2Oz5H5+5pS75TtZZVE4qqyYVxT
Ns0bypb144pt/77iOHeXXbda9rwVsr+m7DgbZB6vOs5GOf94xbLWyecfls8/
pM9XfH9dJZ1+rJrNbqrncoO1fP6pWqGwo9bWtlNG96EavboRVSoNT3t71Ct/
P3u7uqLe7u6od8qUqHfatD/P1KnN9dFGlLxnVXnfK3+hEzXairKs4VaUvJN1
eTfr8r3m6F7USDOqKlMOgobMLpkhue7T8vNul59nW4/rbq1NmvTYir/5m4dW
v+1ttbUf/vDvNnzsY1/d8OlPv//RL3/57PU33DB3/ac+1bH6/e/3ouH/jwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAICJZ8oU29raXt7d3X1FoVD4lWmaDyeT
ySHdh2lvb4/kXLMXo1sxvu83t/pYz+62afQ14g6OvrbjONvk/v22bd8oa6+b
PXv2NFpR2M/oVlRWZq78N/4Beed+L//tr0kkEs1WVGs/baJbUfE7rp9D9+Lk
3R+U42YrSoZWFP4nEtGfJ6n7UIuUsmTrLlUq0H2ou5Rqryg1uarUTFk7rKbU
vLJSR8kc3qPU7PuUmiHnZ8j6rPuVOkQ+M69XqePl/HxZO1u+90aZt8t8QNYW
yDU/K5+5vpxI3Fw1zVt6bPuOHtftKfv+skoq9VA1k1mv20+1TGar7D9ZyWR2
yPpOOT9UcV3dVnpKZlvV856ohuE2+cxTlWx2R7VQ2FkrFodqY/tQI9OrR/52
1vV0dAxPZ+fw6H1Zb/ah5D2uyvumu05V3Yhy3eFOlGn+xVZU1bKimuNEdfmO
7kPFjSh5xqgSho1KEOyq+P5OmR3ys2yX7bay522Vn2VTxbLWVxxnVX3SpN4V
J5983yOXXfbbx6+77oatP/3pRwYXLvy7p8vll0abNk3buHFjJooiY6L/owEA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAoJ5PJTA/D8JxsNvuVVCp1v+/7g7oL
ozsxulmjt7ofo9f06G7MeLWiWntReuQ5njQM44FEInGTPMebOzs7D+ru7vYm
+pcEjKOETEZmjrxX78rlcj9xXXeFHP/FVlR8HL8ze6IV9Xyj76sbca2tKFmj
FYW/ZrQPdbNShh7dhxqQvzuy9WWblm1xiVKTdAOqR94J2T/mfqVOWKzUabI9
u6zU/12q1Jly/lTZniSfOblsGPN7DONVMmfXlHq9nLtA5n2y/8/y+avlM9fK
fF/mV3L8x3Iicb98p6/sOKt6wnBdJZN5vFYsbqmVSk/WOjq21zs7d9Y7Oobq
pVKjV961Xvlvvi7/zVeDQHeXhmS7s5pK7axms0PVfL5Rk/ezt1iM+lo6Ub0j
U49Hzj1jdBtKvjfah9JtJ88b7kM5TrMRVbGs5+5EJRLNqcq+npqcr+lelHy3
phtTvt+Q2dVsXPn+02XP217xvCdltspskrUNI22sAfk5euTnv6tv+vRbVpx1
1s0bPvGJr25buPCjQ6tXXxANDp4SRdFBjUajJFtfJjHR/wEBAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAABgWKFQSGUymaMcx7k4mUz+0Lbt5dlsdlupVGr2anQj
xvf9yPO8ZidKd2niTtR4tKLizk1b2/9n507g46jr/49/d669N9kkm6tpjja9
6UG5ihUpd0VuQQ6BP3c5LKAIqIiVnyg/lJ8KKh6AeIIgInhAEbSiyCE9sjOz
R5K26ZHepVdo0+aY7//zmeyE7ZICStq08H4+Hp/H7Mwec2QnAR/4Ssjq6mpu
4uzQdX2Zz+d7io7lenr+8Hg8XjTU1wlgEHF/JUTTQN/vT9H3+/v0XX+N1ju4
FeU12rwOFLeiePbUitrbnShvP9yKov130L7RioJ34/ah5gihcB9qnhDaM0L4
XxYi+JIQUfqyly4QovrfQoxYKMT4jBCHJIX4WJMQM2k+aQpxIc0s7j/R3EzP
3UJzY1JRrjUV5eomRbmGHl9nKcqNtP5Fes1d9Pof0Ht/ScunaObR4/k0aXpf
W9LnW53U9Y1WMLjFisW2p8rKOlPV1d3purqedEODk21okM11dbKlpka2VFbK
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
k6q6LKkoa5oU5Q3T59tsKkoHrW+n6bAUZRM9v4GnSdPeoOVmtw+ladtpdpq6
3p3U9V567Nj0t8zWdZniTlQwKOlLK9P0NyxTWen2oLL19TI7YoTMNjS4j91G
VHW1TJeXyxS9zm1Acfspf/KbUV4bylt6nShuROV1otw+VCDQt/T7pUXHxK0o
Pr4UT+4xt6O4a8V9q6TPx32obpqdNDuahOig2ULbN9Dz7dzIsgzDtMLhV8xY
7AW7rOz3mdran2fGjftB5rDD7l58zDFfbjn55M8uPeecK9suvvj89uuuO2XN
bbfN2PDd7x628bHHxne++GLD9kym2tm6tVRKGaMJ0RjciaJ5104YAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADsU8FcK+qCaDT6G1ouNQxjB21z
2zDch8rvRRW2arxtg9Go4TYUfy5/Hu+Ph9Z7NE3b5PP5/k3H9G06vk/Ra0fS
cetDfeEABomP7rEo3UsTgsHgtYFA4Fn6nrfTfdDfihqo57SvWlGFXarcvdpB
29M0biuKjhOtqP2U137Kb0DlT+Fz3IGaT79fW4Twr6C/D+uEiHAD6iWaJiHC
3ISaJ0SAp61vGaFtJa8JUblIiHpTiLEpIQ62NG36IlU9MaWqZ9i6/mk7GJxl
FxXdlIrHv2onEt9JVVb+NFVV9bt0RcXzdmnpq/ScbUWjS81QaJVpGBuSur7F
1LQ3k6q601TVLm4ncUPJ6pse3mZyF4omqWm7aLgP1UPvdSzDkDa3obgRldeJ
4n6T236iv2m0X5keNsydDE9VVd82+pvHjSg6HmnTd9/ONZ/c/lNhMyp/+Pm8
17uNqPxOFPeh6DjcoWOyc20od8ndKF13zL7pMflcVHVX0ufrNH2+N+m6b6XH
G2lW0/al9Fm2FYm8Zsfjf6Nr+Qc6h1+nGxt/1DJ58rdapk2bs+TYY29qOeWU
q5ecd96Fy2fNOr395puP2/iNbxzR8YtfHNT517+OdFasGCa3bSuTmzcXO44T
llIGaHQajUZBJwoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYL/k
tqKKi4svKCkpeTQejy+JRCLbudvkNZu4FcWPQ6GQNAxDBgKB3ZpOA/Vs3k+r
hpf8uZWVle5S07ReOs5VtG9u6HyVjvc4Wq8QaNPAB4OPvucx+m5PpO//Z+j7
P5emne6rLv7+F7bY9lYn6r22onidW1F0vGhF7acK+lDKPCE0m34+3Hfi1hM3
nrgFxdu4C0Wv0bw+1HNChOlxEU3ZAiGq6TW1tKxrFmIY96CytD0tRCk/b9Lv
YVrWNgkx2hJiMm2fllTV42hOS+v6eZauX5HWtBvNQOArqUjkHruk5IF0eflj
qcrKuenhw/+Vqq01M8OHt6arqlamEol1dmnpplQs1mGFw530nl3cTUrqumNp
mkypqszQpPkxjalpTpL+NrjDr+H+kteF8sbvd5tRNv3N4mYTt5/cVhTdVylu
QvHQ3zd3nbfT99ztPHHfKdd4snn4vV4z6r02ovJaUe5n8LHkNaIsGpOHzoPO
s5em2zSMLpqd9Hg7nc9WOrdNdC3X0muWJf3+DB3TfDsW+7udSPw5XVv7m8yY
MQ80T5ny7eZp0/5n8YwZtyyZOfPa5WeeefHKiy46a/ns2Se2z5nzkU0//OHk
rX/84yinpaXGWbOmXEpZTBPJ9aGMXB9KRSMKAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAGC/F/D7/SPi8fh5paWlj5SUlCwuKirazk0Yrxfj9WqC
wSB3m9xWFLdjuBHlvWYwOjXe5/Bne60o7lTpui4VRdkeCoWStM+H6Pnz6Zgb
6djDQ33xAAZBfyuK7oHZNHNp2mnbbq0or+M0UCtqsNpR/0kripZoRe1H9tSH
oscBWkZMIeItQiS477SQli8LUcJNqFeFiG0QIur1oRYJMex1IUbSckJSiKnz
uf9EQ+87hLZPpPeO5+HHTUIcnBLiCEuIY2hOSanqObaiXGJr2mzLML5k6vrd
tPyh5fc/Ysdif7JLSv6RqqhYlKmpac40NCzPNjauzY4a9UZ25Mht6draHemq
ql2psrJuu7i41w6HHe4ruc0nbkDRcCfKzg23ocz8RpQ33IbiofdauXFbTdxt
4rYTfYe5C2XzcBuKO0/chaK/a+7Qe3cbfr/XmuLP4F4U96FyrSh7D52oVN6k
af+pXCvKbUQpipP0+XqbFKXHVNWupK7vNA1jO8022t8m2t86OuYVtM9mKxpd
RMf7T7u8fG6quvq36VGjfpqdPPneliOP/PqSY4754tKZM2e3nXnmpcsvuOCc
lVdf/fF1t9320c333HPw1sceGyPnz6911q6tkFLGnQ0boo7jBAv7UEP9vQUA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgPeMW1EN4XD43KKiol/T
tMZise2F/RnuxnAjhofXvU5UYUdmsFpR/Jj3wY/p+LhPtbOkpGRJVVXVE2Vl
ZZcZhjGWjj0y1BcPYBC8ayvKazbl32/5nbZ92YrKvaaDJk3jtqLo/kQragjk
96HmCKHQUp0vhO4I4W8SIsx9KFuIygVC1NH66FRf/2miJcQ4mpG0Xpd7rmGh
EKO4D2Vq2qFJTfuYpaonJlX1dFNVz2lSlPPo8dn03tPoNZ/gofedSp9/hqko
n0orysU019qKcqutqndahvE92zB+Yfn9T9uBwDwrFJpvR6MZq6RkWaqyck1m
+PCNmVGjtjZPmLC9efLknc0TJ3ZnxozpzdTXO5nqapkpK5P05XqrscTD3SZu
LeWN7Y3Xh3qnzhM3ngr7Tl4jil+radLs6zj1D3edePtuvSl+H78/fwpaUW4f
ioe2pbkrRY9z++ml68t9qO6kz7eLZkdSUTqSur6FnltPx7PSikZbU/F4MpVI
vJyuqnrerq//fWb06J83T5r0/dbDD79r8dFHf3nxzJk3LjnzzCvaLrzwvGVX
X33KyptumrHh7rsP3fjQQ+M3P/dcg5NOVzmOU+Js3BhzpPT6ULrXh6LxDfV3
FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/mNBv9/fGAgELggG
g4+GQqHF0Wh0e343Jr8fw+2asrIyWVpa6nZjwuGwjEQig9KpKRxu1PBn5/ax
k/a5ory8/E/xePxKwzDG07FHh/riAQyC/6gVld+Jym9FDUYv6r20onKv66Dt
aRq3FUX3JFpR+45P7j4qjdYihH+VEKElQhQ1CVE+X4jalBCjFgoxmdaPWCTE
DFqeZApxskVLWj8mKcRRPPSao+m5Y5tUdaapqmfauv5p2++/0jKMG23D+KKp
aXOSqvrVJkX5Ir3/JnrvZ+l9N9L657gPZanq/9D7vkvzML32d/S+F+j9r5qB
QMoKBJbYgUC7FQ5vsOPxLanKyjfTw4d3ZkaP7mqePLmn5fDDndbDDpOLJ0+W
LaNHy5a6OpmtqJBp+v5xY4lbT25nye9/qwHl9aIK21CFw50objxxJ4qbTfTd
9VpRlteJos9xG1E+n6Rze2to3eJeFLeiuEPlNae8XlTBpHKNKK8Tlcq1qaxY
zLFjsR56TbcVDO4y/f5OU9ffpH1uMRVlI127VXSdllrRqJ0qLX0tVVX1t2xD
w9PZceN+1Tplyg9bjjjiW4tnzPhK64kn3rT49NNnLTv//E8vv+KK05d97nPH
rbnjjiPeePDBg7Y888xIp7l5mNy2rUxu2lQkpQw5juPP9aE09KEAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA58iUQiEgqFJvv9/lmKojyp63pb
JBLZkd+h8ZpNvM6NKG5FccOGn+PtXr9msCe/T0P72EnHuSIQCPyBjvUK2u9Y
OvzIUF8/gEHwtlZUPB4fklZU4T68/Rbuk1tRdLxpGrSi9pH8PtTjeX0oR4gg
LWNZIcqahRhmCTEyKcREW4jD6fGMRUJ8guaclBAX0bZZphDX0/M30FxL269s
EuLyJkW5zFKUy01FudrWtM82BQJzrFDonmQ4/CM7GPylZRiPm5r226TP90t6
/09ofkDv+wGt/8hS1Ycteo6ef87S9ZdNwzDNQGAxTTu9d50dCGyi5TYrEum0
iot32eXlPemamt7sqFFO6+TJcum0aXLpkUfKJVOnytZx42TziBEyU10tU/S3
hhtMVjD49lbUnsZrSOU6Uv19p1y3KcX9Kfou938uvcbtRCnK7p0orxVFz3mt
KMv7LK8XRWPllnZeJyq33aHz7bVjsW67uLgrFY930n7fNKPRbfTcG7TvNXRs
bXSN0qlI5HW7tPTFVFXVnzKNjY9mJk16oPWII7695Jhj7lh68sk3t51xxjXL
LrjgolVXXXXG2htvPH7tHXccuem++yZ3zp3b6LS01DjbtiWklMVy3boILQN5
fSiV+1BoRAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfCD4QqFQ
ZSwWO9EwjK/Q+guKoqwOh8O7uAcTj8fdLgy3Ymib24vhVhT3a/g5ry0zGI2a
gcY7Bt4f7WeXqqrL6Rj/QMc4KxKJjKdjiQ71BQQYBAO2ouj73cX3W36zzbvX
8jtRhV21vdmK8n4noBW1b+T3oWiUeUJoNl1nehzICBFNC1G6QIjqJiEaFgox
nrYdskDTPtakqjMtVT0rpSgXWYpybVKIW00h7qT3ftcS4se0/iCt30/v+3aT
z3f3Ip/vLsvn+196z7eTmvZjOxR61I7F/kzzdzMc/ncyEFhkGsaCpKK8nPT5
/krvf47e+zw9/rupqq/Qe5pMXW9O6vqKpN+/Nsl9qFBoqxUO76DZSdNtRiK9
VnGxky4rk9mqKtlSXy8XjxsnlxxyiFxyxBFyMS1bJkyQ2ZEjZWbYsN1bUdyJ
erdWVH4naqBWFH2H3VYUjU3fafdz6XX9rSif761OFK33d6Jyn+X2qvjz+H17
GDMYdGh66XG3FQrttKLRHXY8vi2dSGyiWUuzPJVINNuJxMJURcU/01VVz6Zr
ax/Pjh79UPbgg+9tmT79ztYTTvji0tNPn912/vmXrrziirNXz549c93tt09f
f++9B2997LExO+bPr3XWrq1wtmwpcaSMOo4TlFIa6EMBAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHxgaUVFRcWxWOywaDR6g2EYj9C2FkVRdkYi
EYf7TDxeK4q2ub2Y/E6U16gZrE6N16Xxmji8b95fWVkZr+/UNK2djnEuLT9L
64fz8Q/1RQQYBO/YivLuN+9e8zpR3v3ibRuse/Cd9pHfiqJJ07itqEAggFbU
ICnsQ9GoNLojhN8WIrJciDgtK1NC1JlCjG0S4mBLiOmmqp5Ac4at6xfYfv9V
lmF83tT1ryV1/b6kz/cLmifp9c/R/CMpxEu0fMH0+f5I23/HY/l8v7cU5RlL
1/9uBYML7FgsYxcXL7VisZVmMLjaNIzVSU1bkVSUxfS+ZnpPq6koS03aRvtZ
Y/r9G+1AYAu9drsZDu+0I5EuKxLpoXHcVhMNfWFkhr5D2UTC7UU1NzTI1gkT
ZOvUqbJ1yhTZPG6czNK2ND2Xot/9djjc12h6p05UYSPKG3oPd534M1L0HXY7
UfSZ7ufSd93yOlT8Gfm9KO5E5TeivOFjyPWiBppkIOCYgUAPzS5af5Ouwxa6
dhtSiUR7etiw1kx9fTIzYsTL6cbG51Pjxj2ZnTTpZ80HH/z91mnT7mqdMeO2
pR//+A3Lzj778uUXXXTuymuu+cTqL37x6C333nvItkcfHdf5yiv1zrJlVdJx
SpyNG2Pch6Lx5/WhFPShAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAA+sAKkLhKJnE5zn2EYr9K2raqqul0Y7jN5rSivF8MtGa9JM5iNqMJOlNem
8dpUfCz0uIuOcb3P53tJ1/Vv0GtOicfj3KdRhvpCArxP/a0o+t7PpvtxLi3b
6fvdld9mK+w45TfcvG17qxXFz/Fx5LeiaBtaUYPHV9CI4j6U1iKEv0mIcJsQ
xa8IUWEJMZzWR9NyclqIaUkhjqM5LaUo56Z0/fK0YdxoBgJzrEDg23Yw+JAd
CDxhGcbzlq6/aiqKlfT5Wkyfbym9p42mhdatpKIsyo1Fr8maqrqUPmOVFY1u
SMXjm+zi4m12NLrdDAZ3moaxw9K0bZaibLZ8vs203GLr+lbT799uBYOdVii0
ywqHe+j1vTQON5rS+UPfpzR9f9wpLZWZ6mrZPHKkbBk/XrZwJ2rECJkeNkym
Egm357THVtSe+lDe0Gvo3KUdCrmNqhTtl85Fpmif/Nm8pPOSdIzua9zP5/fR
37/dOlG8fU/D+8gbujY9NJ10LbbStV9H595ml5XZmdraV9Njx/6tecqUp7NH
HPGr1qOOur/12GO/uXjmzK8sOe20zy0966yr2i644IL2K688beVNNx278X//
9/COn/1sQufzz49wMplquWpVmdy0qUhKGcr1oXT0oQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAPlRCsVisMRwOfzoUCv0qEAhkFUXp1HXd7cJw
n8lrxeR3ofKbToPdqMlvRXm9KP5s7uXQaxzDMHb6fL6lmqY9Qcf7eZqP0nmU
0KhDfTEB3ge3FUXf9YnBYHA2fa/n0n3Zzn00r81U2GcbqOE2GPehNwO1ovL3
wa0oepymQSvqfSjoQynzhNCeEcLvCBGcL0TRQiESSSFqbCEaaTmRlodbQsxI
CXFySlXPySjKJbaizLY07TbT7/+mFQz+2AqFHrPC4WftSORfViSSNEOhVtMw
2k1NW9ekqm8kFWWL6fNto9nS5PNtpPV1SVVdS7OeZiO9bjN9Vge9t9OKx3fZ
paXdVnGxkwqHpe33y6SmOaaidCd9vl303l2WrnfRfrtpn730nr4+FDehCoa3
u80mHvoOpbgXRX9nMsOGyWx9vczW1bmdqHR5+W4tJ4tbToW9qHdpRfFx2sGg
25py98v741ZUIiHTVVXupHg/9LdltyZVfmuKP4O3efvO279Nr0nxaJpMc1uK
r4mu70wFAm/Q/pbTNbMz1dUvZRoanslOnvzo4qOO+snSmTP/b8mZZ96x9Nxz
b15+8cXXLLvssotWXXPNGWs///njN95557RNP/jBpK1//OOo7clkjbNtW0Ju
3lzsOE5YShnI9aG0XB8KjSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgA+XsGEYo0Oh0CXhcPjJYDC4TNf1zkAg4PZguBXFTZhIJNLfbBqoFZXf
shmMXlT+ePvItaIkd6x8Pt+bqqoupOP8Cc15fr+/kc9lqC8mwPvwtlYU3Zft
9P3v8hpNvCxstHn3TP76YLai+N729lu4T25F0WO0ov4LhX0oGtWma0fLQEaI
aFqI0gVCVJtCjFgkxARaHpoU4mNNQsy0hDjLUpSL04pyralpX7B0/RtJw7jf
8vt/bQUCf7LC4X+Y0egiOxZrplmWKipaY0ciG+1QaKsZCOxI6vouU1W58+Tk
pod7TzSd7qjqTppd9HldViTSa8XjTrq0VGboZ58Jh2WG+0maJum1kt7bS8te
U9cd7jKl6W9Fmr4rmcJG1ECTa0Vxq8ntN1VWynR1dd+yokKmaRv3orjvNGAv
6p1aUdxyotfSOctUQSuKO1Tco8oMH97XpaJ9pehvXSrXpeLz4P247+fWFA8/
5vPONaL4/FPeqKq0aOhn0UXHtpnObWmmpmZ+ZsyYv2SnTHl08Uc+8v2lJ5zw
9bazzvrCiosv/szyWbMuWXnjjWev+MIXZq775jenb/7JT6ZsfeqpMTvmz6/t
WLKkQm7ZEnc2bIjm+lBGrg+log8FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAPChxq2oMdFo9LKioqKnaLkiGAx2hkIhtwnDfSZuxITDYbcN4zWh
vIaT16gZzFZUYTfK61TxsfAy14rapWnaUjrO39PxzqJtE+hcYkN9MQHeh/5W
FH3PZ9P3fi5NO917XXyvefcX3w/57ba9cd8N1Ioq7FHl7s0OOrY0jduKotei
FfUOCvtQjwuh0lJ3hPCvod/FphDx14SoXCREPT0emxRi6nwhPkrrJ9KcQds+
TTMrqSg3m6r6taSu32caxi8sv/8p2zD+ZgUCr5uhUNqKRNqsoqLVdknJhlRJ
yZZ0PP5mqri404rFus1wuNf0+x3uHaUVRaZ8PmnRNNG4zai+blRvUlUdbi6l
uP/E7Sf6mWdomeZuEneaNE2a9H4e7iTxtjT93XBbUe/UhxqoFUXfMW41uX2o
6mqZqanpG+45VVW5bSfuSdn0Hps+321GvVsvirtOfKxeJ4qH90n74wZVmj4/
W18vsw0Nfc0o3g+3qXJdKm5MecPXIBUIyBTtL8XXhM7d9vpQ3MlSlB6T/ibR
soNevzJTXb0gO2nSn1tnzHh4ySc+8c1lZ511y7KLLrpy+TXXnLvyS1/6xPq7
7vrYhgceOGTbH/4wdvMrr9TLdesqHccpoYnSBGn8hX0oNKIAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD70uBU1uqio6NKysrIn4/H4skgk0skt
Gq8Jw50obkd5vSavFZXfjtkbzRrv87wmFTdrvFaUoii76LhX0bHNpZlNM4me
LxrqiwnwPritKPouT6Tv/myaufTdd1tRfD969wU/9tpt+fffULWi6HcDWlHv
rL8PNUcIhRtR84XQW4TwrxIitEiI4iYhym0hamk5eqEQkxcIcWRSiONoTrOE
OI/mCnr+s02KMsf0+b7dpKo/TWra75KG8bwVCLxqBYOWFQ4vsSKRdisWW2/H
45tTpaUddiLRmSov70onEj207qTpZ8ndJ7f/xG0nbh7lWlG0L25FOWZu3eaO
lKr2tZG4k8TNJPrecX+pv9OUG+5E2fwar8v0XjpR3nAriv6uuK2oqiqZqauT
2ZEjZbaxsW9ZXy8ztbVuQyrltZzoff29qIE6UbnjcTtPdL8U9qnSpaVuhyo7
YkTfPniZ24fbpeJ2FZ8HnU+ahxtYuVYUfz5deyepqr1JReGu1i66bjvo+m2z
FGUt/RxS6bq6F1qnT//p0rPPvnPFlVd+Zs0NN5y79rbbjt94332Hd/z2txM6
//nPEc7y5dVy1aoyuWlTkZQylOtD6ehDAQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADAHvS3ooqLi5+k5bJYLNbpdWF4yZ0oHl7Pb0Xti06N99le
s4b36/f7paZpXbRcQ8f1fDgcvoGWU9CKggMcd2H6W1F0r7mtqGAw2MVtKO9+
8FpR3FDLvzf2xn2Yfw/uqRVFx4JW1ABkXiNK9jWiNBrDESI4X4iihUIkkkLU
2EI0vi7ERFoebgkxY5EQn0gJcY4pxKU01y9SlC8nfb5vNanqT5Kq+lhS1+ea
hvEv0+83zVCo1YxEVlix2Dq7uHgTzTa7pGRHKpHYlaqs7KFx0pWVMlteLrNl
ZTJL35MM95K4oUS/R23uKqmqNBVFciMqvxOVP/ntJZt7UbwcaLjL9F+2otKJ
RF+/qaFBNo8ZI5vHjXtrxo5121FuM4rOh1/v9qK4W5XrN+WPzedGz9l7alfx
daiq6tvXqFGymbtU9fUyW1Pjbs/QtcrQcaXptWk6Jz432pdD17zX1PWepKbt
MlW1k67bdpqtNBvo2q00NS1tR6P/yI4c+eu2E0/82trrrrti/Te+cUr7gw8e
uW3u3LHbW1pq5LZtZXLz5mLHccJSykCuD6XlN6KG+rsLAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAD7JbcVFQqFLqV5MhKJLCsqKur0elDco+Eu
DfdpeBu3orgT43Vq8ttRXktmMMb7PG+f3vC2YDDIvahdgUBgFR3bczTX07FP
RisKDnBuK0rX9Yn0XZ9dWlo6l77v7fQ97+JWm9eE8u5J737jbUPViqJj6aBB
KyqnsA81TwjNpuuxQohgRohoWojSBUJUm0KMWCTEhIVCHPZvIY5uEmImPXeW
JcTFNNfS819I+nx3LVLVHzZp2iM0fzYN4x80i6xAoNkMhZZbkcgaMxp9wy4u
3sp9KLusbKddXt6dqqjoTVdWOm4LiaeiQmYTCZktLXX7R247ibtO3Fny+922
kqlp7lg8qvr24fYSd5e4s0Q/e3dy3SWbPs8dbip5XaaC17zj8Ou8VlR1dX8r
qmXCBNkyaZJsmTJFthx8sPuYt2fq6mSazsntRdE+6Xq8rRf1rq0o7kBxP6u2
VjaPHOm2opppv7yeHTZMZui5NH9+cbFD19ixwuEeKxTqMgOBnbSv7fRz2Nqk
65tsTVtL+1ue9PszyVDodauo6C/p6upfLT744LtWnnPOVeu+8Y2Zbz7//MFy
8+Z6x3ESjpTRXB/KQB8KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAD+E1VVVaFoNDoqFApdouv674LBYFssFtutFeV1obwmDW/ndtTebkV5+ygt
LXXHa1Tx9nA4vIser6KZS48/QzORTgetKDiQ7daKKisrm0vf73a/3++2ovje
4/vNuwcKW1H5Pae90YoaqB3FrShapmncVlQgEPjQtaIK+1A0Ko3uCOG3hYjQ
lLxOv2oXCVFvCjE2KcTUJiE+Susn0voZ9PynaTmLtt+8UIg7m3y+7yV9vl80
KcrTtq7Ps/z++WYgkLZCoTYrElltFRVttIuKtqTj8Tft0lK3D2VXVvamqqr6
+lCVlX3DjajycpkpK3O7R2nuRHEniZtO4bC0vV4Ut5a4GVU4vJ3GbS7Re7iv
lKLfw2n+PBp+nKLvnbs9vwvldaLerReV35Xiz+HPpWPOcK9p1CjZzK2oKVNk
6yGHyNbDDnOXLRMnymxjo8wMH97Xi6J983l4zasBW1F87APsN03Hn+U2VX29
26fK5lpR6ZoamaqsdOyysl67uLjbjsV20nXfQdd/mxkMbqbPXUefu4L222xH
o012Scm/UuXlc+l9v6Hj/iEd89faTjjh2uVXX33alp/97BBn06Y6R8pSKWWI
Rs/vQ6ERBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA79UhhxwS
GjZs2Ci/33+Jz+f7naZpbdFotDO/B8OPvU4NL7lVEw6H3ed4fTBbUV6LhvfB
fRxecicqv5HDS9rXLnp9O81ceuy1omJDfT0B3ofdWlE0c+n73m4YRlcwGOy/
B72O2p5aUYPZi9pTKyqvI9dB29O07cPWisrvQ/keF0KdL4TeJkSgSYgwLYtN
ISoWCFGXFGKMJcRkWj9yoRDH0/ppNOfTtito2+fo8VfpPd9p8vkepnmS5gVT
UV41Nc22AoElZiSyyi4qWp+KxzenS0o6UolEZ7qioitVWdnT34fi5pHXieLe
Unl5X9Mpv+eU6yTZXiuqcHg7P8+T33zi93NrKpFw+0xp2o87/Di3H36+vxn1
XltR+b0ofi9/Bh8zfXamoUE2jxnzVi/q0EP7elGTJ8vmsWNldsQImRk2zO1V
8XH3t6I0rW8MQ9rcueIeFveivP3k9pnmVhSdF1+nTE2N26fK5DpRdlVVb4r7
W9zhKip6k67FFpoN9N52u7h4MR2nmUkkXk5XVj6fqa9/MjNmzM9bJk363uJp
0+5cfMwxN7d+/ONXLr7ggrPW3n77kVuefHKk4ziljpRBKaXmNaKG+ssLAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHnvHjx0dqamoO8vv9V9Hq
U6qqLo9EIp1ee8brw3g9Gq/j5LVq8ptSg92K4j4O78drVHGfiif32l20v1X0
uudpbqLXHkrb4kN9PQHeB7cVxd0zmtk0c+m+bNd1vb8Vxd20wlZUfs9psFtR
e5q8blsH7dttRdF80FtRu/WhaJR5QmgtQvjnCxFaIkTRQiEStF5Dy1FJISam
hDjCEuIYU4hP0HyK5jLadn2Totye9PnuafL5HqD5renzzaX5V1JRkklVbTU1
bYXl96+zw+FNqeLibTb3oSord6VranrStbVOtrZWNtfUyOZhw2RzrhOV4UYU
95y43bSnRlTe7NZp4tdyp4nfz/0nHm5BeT0oXlZWygzty20r0aRp37ztHXtR
79SJym9F8Wu94+Bj4P3U1blNKG5GtUyaJFunTpWtU6bIlvHjZbaxUWaGD3eP
l9tWViDwVitKVd3Htt8vbbpv3FZU7nzTecP7tOk68bll+NxomaJzoWvdTddv
O12PLXZJyTp63EbbU5mqqtfo2v8t09j4VPOECb+k47l/yfTpdy897rjb204+
+bNLzzjjyqUXXHDuqquvPmnlLbdM2/q9743ueO65cjl/fkhKqQ71lxcAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5s3FciH9E07fO0OpeW7dFo
dCf3mbz+TGErils03IrJb9IMZiuK98OfFQqF3B6NdxwFraguem5tMBh8kbZ9
ldaPTyQSlUN9PQHeBx/dd24ryu/3zw4EAnN1XW+ne3K3VpTXahqqVpTXquJ7
kZYdtM1tRdExfSBbUYV9KBrVpnNcIUTwVSFi84UoywhRbQox4t9CHLRQiMNo
jk4K8XHa/klbUf4fzXWmpn3RVNX/tVT1h/T4kaSm/dlUlH/SLKLtzUlFWZ5U
1bW0/Q3TMLZaodAOq7h4V6qiojtdU9ObrauTzSNGyNbGRtlKyxZer6np70QV
9pq4ocSdJJt+j/YPr+c6Sdxl4ve4rSf+DG5ADR8uM7W1fctcEyozbNjuz3nD
vSh6H7+/v03F+323PtSeJq8X1X9c3HCi/TaPGiVbJ06UrZMny5YJE/paUXQM
3Hni/fW3orgT5Q2v03a3F0XnnuJzp++tFY06PHQdeuyioh7aX2+a90ljl5b2
2GVl2+2Kig3pYcPa0rW1Zrqh4aXMmDF/zk6c+GjLYYf9uOWoo+5ZeuKJc9pO
PfWmlZ/61KyVF1984YpZs85c+/nPH792zpxpb9x//0Frnn66wVm4MOGsWRNG
JwoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN4nH40RjUbHxGKx
CwzDuI/WF2iatrm4uLinrKysvwvl9WHyuzRemya/TzNYraj87g03cbzn+DE3
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
LbkTZdN29zPKy3f7DO9z3BmgD+UeV3W122Li96bp+NL098DtQ9Hn5TedvK5T
6v02onKzW3eKW1E8tJ2Pgc8hQ8fojteKor9VbiuLztfic/f5pCWEpJ+RTNHj
NG2z+broehfNZvq5LDMjkSa7vPzFTGPjn1unTXui7bTTnlhx6aVPt3/uc0+t
uf32X6y/885vbfjWt27acO+9F73xk5+ctOWRRw7d+vzzo7cnkzXO6tUJuXlz
cUEfSstrROFvDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBav
FXVQMBi8NhqNPuv3+90mjaqqbneGO1E8+W2a/EZTYTdqMBtR3ud5rajCdlR+
z4bWuRW1jubFSCRyK53PoXReJQKtKDjw7NaKonFbUYqidBmG4X73+d7gezL/
vixsOu2te5D3mb89HA7LUCh0oLSi3taHolFtOlZaBjL0+5Ael6SFqGoSosES
YtwCIQ6ZL8RRtJxpCnEmzYX03DWLhLiVll+n+T7Nr2j9j5bP93fT51uQVJSM
qarLkrq+xgoENtrh8Fa7uHh7KpHYmamu7nL7UA0NDveZWhoaZHNtrWzmhhP3
mOj6ch/KDgalHQj0LSMRt8/ktpq498RdKe445XpO3IpK0fu4peT1oixNk5au
u5+Rovfz57rvpde7PSjuQuV6Ue7jgj5Uhj7T3V9p6VttKJ68NtTb5j10n96x
D1XYiPKGrwedFy/d60DHlhk+vG/ournnz8fJr/X73SaUnWtF8dDPTCZ9Pod+
Nt00HfTzWUHXZr4ZicxNVVf/unnq1PvbTj31m+2zZt219itf+db6e++9542f
/vSOjt/97rptzz//yW2vvfaxXStWHCQ3bap1HKfU2bAhSssg+lAAH1gqTSXN
QTQzaM6muZrmizRzaL5O8y2ae2l+SPMQzS9pHqP5Pc2faf5C8yzNH2meovkd
zeM0j+Re+zOaB2l+TPOd3GfeRvNZmlk0F+f2e3LuGA6nGU9TI/r+2R0AAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+XLxW1ARFUa7Vdf0ZWrbTepem
aW5zZihbUfktKJ78fXjbuFUTiUS4V9MdCoXW0bK/FUWviwu0ouDAs1sripZz
adlO0+X3+93vO98HiUTCHb4feNtgNqK8+9q79/mzeR+8Pf/3AXei+Jho3FYU
re+XraiB+lDzhdAdIfxrhAibQsRpKlJC1CWFGLNIiCkLhfgIzQm0fjrNBfT8
VTQ3LRDif+j5e5uE+BnN702f7680ryV9vlRSUZaaqroqqaobTF3fYgUCb1rh
cKddVNRll5b2pCornWxNjWyuq3MbUS3ciqqvd1tRWa95xM0nutZuJ4quLX2G
tHK9KG4pub0mr/tE7+FeUprfW1kpU/R9sHPvd9/H3SR6b8prTdHzbgeK98dt
qFwfKpvrQ6VzfSj+fK8L5e6Xh3tNPN76u/ShBupEDdSL2mMfqnDffA1y58L9
qkxVVd/509I9bm5F8Wfx6+jvF/1MJP3cHJoemi76We2kZQfNOhq7SVH+YgYC
D9tVVd/MHnbYrW3nnnvNmi9/+ZLNDz106bbnnrv8zQULLtre3n5q19at0xzH
GUNTLaUszjWi9Pw+FBpRAAeUYhruiZ5L8yXR13l6muZfNM00m4T7Z2O/H/oT
JrbQrKCxaV4WfW0q7lU9QHMXzU00l9CcQjONZhRN/H1fQQAAAAAAAPgwmSH6
uslDPQAAADA0hvqfAfDPAQAAAAAAAAAAAAAAAAAAAAAAAAC7629F0VxD82ea
lTS79qdWVOE+vP1wJ4pbNaFQSAaDwW6atfT474FA4Ba0ouAAtlsrimaPraiy
sjL3nuT7oLCntrdbUfz8/tyKyu9DzRFCeVwIlR5r84QIrBIitEiI4iYhyi0h
hqeEGGUKMSktxDTaduwCIU6l7efS48uTQtxIy6/Q6/8v6fM92OTz/ZaWfzF9
vleSimIlVXVxkn4+pq6vtwxjE8020zA6Tb9/lxUM9tiRSC93lzJ03bLl5bK5
qko2V1fLZm5Gcadp+HC3ecStJ245cdPJpt9ptmFIS9elxUtuRnEDibfTNedG
k9tL4u5TfX3f0GelaT1F++BelEWv638fv4fbTHQMbmOK35cbt7PE+6XnbDpO
t83E++H3cW/KG1q3cvv3WlH2f9GJetfx+lD5fSreL7ezeOhxmq8nffezdM0y
fN3onFLciuLjp+fp5+HQz6mXfnbdyb5G1Js0m2nW0LTQcy/Rz+1Xtt9/ZzaR
uLb18MPPWX7ZZSe+8cAD03e8/vr0rvXrj3Yc52OOlIfScrSUspKmiB77aamh
DQWw34vQHElzoej7/5H8UvS1lNaJoW887Q/TTbNG9DWm/k7zG5rv0NxKczHN
iTRTaPhvefA/u/T7NYWmjGY8zTGirxf2GZqv0txH82uav9IsoemhqR6SowQA
AAAAANi/DPW/w3oDAAAA+x7/7+tD/c8APDP28nkCAAAAAAAAAAAAAAAAAAAA
AAAAHEj21IrauT+0ovL3lT/esXC7hjtRgUCAWzXdtFxP6/+guZVbUfT+EoFW
FBx43lMrqrS01L03vWYa3xN8b3gdp8FstPG9yPvxtnn74GPh+4/GbUXRa4a0
FSXz+lC5UeYJodHScIQIttB1nS9EWVKIGno8Mi3EQbYQh9PyaFNVT86o6tlJ
RbnEFGL2IiFua/L57qb5cdLn+w3Ns/TcSzRNSVVtSWraCkvX1yb9/k1mMLjN
CoV2WOHwTppuetzLraUUd43oZ5Oha5eha5ih65ahn1u6rKyv2VTYOuJOFLeR
uPFEv4Pd8XpRuU4ST4que5o/q7paZhsaZHbkSJkdMeKtXhR9Pnec3L4Td574
fdxe4oYTvY+f59YU96HcfdLx8Wvc13qNqvzJ61X9J72o/6oPNVAnKtetStEx
pGjpXlM+/0Si79px6yqvFWVqGneiumi202xtEmIt/fyW0s8uSefxIu3zMTru
u+14fJZVXX1K8xFHHLHhc58b2/nKK/WO49Q5UjbScoyUcgR3ouhxjJYGjbKv
v9MA8K40mmk019E8TGOJof//rXzQ5k2aZTQLaF6geZzmRzR30dxCM0v0dZdm
5n4WY2kqaPx7/rH91/jnHaJJ0NTTHCT6umAn0HyS5nKam2m+K/oaWHy89Gde
vPFfnHfdXjh+AAAAAACAA8kcMfT/TurNjL17qgAAADCA/eWfBebt7RMFAAAA
AAAAAAAAAAAAAAAAAAAAOIDsqRW1a39qRRW2b7x1btdwK4r7OYZhcCtqDa3/
jeYWmkPotXGBVhQcePpbUfTdnk3f67n0uL8Vxd97/v579yX3mvJbUYN9H3r3
Yv69n38PBoPB/lYUHcdQtKLe1oeiUW3aPy0DGfodR49L0kJUNQnRQI/HLxDi
0KQQH6P1mZaqnpVSlIssTbs2qWm30vo3TFX9QdLn+xXNH02f78WkoixsUtWs
qWnLkrq+xjSMjVYwuMWORLZbsdjOVFFRV6q4uMeOxx234cRdKPq5ZLgVlZtU
rvGUomvGTSNuNLnDfSPuJXEXyWs1cSNKVfuGH/M27iXlOk3u59B70xUVMltX
J7ONjX29qPp6mampcbfb9Lzbf+LG00CdJx6vD8XP6zo3liSde98oSt9469yM
4tfx6/lY8npRe2pF7Tbv1ojy2lB5414zbm55nSi6DjxuOyoWc+ySkt5UWVmP
XVraS9depvkzuRWl6110zB1JVV1Pj9vouJNWOPwPev0frKqqn2VGjry7eezY
z2QaG09dNnLk1OaPfnTEmjlzymVbW7EjZVRKGacpcxynlIbXdRr8LQHYP0wW
fT2gH9L8m8YRQ///U8HseXaIvk5TO00rDf0ZFotyP7t/0fyd5i80z+Ye83bu
fS2mWU2zkWYbTSdN7z4+9kYBAAAAAADw4TZHDP2/V3ozby+fKwAAALzdUP/9
z58Ze/dUAQAAAAAAAAAAAAAAAAAAAAAAAA4YB0Qryvtc7tLwNj4WPibexo0c
7ufout5jGMbyYDD4R9p2Pa1PofMoFmhFwYHHbUXRTKTv8mz63s8NBAK7taL4
HvDuyYFaUd69M5iNqPxtXi/Ka0XRcXXQpOk4f0z34T5pRckB+lDzhdAdIfxr
hAibQsRfE6JykRD19HhsSoiD6fF0S4gTTVU9w1aUC2iusjTt87T+taSu32dq
2s8tXX/K1rS/mYry76SipOm5pUlNW500jA2m37/FCgTetMLhTjsW67JLSnpS
iYST4WZTVZVsrq6WzbTMJhIywz0o7h1x16hwuNnEy/xOk9eG4lGUvvFaUfQa
O6/P5Lai6OeQLitz21DZESP6elENDTIzfLhM0zGk6Hckv97tTHHnifeRW7rb
ctv7+1BeG8rnG3i8Y8k1o9xz2FMris/dm7zt77kRlZt0XivKpn2adMz0c+il
n0MP/Qy67KKinXY83mnF47zstouLe6zi4m7avi1VXLwyVVaWSg0b9nKqru5P
mcbGn7dOmvTtliOOuL1lxoxrW4477pNtxx8/bflHPjJy1dFHl9nXXksHYxtS
So2GlwHHcfy5dfwdARg6DTRX0DxCs04M/f8fBfPhmXECAAAAAADgw22o/72s
cGbs1bMFAACAfHPE0P/tz595e/d0AQAAAAA+tGaIof/nfQwG895m3h5mzh5m
Rt4AAAAAAAAAAAAAAMAHy37disr/fN4v93C8To53TLzO/Rw63u2GYSyi1zwY
CoUuosdjcueGxgccaN6xFeX10vJbUTxeKyq/q/Z+O1H8OTyFn13YiqL7rUPX
9TQt92orSub1oeYIoTye60O1COFfJURokRDFi4UobxVieEqIUQuFmJwWYlpS
iOMsIU61FOW8rKJcbmvaZ01Nm2Pq+rctTXuIlk9Yuv685fe/QmPR+mKadpr1
pmFstgKBbWYw2GmFw7vsSKTbKipy0vQ7KFtRIZuHD5ct9fWypbHRneaRI2W2
tlamy8v7WkncRuIGUq4Nxc0jt9PE3SWv0TRQm+kdWlFuL4o+l48hw20q2n+W
9ztihMzQvnlbqrTUfZ27r/wWlDcD9aHoEu9xvGPi46HP7D+eXP/pv2pFFfah
aFuahztRvJ5rapl+v0M/hx76GXUldX0n/Vx2JAOBDisS2WKVlGy0yso2WOXl
b6RqajZnRo7c2Dx+/LLmKVMWthx++POLP/rR37Qee+wPlpx00h1LTznl+qVn
n33x8osvPm3VrFnT26++esySyy+vWHPhheF5c+Zob/u+SamgEwWwz/E/u51O
cx+NLYb+v7HBfHhnktg3Zog9/7dcGAxm/xzYP80RQ//dwGAw733mCADY3/F9
KvezmbdXzxgAAADyDfXf/YFmxt48YQDYp/jfN4b6f5vAYD7oM+ddZoZAOwIA
3iIxGMyHbuaJgf+5YYbAPx8AAAAAAAAAAAAAABwI9vtWlPe5XiuKmzh8LKWl
pe5x0XbH7/fvVFW1Tdf1J0Kh0OcDgcBRdA6lNOrQXVqA/5rbiqLv88RgMDib
Zq5hGP2tKL4v8u9JrxXF90nunnDXB6MVxZ+T34byWlHeMfBr6H57WyuKjn/Q
WlEyrw+VG4VG4z7UCiGCtIxlhShLClFjC9FIy4m0PNwSYoYpxCdSqnpORlEu
SWna9Zam3Wbq+jdp+eOkYTxGj5+1DeOlZCCQNEOhFpoVViCwluYNKxjcRrOD
tu0yw+EeMxJxbPp9k6Zzz3Anqry8rxPV2ChbJ0yQrZMmyRaaZnrcPGaMzNbV
yUxFhdtz4maS20aia+W2m3S9rwNV2G8q6Ea9YyuKh34u3KTiPlR+KyrttaLo
Z9XfiipsQb2XPlTheP2q/6IV9bZOVK4VlSroRHEDix9b4bBjhUK99LPoTvr9
u2ifO+jn1ZHU9S10/TaYgcBqq7i4LV1RkUnX15vZCRPM1mnTUkuPP95edvrp
ry0/77xnll100c+XX3bZPcsvv/wL7VdffdmKa645Y+VNN81Yf+edU7d+97uj
3nz44Uo5b15ESrnHvxVoRQHsE6NovkTzdzH0/x0MBuPNoWLfmLGPzgeDwQze
wP5pjhj67wYGg3nvM08AwP5uqH9P7Glm7MVzBgAAgD5zxND/zce/RwB8sO2v
v2cwGAy6EQAfVkP9uweDwezfM08M/M8GAAAAAAAAAAAAAAAwdPb7VpT3+V4r
ijs1XiuKh7Z3G4axQVGUV3Rdv5ueP42er6VzUIbwugK8H/2tKL/fPzsQCMyl
x24rirtMfD/wdz+/3eTdF/mtKK/pNFitqPzP5ud5f/wc96v2QivqbX2oeUJo
Nn0mPQ5k6PdWWohSWlabQoxYRL/DaHloUoiP0Xw8rapnWYpycVrTrjU17QuW
rt9lGsb9lmH82vL7/2T7/S+agcAiOxTKmpHIcquoaI1dXLzRjka30mw3o9Fd
diTSbUUivTQO94vSdO4Z7kTReWfKymS2qkpm6+tly7hxsvXgg2XroYf2zSGH
yJbJk93t2YYGmamululEwu06uX2kYNBtP7kNJ+5A5Q83nfJ7Udxl4q4Uv36g
VhQdU5q+C5maGrcTxb2oTF2dTPM+6RjdRhX3qeiz/6Mu1EAdqbx2lZ3frhqo
FVUw/Z2o/FYUvzevE8XbLG5bRaN8zXvcRlcw2Enn/ib97LbS9dpIs9oKBNrM
cDhNP6/5dJ4vNo8d++ziadOeWnLyyb9ffsEFf2q/5ppnV99yy+9X33bbQ2u+
+tWvr7nzzuvXf+tb5626554TNv/oR1O3PP104/aXXx7mpNOlzpo1YSmlNji3
LQD8h6poZtP8Qwz9f8+CwQw0R4p9Y8Y+Oh8MBjN4A/unOWLovxsYDOa9zzwB
APuzGWLof0/saebsvdMGAACAHP57O9R/8/c0APDBsD//nsFgMO9t5gl0pAA+
SIb6dwoGgzmwZ55ARwoAAAAAAAAAAAAAYF/br1tRhfviLg1v87o1PLS9yzCM
1T6f7690zF+g1xxJrykZyosK8D71t6KCwWB/K4qmi9b7W2n/n73zAJOrrvf3
d6e33WzvPb1XipQwoiiIiFxAKaIUAUERRIG/Io6IiO1eFbiC1y5yUazIVRIQ
B1ARJCG707ckJCEhIYQUQtommd//+z0zZ3N2skkmyeycmd3P+zzvc6ae8zu/
mXNmZ7O86A21zFaUHCvSc9KPn1y3oqTZJsuRaEWpjD4Ua11CZE8SOSNEvhBR
BS/rlxG1LyWa2k00L0x0Ml9/D9/3wYjFcmnEZrs2bLPdErLb7wrb7feGHI5f
hJ3OP0Zdrr9FXK6XIh5PLOLzvRIZN+61aGXlG5Ha2i2x2tq3ebkrUlOzJ1xV
tS9SUZGM8T5rbai0MZFvi/F+S/sp3tCg4u3tqmfKFNU7Z47qO+441XfCCapf
lMtz52q9qB5pOLW0qHh9vdZ10vpNmc0oUZpQ0nTSW1GyPFgrKt1c0hpW0q5K
d6ukFSVLaUfF6uoU75/2HFnH4HrpMH0oeZyxV2Uci/SseKzSn+J53N+KOkQn
akgrKqMTpe9PyOdLhlJdLulz7Qp7vdt5f7eGXa5N7Pqwx7OSH5uIlJe/HK2u
/jvv759jHR2/7pk9+8cr3vnO+1Z++MPffvX667+17vbbv7P+61+/f9299353
409/esfmX//66q2PP/6BN//2t5N3hcNTt7/6anNyy5ZKpZQvmUw6pRPFluT8
CAYAHAz5mfMKSv28afbfqEB4OBdSfvDnaX8ghLkTFCYBMv+9ASHM3iABAAqZ
AJl/nsD5AwAAADAPsz/vD6V/5HYbAJBHCvk7B4Tw2A0SWhEAFBty3Jp97oAQ
jj6DhJ8JAAAAAAAAAAAAAAAAAICRouBbUXobarjtpbs4u51O51qLxbKYx3yj
x+OZzWMdZ+akAnCMlPB7u8zr9Q62ohwOxxp2gN/fg60ovZ+mN9SMrSj92Mll
K0rWP1wrisel7Hb7UbeilKEPFSCyPJruQwWJXF1E3mVE5f1EtRGiVr4+6UWi
OSGid3QTvWsp0QfCRBexHw9ZLDeHbLZAl93+nW6H4ychp/N3MZfrqYjL9ULY
7Y5EfL7l0bKyNdGKig2x2trNicbGbbGWlp3xtraBWHv7XjYZb2lRCekuSQuK
51LU2lC8/1Fdua26WmsxxZuatD5T74wZqm/ePK0X1a/3ohYsUH2zZ6veadNU
z6RJKtHRoT1eOlM8Bq2dFDb2otKtqLDVur/XdKhWFCutKGlP8f6oeGtrqhXV
2al4n1S8sTG1LWlTyXZkPfq6jR0oYx9qGMOiPg69E2UYizaGQ7WiDtWJko6V
15sM+3x72d3sdr6+lR//BvtqpKysN1JR0RWprv5npLHxyVhn5297pk79Se+8
ed/rPfXUry4/++zPr7rsspteu/nm69bfddfVbzzwwLVbHn30+i2LFl23bcmS
S99OJM4c2LJl/s6dOycklapjywyNKIt0otCKAiAvnM/+mk2S+X+DAmG2vovy
gz9P+wMhzJ2gMAmQ+e8NCGH2BgkAUMiYfY44nP4R23MAAAAABMj8z3p8lwBg
9FPo5xoIYe4N0v5WBACg8JBj1OzzBIRw7Bgk/FwAAAAAAAAAAAAAAAAAABwr
RdWKytyGjImv7/b5fGtcLtcTbrf7k9LXkc6OmZMKwDEybCuKlwPSaTJ2m4yt
KL2flj4ucnL86evXtym3Sz9KP/7k8tG0opShD5XWwtp6iZxLiDy8LGNruoma
I0QTeDmTl8cvI/KzZ7MfChFdEbJYPt1tsXyx22r9VpfV+sOww/HrbodjUcTp
/GfE7e4Oe7190bKy1dHKytdjNTWbEnV1b8UbG3ck2tt3JyZM2JuYMiXZM22a
6ps6VfVNmaJ6J0xQPdJcamhQ8ZqaVBNKrKrSjKbVbpP7pRclfamJE1XP9Omq
d/Zs1Td3ruqbP1/1SStq3jzttt6ZM1UPr196UTFet6wjwvMb9ngO24oKGVpR
4cxWlLSaeD0yNq1bxevXelHSpeJxxXlbMlZ5jDSejNsYsh19W2n1+wc7UfIc
GaN0onjM0niKZtOJku0aW1Eyfn5+lI3x5Vi6FRXy+Xaz2yLjxr0RKy9fxWOO
xerrX4w1Nz8d6+z8Q2zKlF/0zJ9/f//Chfcsf897bl/xgQ/cuPrii69Yc801
H15/yy0f2PjNb75n80MP+bc99ZR/ZyLxLrVly7sHBgYWKqXmJJPJDraGL/vS
nSgr+lAA5IUK9ha2h8z/+xIIj8YzKT/487Q/EMLcCQqTAJn/3oAQZm+QAACF
SoDMP0fgHAIAAACYh9mf89noH6mdBwDkjWL43gEhHHkDaf0EADCbIJl/ToAQ
jm0DhJ8LAAAAAAAAAAAAAAAAAIAjYUgrqqSkpKBbUXoDR789PbbdfNtafvxi
vu0GvjybHzfO1FkF4Ng4oBXldDoHW1H6Mae3nIzHpBwjurk4Ho0dKuOxp29L
WlF2u13x+SKbVtQBfaggkS3Cj+PLrjifi2JEVbxsDBF1LuPzEi8XdBMt5Mec
2UV0fpjoo90Wyye7LJbPd5eU3NNttX6/y2b73y67/c9hh+O5kMu1LOLxJCKl
pSuj5eXrolVVb0br6rbGGht3xFtadsfb2vYkxo/fJ92m/pkz1fK5c9WK+fPV
8nnzVP+cOap3xgzVM2HCYGcpXl+fsq5O60LFamtTjShjR0rvRXV2qgQ/NzF5
cqobNWtWqhMl8uWeqVNTDSdpRfG5S+snSf/pcK0oQ6cpnO40Dfai9F4TvxYy
zkR7e6oVle5FJdraVLyxMdWLSm8vom9P1mvoRg1e18dh1NiJSm/7cI0orROl
t6LSnShpREV5DDE2Lr0oaWV5vXvDZWVvRSorX4vV1yfira0vJiZOXJSYOfOR
3uOOe7DvlFO+2fvud39p+Qc+cPOrF1109erLL79k1fXXn/vGLbe8c+PXvnbC
ph//ePaup5/mSe/pTG7e3JHctWtSMpmcppSawrbrnSjWwVpMOJ4BGGvMZx9g
95D5f0MC4bH4AcoP/jztD4Qwd4LCJEDmvzcghNkbJABAoSLHp9nniGz0j9D+
AwAAAGOZAJn/GY/vEwCMDYrlfAMhzK9B2t+JAADkFznuzD4HQAih0SChHQUA
AAAAAAAAAAAAAAAAHIqCbkUZ1ds0cln6NNKwqaqqErVWFF9fzH4arSgwCpDj
8oBWFF8+ZCtKN5etKL0NdbB+m4znMK2oA/pQrPVRvi9J5IwQ+djKl4gauog6
wkRTY0Tz+PIp7HujVusH4xbLpSGL5RPdFsstXVbrV9n7um22X4RstsciDkcw
5HQu6fZ44iGf75XwuHGvRSorN0br6rbEGxvfjrW07Iq3t++Jjx+/LzFxYrJ3
0iTVP2WKWj5jhloxb55aceKJasVJJ6nl73iH6j/hBNU7d26q6dTZqeKtrSre
3JzqRolyWbpL9fWpZpT0l/gcFBOlHSUtqYYGFZPHSaeJtyVNKlmfLBPpBpU8
N8pzp7WbpJUkDSjpNxlaUWG9FaX3ouQ+6TXJ46T3pPeipBUl8msjY9CaVdKJ
mjhRa171yOX29v29KH6c9jy9GSXrHU7ZVlp5XMTYicqiETVE6UqJeiuK16XJ
Ywi53fvCXu/2SFXVazzf4cT06c/0nXjib/r8/gdWnH32V1dccMEtqy655BMr
PvrRj66+9trz1t966xmv33XXSZvvv3/O1kcembTpqadat61fX5fcsqVSbd5c
nkwmy5RSFbysZevYStbLt9nMPaQBGBNcyC4m8/9OBMJceT7lB3+e9gdCmDtB
YRIg898bEMLsDRIAoBDxk/nnB5xHAAAAAPMIkPmf8dkKAChuiul8AyE0zwCh
GwVAvpBjzexjHkIID2WA8HMBAAAAAAAAAAAAAAAAAGCkKFpRxj6NLKVPI72o
6upqVVNTs5tvW8u3LWbRigKjgSGtKF4ucrlca9gBj8dzQLtpuOMkV62o4ZpR
xvXLePRWFDvYinIRtU4gcqr9fSjLEiL7K0SuLiIvL8tDRHVLidq6iSYvI5oT
JjqJb3t3hOgDEYvlYvbqiM12c9hu/3LIbv9uyGb7abfN9vuQw/HXsNP5Qsjl
ioS83hWh0tK1kYqKDZHq6s2x+vptsaamnfG2toFEZ+derQ81ZYrqnzpV9U+b
pi37eNk3c6bqX7BALT/5ZLX81FNV/ymnqL4TT1R98+erHr5POk/Si0pI80ls
b1eJtrZU68nQi5JWVJTnQlP6T6K0o/h+rS8lvSlRntvcnHqePEeaTdKKkuaT
253qRUmbSTpNeiuqpCSl3osSpSUljzP0orRWFK9L1itNKG280oqSVtXkydpS
a1/J9uvqUmPm11JrP0kvytCFGlTvQ4myLb0TJWPOog8Vy1RaUfz8MK+HX7dk
t9O5j1/HAXYHr39DtLY2npg2Ldj3znc+suL887+z6iMf+fyqa665ZtVNN33o
tVtvPWvDnXeeuvm+++a99fDDU3YGg+3qlVfqpQ+VfOONUqWUi3Ww9rSOZDLp
Tuvk61azD2gARjmfZPvI/L8HgTDXXkT5wZ+n/YEQ5k5QmATI/PcGhDB7gwQA
KEQCZP754UgEAAAAQG4x+7P9SAyM0BwAAPJDsX33gBCab5BS5w4/AQBGAj+Z
f5xDCGG2Bgi/FwAAAAAAAAAAAAAAAAAAsmpFGbszw7Wihrueqz5NZo9KbpNO
VGlpqaqqqpLx7ebLa91uN1pRYLQw2Iri9/sN/P5exJeHtKKMfTb9+JRjQo4N
43GTK2XdYmYrSrptDodjSCvK7XCcU0HUehqRSxHZeomcS4g8y4nG8eWabqLm
KNHEENEsXp4QJnon+/6oxfKhuMVyRdhmuzFis90Rttu/HXE4fhh2OB7l5aKI
0/nPsMsVCnm9/eHS0lfD5eWvR6qqNkVqa9+KNjTsjLa0DMTa2/fGx4/fJ32k
PmlESR9q+nTVP2OG6mN7+XLv1Kmqh5d9c+ao/uOPV/3SiOKldKJ6+bYeflwP
P1d6S4kJE1Ri/Pj93ShjL0q6S9XVqU4Uz4vWX9JbSnKbNKP4fs2aGhUVpdPE
8yaP0dpL0nuSDpMoXSbpNEkPytiKMiq3y/3ScpLnyPNZrRfF65UxSZtKxixz
IPvaK/vN8yD7I/fFGhr296KkU5XZizL2odLr1ztR2fSh4ro8J7H0ffx6JUM+
376w270n5HTu7rbbd3TxeyZktb7B21weqa7+V2L27N+sPPfc/1xz9dWffe1z
n/vIa3fddebG++8/YdtvfjN9y1NPdW6PxxuTW7dWqU2bximlPOk+lE1aUKyF
leOGZJlWbrOYfCwDMJq5nI2T+X/7AeFIeRnlB3+e9gdCmDtBYRIg898bEMLs
DRIAoBAx+9xwpPpHZBYAAACAsUmAzP9sx3cKAMYOxXbOgRAWngFCIwKAXOIn
849rCCE8GgOEnwkAAAAAAAAAAAAAAAAAjE0O2oqy2+0HtKLkemYraiS6NPp6
9TaNPgZjs0bv5fBtWivK6/WiFQVGC0NaUfweX+Tz+QZbUfL+13tNohwfeitK
2k368ZHLY1EaVKJc17cr2/RJK4rPFXZpRVmtMZfN9j/lDse5E4k6v0407gXe
jwRR9TKiphDfFuVzDS8XvEx0WjfRWXGr9fyIxfKxmM32yYjN9vmw3f71sMPx
QMjheCTidP456nT+PexyLQt7PD3h0tJVkfLy9dGqqjejtbVbo/X1O2JNTbti
ra17Yh0d+6Tr1JvRiOpLN6K0TpQ0oKQTxY+RblLP5Mmqhx+ntaH4sdplUR7D
9w22ooy9qPb2VG+pqengrSjpKqWNptUbUpn3a9d15bq0m6TXZLWm2lBEB2qx
KJ6nVM/J2IqSVlNVlYo3Nmrj1OaD96dv9mytiyX7P9iLqq/Xxi3PlTaU1osS
5XJ6vdHDtKGG7UOljfF8RMaNS7L72D3hsrKBkM+3M+R2vx1yOreG7PaNIZtt
DdsT8nhejNTX/3H5ccd999VLL71pw+23X/ja97532rbHH5+hli9vTb71Vo1S
qlz6UEmlnLy0pxtRFr0LdbAD6VD3AQCOmg+xS8j8v/OAcKS9kvKDP0/7AyHM
naAwCZD57w0IYfYGCQBQaATI/HMDziUAAACAeZj9uX40+kdiIgAAeaEYv39A
CAvXAOHnAgCOFT+ZfyxDCOGxGiD8TAAAAAAAAAAAAAAAAABg7HBAK4o94lbU
SPSi9FaUbEfGIBq3p8uP0VpR7GIWrSgwGtBaUXwMzuT38w3sIn7vr+H394D0
mqQHJUu9l2Y8PvW+mlzXj9FcHIvG47xCjknpRfHS6/Eou9Wq7BbLNrfVGiu3
2X483m7/0CVEM39J1BYnag8TTV1KND9is50Stlrfm7BaPxi12z8Stdk+0e1w
3Bqy278acjjuDzudD4Vcrj/x8pmIy7U04vHEoz7fK5Hy8tcilZUbo3V1W2KN
jdtjzc1aHyre0bEvPmFCsmfiRNU7ebLqmzo15bRpqnf6dM3BBpTefxo/Xmsl
xZuatKZSvLlZxdvaVFzaStKCki6UNKJE6UPpjah0Jyohz+XnSGspVlOjonxe
ivI8DLaipPck/SaeF63l5HKpiNOpKQ0mY4tJ2lFaZ0rWIUtZjzSj5DE2mwpb
LMP3ovg27X5Zr2xHb0VJ24nXE6ut1cYo45V97ps1S/XNm6d658zR5kGbA75f
Oldav8owrrCsL92dOmBsso/sQftQsi42XFYmjai97AC7k69vD5WWvhX2+d5k
14U8nlW8nThfXhIuL386Wl//aGLSpHuXn376Z1+9/voLXv/v/z5p64svTkq+
/XaDUmoc6zL0oax6I8rsgxSAMcjZ7LNk/t90QJgvP0H5wZ+n/YEQ5k5QmATI
/PcGhDB7gwQAKDQCZP654Wj0j8BcAAAAAGONYv05AN8rACheivW8AyEsbIOU
Or8AAI4Os49hCCHMpQECAAAAAAAAAAAAAAAAAEY3B7SieFkwrajBNo10adJj
GKYXtZtvW8su5vvRigKjgcFWFL+/tVYUu4YdkPe/tKI8Hs8BXSj9mDD2o3J5
HJYbrOL1i2Vut3KWlCg30bZKqzUx3mZ76D12+5V3E532DNFxYaKTolbru7ut
1nNjdvvFEafz6pjLdXPY7b4z5PF8l5c/Dbtcv4+43X8Ne70vstFwaemKCB/T
0crKN2K1tZsTjY3bYs3NO+NtbQOJ8eP3JiZOTPZOmqT6pkxR/VOnqv5p01Tf
9OmavXobSuT7E/w4rf/U0aHiLS0q3tCgYtXVqf6RWFWltZVifLvejZLHakob
SlcaUfL8xkYVq6vbv450I2pQaUXxa6O1lxwOFebzqNZ10pXr0niSHhOfW7V1
SXdKltKe4tdM2k/ac61WFTpYL4pvl8dE9O6U3oqSlpPsE69T60V1dmpz0jdn
TqoVNWOGNifSxpJt6tvT1qN3omSfZGy8jzImbSkNKn5sjO+Li4Y+VDTViEqy
e/nyAC938Vi282v4Fq9/U6Si4vVIVdVqnuueaHX1skhd3T+jjY2Lejo6fhWb
PPkHPXPn3tO3cOHNqz/0oYtW3377wq1PPTVJvf12fTKZLGOd6EMBYDqnsH8h
8/9+A8J8ewPlB3+e9gdCmDtBYRIg898bEMLsDRIAoNAw+7yA8wkAAABgHgEy
/zP9aPXnfjoAAHmgmM87EMLiMEBoRABwpJh93EII4UgYIPxMAAAAAAAAAAAA
AAAAAGB0UrCtKH3dxhZOZr/G2Iri+9GKAqOFEj7uyrxe70z2Bp/Pt6i0tHQN
v88HhjsO9WND2lHGflROjkPZjvSnpNkmDSrpRLF1fE5o5Ot1breqKilR9UTb
J1ssy0+xWH53nc32uZ8SXfQ80Xlhi+XDUbv9yqjDcWPE5boj7PF8O1Ra+qNw
aelvIqWli6NlZc+Hy8pCkfLy/mh5+auxysrXY7W1mxKNjW/FW1t3JNrbd8el
DzVp0r6eKVOSfek2VP/06ap/xgzNvpkzVS8vtU4U398zebLWh4qn+1Ax6TtJ
D0r6Tjxmvemkt5WkixSVJpL0mvixWjPKqNwmPSdZR1XV0EaUrEPMbEU5nfs7
UdJ1Eq3W1G3SZZLOEm8z3tQ0uA1t/bJuWYc8n58bOlgviq/Luoa0okQZg3Sd
pO/E+6P1ongutPmZNUtbavPT2altW/Y9kh6zth55vjShpDfF64jLGGXJj4vz
7dKJyuxD8eu4h93F69nBy7fYzbyODdGqqlejtbX9sfr67khLy7/inZ1PxqdO
/V1i1qyf9R9//L39p5761f4zzrh1xbnnXrvqoos+tO6GG9657rvfnbH9yScb
Ny1fPs7QiUIjCgBzcLPfIfP/XgNCs7yZ8oM/T/sDIcydoDAJkPnvDQhh9gYJ
AFBIBMj888Kx6M/5jAAAAABjC7M/y/HdAoCxR7F/B4EQFpcBAgBkg9nHKoQQ
jrQBwr8nAAAAAAAAAAAAAAAAABg9FHwr6lDrlvtKS0vRigKjDa0Vxe/lmW63
+waHw7HI4/Gs4fe71oqSY9KofmxKJ8rn82nLYzkmy41KJ4qt4m3USBuKLzey
HXx5kuh2q0klJWoW0Y6FFsvKiyyWv9xttX79TzbbzUtstpu6bbYvhOz2b4Rd
rgcjHs8jYZ/vL9Gysr9HKiq6opWVPZHq6tXRmpr1sbq6N2ONjVtj0ofq6NgV
nzhxT2Ly5FQfSm9DzZyp+mfN0uwTDY2oXmlETZqUaiC1tqbaS9J+kj5UZttJ
7yrpjSfpR0kvSvpIejNKN92Hisn9emfKsI4IX44YW1Fy3diKktaTdJ5E6UVJ
38nl0h6rtZj0NpWMV7att6L4MXprarAXJZKhFSUdKn7cYCtK71bJvqb3ScYv
vSzpQw32tKZMUYnx41MdLd6m9KH0VpQ2Lh6D1oaS8Ym8/3EZF68z3YfaJ32o
MJ972Z38mm5jt4TLyjbyttfya7uCtxuJNTW9GOvs/Ft8+vQ/9syf/4veU065
v++MM+5Z/v73377qggtuXH3JJVetu+qqC1+74YYzX7/11pPe/PrXp29/6KHm
zcFguVLKwVrMPhABGMNcxq4m8/8+A0IzvY3ygz9P+wMhzJ2gMAmQ+e8NCGH2
BggAUEiYfU7AOQUAAAAwD/kcNfuz/FgFABQffjL/3AEhHHsGCABwKAIGg2T+
MQshhCNlkPBzAQAAAAAAAAAAAAAAAIDipyhaUQdbf7qNs5vvX8vXF/P1T3s8
ntk8frSiQDEzpBXlcrmGtKJ05bjUNfaidI/kuCzPsIKtZKt4HbXSh+LLrWwn
r3cKO4dvO5E9yeVSp1os6kyLZcdldvvKz9vtwZ/bbD/5m9V638t2+wNhm+2h
kMv1p4jH80ykrGxppLw8HqmqWhmtq1sXb2raGG9u3hJvb98e7+zclZg0aU/P
lCl7e6ZPT/bNmDGkDdU/e7bqS9srSidq2jSte9QzYYJKtLdrzaVYff3+PpSx
7TScet9JbyvJc6QJJY0lWWasQ3pMWpdJV67rvSh9PdJdkvv01lNmK0r6Tk5n
qsvE69ZaTg0NKi5dqqqq1DpknW73/t6UPEc0NqPS3SljKypykP2S5pXMj/Si
tPmSptb48SrR2qrdp+2jjIeN8fPifF3aUNKI0sbEcxGuqEhGxo3bGy4tHeBt
7WTf5u1uCft8b4bLytZFKipeiVRXx/l1XRJpbX2WX8vHe2bPfrjv5JMf6H/X
u7614txz71h+8cU3r7riimvWXn/9xatuuunc9Z///Ls2fu1rJ7z5/e/P2PLw
w51vB4P1yd7esnQnqsTsgxCAMYr8PPhHMv/vMSAsBL9I+cdP+NtLCAvBoMEA
pY5NERQHfjrwfCqa/b6CcCwaNOgnnEsBKFQCZP75IhcCAAAA4Ogw+zM8F/pz
PSkAgLziJ/wuD0KYXwMEADgS/ISOFIRw9BogAAAAAAAAAAAAAAAAAKA4KehW
lL5+Y/dG7+TorSiv17vb5/OtZRfzZa0VxeNFKwoUM4OtKH5P3+B2uxfx+3sN
v+cHjE0o/XiQY1Q0Hhf8+MMel8P1ocQqVvpQ9Wwz28FOZmfxehfwek/2etUZ
vDyHPc/pVB+2WtU1Ntu2L7tcr/zY5XrxL3b7ohfs9ie6HY5gxOH4d8jtjoZL
S1dEKivXRmpr34g2Nm5JtLW9nRg/fmfP5MkDPdOm7e2ZMSPZl25CLZ87d9B+
tm/OnFQfiu+XRlSPNKKkd9TZqeJtbVprSZpLWufpYH0ovZ9kNLOrlKncbuxD
eTxDNTSajK0oeU7Y0HoKGXpR0nsabDzx46RHJW2rwb6VrEvWLa0peb7ocKSU
5xmV++Sx+hgy9zV9WbpX8aYmbb4SEyeqhLS1OjpUoqVFxaWtJduVsUgrip8T
SzWmkpGKin3s3kh5+UB43LhdvJ3tvM9b2U28rfWhsrLVfH8Pv6YvR5ub/xHr
7HyiZ/r0X/cef/wP+/z+/1p+9tl3rrzwws+9csUV1628/vrL1t9yywfX33HH
Ga9//esnvX7//XN2PfLIpE1PPdWa7O+vVZs3lyul3OlOlMXsAxCAMcqXyPy/
vYCwkPwKFQ5+wt9eQphrg3RgC0oEox8/4b8/gzDXBgl9PQCKGTl2zT6P5EJ/
jucFAAAAGAuMlp8DgrmeGABAweAn/NsIhHDkDBD6EAAcK37C3zJACIvfAOFn
AgAAAAAAAAAAAAAAAADFR9G0ooxtHH3b0sPxeDy7vV7vWnawFcXjRysKFDOD
rSi32621ovj9v4aPwwE5HvUelN5Q04+JzGPyYMflwfpQNek+VBPbzuuexE7n
Y2w+exJ7uterznK71XnsRzwedS37aYcjeZvVOvAtm23TLx2OV550uaIvulzd
XbwMeTz9YZ9vTbi8fEOkqmpzrKHhrVhLy85EZ+fuxOTJe3umT9+n9aHmzEm1
oebNU8vnz9fsZ/v4utaJ4sfwY1XPlCla5yje3q7izc0qVlenYlVVqcaSsY90
uD6UwcHOU+Zj0u0kvRGltZ9EaTzp8vVIutU0pDfFl7V+k6EXpTWiLJaUei+K
79Oeqz9PnpPZiZLLmdsT9cvGXlXmPuv7yeuO1dRoc6Y1olitsdXUpDW2Ynqj
itfFr1cyXFq6L1xWtofXt4sv72C38e2b+f4NfNur4XHj+qLV1d3R+vrno21t
T0YnT/5dz7x5P+k79dTvLj/zzLtWnHfebSs/8pFPrvr4xy9/7TOfOf+1228/
c+3dd5+64b775r318MNTdjz9dJuKROqTq1dXJpPJUqWUK92Iskonii0x+wAE
YIzxLjZE5v/NBYSF5j1U+PgJf3cJ4cEM0v5uiegn9ANAdvgJLSkID2aQ0IQC
YDRi9rkll+coAAAAABwZ8rO92Z/hudKf26kBABQ4fkJHCkKYOwOEPgQAI4Gf
8PcMEMLiMkD4mQAAAAAAAAAAAAAAAABA8TCkFcUWVCtK38ZwrSjZptfrVW63
e7fH41nr8/nQigKjhSGtKJfLtYjf72uqq6sHampqtONR3v/SSpNjQG9GGY8b
/dg5VB+qUvpQbB0/t5FtYyfwuqaxc3ndJ7J+9kzexgc9HnWx262udLnUp5xO
9f/Yu9nv2u17f2yz7fij3b7xGadz7b89nldDPt+rkXHj1ocrKt6MVFa+Famp
2RFraNgda23dkxg/fl/P5MnJvunTVf+sWWq5dKLSjSjpQ/UvWJBqRM2dm2pE
TZumEhMnpvpGra2K16Ni1dWpPlS6y5TZfzpYH0prKmWq96L01pKxE2XoMoX1
fpPDMUSt2aS3onjOtXGJclnWqbef5PE22/5elCjX9XWI+vqlI5VuSYUNPSjj
vmWO+4DelbF5JUseU6y+XsVbWrR51Fpb+lzyWMNebzLkdu/j/dwTcrl2hd3u
t/n61pDHs5HXv5bXvzxaWRmO1da+EG1ufjo2YcIfe2fP/nnviSfe33/66V9b
fs45X1h5ySWfXnPVVVesu/nmCzf8v//3vg133nnalvvuW7DxoYem7Vy8uGP7
0qWNyTVrqlQyWZpUyp3uQ9nQiALAVL5C5v+NBYSF6repuPET/uYSjm6DhGYJ
MAc/4W/b4eg3SDi/AjBWkOPc7HNOLvXndHYAAACA0Y/Zn925/h4DAACCn/C7
Owjh0Rkg9CEAyBd+wuc1hLBwDRB+JgAAAAAAAAAAAAAAAABQ+Ay2oiwWy/Ul
JSV/ZqUVtavQW1Fy3ePxoBUFRiM5aUUZ+1B6I0r6UNXpPlQD28qOZ6fyOmaz
x7MLeb3v4fWey36YvYKPs0+63epWl0t92eFQ3+Jzww/YX7K/s9v3LXI4dj3n
cm1b4vVu7ior2xKpqtoaq6nZHq2r2xVvaBiINTfvjbW2Jns6O1XfpEmqf8oU
1Z9uRfXNnq11oQbl670zZqieqVNVYsIEFW9rU7GmJsXrU1E+F+kNpiEdpEM1
ovQmlLH9ZFRuT7eYBh+nP1b6TYZGVMhmUyGrdb/SeuL7tI4TjyvG45Nxxmpr
U1ZVpXpWsl5eT0T6T/y8cEmJCunqzSi5T5a66VaUjGVIh0rmQG9Rybr1XtZB
WlH6fmnXq6u1XpQ2n7KUscq6+HEhtzsZstv3sDu67fatvO3XQ17vqsi4cfFI
dfWSaGPjM7HOzj8lpk59uGfBggf6Fi78Zv9ZZ93xyoUXfmb15Zd/fPX111+8
7rbbzlkXCJy+8VvfOuHNBx+cueXXv56wfdmypmRvb43atGmcUsqTTCadvLQb
+1BoRAFgCnPY58j8v6uAsJD9Ho1O/IS/t4TFY5AObJWIABQyfsLft8PiMUho
QgEw1jH7PDQS5zUAAAAAZId8DzD7szvX+nM5QQCAUYmf8Hs7COHhDRAAwEz8
hM9rCGFhGCD8XAAAAAAAAAAAAAAAAACgcNFbUTOcTucn3W73Ew6HY01JScmA
zWYrqlaU1+sdbEXxeNGKAsXMAa0ofr+v4dsGqqqqBo/F4Y6LioxGlN6HqmJr
+Tn1bDPbyc+bzM5ij2NPYd/Nvp+90OdTH/N61XXsZ/kYC7jd6ttOp/q+w6F+
ZrerR/nc8Dgvn+Tbgi5X8p8ez96Xxo3bHaqs3Bmprd0Va2gYiDc37423tiYT
7e2qh+3t6FC948ervokTVe/kyap36lTVO3261oXS5Ms9U6aoHr4/wY/l56tY
XZ2KSm9J7yLpfShjI+ogjaTBTlS6+xTmfQhL9ylTuV009qPSjahIuhEV1htR
Fkuq70SUki9L00lrMUknSvpQDQ0q3tSkjT8uPabq6tT4ZSyyPr0Vpa9DX480
o+Q+MbMVJfuud6JkPsQsmlERQytKLmuPlV6UNKJ4Gefrcb49xvsbstv3ddts
0ol6M+R2rw6XlkYiNTX/ira2LopPnvzrnnnzfth78sn/ueI97wm8cu65n33l
kks+sfLKKy9be+ONH1x/++3vfv2uu07a9MADs7f+9rcTdzz7bEuyv79Wbd5c
nkwmvUopl6EPNdiIMvsgA2AMcyOZ/3cUEBaD36exhZ/wt5Yw/wYJnRIw9vAT
/sYd5t9gWj/hPAsA2E+AzD8/jYQAAAAAyA75jmD253auDeR0hgAAYw0/4Xd2
EMKhBggAUGj4CX/bACHMvwECAAAAAAAAAAAAAAAAAAoPvRU1zefzXVdeXv5/
Xq/3VYvFsrvQWlHG7epj4bFqrSiXy4VWFBhNDGlFsYv4+FzD1wfkWJT3Pl8f
PC7kNv041VtRFXy79KFq0n2oJraDHz+JncHOZ09iT2fPZs9nL+PHXMt+hr2D
1/8NPr7u93jUT10u9WunUz3mcKgn7Hb1NC//zrf9i+97iZ+3tLw82V1Tsy/a
0LA33ty8L9HWpvWh+jo7Vd/48Vojqkd3wgStB6WbEPlx0pTS+1AxvQ+ld5/0
PtThGlHpxw82kgzdp3C6+xTi8WtK/0l6TNKCkvsM/ajBRpQ8Tm9EEQ2vdJ1k
XDxmrRPV0qLivP+yP4nWVhVvbNTaTLI/WrNKtinrzGxO6a0oWZ8uj0Geo+1X
ZitKNLai9D6U3ogyzoP0sqQ5JfPGj43xc2L8uBjfFpN9ttuTvB+7uh2OjSGf
rz9aW/tSvLNzcWLWrIf7TzrpvhXvfe9XV5x77m2vXHzx9asuv/xjr33qU//x
+q23vvf1u+46ZfP3vjf3jYcfnrLj6afb3n7xxXq1ZUtF8o03StN9KAdrQx8K
gIKhhf0Dmf+3ExAWiz8iIPhp6N9Zima/NrC4DNKBLSgRADA8fsJ/lwaPziCh
vQcAODLkfGH2uWsk9OdwjgAAAIDRip/M/8weKQEAYCTwE/6tBMKxapDQhwCg
WPATOlIQwpE1QAAAAAAAAABQnMh/01nPtrIT2GnsXPYEdgE7i53MtrONrNuU
UQIAAAAAgCNFfs7zsVM9Hs9V5eXlj/Ky32Kx7CqEVpRu5nb1sUgvh8e7m0Ur
CowmBltR/J4ebEXxe35Ab6Tx+1xrRUkXqrqqStVUV6tqPlar+Nio5sfU8rHR
wPe38uUJvJzOzuPbTmT97JnseewlfP/HeR038vO+wN7Dx/q9vPwJ3/4I3/9H
3s4it1s97XKp59jn2X/z9aV8Xxc/JsTbjNTWap2kREuL6m1vV72dnVofqle6
UGyCL2tKE6qjY39HqblZxfl5MXm+sQ9lbEMZG1EH60MN14mSPpJ0oqT7JH0m
aUNJ80mUTpOudJuM3ShZph8/2HQydp0ylb6T9JykFdXYmOpEyb5KA0v2na9r
+8ivj9Zy4jFp65c2lHiwTpTIj5POlbb/0oPSe1G6cp1vj4iZjaiMuYjKGMV0
N0rGEXI6pRG1r9ti2c3LzWGvd3m0sfFfiWnT/tS/cOEPV7z//XevuvTSm1d/
/ONXrbvxxgtfu+WW920IBBa+8Y1vLNj40EPTdi5e3PF2LNaQXLOmKplMlrJu
9KEAKFguZDeR+X8vAWEx+XMCh8JP6JjAlEFCnwSAfOInnIPHukHCORcAkBvM
Pp+N5HkSAAAAAIdGvk+Y/Zk9UvpzN00AAJAVfsLv6SAcCwYIAFDM+AntRwhh
7gwQAAAAAAAAABQe5exp7A3sD9kn2GXsOjq67z7y36BF2b+yD7GfpFRfCgAA
AAAAFA7S8fCynW63+8LS0tLvO53Ol0pKSt4u1FaUUWlFeb1etKLAaGOwFcXH
5WArit/zA9KGKuX3vc/rVWXpVlQNH6N1VVWqno/JRj5OWvj2Dn7MVF7OYU9g
F/L19/BzzmUvYq/k65/i22/j59/Fx/d3+fk/qq5Wj9TUqD/y5Sf4tqd5Xc/x
457nx/+bXcouY7v5eWHpOvF247W1qqexUfUYOlE9eiNK70TxbdJQivNj4vzY
WH29ivF2YtI70vtQ0oI6mj5UhoN9JI9HhV2uVJdJOkzD9Z70DpT0o6QLJY/T
Tbecsm5F8b4MtqJk/ydP1pT9l/2O1dVpbSet02ToVx1UvR3lcGj7os2F9KJk
vmQ9vDxoI0r2X1e2l+5EaZ0qlysZcjr3ddvte6UR1U20g/djC19ezetbEp84
8fHlp5324Krzz//ymmuu+cRrt956wRt33/2ujd/5zgnrH3xw5pbf/358cunS
RrV2bXUymSxTSnl46eSl3diHQiMKgILii2T+30fAAx1gt7Nb05fNHg880P8l
cDT4Cf9dxGg0SOiSAFAs+AktqdEizr0AgJFEzi1mn+dGUn/OZgoAAAAYnZj9
WT3S36UAAKAQ8BP+vQTC0WiAAACjET8VR0cqmOW+mD1OCMeCAQIAAAAAAAAA
85nPfpNdTvn7PrSZ/TN7SR72DwAAAAAAHB4bW+F2u08sLS29yeFw/Iqv99ls
tl1lZWXJQm5F8XgHW1E8frSiwGhhaCvK5VrE7/U1VZWVA9VVVaqCj70K6bix
NXwM1LNNbLvPpyaxs/jy8XzfqewZfPkc9kKvV32MvZ69hQ3w477Ftz/Ix/Yv
q6vV72tr1V/q69XfGhrUc3V16vmaGvUSH/sv87aW8Xq62bD0mPi4i/Fz4vyc
hN6Jam1VPe3tWhNKa0PpfaiODhXn++LNzSrG643x42M8fmkdad0jWd9wfaij
aETp6xvSipImk/SW9O6TSMP0nozNKH1p1Hhfxv3SfNJaTLxP0sCSLpQ2DxMn
qsSkSal5kP2XVpTsu/Sd0uNLt5tS4xQdjv0NKb1ZJevnx0jzSeZFa0PpHqwP
pTei0p0ofTvdTmcyZLfvDVmtA7wfO7qI3mI3squ7S0q6w6WlT8ZnzPjR6rPP
vmPttddete6OO87e+MADx2994onJO/7975Zt/f21avPm8mQy6TX0oWzoQwFQ
sMjPd9JuN/vvIka7e9l+SrXyf8zeSakOv/ze8z2U+t1rG6Ua/dJntR/i9fKx
NWwLO4mdzS5kP8zexH6D/QX7FKX6/JsKYP9Hs785yGsFjh4/Fc5/ExGkoR2V
4TT7PZjv+TDOiZ/w39cDMFrxU2G2pLLB7DHm4xzsJ5x/AQD5wexzXz7OrQAA
AAAYHvnuYfZn9Ujrz9VkAQDACOGnwvo3k0wDWVhoY4YwnwYJADCW8FPhdKSy
Of/4TRwfhGPRAAEAAAAAAABA/rmFXULmfyeSRtWtLP5bfgAAAAAAc7G43e7G
srKyM+12+1f4+rM2m209Xx9AKwqAvFMi72E+xmZ53e4b2EXjSkvX1FRWDtRV
Vak6PvYa+P3fxMdEOx8DE7xeNc3jUXPYd7CnSx+K77+A77+ML1/LfsbnU3ew
3+DH/jf7M/ZRvv//+Ph+qq5OPdfQoP7V1KReamlRy5qbVTdfD9XUqDDfr3WQ
pA/FlxPSiOLbE/X1KtHYqBKtrSohnaiOjkHjbW1aMynG90sjKcbPicp6eNxa
00nvQRk90jZUZifKoLEXJZ0krbWU7jGF7HYVslqHtp+MkqEfldmMEuW50nCS
npN0nRyOVCuK9y3G8yJNLGlDaXPA8yKtLG0eeL6klRXV5yI9r9qY9baVdKOk
F5VuRYWG6UUd0ITKbEMZlXGl91/WG7LZ9nZbLLu6S0re5n18k/dxDZvoslhe
6nI4FvPYftp//PFfWnXppR9bf+edZ2z+5S/n7Fi6tE2tXVudTCZLlVKujD6U
BX0oAAqW6exLZP7v/UaTG9i/sfex11Kq4dSa7QsyglSwJ7NXs99hF7Oryfz5
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
Yhm8HBalC2W8T9pOIl/W+lG8DzI+mT+tXzVxouqRdpW0ongsMia5LONMyDhk
DLx9bX5k3XoripXtRXhuonxfjOclps+N9K1KS5Oh0tJ9YZ9vT7fHszvkdO7o
ttm2dZWUbOLnru0iSoTc7udi48f/cuUZZ3x11VVXXbf2C184b8M3vnHqm7/4
xYwd//xnW7Krq1YtXz5OKeVCJwqAosHG/oHM/z1eoSvdo2vZiqOb5jGLlz2X
vY9dQea/jvn2pWOfQpAlAcr/6+vPYlxmvwdzaSCL/QUAAB0/5f88lQ1mn0tx
XgYAFDt+Mv/8Z4b+Y586AAAAYFQg30PM/lzOt8GczBwAAJhPIZ47g3keV77n
QDdAB+9IHI2BYRzNczmWldcWADD6yfc5PJjFmPx5HlOhGKShn91+Kp7fDftp
6M8J+X5fjYSBjH0MFMCYCmUuAAAAAAAAAOBIWErmf685GgdY+wjMBwAAAAAA
ODgHtKLcbvdOvn5AK0rvQUm3qaKi4oBOVC5bUcZ1oRUFigmV0YdirREix/NE
7l6ishhR1TKippeIxkeJpr9MdFyI6LRuorOetlgu+4XF8sVv2+2/ucPp7P2i
3f7Wly2Wfd+y2dQPnU71CPsH9gmHQ/2Vl8+6XOp5t1u9xMfEUj4+uvi4DFVW
qki68xSXJlSGcttg/6mhYbABFZPn8fGm9Z2kw8THnDSjpMOkNaSkO6V3ouS+
4VpReh9K2lDGPpTeiEr3oULSYZImkrG5xJe1zhI/Rp4XOVQryqiMRcYk+8z7
kmhrUz16m2n27FQvav781DJ9Wes08f3ScJJmVKy5WWtqyf7KvmvjlXFmtqAy
JRoq3yatJ3m+zIPMV6yxUSXa24f2ongcMrbBVhS/Dtq2Zb5kboytKN5+hG+T
VpQ2L15vMuz17uP52RPm8yC7g69vC3s8W0JO50Z+/loeQx+PfVm33R6Ml5f/
b8/MmV9fdd551756661nv/GDHxy3JRicsG358rqkUmXpRpSdtZh97AAAsqKa
fYbM/x1eoSq/W7yXnXaU8wsO5CT2G2yCzH9982FXbqYNZIGf8v/6+rMYl9nv
wXzvLwAA6Pgp/+epbDD7XJpLA1nuMwAA5BI595h9/jPDYC4mDwAAABgFmP2Z
bJb+HMwdAACYTSF+hwrmeVwjaYAK5/PCT6OrEzHWDRAAYLQjx3k+zyvBLMbk
z/OY8m2Q9jeh/FnMR7Hjp+L+ucCfsT+BAhiTGQYIAAAAAAAAAI6ca8n87zPH
4rtyPyUAAAAAAOAQDGlFud3ulS6XaycvtS7TcA0n6TZVVlZqvajh2k75akXx
eNeyg60oHg9aUcAsBvtQAUMf6hUiFy99bCVfro8TtS8lmtpNNK+L6JQlRO8N
EZ3H91/K16/7h8XypcdLSn74C4vluQdtttd+YLXu/ElJSfJRq1U9brerpxwO
9Sz7T/ZFp1O95HKpl/lY7fZ6VVi6SXxMStspXlOTakNJO4mNi3ojSpQ2lMiP
k8fH+HnSNtIaSdJzki4Rr1NaTNKP0lpMeiNqmE7UkD6UjEWaR3onShpRPF6t
vWTsQ2X2luQy3y6Pi/BzpIsUlV7U4VpRMhZjL6qxUcVbW7UGk9aMmjpV9c6Y
oXpnzUq1oo47TvUtWKA1m+R2rdc0fryKtbSoKM+NrEfbB56HwXESHV55nMWS
6l3J+KUVxePS5jk9pnhnp+qZPFn1Tp+ueqdN08YnbStpXGnb1VtR0qeijP6U
jMftTvK87gl5PLv5sW/z5a1hr/dN3tZrkbKyV8KlpXF+vZaEKiqC4erqP0Qa
G3/UO2nS3f3vfOd1Kz/xife/8b3vzd/5wgsd6q23qlUy6dUbUWyJaPZBBAA4
LBMo1bEx+3d3hegq9vNsxVHPLsiG49ivsmEy/zUfKaM5my1wOPyU/9fXn8W4
zH4P5lIAADgS/FSY5ymzz6W5NJDlPgMAQC4x+9xnpgAAAMBYR76DmP15bJbB
HMwfAACYjZzLCu28mc8xjbTFQIDG9ud5MRsc5vUEAIwe8n1uzuac4s/zmPKx
zwEaG12obAhQ8bWjAgfZD7PHZcZ7GQAAAAAAAACOhOfJ/O8yx+Lncj8lAAAA
AADgEHhLS0u1VpTL5fq9w+FYabfbdzqdTq3LJI2mzIaTNKKqqqq0++Qxej8q
V62oQ/Wn9F6U1+sdbEWxaEUBU1AZfaglRPZXiFxdfFyFiCrYuihRWzfR5AjR
nJeJTmLP4MsfYC/m+69hP8v337mspOR7/y4pefi5kpKnF1ssiT9ZLFvYPX+x
WJJPW63qObtd/Yt9yeFQS9llbLd0mNxuFfV4VIyPizgfh3E+NhM1NVobKp7u
REmLyNiIivL90lXS+kp8XGmNJ+k6SedIukSylGYUr1e7T1pQot6FShvVG1HS
VhJlHXofSp4vfShpHx2sD5WptJb4sRF+rtaKkl6VbOdwvSgZlyylGSXtK33/
Gxu1FlPP+PGpRtOMGapvzhzVN3duqhU1a5bqnTlT60VJx0maTvJ82Setb2Vs
Nh1MaTnJuMV060prbUnnSjpWlZWpuZa5l9dDOlbSjOIxJdrbVbypSRuv7IM8
T5urjO3KekMOxz6e1wF+zI6Q2/0Wv14beN5XR8rLe/j5L8eamp6Lt7f/OdbZ
+avE9OkP9ixY8PXehQtv6zv77KtXXH75uevuvPOEnf/3f51v9fbWJPd3otCH
AqB4mMauJPN/b1doxtirjn5awTEwh1J/wzPaulG9uZwkcFjy/fr6C3BMIykA
ABwphXieMvtcmkv9We4zAADkigCZf+4z08CxTyEAAABQ1Jj9WWy2AABQ7AQp
f+fMYAGOCZ8TQ/FT8TUiIH43AcBoxU/5PZcEC3BMOH+aS4CK4/f/B3sdi2Hs
uTR4kHkAAAAAAAAAgExqyPzvMMfqD3I+KwAAAAAA4FB4HQ7HYCvKbrevtFgs
O3mpNZmkC6V3oA7XihrpXpS+fr0V5fP51rJaK4rvQysKjDgq3YbSfZTIyktb
kMi1lsizhGjcy/y9LEzUEiWamCCaFSM6sYvodL7t/eyH+fYru4luClksd3SX
lHyb/VGopOQ3vHzyZYvlxX9bLL3PW60bnrNad7J7/2G1qhdtNrWEj8mXHQ7V
Jf0l6RGxETbmcqmY261iXq+K8fERq6xUserqVBdKb0SlO1FaI4qPXa1fJPIx
pXWfpO8k69SbTqI0o6T3JN0njyclbyNicPD2Q/WhpHt0qD5UhnpvScYUOVwr
Su9WSa9KV3+8dJr4XCX7rTWjWlv3N6OmTVO906dr7ShZym3x9nZtviL8HG3f
9FaU3rcaxrDeiZIxi+k5i+itKBmLjEMaVqK8NunxxJubVbyhQXuttF6XzKPM
nd7UkrnQ5evdNtvebodje7fTuSnk8bzK646Gq6peiDY2LubxP9q7YMEP+089
9T+Xv/e9X15+zjmfXXnRRVev/tjHLnrt+uvPXHfHHSdsuO++Sdsee6zu9ddf
50mKOJRSFrOPJwBA1nRQql9j9u/sCkmZj2uOZVJBTjmV/T67mcx/bxyrr+R4
bsChyffr6y/AMY2UwSz2FQAAMsn3uaoQx2T2/gIAQC6RnwnNPveZafDYpxAA
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
OaQVJW0rfR3GMetjyNxuZjtK71Hp6+fzzGBTS14DnqOeCRNUz5QpKSdNUomO
jlQvqrJy/5ylG17aNvTxp3tUg80ouSzjlr6U3onS+1AGpRMVJa0TlWS383rX
8PtpKc/Db+NVVV+LNzZeGZsx44xXzzln1mvXX9+W/PnPq5LxeKlK9aEcxj4U
GlEAFCW/JfN/R2e2P6DUz6hg9HIu+2cy/72W6e6R3GlwAH7K7+vrz2JMZr8H
87mvAACQiZ/ye67KBrPPp7kykOX+AgBALpBzjtnnvUITAAAAGCvg54ADDRzT
jAIAgLnk61wZzHI8wTyOaSQdqwSo8H9W0D+3C32cudxXAEBxEqT8nS+CWYzH
n8fx4PxY3Mj8mv0aZ/NaF9I48X4HAAAAAAAA5IOryPzvKMfq8zmfFQAAAAAA
cDi0VhR7QCtKukzV1dWD3Sa92SSXS0tLB6+Lue5FGZtU+jb029GKAkeLGqYP
FSFy8GXXP4hKXySqWkrUGCLq5Nun8XJBN9GpXURnhon+g5cf5evXd1sst3WX
lHwtZLX+d5fV+nC3zfZ/YYfj2ZDT+XLI7U6EPJ6VYZ9vXai0VPpQWyMVFdsj
lZW7YjU1A5GamlQfqqZGJUTpRNXVDTai4tJxamlJyZdjfJ+0i7RelNebahwZ
20h6KyrdKApnNJYGe1GGVpSsO9HerhKdnVr3SOtFyXakwyQdI+kvyfrpCBtR
2fSh9FaTrjSW0g52olyuoZ2l9PhlDmQZMfai0s2lA1pRlNGMSqv1mPQx6W0t
aUXxurX5kT6XvA48JwlpRE2bpvpmz1Z9c+Zo9s6cqXqmTk31omTOZDy8jpA+
hvRrEfn/7L0HmBxXma9/pvN094SeKM2MNMo5G0dSGQzsYoKJxosvGFjAZBaW
dAmNzcKS7rKYBUxcuPzXgBYwccHLXZpdnC1rpruq02gkIclykm3JshUtdf2/
73SdpqY1kmo03VU10u99nt9T3dUVvhP6lHqex6/p2obVFumGUo4ofm/zRE1w
ZVlhV5Rerf/oaEvLY3ROke71+9KSJTeOb9jw3rGLL37RtssvX/vIu941ZH7p
S52VSiVq80PBEQXAzObzwvu/z3mZHZRXTLsXwUxiKeWfKAeF9/NPBbiHJtwd
W81BTV7PPzfbCgAA9WjCf89cr9dTrMsAgJmI12ueH6NNp0MBAACAGURaeP/c
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
csHgy/JC/C9diLeNCPHBrBDX0+svUr6st7R8mY75JyMc/nwuGv203tp6XaGt
7VP5ZPKLeiJxo55M3mQkEr/W4/H/oc9GaF9Zb2/fYXR2Pqh3dT2a7+l5vNDb
eyDf13c439//VH7WrOPSo0Qp9febpd5es8RuJXY7sYPI5h+SviGbn0c6jPiz
RMI02A1kOZmkG4jT1yd9QewNkj4jPo5dRyr8nr1CzXBF1Xuj2FtENUlf1IIF
Zmn+/KqzaHDQLFC72SnFNVKfVdvELiIxiSNJ+aKUd4ndSHTOpG1RDicVW/vl
fdgfZfm3TnBG2e/NLiS+Hx+v+k15orhvOfyanUt8DB9b77tSniW764vbYo/l
idLFJI6oumStnFAnX5d9WVwn9wXPI54XljNKusTsfc6OLqvmWvtPdt86d5Ru
xaDkVSxPlLxeJHKcanmKcphyIBuJ7Kc8Sp89SNudtC3TMaNGd/etWy688Fe7
r732+4/ceOMXnvjd7957eHT05Ud37brw0N69803TTFEilBav1xIAgGt8R3j/
tza38voG9RkAU+Flwr05fq1LbQITyYjmj63moA6v19jpBgAAGoUm/LFmeb2u
TicZh20EAIDTkRber2mNWus0H9SMNRwAAMBMw+vn4qmiTbEtGR/U7CQAAOA3
mr1+Ov0NNFPW8cmSdthG4B1uzy/tNPWkXa4H8x6AmYkmmv9dzvikDqxZoBFo
wr055eS7o0i7WFezo02h3QAAAAAAAAD3uUZ4/7thutEb3SkAAAAAAGDaSFdU
e3v7VR0dHTclEonxSCRygPbVXFHsabK7ovg9u6L4tRuuKBW+P9VxtrqiWjYK
ETSEiNwiRCInRIrSnxdimLbLRoVYr4dCl+SCwcuyweBLC4HAVUYg8JbRQODv
cy0tn8q2tNww0tLyfdr+jN7/drSl5ff0+pZcKPQrPRq9WY/F/l1PJjfm29t/
YnR0/Ia2f9Tb2u6lFGn/dsr9lEdo/z6js/OA0d19uNDbezTf3388P3t2pTgw
YJYoZc7s2dIVVeztNQuW30m33EM59u7Uu4xU2MvDviT2F7EfieaQ9EPxlv1F
7EhibxAfw04gW6RjiT7LN8MXxdezh9pT6Okxuc3SETU8XPVG8ZbeF2h/ntrO
tUsPE9fIbatvs/IhKU8U165cVHR+kfuQ3Vu05fvJvqwPfQ8Mq2905eJSfqfJ
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
UlZRBuha9fb5fE+Gq6sfTLS03BafOPG6pQce+MMVJ5542YpPfOKC1V//+jlr
fvzjD66/8cZjNt5996FbHnpo7qYnn5y6fcmSrlQ83roxHq9PrV1bKVesKJVS
einFcEQBAEbgOKHvb2fsoLpUY/ujyfm5mTYAcsIaofd+/23+hgIyKIR/NuH2
ejuWBB2MDwAAsoHXFZ3rlhPcXlt1f+8AAMBIuL2GjTahLMdpFEDNWNMBAAAU
GkHh/nffaJMtbtfrJKFRjAsAAHRQCGtdSHMdbo8PFCaGyN+9YjioZ299DrIZ
IwAgO3SvC06+xwzNNeQjYP8mX9+vTp6nfNeEZwsAAAAAAID9g1nC/d8PcpGq
XE8MAAAAAADICWlXlMfjGeKKKi8vN91N9fX1pi+KX/M+5XHi5MoXxe1we/ya
vVDKR6X64T7LyspMV1RpaemaioqKtCuKxjBaV1SRtEUMxhFByxPVK0R5VIg6
SkdYiNl9QhxB+05Y4vGc3OvxnBLx+U6JBQInRaqqTojU1p7Q39BwUryu7tSB
+vqzE7W1n41UVFzSW1b2o76Skht6i4vvjxQXL+wrLl7RW1S0jtrayf6iWFGR
jJeUDPpz2KlD88GOqIRyNimvEHuLxo+XSSu8j71D7BlKu6LYTaQynLco0xHF
fifleKLPTScVu4y4P+6D+uT3fL7pfmKPEbuirJiuImrHdFMpD5LdMcX9cn90
vU2nlN0X5cQZpfxIyg010jnZxu6MUt4orovHRGOM8tywM4pdW2pcyvGk/FC8
n/1QPK80xqjlalIZ4uHi8NzzHHObljcq3Sa3x23ZXVE8brsryj4fym/F14F9
S3Qd+ihLKAtp39N0/pP0+SOUf9Pre2n/X+ka3EL9/476/Rld1+93d8tvTJ4s
L5w5U3529mz5iTlz5OmUk+n1cbNmbTtmzpznTznkkDs/d9ppX7z5pz89dlUk
siC1a9eBKSkPlVIelUqlTky99dZHdy1fftGm++776Ws/+ckdq84994llRx65
LDlp0nqao11RHi/NRZzGZLqi+H5h31ggkKK636LsojFsC5eWbg77/Rto3K/R
uF6M+nzL6HWEPns6UlPz71hz81/7e3r+MDB//v+uOPbYK14466wvrr7ook+8
dNVVp71+7bXHr7vjjsO3PPDA/E1PPz19w7PPTkglEm0ymWxYt3BhtVyzJgA/
FAAgC24U+v52djHlUY3tjyY9uZk2AHLC74Te+/0P+RsKyED3WmYUQA06E3Qw
PgAAyAZeV3SuW05we23V/b0DAADDoXv91Z1scbteJwmNYlwAAADAaHH7e28s
MbIca7AAatYxLgAA0EEh/M4T0lyH2+MDhUu+fmZwcq8YeaoFzwMAew+6vx/3
h7VJOhgj2LcxRP7uNaMAayqE8QIAAAAAAAD08knh/u8HY00i57MCAAAAAABy
RdoVVVJScitlD1dUXV2dGfY16XJF2cPtsytKOaQ4vC8QCMjS0lLTFUV1pF1R
VEdWrqigEMV3COFh11NUCB/9wOrjbUiIEv7sXU43nVJ8/lM0d2EhatkTtViI
OX1CHNNXXHxWrLj481Gf76KIz/f1vkDgkmhl5deiNTVfijc2fqG/tfWL/W1t
X0u2tX071tp6dayh4YZIVdXfIn7/o+GSkghlNWV92OPZQW3JaFGR6YqKejwy
yp4impeY5WxK+5o6OmSyq0smu7tlcsKEwW1n56DHiR1DyhNF1yvKziK7m0hF
7WMXEbuM2N1khT1OMeVGYocR+4ssLxUn3tYmaRx7uKJM9xOdy44p02tF53Bd
6Tq5RvZZsVOJ68v0RXGUD4nmIKL8TcNF5MALNZKTyu6N4nrYwcR1VlSkPVpp
xxP7nJQfiueV54SOY2dWOuya4nN5XpUzSjm52KvFbfE8KxcYz7Vya/H1U3Os
nFqZNdqdUVRrmOazl7KY8gzlcdr3MOV+auNuquNWavMP1PYv6Fr8kK7Nt6dM
kV+bMUNeMHu2/OScOfIjc+fKD9D2+Fmz5JG0/yD6fM6kSVtmTJy4dNaUKX88
8j3vOfuL3/zmnMiLL46XUo6jdKVSqcm0nUvb9+5csuSc1//wh+Car371jys+
8IFHBubNG6Drvi5aXf1WjOeB54Tmk+aU/VC7o4N+qO2ULeyHorxOz8camrvn
Y+XlMTrvuWhdXSja1vb3ZE/PTUvnzfvZ80cfHVx55plfWfXlL5/74ne+c8Yb
11574rpbbjly69//fuDmUGjmhkWLJm4dGGjfvGxZ0/oVK2pSvb3lVJ+P4oEf
CgCQJa8IPX87e5MyWVPbo82qHM0ZALniNKH3nr85f0MBGehez4wCqEFngg7G
BwAA2WAIveuWE9xeW3V/7wAAwHC4vX7le/0LFUDNWNcBAAAUCkHh/nfeWBLK
crxGAdSsY1wAAKCDQljnQprr0JWgw/GBwiZf95/hoJZgnmpxc4wAAOfoXp9C
DmowNNeQjwCQr+9XJ8+UQvfzXWjjBQAAAAAAAOjjGuH+7wdjzZ9zPisAAAAA
ACBXlFF6SktLzyorK7uVsszr9aZdUexpUk4o9jfZXVG59kRxu5zM/dwXb5Ur
yu/3r6E6H6I4dkVJy+/EfqgVQpSGhKh4XYgqel3DvifaX71GiAB/Li0flLVN
ExSiWA6mZEAI/xI6lz1RlLkRj+f4Pq/3UxGf74o+v//n0dLSP0TKy2+MVFRc
H6mqui7R0PDLZFvbNcnOzl/GOzquj3d33x7v6nog0db2RLS+PkzHLY+Ulb0c
Li3d2EdjDPv9u4e4gNj/4/cPOobY2aRcUcq91NMzGHYwdXUN+oXYE8XeIssF
lemAMt+r8Ht2GnHYZaRi7Us7kdiHxO1y39wHu55aW00XFbfBDiWu06yVfVF0
rumKomOS7LSiGvunTJED06aZW67X9E01Nw/WaXmVTBeS1Y7pZrK5o9jXFFbz
Iob3Pg1xS2UeYz+W3UrcluVWMre2mJ8P44wya+ExsjOK50n5tJRry+6Iso+F
58TyRaVdURzl5KLXceUCY0+U5eNS3i92UJntWq6ocKYryjb+qOWM6qNxLaJj
n6F5fIRyH517B7VxI833r6nNH9M9FJw8WV48fbr84uzZ8tNz58qz582TH5oz
R54wa5Y8ivYfMnWqnEfHzJg4UU6k+2t8e/uWltbWZOu4cde3T5v2ocPOPLPn
Z6FQjZQykEqlqlJSNtLrCbvWrl2w/rbbPvzSJZdcseLUU/80sGDBE3TfP0/X
egPdK2/xte3z+VJhn+9Nem520nYrvd8U9nrfoLxMz8ELkUAgSfO5KNrY+BjN
wz+XTpr0p2Xz5/9yuWF8b9Vpp31t1f/8z/kvfvObH33t178+ef2f/mRs/Pvf
D978n//M3vjMM5O3LVzYkVq+vFmuXFkrX321gmrzU10llHdzwgEAwHAcKfT9
7ewWyrka2x9N7s3NtAGQM8qF3nv+L/kbCshA93pmFEANbo8PAACywRB61y0n
uL226h4fAABkEhTur19jTSjLMRsFULOOcQEAAACjgb9v3P7OG2uMfXTM2Y4L
AAByTSH8vrO3rNmZCTocHyhsDJGf+8Xp8+D2fZ2PMQIAnMHfM24/s4bmGvIR
AJh83W+Gw3p0P994vgAAAAAAANh/eEy4/7vBWPO1nM8KAAAAAADIFaYrqry8
/KzKyspbA4GA6YqiyIqKCtPTpFxNw7miRvI7jcYTxe3zlttVbWe6ovx+/06f
z7emtLT0XV1R0uaHSgnhDwlRwV4oSnNEiPFPC9H9rBATEkJ08Xvez86o0KBL
qoTPlW97o4qjQvhoW/qEEJWLhWjs9fu7417v/CU+38l9fv9n+srKvhMpK7s+
Wl5+b6S8/JFwZeVj4draULSh4T+xtrZ/JdrbH0p0d/+nv6fniWRPz+LkhAnJ
xPjxL8RbWl6O1de/Eauu3hypqtpJeStSUZFiD5HpA2JfEYf9ROwZYicRO5vY
JdTRIRPshuruHtzye9rPriH2CsWUB8pyP/H5ps8pI1EVdhmpfdyX5TUy/UTs
NOI2qW32Q5lhx1Njo4yyi4rbt7udaMvns2OKj2PnEbuh+qdOlQMzZgz6oiZO
HHRFsQepvn7Qt8TOJOWtYk8Vx9oX41q4PmrbdEZZrif2PKk+0/3zPv6MnUl2
l5IY9ESZ+7kNy/uUngc1bst7le4n0xfFbatx2hxQZmznp2vh8LFWH+lxDeeK
4vliH5fdFWU5ufi4PeYgw4lF97OMWnUupjr/S8c+TLX8jWq7meb453TNvkft
XjZpkvzyrFny/Llz5Tnz58sPz5snT54zRx49c6Y8lK7PPPp8Ot1bk+je6mZH
VGenbKG6apuaNlfW1MTLq6quq6yvf3/r9Okdh5x+elkwGCxmF1Nq7drKbZHI
+A1/+tOC17761TNWnXLKtwfmzr0t1tn5XLS2dnWktHQj1b6rz+PZ3UdbugZb
+rzeDbTvVcqqsN8/EC4v7w1XVz8Za219IDFhwm3L58797QuG8f9Wn3rqpSs/
+9nPr7riio+98rOffWDtjTce88bddx+6JRSau+PZZ6dsX7Kk67V4vHVjPF6f
SiQq5YoVpcoPRSkabq0AAACH/EDo+9vZ6WLQte723/Ds+UFupg2AnLJI6Lvn
/5rHcYCh0K9fWtczw0ENbq+5uscHAADZYAi965YT3F5bdY8PAAAyCQr31y83
fjYNFUDNWNsBAAC4jSHc/67LRUL76LiDWY4LAAByDa+vbq/dOmvAGg6ckK97
0HBQSzBPtegKACB36F4PQg5qMDTXoDtOxgj2DwyRn3sumEVNbj8fuYiRxXgB
AAAAAAAAetgi3P/dYKw5OuezAgAAAAAAcoXpiiotLT0rEAjcWlZWtqykpGSr
z+cz3U3KFcXuJn7P/ijlb1L7OLlwRXHbdleUckepvtgVRXXt9Hq9a2j7EOXL
9HoO1W93RRUFhSgOCVEyIIR/oRCB5fT5MiGa2AcVE2JSnxCzFguxICzEobQ9
bIkQB9H+ebSdQdvOeGVlfW9zc/kKIUoHBh1TpdwOva+JBgIt7IiKVlRMj5eV
HRLx+d4frqj4XKS8/Lu07/pYZeUDkaqqxdGamoFYff3yWFPTsnhLy0C8vX0g
0dk5kOjuXpbs6Xkh0dPzUmLChLXJzs4Nifb2LbHm5h107JvRhobd7AOK05hN
z1NpqekkMl1A7CZiJxE7huhz9kGZvqhx42Scw76lhgbzM/Y6RZVXiduwOZzY
jRRWbqVMv5L9PZ/HUf4kdjexy4l9Uews4tBr0xNF1ypiua3SXiQO9WvWy2Nq
bTVdVjR+2T9pkrml8Q86pxobB9vjcVN7ZtiZRPsT7E2isSV4vHwcH8O+JPZe
cWicaecSh+u0xm7On80bpbxbyhOV9jxxjey04jrZw8XzyGOj9sw+LOdTWF0L
y8OUbs/yTQ3nmooon5N1XNQ6LpZZt3ptXdsEzxf7otrbB68xu6K4Lr62lisq
8g6uKN6/hD5/hj1RNMa/Uk1/oOv3I5rDy+g6fIGuwSenT5cfmT1bnjJnjjx2
1iz5nhkz5IFTp8pZEyeafqjO8eNlK91j7IdSaaRrUVldvbnE748XeTzX0nN4
cl1d3Th69nz8AEp2q113XWDdFVd0rjz33MNfOPbYjw/Mnn1VrK3tbprPPrqn
XqF7cGufx7OTsqOvpGST6YjyeleES0ujdD2fjtbW/is+fvyd/TNn/n7ZYYf9
ZMUHPnDFqk9/+ouvXnHFx1+5+upTN9xww3Gb/vrX96x/4IH5m/7732kbnn12
QiqRaNuUTDakXn+9auHChQEppRd+KABAjqEfIbT83WwbxUtZo6n90ebs3Ewb
ADnlu0LfPf+PPI4DDIV+5dK6nhkOanB7zdU9PgAAyAZD6F23nOD22qp7fAAA
kInba1euEspy3EYB1OwkRpbjAgAAALIhKNz/rnPrOzNUADW/W0JZjgkAAHKN
zrXS6Rq3N6zXwyXocHxg76CQvvf31meCYzgcIwDg3eHvGbfXJENzDYWy7oL9
g3x9vxZaPXjGAAAAAAAA2HeZKdz/vSAXqcn1xAAAAAAAgJyRdkX5/f5bvV7v
EFdUfX29rKur28MVpfbx+1y6ojI9VCO5okozXFFBIYopJVEhfKtoTE8LUbVQ
iAbatkdofHH62Toy6Ic6io45kban9grx0cVCnL1EiI/0CfHBsMdzXLSk5KCl
VVUT4w0NrS+2tdWb3ighmujz9pjPNylSUzOH9h0aKy8/NlFR8WHTE1VZ+R3a
f32iru6+WH39onhj48p4U9MbsebmTbHW1k2JceM2mGlvX9/f2bku2dW1IdHV
tSXR3b090dm5K97R8VZs/PiU6QVqbZVJ9iKxH8nyArETKGx5jkwnEXuIlFOI
vUbKs8TOJvYksdtI+aGG8SSlXUcZvqN0+FjlkmIfEbejnFHsYGJXEV0nM/ya
+lQ+JT4vbHcysd+K3UjsQbLcT+y0SrS1DTqiaJwxVT87qPgY9jWxI4rnYvx4
mezulv0U9kol6D2fy/NjtsVbbo/b4tBr06HF88LtcY1Uc0R5m9R8qLEpT5Ry
WXH7HR2DaW8fbI8+Mx1Z7KeidkzXln0e6XeesBqnmiMOXyfLVZWeD+XPso5j
r9UQVxSH+jLngMfGY7LPFdeS4Yoacm2tPqJ8z1Dfi6iGx6mPe+ic69kTRed/
ndr7dFeX/PDEifL4yZPlkVOnyoOmTJGzJ02SUydMkBNonsfT2JvpuAYafx3N
Zz2H+m+kNNC8l5eXby4uKqLHSvze4/F8iJ7PTmFzRa0977zKVz/0oZ5lhx56
zLKpUz9L1+tqmuf7+vz+AZq/DXSf7OwrKdlO2UBZE/b7YzQfT8QaGu6h63zT
0nnzfvb88cd/+4VPfvLLL3/965969Yc/PP2N3//+xE233Xbk1n/968Cdjz8+
Y/tzz/Vs7etr39zb27R+xYqal3t7adKjPimlB34oAIAGpgh9fzf7C2W2xvZH
m5k5mTkAcsthQt89f38exwGGEhJ61zPDQQ1ur7m6xwcAANmic91yu3/dAQCA
bAkK99cuN9dBt+t1ktAoxgUAAAA4xe3vOTe/M40CqNlJjCzHBQAAuYTXVrfX
bZ01YP0GTjFE4dw3+arFzeceAPDuGML951V3DViTQD4xRH7uO6PA6tEdAAAA
AAAAgHt8Qrj/O8FY05/zWQEAAAAAALmkzO/3D+uKYk8Tu6LY1cQOJ3Y3cdjb
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
QcN5moZxPoUzfE8RFeUfsrxGaX+UlbQryuo/ZrmOzDqpjojyIlltpM+19T+s
K6qiwnQhmd4m9iM1Nw/6otjfxD4t9mix76mn522nFr1mr9PAlClyYMYMOTBn
zqAjypalvOX9s2aZ/iduI2HNLzujzL7YycSuKNqXVP2xn4odVNwuu6LofNM9
Ra+TkyfLREeHWSOPm+fSHBuNy7zOma4onhc1txx+bXmiopmOKJ4DPpc9VjZX
VJxdUbTfdI6pOR7GFcXH8bj6Wlvlf2mc99F4b6C6rzrgAPlZmov30RzMp309
VH8LjbeO/VD8/FpeKPXMpV1RVvjZZHebzRUli+laeulZrK+vf7xzwoSfzD3s
sA9edMkls3p/97vJr37uc3OS06a9j+75L9Pc/IGetaf4maPnbT1t19F2JT13
T9Oc/Zmu/5XR5uZP0fU6bvVHPzp73aWXdmy6/vrGdf/+d3Wqt7fc8kN54IcC
ALjIe4S+v5tdQKnV2P5o8385mTkA9NAj9Nz3z+VzEGAIQaF3TTMc1OD2ujuW
AACADkLC3XXL7bV1tAk5HB8AACjcXrcKZT00CqBmrPMAAADyTVC4/92mK0aW
cxEqgJqdBAAA3EDn94XT33H2lnUa6/b+gSEK5/7R+XzqTtDhGAEAI2MIvc9p
qABqwFoE3MAQ+bn/nBLKUz06Y2QxXgAAAAAAAEBumCHc/10gF6nL9cQAAAAA
AICcMsQVRdshrijlbLK7otR+uy8qF64oFeWnsbuieEv1SV9JyVuVXu+GHq83
8YGSktt/4PFc+UBx8Vf6KJHi4m+Ei4p+2FtUdO0SIW7rE+KBsBBP9ArRR68H
aLuatq/Rdj3t30ivN9PrTZS1dP6KsMezJOrzPRouLX0g4vffHfZ6/xrxev8R
8fn+HS0vfypaXd0Xq61dGqurWxWtq3uVtutiNTWbozU12yM1NW9Gqqp2Ryoq
UsoPZfp8bGEnE7uVTJ9Pc7NMWC4kdhelQ+/jra2mu8h0A7FnyO6AYs8S+4HY
r6RcUfb+7K4oux/K7oji4/gc9jwpNxH3xW4jfs9+I3YS2RxH5nnKS8TnKi8R
1Wk6l7heem+2wQ4k9hnxucobpaL8UPwZ18z1c39cA7enXFGq3ZaWt+eJM26c
+T7OW/Y6Wa6ttEtq8mSZnDJl0PM0e7ZcOm/eYNgbRe8HlC+qo8Nsy3RGKR8T
98n9cdvs8WJvFx3bT23yedye6YuaOlUm6DM+luvmsaQ9WDw/7L3iMVm+MNOf
Zb8f1LjfyRVVXy9jXBPPAXuzaGu6w3h+7e4pmlO6Z2WM2ozzvcX10BwuorGE
aJ7upHn5+cyZ8lIa/1mzZskjaSzTqPZ2+qyBjqmxPGyZz6H9GVeuqHLql1+z
K4qPKaF7zefzbamvr4/09PTceOLxx5/3mwsvPDZywQXHL3vPe85ONjdfGi0q
+j09X49SVlA29BUVbaKaX6FxRmIdHQ8kp079+bJ58z6fWLDghGXHHDNr7Xnn
tb0eDFbJhQuVH6rY7QUSAACIy4S+v5tNpxytsf3R5taczBwA+nhZ5P6+783r
CIAdQ+hd0wwHNbi97o4lAACgg5Bwd91ye20dbUIOxwcAAExQuL9u6YyR5Xzo
/O7JZQAAAIBc4fZ3ms6EspwLowBqdhIjy3EBAEAuCAr31+uQxhp0Buy75OOe
NBzUYeShDreffwDAO+P2c2porkF3gg7GCPZP8nH/GQ5rMfJUj9vrCQAAAAAA
ACC3fFy4/7vAWLM057MCAAAAAAByTdoVVVZWNsQVxX6YTI+Tep/pkhmrK2ok
fxRv7a4of0nJ7tqSkq3Tvd7V53i9oV95PDf/x+P5dZ/Hc22vx3NrX1HRP8NF
RY8uEWJxWIhknxAvUF7uFeINykbat43e76K8Se/f4i3v6y0qWhcuLl4d9ngG
+oqLo9ROr+WYilLbSyN+/8pIIPBKtKLidcrGSFXVNsrOSGXlW+yIUl6gWGmp
6e6Jer0yzN4mK3bPkukEqq8fdBOxB4j9RK2tg2F3Ee9n7xK3yV4hdgJxG+yJ
4i23z64o9g0pV5TNy2Q6oZQfSjmiVA18HJ/DTiL2Mlk+JtNPxQ4mDr9mN1FD
g4zR3NMYB91SltdJnWc6lTo7BzN+vHlujMYTs7xRMeWNUjWqNngf909tKydS
zPJNpb1NvF/Fvo+P5SiXFM+f5VJKj4MdUt3dsn/KFDkwY4YcmDXL9ESZrqiZ
M+XA1Kmyv6dHJtkXxePltmz9xS1HE18L5aPqZ2cUncfOKHZH8ZhNVxTPD12L
tJ+L55nvAeXvynSGWY4sNQ+x4VxRPC9cA4+L7wmeZ/Za8dxa90XEfl/QdY1R
2wm+/6iNJfQ8PkVt3EfjuoHq/y6N9TNU8/smTZLzqe5uGnMjja+Gxlqd8exm
PuvKB8drgfLHNVBtvPVR/7RmbG1uaVl2wNy5d335zDMve+hzn/tc8v3vv2Tp
zJnX0NzcTc/RM738DBYVraf52BJtbFyXnDx52fNHHfXYqo997OaXvvKVK166
/PLTV1522QGrg8H2gZ//vEpKWeL2oggAABncK/T83Wy11f5XNbU/llw39mkD
QCvXi9zf97G8jgDYMYTeNc1wUIPb6+5YAgAAOggJd9ctt9fW0SbkcHwAAMDo
XGsLIdmuiUYB1OwkRpbjAgAAAIYjKNz/TtOdbHG7XicJjWJcAAAwVgzh/roW
0lhDIX0Xgb0HQxTO9/7e+nxIgb9xAJAL3F6HDM016E7QwRjB/gnfG7rvPyfP
mMLtZyUXAQAAAAAAAOSXnwn3fw8Ya27P+awAAAAAAIBcY7qiysvLzwoEArdS
9nBFqSgnFHtkKioq0vty7YriflXfykfF7y1XVKqhpGTHfK937ee93vhNXu9j
j3i9D0c8nkfCxcULe4uL431FRSsoayhrKRvCRUWbabuD8iZld4R+VlUJU3qF
SPUWFe2kzzaxM6pPiLWUVymvUF6j/W9ESko2hH2+rZQdkdLSXeGyst3RQCAV
Y/cTp6zM9PVE2d2jvEH2ZHqehvMlcfg17TM/p3ZNHxA7nvh8Dr9WbSj3knJF
WceabihbIjZXlel8YkcR+56am2WSXUhdXTLJ7qSJE2Vy0iTztelCos/YVWS6
n5Szic5hvxJ7lkwfEx3PDqXk5Mnm+YkJEwbdUew2Yn8Tu5fYG8Xj5C23oxxZ
7HVSjire8j7lbeJj6dqb7qTM8H4Vfs/jofvRHJdyYFE7Saqhn2tkzxN7o6ZP
H3RHDeOKiqkaVZvWdUk7o6gtnifzPGqTHVJ8Hl9D0xXFc833E11rdZ2HDd8j
yhVFNQ/rilIOL6qN+0lwnZQ41cBzx76u9L3BfVHYTcaesjDtf47a/Q/lNhrL
z+j4i6idD1M7h9L5U2iex1Hbdex7ojGO5Gjj5423/OzVUT38mtaItCuK35fR
OGpqa7dOmTHjhQ9+8IP3//KrX/3pM1/84k8GTjnl5oEDDvgP1dxH41nZFwi8
QXO5MTFp0rplhx++csVHPrLwpSuuuHvdH//4v5v+9a/Pb3jqqWM3/ve/k1Y9
+GDdwMCAX0pZ7PaiCAAAGWwUev5udovV/m81tT+W/HTs0waAVk4Tub/v8f89
cA9D6F3TDAc1uL3ujjYhB2MDAIDRwOuLrrXLCW6vr6NN0OH4AADAEO6vWflI
trhdr5OERjEuAAAAIBP+3cHt7zTdCWY5J6ECqNlJjCzHBQAAY8UQ7v9+s7es
0ZkB+zb5uC8NB3UYeajD7TUAADAybj+jhuYadCfoYIxg/yUf96DhsJZQnuop
hLECAAAAAAAAcsOjwv3fA8aaS3M+KwAAAAAAINekXVGVlZW30tZ0RbEHhn0x
ygXFzhgOv1beGPZF8etceqKUh0r1rfo1XVGlpbK0pCTV5PW+dZDXu/Uir/e1
W32+FU+WlCwLl5Q8H/Z4XgwXF7/WV1y8PlxUtIm22+n9Lspb9DrFDqcoJcYp
KpJR9vpYLqe+oqJUWIg3+4TYSdlB2U7Z1stb9kxRO32qHY9HxrxeGff5zPDr
IY4oIfYM76fP074ndjux78dyHJn+Hw6/prll/5B5jPJE8bkc5SGiz0xHlJWI
zRWl/EFDYrmi+Fj2EcUbGgadT+xSmjxZ9k+bJvtnzJD906cP635ibxT7khLj
x6edSXye6V6aPVsOzJkj+2fNMttI8vmWb8p0HbHziMPnc3gftWM6kGhrOqnY
2cSuKPZl2T1R7E9iBxTH5lQy50nNlRo7u7D4teViYt9Tgl1P7HmiWsyaLRdW
UvmsWloGXVHshlL9qXANluPKnC92RnHtXC+9Np1edP2437QrSl1r5emyR10D
VV+mK0qNkdo1nVw8V+zkYpcXxfRFZfQbse67qHV/Lab3T9Bc3EN9/I7au5KO
/TTVfjzNwxxKF71upPHwM1U9guMt8xmsr683t+o9u6L4OD6mpa1t2yFHHbXy
s1/60sN3XHPN9bGrrrpx5QUX3L/yjDMWLz/uuOX9c+a8HJ88+bX+2bNfef74
41esOvfcJS9985sPrv/jH3+77emnL96xevXpW9euXbD19dfHvRqNVshQqERK
WeT2oggAADYOEvr+bvYZq4+HNPYx2nx/zDMHgF7KRe7v+xfyOQAwBEPoXdMM
BzW4ve6ONiEHYwMAgNHA64uutcsJbq+vo03Q4fgAAIDXC7fXrHzEyHJedH7/
uDkuAAAAIBO3v8vykVCWc2IUQM06xgUAAGPFEO6vaSGNNbg9NrD3YojCuY/2
xmdEBQAwNtxegwzNNeiO4WCMYP8lH9+vhsNajDzUojtBh2MFAAAAAAAA5IbN
wv3fA8aa43M+KwAAAAAAINeYrqiqqqqzampqbq2srFxWXl6+NRAIpF1Qmb4o
N1xRvJ/qZFeUbPF6U4f5fG9e4vNtv8Pv3/Skz7e+r6RkfdjjYT/Utr6iop3h
oqI32esU9XgkJ0bnmbG8TlHl71EOJssZ1StEirK7T4i3OL1FRbt72SNlHcNO
npjlm4qq861zh3VEiaG+KD7W7Ff5m+yOIxV+r7xP7BxSDiq7K4qdQ+yLYu9Q
5jmZsfWVdkU1Ng46lCZMkP1Tpgy6otgTpXxR/J5DnyUnTZKJ7m7T/WR6i/gc
2jdAnw/MmiWXzp8vlx5wgBygbdoZRZ+Zvin2MtHx7KQyY3mPTFeT5YoynU2t
raYfKTaSKyrDqcSupLRTi8dNY1R+prA1vzwvfHy8vl4mlHtJuZ6Um6qpyfx8
WFcUR+3jOWNnFB9P4RrZVWX2z32/kyOMr7m6djZXVHSYcZmhsaevD8+5be54
H8+R6cni68/3NvUTpdB9K5+lvv6P5uN2av9n1M5X6diPUL3vofam0DjbaF+d
9TwP9/yp/fx8c4ZzRTVSW6Zrio7r6OzcdtQJJ6z66je+8ci9t99+8/N33nnL
a9df/+Br11yz5JUrrxxYee65K54/4YRlzx9/fOyFj33smZcvvfS+tddc8/tN
//jHN7ZFo2ftevXVw1OpVI+UslZGoz76JRKeKABAoXGh0Pd3s8lWHwMa+xht
vjHmmQNAP0tEbu/7NfktH9gwhN41zXBQg9vr7mgTcjA2AAAYDUGhb+1ygtvr
62gTdDg+AABwe73KV0JZzotRADXrGBcAAABgh39vcPu7LF8xspybUAHUrGNc
AAAwFgzh/u82e8v6PJqxgb0b3fem0/vI0FyHzhgOxwgAGB631yBDcw1Yg4Cb
GEL/PejkOVO4/bzkc6wAAAAAAACAsTFDuP87QC7SkOuJAQAAAAAAOWeIK6q2
tnZZdXX1VuWD4rAjRnlklEuG99k9UrnyRNmj+qyrqzP7K/F6pbeoSLaUlMgj
/H55eVnZ7rtKS998yufb2VdSsjPs8bwZLi7eHS4qSkWU00l5otgRpbxMvFVe
JXYKscPH8j6x16dvMIN+KHZNWZ6pKPuhlO/JqR8qI+pcsy9Oht9oiNvJqivt
irL7ouwuqJEcUXZXFLfPc1BW9rY/qaXFdDWZLqeJE2X/5MmD3qipU992RdFr
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
OWDfQPd95QQjD3XguQGgcAgKfc9kyEH/hsb+dcfJ+ACww/dMIdyThuY68OwB
AAAAAACwd7NJuP9z/1hzUs5nBQAAAAAA5Az6ga3oDiE8tC35SnV1zZHl5bN6
AoHz60pL/1ZdXv5CXU3NNuWYUc4m5Ymy+6F0OKIyXVH8WrmiOv1++d6SEvnd
0lJ5X3m5fI72xdkX1dpq+qESbW2mXynGnij6jF09yncUGc4VZXcc2Tw/EeX5
sbuOLJdRzO5SynQEjeSM4v5pn+kDYu9UY6Pph+Jazdc0j8rRZB7DfVnH8biS
XV2mB4v9T3u4opQvit4vnTtXLp0/38zAnDmmW8r0Z40fb7alXFfpsWQ4m4Z1
RbFbye5MGilqPpXPaZj5e1dXFB/Drii+bpmuKLsvKtPTlIUrKl2nckZZbqgh
fqgRxqZcVcoDFVEZ6V7g49gRZndGWV4oM/wZH2MLtxUuK0tR3qJsX1xevunR
pqZNf504cedvDjgg9b0jjpBfNgz50aOOkicfeaQ0Dj5YLqB7YCZd50nd3aYj
ahw9D8r1NprnjqOe9czPuU3livJ4eAkZdEXRa9MVRe+7KGXurnAAAJAz1go9
fzf7uq2PH2nqIxeZPpbJAyCPVIjc3ffAPUJC33pmOOjf7TVX59gAAGC06Fq7
3Owb6zIAwC3cXp+crldGHvrOFrfnyklCoxgXAACA/YegcP+7yp7gO9TqZt/D
ESqA+XISI8txAQBAtuhaD53+LrO3rMdYm4Hue9VwUIOhuQadcbomAADeJijc
fSYNjf1jzQGFhiH035dOcfv5ydc4AQAAAAAAANnB/w2W2z/v5yItuZ4YAAAA
AACQG4JCFEeF8K0RIrBciOpflZZ2nltaevghZWUXtZWW3l9bXr66prp6O3ti
2NVUUVFhhv0x7Ihhh1RdXV3aI2N3y+hwRfGW+2qkfRMCAXm83y+votxXWiqf
VT4i9h8pD9JwviPla7K8RxHLFTQk7BeyopxAdmdU2vFjeYz2cANluovsDiPl
JGLPELehPE1Up+me4ra5H+UU4s94PDTP7JQyfVEdHTI5YcKgM2ryZNk/Zcrg
ljN1qumFMn1RyhU1d67pkOLP+Dz2abFXix1U5jwpZxTHeh/N8EVFM+ZvWP+S
yHAqWV4snnuzDR6j8kA58EWZfas5Vq4oW/sRdX0y5912LcLv5IsSNmeUQwdW
+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
ex0/c+bI5QsXmmEfEruj2P+TmzSp14FEx2bZ/cNuJ3YGsc+IXUbKHVXsi1Ku
KDqWv5un85ieqFmzZPvs2bJ95kxzH7uV+HymE0l5jbhWep22u6LYY6TcScoT
pZxJQgwc/pz9Snxey4vE9fadV53bclFlOMolRX3NNjTI7LhxpjuLx4T9UB08
Tief3JuTTjLdUaZni/s0ebLplupzYHGt9uvBfeT2Lf+V8lVlbH4o/swcV+WJ
4rqtcTnMicXXtdgTNZAvqjh8TqsOs790P5huLLrGfL1y3Gf2QFG/cy0t5hiY
15/dUeyR4tTXm/dQbvx4M6Z3jK6peV1bWgqZxsZuGseDyUjkAPW7s83jOUjz
rIvGoovdULTtbrP5oWi7i7bbKBspq+jzVFtFxbOpyso/0L3z40fPOeeOr771
rc98+G1vy1x2/vmJN73hDU81jRvXEYlGd1RVV3fVaJqDxed04oqi9QGuKADA
aOSTQs/fzlYXtXOFpnbKlfsHN3wAuMJ0MfR7fsywVw0UhtC3lhkO2nd7vR1s
AABAJwnh3trl9vqKdRkAUA7iwv11yZ5EifUbw1DTSKvHjXEGAAAwOjGE+8+k
4hgl9iFxgtXjVr8AAMAJceHuv1+OlzXYHnBiYwj3n/e65u1wxOnaAADoxc25
aGhsX3fiDvoHQH8YYmQ8B3XXoTsAAAAAAACA8vI94f7v/KHm4bKPCgAAAAAA
6I8+P1RciIoHhPAuEcK/SojQM0JUpoWofUmI5qQQU5YKMbdNiDfmhVhE+z+S
EuKrtP8Oyh/p9ZLnPZ61j3q9O28NBA6+MxzumRWNFuorK/scTeyGicViMhKJ
mM6ouro6WV9fb275s2g0an5eTlcNu2iUn0Z5qhooyhX1LXZF+Xxy8dF8Qsq/
pBxODQ0yP2GCbJ8yRXbMmiWXz5/f64qiLTuR2tkZxQ4k9kbRMXnljVLeIOpz
mmoznUjFvih+HQ6bHiRuh11L+WnTel1RfE7ami4q9ipRv8xzsBdJ+aIoaeW2
Yq+TFbMdOsb0Px3LEyXEYc4sc1yUV0nVaHdHWT6qjHI4Ud+UP8l0IdEYcN3s
0upYsKDXFXXqqXL5Kaf0OqNoH3uw2K/FviX+Po+1WauqxXJ29fmirDbNqP5x
uC77ePD3uH57eF9/nqhiV1Txfr4HuJ98D7DvaexY8zqwEyrX2mrWb/Z15kzT
IcbXi6+d+Tm7ofg7NC4c/r7p0+JrzOeheyPT3FzIjB3blR4zpjNdWbmrLRze
3hYIbF1WUbHNckFtWybEdtrupO0O2m61/FCvUjqob8uSgcDT6VjsETrPf1MN
t65629s++6d3v/u6T5933ncve+tbf3zR+ed/Y8HChT+sqa9/IhCJrI5VVu5X
c4OdTSpVNsfbUOaf3RflxBVF8x+uKADAaOR6oedvZ7mids7V1E65ckhgXQfH
F9vE0O75xuEvGVgYQt9aZjho3+31drABAACdJIR7a5fb6yvWZQBAOXB7TSpO
fBB90PUsUDFGWD1u9QsAAMDog5+7bj+PilMqhuZ6EiOsHrf6BQAATjCEu2tW
QlP7OgNObAyh9/4yRkANOuN0bQAA9OLmXDQ0tq87cQf9A2AgdN+fI6WOkdBH
AAAAAAAAgDP43/Fu/84fav6j3IMCAAAAAAD66PNDcZQfqiBEkH5IxpJCjEkL
0ZQRorVNiJlpv/+kpT7fmSmv9/ys13tZqqLimraKipvomDvo84dSQjy3TIhV
z3s8Ox+tqOj6fiBQeHckImfHYrKWtlHasiOGvTDsoGEnFPtheJ/yRbE3hh1S
/Fk5PDV2N01/rqjp1L7pigqF5CN+v3ze5+t1E9mSsjuFlC+KXUF0viz7fdiD
NGmSbLdcTuwHYlcUu4862B3Fr9kZNHu26Q9ib1B+8mTTHcTf79cXpXxI7F2i
8co2N5vfMX1RM2bI9unTzfe8nz/n49gtZX5X1Wt5jQ7zJ/F5uY92H5ZTZ5QQ
hzuj7N4oHhPLF2W6omhc2aVkjpHyRU2YYI6T2Qf2KLFbi31R7IqidLAvivbl
qX/m2DQ0yDRdK665r0b2dnGb1vgcFptrK8mxXctUcQbyQtn9UDZvGL823Vvc
Pxpv85pPnWpe075ry+Frb/Vr5RlnyJVnnilX/su/yBXcR75u7PwaN07m2A9F
9zufi8coR2PFyfK9MGZMj+mJqqnZQf1fn4rFltO1zVD/UjQGKZprqaVC5NgL
RfNtBSVPNS6jGv+ZikT+RuP2QH7KlLuozVvWLFr0+TUf+cjVm2666ZKnv/71
82760IcuufpDHzr/Ax/96Bmz5859byQW+1UoHF5J83A/zxMdrii7L6rYG2Wf
nzznfTTucEUBAEYxXxF6/nb2clE7CzS1U85cNbghBMAV7hNDu98nDH/JwMIQ
+tYxw0H7bq+1gw0AAOgkIdxbu9xeX7EuAwCGSly4vyaVY40yNNeUGGH1uNUv
AAAAow+3n0XFiY/Qfhgl1pMYhprKEQAAKDeGcPffLsfL+ou1GNjReX85mTuG
5howhwAYOWCtGVziDvoHwEDw/BgJz0HddeiMUUI/AQAAAAAAAMdml3D/d/5Q
c0nZRwUAAAAA4MTmMD8UpeIuIfwdQgT/KkR0qRA1y4RoXCLERNrOSAqxoE2I
Ny7zes9Neb3vSPn976Vck/T5bqD33056vfe0eTx/omNeoONX0ve3Py/Eob9W
VMj/CgTkeysr5RxKdTAoAxR2z7ATin1R7IiJxWKmI4adMeyLUvvYU1MOR40K
u2iUC4fDr5Ur6gJq/1vhsPwT1fe85QlK2qK8QXavkOmLikRkhs5lupwaGmRu
3DiZb23tdQjNnCnb5841vUFmFiyQy9mFxKHX/Bk7n3ITJ5oeJfYqmb4o9jkp
XxG/ttowzz9+vOlQMn1LFPO71GafK4p9SexIshxHfb4odiip2BxKKT7GymHu
KOHAF6WivFHsUWK3FdfLPiXliqJxZheSGiOuV/WB+9+hxoi9Wjwu7IqaNUvm
6PNsU5P5fT6v2Y7Vdl+/7H2zu6FUf2wxXU983ThcK4fH1x7lmuLjbf3l99wv
rp/9XMupTnZAvXLeeXLVBReY25WGIVeefbZ85dxz5epFi+Srl14q115+uZk1
l1wiV9P+laedJjvovsi1thYyzc09mYaGnjT7oejcObr/OOzZStbUHKS2tmWb
m1dlWlqWZidMeDLd2PhIurLy98sqKv5Ac+2PNM/+QvPtCerz3+m6/yVTV/dg
+6RJ99D99b3Vb33rTWve975Prb3hhg9uuvXWd275+c/P3ffoo6ftev75GW2J
xIRVq1bVSCl9jY2N80Oh0E/C4fBKmhOddpeaSjnnoPJE2eegcrgpRxy7ovx+
P1xRAIDRyn8IPX87e7aonWZN7ZQzvx3UCALgDu8VQ7vfJw9/ycDCEPrWMcNB
+26vtYMNAADoJCHcW7vcXl8Hk4TDvgEATgzcXpOKEx/BfTFGWD3lCgAAgBMX
fu66/Rwq13NJd18SJdZjaK6nXImX2C8AADgWhnB3HU5oal9nANB53zqdO27P
g6HEcNhHAIC7a42hsX3diTvoHwADYYiR8RxMaK5jJPQRAAAAAAAAcGxmCfd/
45cj+P9dBwAAAAAoI9LyQ1G8aSECa4QILxGiOi9EfRv99koJMfVFIeYvFeJ0
ipEU4sK013t5uqLiw2mf71NtodCNyWDwNtrek/b7f0f7EqmKirY2j+dV9kTR
OTpfoGb+xq6oYFBeUVkpZ8diMubzmR4Y9kCxE0r5ovh9KBQyt8obo8NTo6LO
y26aRsoRrijlC+rHRZSye6OUr4idUfRddjWxEyk7dqzMTZjQ63NiZ9SMGbJ9
9mzTh7T8lFPk8lNPlctPPll2LFwoO+bNk/np083jszQepi8qEultT7VlOalM
pxCNm3l+9i01N5veJdMzRe2aninre33eJ+Vxss5lepRsSdlT7IsqJdZYKFdU
Wrmi2KPFviibM4r7yX3IUv2mM2ryZJmfNq1vnNrnzJH5YoeW3RXFUR6s4n4V
16X6r/xQdJ4M+5i4RqtOM+y34v001hk6X5p9VJaTynREUc3tdC1Xnn66XH3h
hXLtVVfJ9ddeKzd85jNyw/XXy/Wf/KRcd801cj1l46c+JTd/4Qtyy003yS3/
/u9y8+c/L9d/4hPy1fe+t7Dy/PN7Ok4/vYv6eTDX2now09BwKFVZ2Z0Kh3uo
/UK2pqaQbWo62D59+tblb3hDx4pzznlu5Xnn/WGFYdzdcfLJt9GYfDtZWfmf
VNv32rze/0rFYj/ONDff3jFnzq0r3vzmr71y2WWfWXPddR/d8K1vXb7tZz9b
tPuhh87a+eSTpx546aXZhVdeaS1s3NhY2LKlUkoZuOuuu/zhcPj0QCBwF21X
0LzYz/NReZvszigdc/BoriiqaR99DlcUAGA08m2h529nTxS1E9DUTjlToMQG
NYoAuMOZJebNlLMob3GjWNCHIfStY4aD9t1eawcbAADQSUK4t3a5vb4OJgmH
fQMAjH7iwv01qTjxIfRH1/NgsOvnSBzf/mKU2C8AAACjh5H2rBrK7wBjGOoz
SqzJ7fF0kkSJfQIAgGNhCHfXq4Sm9rEOA50YQu995oTjbe5gHgEwONych4bG
9nXHcNA/AAbCEHrvz7jDOuKa6xgJfQQAAAAAAAAcm6uE+7/xh5r1ZR8VAAAA
AIATmLgQFUuE8K8SIpQTovJ5IepeCoebk8HglHQgMCfn95+a8fnOSgnx9qwQ
76LtBymfTFZUfLnN672lLRC4MxUO/29bKPRoMhx+Jh0MLkv7/SuSPt/GtoqK
nW0eT2ebEN0vejzyMa9Xfj8YlJdFo3J6JCKj9N5LidJ7dsOwL6o/VxTvY2+M
8tUMNcXem2O6ouyOKKorxR4oivlauZjsXiL2Fimnk/JFsQ+pqUnmxo+X+dZW
mZ8yRbbPmmX6ojpOOun1LFzY60aiz033E/uiqD52GvU5qaxzcx2me4nOn2Fn
FB9LW9MTRX3gzw9zRQnLq6ScSf0kVeyLsnKYU0o5q+yxu6XUMdw2jxU7mHgc
lCvKHuWMomuc4TFqbDR9V+zKylnjxH4tfs37+Tg+F/f/qH06iiPKHDvLYZXh
uqw60jU1hfSYMQXzetH7HNWbo/sga3mkuE6+Jh0zZshXzjhDrrnoIrnh6qvl
5i9/WW75znfk1h/9SG776U/l9rvuktt/8hO548c/ljvvvFPu+sUv5O7//V+5
+/775Y777pNb7rijZ9M3v9m14QtfOLDmYx/bt+rSS3evePObd+TnzduRmzhx
R7qxcVeqoWE39XlP+8kn71lx3nlb1rz//e3rPvvZpzd97WsPbrr55h9tvuGG
r7x6xRXXrnjDGz6SmTDharr2H0+PG/eJ3MKF16684IJrXr3mmg9tiMcv33bX
XRds//3vz973xBOnH3zxxfkHMpnp+5cvb5EbNjTsWLWqZv369REppe/sD384
NKa5uSUcDl8WCATuo+1ymhf7eE6qeanDFVV8PjXPlS+K1wA/XTN2RdFruKIA
AKORrws9fz/7Yz9trdXUVjlzXelDCAAAJWEIfWuY4aB9t9fZwSThoF8AADAU
4kLP+uUEt9dYrMsAgKGga/3UvfYOhDHC6huOevBcAAAAMBTcfgYVJz7E/iQ0
11fqM1N3PeWKUWK/AADgaBjC3TX4eFl7B/tsAaMTQ7j/rD/e5g7mEQCDw815
aGhsX3cMB/0D4GiMhOegobmOkdBHAAAAAAAAwLH5rnD/N/5Q80jZRwUAAAAA
4ATlASG8HUIElwhR/Vw0OvalUKi1rbJy5rLq6pNTsdiZSyOR85OBwKU5v/+q
XEXFJ1JCfD4pxDfahLh9mdf7y5TP93AmEEikQ6El6XA4lwqHV6dCoY2pYHBb
KhDYk/T5DrRVVHQv9XgKL1iuqB8EAvI9kYicGQ7LaEWFrKBE6D37YdhHw36Y
yspK0x/FW7s3ptyuKD4/x+6oaaDX06uqDndFsfOIvU/sPaL9act5ZDqL2MfE
3iK//3BfFHuJlCuJfUTsRKL+ZRsaDndGTZtmOqPYD2V6oxYulB0LFpj78pMn
m8fxd8y22HPEPiflorKdn2tKc00cfk11mi4r/g7XZfcqCXGkR8nuiir2QClP
ljUOpmfJ8mX1hfdZn/XF5oka0BWlfFEqyqvFzigapyz7sjj0mj1YZt+UA+to
fbL1q68Pll/LvIZck+XZStfXF9KNjYVMU1NPZty43tBrqqEny9uWlp789Ond
HSed1PPK2WfLNe98p9zwkY/IzTfcYDqitt1zj9zx4IOF3Y8+Kvc98YTs/Mc/
5MFnnpEHn31WHvjnP2Xn4sVy3wsvFPYuXty95+mnD+5+7LF9O+6/f/drd921
Y/Mtt7y2/rrr1r16+eWvvHLOOR3LTzutffmpp7avOOus9lWXXbZ8/ac/vfy1
b387s+Wee57d+dBDD+5+/PEf7v3rX7+465e//MCGL3950avveMebVyxceObK
008/a82FF75lwyc/+ZbXbrvtLdt+9aszdz7yyOl7n3564YFsdsb+V15platW
NRXWrKmVUsYKhUKQHVEUD68FE974xnBVVdU0mnfvCwQCv6I5uZzm3L5Gug48
94q9ajpcUfb5XeyKouwLh8PtVN+9VB9cUQCA0cRNQs/fz/7cT1v/0NRWOZMq
fQgBAKAkDKFvDTMctO/2OjuYJBz0CwAAhkJc6Fm/nOD2Got1GQAwFNxej4oT
L0OfEiOsRt31lCtGif0CAABw/MPPNLefP8UZKsYIq3E46ilHEiX2CwAAjoYh
3F2rEpraxxoMdKPz3jUctB/X2P5wBADgDF1rjZPnmaGp7eGI4aB/ABwNXXPP
6fxjDI016I7TPgIAAAAAAACOzZPC/d/4Q83NZR8VAAAAAIATD09CCN8/hQgn
hRiTCoVaXo7F5uSrqt6Qqq4+J1VXd3F7ff2V+TFjrslWVl6fjkTiab//B0mP
5xdtQvw+JcQTyYqK59u83kzK71+ZCgbXpSKRLelodEcmGt2TDIcP0L6upN/f
k7Q8RS/S9q+UHwUC8oORiDwpHJYx2u+xuaKUH8buhbI7asrhqVFOqP5cUbxl
V9QMykWx2OuuKOU9ikZfdz7V1ZnbNL3vczOxi8jn63UUsXOJ/UTsULJ8ScqF
xM4j04c0dqzpgspNmtTrjJo9+3Vf1Lx5sn3mTJmfMsU8hr9nnp/PrTxIqg3L
gUTXwAy3Z7qaeL/liur7nt2jxPuLU+SHYv9TWvVBOZaU84n7Q+N2WHg8lK/K
ckT1fWcgV1SxN4rHiMaWx6kv7HTi83IN1jgf4YoSYkBHVNrurbIcUeoaZJub
e3ItLV251taDucmT9+WmTNmbnTZtd/vcubuXn376nhXnnLN31SWX7F9z1VUH
1v3rvx7acMMNXZtuvrl7y3/9V/e2++7r3vXYY13sgdrf1iYPdXTI7tWrZc/a
tbJrzRp58NVXuw+uXXvwwNq1nQfXrNnT+corOzszmS17X3hh3e6//33ljgce
SG35wQ+eX//Zzz619qMffWzNBz7w6Pprr/3zxq985bEtt9/++M4HH3xydyLx
t/0vvfRAZz7/w0OrVn3uYHv7lZ2JhLH1zjvnbLjqqta1ixZN2HD11a2bbrll
ys5f/3rqzscem9b54otT92cyrXtXrx5XWLeurtDRUVVYsyZs+aEqlCNK0dra
GqL7f3IoFLpCuaIaGhr2NTU1mfOO9pv+tnK7otQcVPNf7VPuOH5N9Uiv17vP
5/O1U+CKAgCMNr4o9Pz97O/9tPXfmtoqdy4ueRQBAKA0dK1fhott60zCQb8A
AGAoxIWe9csJbq+xWJcBAINF19qpe909FobmGktdQ3XXg2cDAACAweL2s6c4
8TL1K6G5TmOE1eNWvwAA4Gi4+W+W42XdLbVfYPSj8951cp8ZGtsfjgAAnKFr
rRnt64zhoH8AHI24GBnPQbfnks41BgAAAAAAAOCMncL93/hDzaVlHxUAAAAA
gBMIaXmiKKElQlS3hcMTktHoglQ0auRrat7Z3tT0ody4cZ/ONjf/e3bs2O8m
x4y5hz57MB0I/LWtouKfSSGSy4RY0ebxrEv5fJtTgcD2dDi8Ox2N7s9UVh5M
V1Z20/EFdvNkgkGZYd+Q3y+XUp6i3Ev7ro9G5Vvp88aKCumlsING+aGUI6au
rs58rVwy5XJF2b1QsVjsMFcUn7+eYrqiaD+7oh6h+p+3XEnsMsqyY6ixUdIY
yVxzs8zSlt+zz8h0GbGjSfmW6LumK4o9ReyKUi4kFT5XQwO7imRu4kTTC9U+
a1avL4rSPmeObJ8xQ+ZaW802TB8Vu7dEkReJ/VSW28kMu5Q4/Jr3q3psDqi+
Y/o7TjmiLD9WnxuKXVCWJ8usmz1L3H81Dk1NfWPBx5rjYXmjHHmi7L4oW8xz
sONJObCK/Vf28eAo5xX3w+a5Mmug82WpDzmqP0f1ZsaPL9DYH8hPnrwnP3Xq
tvaZMze0z5//6oo3vnHlykWLXll91VVr1n7qU+vXf/GLGzd+7Wuvvfad72x5
7fbbt229997tu/7whx17nnpq9/5kcs+BVav2Hdy0qbNr+/YDXbt2Hezavftg
9+7dnd179uyh7U7KVnq9gfJK9/btmQNr1764P5NJ7H366T/sfPDB+7b+5Cd3
bL711u9uv/32/9z+3//9/d2PPPLj/c89d+f+VOqu/StW/OTgunW3HNq69brC
7t2XHdq8+czC2rXTd//jHw0bb7ghKuPxkHzggZhcsqR6ZzI5RlrZunhx1ZIl
SyJSSj/FW+yHsqNcUTQXrwgGg7+k7XKak/t4HvK8YJ8bz5fhcEVxO7y1u6Iq
Kir2Udo9Hs+9Xq8XrigAwGjieqHn72fP9tPWf2hqq9z5Y6mDCAAAJaJr/TJc
bFtnEg76BQAAQyEu9KxfTnB7jcW6DAAYLLwWuL0e2RM/jvpmjLB63OoXAACA
4xd+7rr93NH1HDI015kYYfW41S8AADgabq5TCU3tY/0FutF57zq5zwyN7Q9H
DAd9BADAFYU1BriFIUbGPer2XNK5xgAAAAAAAACOzSzh/u/7cmRiuQcGAAAA
AOAEwCOtPCCEt0OI4GIhql4Sonmp3z83F42ekx0z5n3ZxsbP5ltavpGbNOmO
3OTJv861tPw519j4dLq6elkyHO5I+nyvtnk8m9qE2JbyeHbR+/3JQOBgKhLp
SsdiPez5yXFiMZmNRGSWfVHsG2K/D21fpvyF8sNoVF5D25O8XjmGUlNZabqh
lCuGt+yJUa4otU85nsrlilKeGrU/Rq9rqfZiV9Ri9iaxa4hdUVQne6Lyra2m
24nDLqfchAm9niT2GtH3TAeT8kSxq4hdUcW+JLsvqqnJPEd+6lTZMXu27Jg7
V7bTll1R+cmTzc/ZucSepMP8SMLmjGKPlPJBFUf5n6xa+FymB4rf8/XhetWx
1nEZ5beiGjP19Wb/2AmVGz9e0r1h9ptr4/SNgXJn0fUz3VLcRydOqAGOMetU
nihVI/dxIFcU7bN7ojJWP7J0nix7oni8qS+5Xs9VIdvcfDA7YcLObGvrOrqW
+fzcuUtXvPGNz71y4YVPr7366qc3fPnLz22+9dYXtv74x0u2/exnL+/8n/9Z
tuvhh1N7n3wyt+fFF1d0dnSs7tq4cU3Xjh3rutgFdeDAxp6DBzf3HDiwhV6/
1n3w4IbuQ4dWd3d1tRcKhZcp/+g5dOhPXbt3/6prw4bbD3Z0fGP/4sVf2Pn4
45/c+9hjV+996qmrO1966dpDudynD61de92B9es/071lyye7t2//cNe+fRcf
2rfvDFkoTKXzNMj16yPKASUTCZ9MpwOFP/85yFva5zuWH8qOckVVVVVdEYvF
fhmJRJZT9ik/lJoz5fa18fyzu6H4/OyO4/fKU+Wna65cUV6v995AIABXFABg
NPEpoefvZ0v6aetDmtrSkYWlDiQAAJSArrXLcLFtnUk46BcAAAyFuNCzfjnB
7TUW6zIAYDAYwv21qDjx46h/pa6juuvB8wEAAECp8HPX7eeOzmdQQnO9Ron1
uD2+TgMAAOXCzWeF7meAW/0Cox9DuP+cd3s+DCWGwz4CcKKj6znp5HlmaGp7
OALAUDHEyHgO6loDdMfJGgMAAAAAAAA4NlcJ93/fDzUbyz4qAAAAAACjFGnz
Q1mpYE8UbQN2T1QqGDSSNTUfyNTXfzU7btxPsq2tv22fNu3vlCXszsmNH786
VVu7MRWNbk0Gg7uSFRX72oQ4QOlq83p7UoFAIRMKyWw0KnOVlWay7BhiD5EK
u34sV9LztH2Q8u/hsHyb1ytbfT7ZWFUl6+vr+1xR7JGxu2n4td0lVY7wedlT
Y/fgRKmuMVTvdNp3Eb3+JvXrj37/664odg2xZ8hyOrXPnGkmP316rzOqpcX0
PpmOI3v/rTE4zBWlXitfFLuYxo41z93O554xQ7bzeel1btIk08HE7iV2IJmO
JCH690VZzijTl6S8UZY3SfmuTIcTh+tUHiblt+Lzq2O5vzTu7H7KNTfL3MSJ
Zi2mI4vqyk+b1hvuO+0/zBVF3zMdU8oXNVDs41GUwzxR7LPi2pQnyu6Ksof3
U5+5v+wrY2+ZeV9yX7gWdlhRbWkab0o3vd5H9/56Gvu2fEvLU+1z5jyy4uyz
H3j1iit+ufH66+997bvfvW/rvff+avdDD/1q91//+pv9zz772/1Ll/7x4IoV
jx1Yty7RtWXLP7r37Hmmu7Pzn90HDz7f3d29pLurq62nuztNSVFe7unpeaan
UHisUCjcT/kp5ZbCoUNf6t6379ruLVuu6tq06Z2dr7zy9q5Vq4xDa9a8pWvj
xnNo33ldW7eeL/fseVuhq+tc+s5ZlFMKvZ6oRilljBIwPVE8v3lrZZBLRpDm
wKRYLPYedkWFw+HloVBoX4TGUHmclNupHL4oNceVr41fD+SK8tE193g8cEUB
AEYr1wo9f0PL9NPWSZra0pEHSh1IAAAoAV1rl+Fi2zqTcNAvAAAYCnGhZ/1y
gttr7GASd9g3AMDoRde6qXvNLQXd9RojrJ6Reh0AAACMTNx+3hQnXub+GZrr
TZRYT0JzPeWKUWK/AABgINxce4+XNXewzxQwejGE+8/5423+YC4BUDq65rmT
OWhoans4AkA50HmPxh3WoGsNwDwEAAAAAADg+OC7wv3f9kPNo2UfFQAAAACA
0cVhfqi45YdaIoR/lRChtBCx54Woo/cTX/b7F7Z5vW9NRSIfzNTU3JhuaLgn
3dT0WH7ixCW5KVOW52fMWJefNm0rvd+ZbWzcm6yuPkDHHkr6fN1tHk8hRb/P
0h6PzPh8MhsIyKzli8rY3FBmbD4kzss1NfIvtO+2SEReTN+dQqmn49gTw2Ef
FHtj2BFTDifNQJ4o+/lVe6YXJxyWU6kPF1DYFfUI9Y1dUdT3111R48ebfiTT
5zRr1uG+KPqM/Upmn5XrSHmiil1RRb4odhgpX1SenUyTJ8t8a2uvg4r283Fp
roV9SOxFEgP4opRL6WiuKMvjlLb7otjHxMfRGPBxpieqqcmsx3REsR+K+8lh
RxS/pxpNTxTX2NxsHs+uqOzRXFFFY2C2349brG+/8lhxX5QDy+6LssKv+ZhM
kScqy32sri6kqqoKSU5lZSEZi/WkYrEDlB30WUd6zJinqPbf5OfMuXP5Oed8
Z80HPnDT+htv/OKWu+/+wu4///lL+xcv/uqBbDbetWbNt7s2b/5uz44d/9Wz
Z88dPXv3/rRn//6fFbq6ft7T1fWr7p6eB3p6eh7qKRT+SNuHafubQqFwN+U2
yk3dhcKnafshOv4yynmFQ4fOPHTo0KkH9+yZe+C116Z3btw4udDZyZlWOHBg
Jh2rMl1KOZG2DeyJom2Qtt4yrh1+mnsTY7HYZcFg8L5QKLSc5sM+5XFSnrZy
uaLs8/xorij+zOtlxZ2AKwoAMFq5Uuj5G9qWftpin2C3pvZ05LwSxxIAAJyi
a90yXGxbZxIO+gUAAEPBEHrWLye4vcYOJnGHfQMAjF7cXoeGY12Ka645UWI9
Cc31lCtGif0CAABw/KH7GTmY6GAk1WwMQz3lSKLEfgEAwEC4uUYlNLWPtRcM
BzrvNcNB+8fb/MFcAqB0dM1zJ3PQ0NT2cASAcqDzOev0ORjXWAPmIQAAAAAA
ACOfJ4X7v+2Hmm+WfVQAAAAAAI5/DvNDcdgPRVvfKiFC64WIrBSi+jkhxrIj
ijJrqc93etrrXdTm938kEwp9NVVZeWemru5PmbFjl2YnTHg1N3ny1vZp03bn
ZszopNeHMs3N3en6+oLpfQoGZaaiQqbp95kZfu3zybTyEYXDpneozxPFvqD6
epltaDAdQkvr6uTfa2rk7XTMu/x+OZW+W8uOJssfw76YYieN8smUyx1V7IlS
zpow1V5FfZhM9Syi10e4otifRPWZPqeWFtOV1D59uumMynOmTZO5iRN7vU7c
72Ivknrd3z4+lupgx1KOz88+KnY0sXuqqcn0SKXpeNPnxK4k9iOxG8oediXZ
PVEqNM7smDKvDXurrLaUx6nPF8VeJuvacf1Zq45ca6vpwTL9UJYjKseOKOWx
4hrHjXvdE8XXm8bpCFeUvd+Wn8qsiV1QNk+VuV9FfcbXgK5Fv74oW5+5nxl2
XXFfeLxisR7qVxddv4PJUOhgMhDoSvr9XclgsDMZiexKV1evSzU0vET3+O/o
Wn6v/bTTvrDyoouuXnvttZdvu+22i3b97ncXHXj55XceWLv28u6dO9/XvXfv
h7s7Oz9WOHjw44XOzn8tHDr0b5TPdHd3f7FQKPx7T0/PNyjf7ikUbqF8k/bd
SLmO8lEp5XtoewHlLZTTKHMpUykT9hQKjXLHjhq5eXPMjJTVtL+OtvW21FAi
FD/FU4a1w0fx85bmXjXNsRnRaPSqYDD4PzQXVtD7fWp+cNTcKcccLHbCDeSK
itF9UkH3tYArCgAwemEfkq6/o/n6ae8lje2VO0+VNpQAAOAYXeuW4WLbOpNw
0C8AABgKhtCzfjnB7TV2MIk77BsAYHTCa4Db69Bg1tvBMJLqNoahnnIkUWK/
AAAAHH+4/awpTlxTPxOa6zZGWD1u9QsAAPrDzX+rHC/rban9AicGOu+1uIP2
j7f5g7kEQOnwWuDWHDQ0tT0cAaAc6Jp/pTwHDY01YB4CAAAAAAAw8tkh3P9t
P9RcVvZRAQAAAAA4TpFHOqJYqOLrECK4RIgIbavyQtS3CzE+JcTUNr9//jKf
74y013tuxuu9NOX3f6wtELgpHQrdkY5GH8rU1Dyfrq9fnW1q2pFtaenMTZ3a
nZs5s8AOpPZJk2R7U5PMsyeJHTzs6WE3EZXBjqI+NxF7fGxOojR7gurqZIb9
QWPHmllaXy+fpP130HmuoONmhkKmK4qdMMVuKOVyKnZH6XBF8flD7Iqi+vt1
RXGf2HHEPid2IY0b1+uLorExPUoc9iexO4ldUdzv/jxJR4vNF2V6miz3kumJ
ov08pqY3iceZx5zdUDz+vFWeqP48SurasM9L9UP5opQrikP7TU8U16KcWOyK
mjhR5qiffWEf1oQJMtvcfLgjin1gXDt7olTfi/1QfP9wDeyFsvufrPpMJ5Tl
jepzRKnj7Mfa+6le8+f0nWQkUkhFIl20PUjv9yUDgd1Jn29n0uvdQXNgN73f
Sf19jepfTff4svYzznjslXPOuWPVokXXr3zXuy5f+7GPGTvi8VP2/OY38w6+
8MK8g6tWnXRo587TCocOnU55E+VMCvuezil0dZ1PuUhKeSm9v4LyPlveS7mM
/VD0uUHbMygLKDPo/UTajqXtGAq7oQIULzugKBWWDypEx4StbdDaV1GmJcRH
c64+EomMC4fD49kTRe/fTPkk7fstbVfV1tbuq6d7Xc0Pu+NpqHPQ7mhTrig+
N7/mtYDfF7uiPB6P6YqiXB4MBicJuKIAAKODU4S+v6M199PeLzS2pyPvL204
AQDAEbrWLMPFtnUm7qBfAAAwFAyhZ/1ygttrLNZlAECpJIT769BwrUm6+2qM
sHrc6hcAAIDjB37uuv2cGa7njqG57sQIq8etfgEAQH/wWuLW+qSjbay7YLjQ
ef86udfiGtsfjgAAjo2uee5kjTE0tY31BRwvGML9+1R3DW73DwAAAAAAADAw
M4X7v+vLkUllHhcAAAAAgOMK2b8fykvxU0I5ISqzQtTRtjkvxOS0EHOSQpya
8fnOSnu9i7KBwGVZv//D9P66Nr//5mQgcHcqFHo4HYk8l6qsXJmurd2eaWw8
lJswQS6fOlWumD1brpgzRy6fPl22T5wo8+x7YmcR+3i8XtMTlezPVcROokjE
9A+xcyjDbiX2CDU2mq6oJ9gVVVkp3xuLybmUBnrNThgV5YVS/hi7U6acrijl
q+lzRVG/KgdwRSn/lek9opq4P+xyMl1KNF5m6LXpTaLPzH7TcUc4k44VPp49
TTxmHHZO0XnS7HRilxPVZrqTin1Qdi+U+qz4uiiXVzTa625SHit7LGcV+574
euXYidXc3NfHLPeRHVHUT3aAZbivVKfpxip2RNn9UHw/FPuhbH1IWrF7rQ6L
ckQVu6JsnqgknTsZCvXQPX2I+rmvLRDYRce+RuddR228Qq87UtXVHdmWlnx+
4cJlK9/61mdWX3XVo2s+/elfbLrxxq9tisevWv/1r5+14VvfmrPhnnta9/7l
L+P2ptNNcvPmpsLeveMKhQJnPHueKFPY+USZTZlrOaBOpv2n0vY0yulWTrP5
oSZZ56ilVLIDaiD/k+WLUvGUcRnhcwVpXrXQPf+mSCTydso7aN69h+bGJ2he
3Ebv/x99tqm2tvYAu6KUw8nubiuHK2ogdxTPxQFcUR2U/4YrCgAwymgV+v6O
dlI/7X1WY3s6Qj9pRTmfgwAAwCSEnjXLcNC22+vqYBJ30C8AABgKhtCzfjnB
7TUW6zIAoFTcXoOGc00yNNeeGGH1uNUvAAAAxw/83HX7OTOcz5yE5vqNEVaP
W/0CAIBidKx3Tp8Zx8taqxJ32C9wYqDz/nUyh+Ia2x+OAACOja557mSNMTS1
jfUFHC8YYmTcp27PJ8xDAAAAAAAA3OF9wv3f9UPN5rKPCgAAAADAcYA8ih+q
IERwoxDRpBBj0kI05YSYRK9nZYQ4OSXEmUuFOD/p9V6arqi4KunzXdsWCHwh
6fd/MxkI/Jhe/4a2T6RCoZeTkcjqZCy2LTVmzIFcY6PssFxRy+fOlcsXLJAd
c+bIdnpvuoLYDVRV1esrYr9PRUVvLG8UvzbdPZaTKK38R+xNqq2VSylP0vs7
af+VlZVyPm2baV8thb0w4XC4zxVTLi9NsSeq2EXF+7ntELdNdU+i7fmhkPwG
vf6j3y+fV64o7o9yLLEvSvmc2IPFUe+LPVFOXVF8nDVW7Iiyn1d5mHg8uQ66
bgN7k4o9Umqf5WA6zHtla9N0VKmo9ul+MMOeMLsbaqA+luCHStnvG/v9U1zz
QLGOSdPrtOWKovuuqy0Y3E/39jZ6v4b6mqVaXqRan8pOnPhYxymnPLrqoose
Wfvxj/9+w403/s/mH/3ozi333ffNnb/97f/Z9rvfLdrz8MNzt9577/g1999f
u+WZZyoLy5ZFC2vWhOWqVSHL7RSxPE817HyibT1t66xtI6WZMoF9UrRtpbRY
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
+9+0z/enlNf7j6TXu5Te59t8vlfb/P5NSb9/WyoQ2JUKhfanIpGDqVisO1Vd
XcjU1clsY2OvP6ilReanTpXts2f3eqLmzJHts2bJ/PTppreIfUKmq4h9UeFw
ny8qZfP9mOF97AyyHD9LKI8HAvIO+o5yRY2vrTXdUOyPiUajpjdGuaLYG6PL
F8Xh87OThvd7qc4AXYIWqvG8YNB0RT1MfXhO+YpsvijTt0TfP8IVpd7zZ/bP
S3BFsaeJxzc3YYLp5mqnMWdPlxkef7ouuYkTD3M6pen75rXgsNvJymHnZj+U
df4cn5+vMXuo2AvGDjA6p+mKamg40kPFfbf7n3hru659n5Xqh7J5oZJW+s7L
bXIsL1VfDba2kr3ppn37aC5sor5laHyeWnHGGf/z6rvf/Z/rv/Slz2y6444P
7PrlLy/Z+etfn7/nD384p/Ppp43OVOqc/StXnrVvw4Y3HNyzZ26hs3NyoVBo
LGzcGJVSet1eB8qMPxgMTg2Hw5fQ9ut+v/9Rr9e7yuPxdNFW0nsZomscoWut
5oTyN6k5yVEep3LMyWJXlP2cxa4oqrNAda6n4/9M68JNVOvZ1KdG7pfbAwsA
AGXiCaHnb2mJAdr7qqb2dOcmxyMKAABHh9dHHeuU4aBtt9fSwSTuoF8AADAU
DKFn/XKC22ss1mUAgFN47ru9/ri1Fhma+jDYviQ011OuGCX2CwAAwMhlpP0O
kHq7ewQjqS/GMNRTjiRK7BcAANjhNcStdUlH2zoTd9gvcOKg834zjtG2obl9
3TlW/wAA+uZ5wsW2dcdJ3wBwCt9Puu7V+AioQWcMh/0DAAAAAAAAHMlM4f5v
+nJkSrkHBgAAAABgpEE/eirYEbVMiOir1dVj0g0NTbmxYye119bOzlZXn5KO
xd6cikTOz8Ril6aj0fcnY7F/pfdfoNffaItEbk+Gw/elQqGH04FAIuX1Lkl6
vdmkz7eqzevdQNlK73fSdh/lQNLvP5QMBnvSkUiBvUd0/l6PkOWLytp9Uewo
mjmzz1PEfqFcc3Ovp0j5otgnxP4e5QgaIEu8Xvm43y9/TMe/NxqV8yorZZPN
TcP+GI5yxvB+Hc4odtWwh4bP29DQYG7ZFeUXr7uivq5cUcp5xY4i2s9uLBpz
s99H+KCUI6q/z44WPtbuiho7ttcVNWWK6ejqmDdPdixYIDvmzzdf8/Xgz/r8
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
Ttxhv8CJg5v3m6G5fcwnANzHEHrmX8LFtnXHSd8AcIoh3L9X4xpr0BnDYf8A
AAAAAAAAR/KEcP83/VDznbKPCgAAAADACEBanqi0EIHNDQ2xZGPj2OS4cbPa
x407Kzd+/LuzkyZ9PD9t2pfaZ8++JT9jxk/Tra2/yTY2Ppqtrv5HqqpqKaU9
VVn5aioS2ZSORLamw+FdyXB4fzIUOpgKhbqSgUBP0ucrsKMnzY4oFa9Xpv1+
07ljOo3Y9WR3RQ0Uy2PEHilzS+/T7O6JRl93RbFHyeaLShXFdEXRMT8OBuUV
9J059N0Gm7OJw6+Vs4Y9NuyOYVcNp9yuKH6t2ghSTWGqbxKNy9uptm/S6z/S
2JmuKNHrPzrMd8R95T5z2B1l+aP6HFLKw+XEF8XHqON4rNmLVF9vernY6ZSf
MsV0KHXMnSuXL1zY64tiV9TJJ/f6oubPN31RpmeJw34pa2s6ouj7ucmTe91L
LS0yO2GCzBY5v9KWh8n0RLHfq1RHlN2npcaoONaYmfceu7Ro3LPsiaK6uNaO
OXNM95UZ6mv7zJm99dPneR4LGhe65wttdI8ng8FtdO8vT9fVPZubOfP+leee
e+uaj33sU5u+8pVLt37ve6d3/t//O6Xw/PN1lg+qom/eSemxUjEK/VB2TFdU
OBw+ne7xmyjP0D3/Gt3nPeyKKvYz2Z1Nyh1l90PZ/VFDjb0NnodRuhfU/Ob5
2NDQYIb27amoqMhSP+6ORCLvaG5ubpkzZ07A7YEFAIAyc7rQ9ze1rw7Q5js0
tjkc+Q9HIwsAAP0TF3rWJsNB226vn4NJ3EG/AABgKBhCz/rlBLfXWF3PGwDA
6IF/i7m97gxmfdVB4hh1Def6amiuZTRcLwAAAOXB7edIceJ6uzsghsP6BptE
ifXo/l1Srhgl9gsAABhe691aZ4+X9VUl7rBf4MTBzfvN0Nw+5hMA7mMIPfMv
4WLbWFvA8YQh9N2rTuYhE9dYg84YDvsHAAAAAAAAOJLtwv3f9EPNFWUfFQAA
AAAA9/DQDxxPXIgK9kRRAgkhYsui0caXKyunp8aM+ZdMU9N70q2tn8tPnXpr
ftasX2Tnzn04P3fuU9mpU1/ONjfn6JhVqcrKDclodGs6EtmZCof3JcPhA7Q9
lAyFeiiFdDAoM4GAzPh8Ms3+HvYc2V1H7DeyfD3sCDI9UHZXlHrPqap63QfF
bikrKX7P57CSsruiLF/UYa8pSyjKFXUlnWNeLGa6otgZw+6YMWPG9Hlk+DVH
uaKU20mbK4r6EKO6plBfL6B8k/pzmCtKvO5D6s+JlGTHkvJH0XnM8WIfkhNX
lD3qOli+qGxTk8yNH9/rjJo6VbbPmiU75s0z/VBmFiyQ7fS+nd1K7IuaObPX
EzVtmumIyk+aZH43x36o5uY+R1SmsVFm6up6PVE0vqbnivvB/Svus4ro3xFl
3lc8DsoDxX237o8+f5aKNS7mfUfXN0f94xrNmtkVZfXJ7JfqE33Gx5h119Qc
onp30viszIwf/8/8/PkPrLrggts23nDDp7bcc8+l+/70pzN2PfXU9D1//Wtj
YePGqJTSN4p9UEeDXVF1Pp/vjXSPx+vq6p6LRqPbil1RdieU3QfF80PNEfu8
LJcrSs1tbiNCawHXxHWwL66e7nuel/TZnlAolA0EAj+l1xfRvvFwRQEARiE1
Qt/f1B44Sru7NbaLvxcCAEYy9M9xLeuS4aBtt9fOwSTuoF8AADAUDKFn/XKC
22usrucNAGD0wL/F3F53RspvQ2OAmsqVRIn1JDTXg+cGAAAAQ7j/HCmOm+h+
9paCobmWciVRYr8AAICJC/fWI91rfbkTd9gvcOKg8x52Mo/cnhOYTwDoxRDu
rS+62sbaAo43dN6vTohrrkFXDIf9AwAAAAAAABzODOH+7/lyZFq5BwYAAAAA
YJjp80PRtiIhhC8tRGCVEKHFQlS9KMS4ZCAwKxUKndlWXX15urHxhsz48bfn
Jk16qGPGjH/k58xJ5mfPXpmfOnV9prl5S6amZkcmFtuTjEQ66TuHksFgN32/
wH6ijHJE+f1m0uzvYfePcv3YnT52l5HdE6UyZkxv6DM+rs8FVRzeb/+Mz198
jOWLWkLt/41e/5iOv4rOuaCqSjbGYjJKr5UPij0y7Ithl0x/DptyeGqUo0Z5
cHhrumooM6jNi+n9t0Ih+XCxK0oUuZNs7qi+FI8v9askV5TyRXF4/Gkssg0N
fc6ofGur6YzKswuK/UrsUuLMmmW+z1uOqBwdx46oLH3H9EPR900/VH296aHi
c6fZA8aeKKqV7x/Td0XX6bD+8HuVonup3/uJ67ffP3b/GN9ryp1l9S9LNfX1
i+pWzij2X5lOrLlzZQf1rX3yZJlpaiqkx4zppO9tpD4tpXnx8Ipzz/3Rumuu
+dzW73//8l1///u/HFixYnph5cqxWxcvrpJSBigVbi8ALsH9rvX5fKfTPf81
ytORSGRLIBDoZjeTmlMDuaJ4PnL4PXubyjX/7K4o1T7XE6L5plxRyt9G7/fQ
Nkvbu2i+XkzHtFCf4IoCAIxGVgo9f1Nbc5Q2f6mpTfx3BACAkQ7909y1Ncnt
dRNrLQBgJGIIPeuXE9xeY7EuAwCOhdtrzmDWVp0kxMjpn6G5lnIlUWK/AAAA
jBziwv3niD1xvd09JoYYWf3T/bukXDFK7BcAAOh4/jj9d8nxsrYO9tkBRj86
72En88jtOYH5BIBeDOHe+qKrbawt4HhD5/3qBENzDW72DQAAAAAAAHAkVwr3
f88PNdvKPioAAAAAAMOEtBxRstcR5X1AiEBCiNAyIaKrhKh5ToixS4WYlBRi
QU4IY5nf/95kKPS59JgxP8yOHftQbvz4F3KtrStyU6ZszE+Zsi03ceKeTEND
Z7q6+lAqGu1OhsMF09HDXiifz/RCmW4oy8vUl/5cUcFgr9tHeYzsrij299TW
yiw7itgrxL6fykqZpu+k1PmLU+yO4mPt4X103BLK43TMHbTvKjqn3RWlfFHK
TaN8NbxV/phy+Grsrih209h9NTVUwyzq7yWUb9P7h2n8nuNxE+LYUf4kHnOb
O8kcY+VHGowziq8Ju53szqjmZpmbMMH0QbFfyXRHTZ78uh+KPsvSMX1+KPqu
6YZi7xf7ofh6Ul1mfdRP0xVl+aL6vF/KAWZzgbEHq88bpa4730t0Dq6X75sc
1WjWR3XkWlpMDxTXYdZu1XFYVL/GjjWdVvw97g87ozooKzjTp8v2SZO4T13Z
xsZddP6V+Vmz/l/7mWf+fNXll9+4/vrrr3rt7rvP2vXcc9Pl7t31hUIhKqX0
n8CeKIb7Psbn851G9/sX6R5/PBQKbaD3PexFY1eTzcnUryuK56TdFWX3SpXL
GcXhtnj+8bm5LeVvo+yhz+m2qr2LtnBFAQBGM38Q+v62NmuANi/W2OZwZRNl
tpMBBgAAG3GhZ00yHLTt9rqpq18AADAUDKFn/XKC22ss1mUAwNGIC/fXHHvi
ervrCEOMrDU2obkePDsAAODExu3nx0h8nuh89iZKrMXQWIub/QIAgLhwby3S
uc7rSNxhv8CJg8572Mk8cntOYD4BoBdDuLe+6Gobaws43tB5vzrB0FyDm30D
AAAAAAAAHMmtwv3f80PNE2UfFQAAAAAAjdAPGE9ciArOA0J4lwjh7xAiuF6I
CL2uflmIhheEaMkIMZ1eL0wK8aacEG+nvH9ZRcXnl/n932+LRO7PVlc/k6mr
W5lpaNiabWramx037iBtu9L19T2mPygaldlQSGb8fplm/5PHY8Z0FSlfUT+u
KH7Nfp+0ckXReUyPkXISKU9Ufb3MNjb2+ns47Pih40yfELXb5xMqdkWxI4k+
N89ti/reS5Qn6PUdkYh8Xywm59M5GymVVpS7SfljQnQ872toaDCjyxXF700v
DmUmjcHFlG/R64epT4vZi6TGUBzFFcVjy+PN48BjQH00fUw8voN1RSlflAq7
ldT1sdxK7IRiHxP7mcz3tP8IPxS7oag/fdePrwvXZ7ms7Mmo8Hcsp1RKfddy
SSVtTjC+vqYniq5PnmpgpxN7ntrnzJHts2aZ3ifTG6WcUXxf0bGqPnXfZSw/
WY4+5/N0tLTIDvrecjrfcvZgTZ1ayE6dup/Ou2H5G9+49JVLLnlo3cc+9p2N
n/vc1Vtuu+3cLb/97Sy5fn29lDJ0gjuiFB5Ktd/vX0D3+b/S/X4/ve7weDxd
PK/YyVRP91HxnCp2RfFr5W5Sc2Yo84+/z+fmcxWfW7231WS6oih30edwRQEA
RjPfEPr+tvaJo7S7SWO7w5U2Su2xBhgAAGzQP9e1rEeGg7bdXjN19QsAAIaC
IfSsX05we43V1S8AwOjA7fWmOHG93XVMQujrY6LEWgyNtbjZLwAAAO7Dz123
nx8j8XeAIfT20yixHrevi65+AQBObHQ8g5z+myShoW2diTvsFzhx0HkPO5lH
bs8JzCcA9OPW+mJoahtrCzje0Hm/OsHQXIObfQMAAAAAAAAcCXuW3P49P9Tc
WvZRAQAAAAAoPx5pOaJoW5EQwvdnIYJrhAgvFqJqiRD1S4UY/6IQU5cJMe9l
Id5A7w3KRUkhrkgL8XHa/5VlHs8P2zye36S83qdSwWA+FYlsycRi+1PV1YVs
XV0hV18v8+zSqa6WWXY8sY+InT3sMRKWr4h9Ruw2YmeR8jhx7O6oYlcUe4GU
k6imxvT1sMuHvT6mg6ilpdfzw34f+pz9QVRbrzfI5ogyvUGWIymjHEm283Je
ptd/p/yE9l9Jn8+jjLXcM8oRpXwy7KkJU438mp02/XlthuqKUn4a5capocyg
z9/Brij67BFqf7Hq50DOKMvRpZxZagz6PExD8UQN5I6y3EoZdkZZMd1LvE/5
obhtdZ2U28vu9OLrb7/2Nk9Yjq51TnnC+Nx8TjrOdEaxa4rPyeG+8j1En7Or
qn3KFNkxe7bsWLBAdixcKDvmz+/1RdH+fGurzE2YYLqt+N7K8P3E9XLb7Jqi
5Dj0Pk/ny3MdjY187xVyU6b05Bcu7Fx55pmvrX7nO7Nr/+3fntj8ne/8bMfP
f/757f/7v5dsf+yxhYXVq8cVCoUoPFF9sCsqSHNoPN3n76B8y+fz8b8Rt4RC
oe7a2toC+9eUq6mqaB7y3OA5ofbx5+V0Ralz291Qqm24ogAAJyBXCH1/W/vV
Udr9kcZ2hzN/O9YAAwCADfqnu5a1yHDQttvrpa5+AQDAUDCEnvXLCW6vsbr6
BQA4/okL99ebkbr+6B4bo8R63L4uuvoFAADAXRLC/WeHPXG93S0Jnf1MlFjL
SLtO5eoXAODExhDurUPHy7qqEnfYL3DioPMePtY8MjS2jfkEwMjBjfWFMTS1
jbUFHG/wfNF1vzrB0Ni+zgAAAAAAAAAGx3bh/u/5oebKso8KAAAAAEB56PND
xS0/VFqIwCohQs8IUfm4EHW0bV4mxOSXhZiTFOLUl4R4C71/O71+V0qID2aE
+D9tQnyJ9n2H9v2M8gfKs0mPJ9/m9W5KBgL7U+FwIV9Z2efOybPDiT1BtM/0
AAUCvW4o9hVZnijlLDL9QCrFniDlirKcRn2+KOWKamw0nT651laZnzy5N+z5
GTu210nEzih2ESlvEDuDlHuK3UjqPOz7oe+YaWqSS+m8T9K+O6kP76Xj5rIr
io6tra2VdXQ8b+0eJ/bKqAzVEVXsqyl2RfG+Oso0en0B1fdtquVPVNsL1E+6
Dr3jyGPLXijljKKY7/txcPV5osrtilJuJ5uDi1+zy8lsk31OXK/NcWXWa8V8
z/cAX3s+F99P7CBjNxhdY3Y6tU+aJNunTpV5Sm7iRPNeMN1O7IyyXGHcz5S6
5jRW7BPj77Abqn3uXNk+b55snzNHts+YYZ4nT+fkc5neMXZFsYOKa6fzsfss
y44xTu/YFai2bmrvUKapqZPOuWelYWx59corl2/40pee3XrPPb/Z8+STt3Sm
Uh/b39FxduemTVOklDWUAMXj9uIwwgjGYrHZ0Wj0/R6P56f0vi0YDO6kudbN
/jXlilLzjT1Nxf4o+5wphyvKPvfsfii4ogAAJzCzhb6/ra05SrtnaWx3uPO7
Y4wxAAAo6J/wWtYhw0Hbbq+VuvoFAABDwRB61i8nuL3G6uoXAOD4Jy7cX2/s
ievtbsno7GuixFoSmusZrdcQAADAwBjC/edGcUYSup+9Rgm1GJprGa3XEAAw
sjFE+deghMO2da/x5U7cYb/AiYPOe/hY88jQ2DbmEwAjBzfWF8bQ1DbWFnC8
wfNF1/1qOGjf0Ni+zgAAAAAAAABKZ4Zw/7d8OTKj3AMDAAAAADAETD+UtBxR
tPU+IEQgIUSIEksKMeZ5IZpeEqI1GQjMWub3n7xUiDNp/3mUS9NCXEX5RLqi
4nNtHs9/JD2eHyS93l/Q698nKyoS9H4pZRXlNXq/N+n397A/J1dVJXO1tb3+
prFjTf+S6exhN5DyAtm9UEUeqL7we3Y6Ka9TsSuKnUbsH7K7otgZNG2abJ8+
XbZPmfK664edUVwDu4n4HBzlm7JqzdH38y0tMk/fMUOv2+i7iXHj5J3Uhyup
rXl0/DjLFcVhR41yydRY+9kZE6UaY3T+cjmj+nNFceop06jdC2gMbmlqkn+m
fr5oc2OxE8v0L7EzynIwKU+U6V/isVW+LB2OKHvYF8bpzw9l1Wf6rOh3dV+U
T8xyRZlOL/Z50TVhl1OernPHnDmyY/582bFwoexg39PMmaYrLEfXz3Q88XjY
vFRmf2nc+J7gY8zz0L2St1xTpmestdX8rO/escbUHCPLO0VjV6D6eyhdNM4H
qD/7ktHoLrqXtlA961a/4x3t6/7t3xa/9oMf/H7vo4/+4EBHx2e6tm+/pLB3
78K9e/c2SSkjFK/bi8QIxEPzZ2wwGDzX4/F8nfI0vX6N5lo3+9nsrig173if
3dlkd7aV29umUuyJstqCKwoAcCKxRej7+9qbj9LuyxrbHe786hhjDAAADP1z
XssaZDho2+11Ule/AABgqOhYv9xqV3cAACcGbq81/5+9MwGToyr399f7OvuS
mUkm+56QBAQEXGgWN0ABEQUBRUCFe8V9QUUbr6joH6MoqwaDhCSzZQXBsDUi
O1lmep2ZbGQIWciekD3p+v++qq6hGLL0MF1TPZnvfZ7fU9XVVXXOd7rO6c7c
y2u+rz0Ryp/fwCGT+5KrRLpRkyAIgmAtYbL+e8OYsLnldpsQ5dd3ptm/S3KV
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
fCBM+TMOIZP7It8ngiAIJy5mf591N2Fzy80p+TQOEZP7k6uEulmXIAj9D6v+
DdJX1tEP+j0hnPiY+bwdbx71tfnzQdYIQRDEFdXdhLKoTRC6g5nft6Es2g+Z
2L7MQ0EQBEEQBEHIH54i63/L9zRTcz4qgiAIgiD0G5Qj+KHiRO6XiHzYBrEt
fZ2oehnR0BjRuBaiU5qJPor9TyaILokSXR23278Zczp/2OLx/F/U6/1zzOeb
HvP75yZ9vqfiXu8rMY8nHnO5VrY4nW81Oxybog7HtqjTuSvqdu9FDkQ9Hvbv
pOOBQDpZVKS0VlQobRlXVNvw4Zofin1D2LaOGKGk2O3DfqeBAzW305G8TkZ3
E95X/T/sgOLwfuZ1MhPVDWV0TekOKN059EFdUeyf4nuzc4g9SR5Ppw8ppvuQ
2BkVDHYmwcm4op42uKImIBV4zV4Y9tOwk4b9MRVojx0yus9JdTmZ4Ioy3r+0
rEwpxfFq1HKay6XcjD5NRz9eqK1VPyvVF8WuqIkTlfZx49TPMYUx4dpUzxN7
ovD4dTqjkBg7oxwOzQfFY6TH4Ific4zX6L4p3TN1VFcUf7b8ObArCs9NCv1M
smeM9/kzwnHVJ6X7ofiz4M8Fn09Cd1V5PIfxvO5DO9tj7Ijyettw3uJ4ael/
ErW1T7Sfeur8NRdfPPetm29esP4Xv/gX8tT6H//4uTXXX/+fVRde+CS/33bS
SfUrzj33kY4bbpix8de/nvn2nXc2brzjjoXrfvzjRR3XX//MG5dd9uyqCy6I
rP78559f89WvvvTm17++uOO665atvuyyxcs/+tH/to0b9+jyiROnrTr33PDa
r33taxvD4U9ueOihSbtfeKFGUZSg+KF6DLuiiv1+/8ler/cHyNNOp3OdzWZT
XVG6r4nnIHuiOPo81Odgrl1RfO8jzWndEZXxRPGxXWVlZUn0Q1xRgtAzMv4n
dS3tup5mXuvvq74kJ7aYa/U+okiQ6O+leF1FNHsoMo6o7hRsz8L24zj+UaKZ
p2M7hWjWBBwfobmk6nHNtAKi6d6ML6qX6zX6n3QHFGXq111YXX1Y3FfeRpxd
rutt8NPU1L+5VR+j7Y+b3LbV4b+ZlhyjfkEQ+gchMmeNCWXRttXroFl1CYIg
9BQz1i+r2jUzkSzrEgSh7xEi69cYY8KmVptbQpRfv4cjJvfHqroEQRAEc+Hv
Xqu/G4zpS5j93dsdQib3JVeJdLMuQRD6H1atO2av6blOOMu6hP6Dld/ffW3+
fJA1QhAEcUV1N6EsahOE7mDm920oi/bDJrZvVgRBEARBEARB6D5byPrf8j3N
1TkfFUEQBEEQTnQ6/VBhIju2jsVErtVE3maiwDKiYmwrcWwwtqPxekqU6Ezk
/DjR52JEVyA3YP97Ubv9ly0Oxx9bnM5pMY+nIe71Lor7/S/G/P5oLBBYjv0O
HN/Y4nZvjTmdO1vs9j3NNtt+bA9FHY7DOJaOu1xK0uNRkn6/kmJXVHm50lpT
o/qgWtkLNXy4mtTQoZrjJ+P26XRE6X4o3e2ExDns/MF76pajH+8a3QvUJbqz
qVuuqLKyd11R7CFinxV7iNhBhPo63Ud6dGcU+4gyniPdGdXpikK+jPtPQgZk
/DBGV1Q5xqEM7ebKD3UsV5TuruE2S9BeIWoYbrcrn0d/bsfxeah16ZAhSuuY
MUr7+PFasK+6ovC58TipdeuuKD0G71OUfVHGsAtKd0QZr9Gju6Iwlqp7y/i5
6Z+L7oxiH5TuCjP4wTr9UHw9fw64V4KfSXxeycxn1sJeM/ZE+f1rYsXFy+ID
Bz7dNnZsffvppz+w4tOfvnPt9df/5u0//OG322fN+n87Fyz487ZZs+55+957
71//61/ft/7735/accMNt3dcd92tG3/xi1u2z5z5s13/+c9tu//zn9u3z5v3
hy1/+9vUjXfeedfbv//9X9/+05/u2zJt2rRtDz308KZ7763fcMcdTW/96Eez
13zlK9PWXHLJ7zsuvfSHG2688cubfvObc7bMmjVh95NP1qRTqQJFURxWLywn
AOxGKXK5XJM8Hs//IvMdDscam8122It5ys99ZWWlOtd4/hnnIbuizJiDfE+O
7obq6orS+4H9XeiHuKIE4QOjGJxJ7GtiBxJ7kThh97v7kcx7izPOpJd82BYS
PVhBNGMQUdMoorrJmh9q1iewvRj5ElH91dhegy32Z38e712IbUjzRjUN1/xS
DUWag6mhN9Zz3QFlqIV9Vwv9Wk0R73udUKoXCvuL8f5T6OdjJUTzirU+NwSJ
/ujTnFm90ncjvydz/+Z223Haf8zk9q0O/hlAI48zBoIgnNiEyJz1JZRF21av
gWbVJQiC0FPMWL+satfMRLKsSxCEvkeYrF9juruG5hO8PubL2hsysS/ynSII
gnDiYvX3gjFhk2vNNSEydzxC3eyP1Z+fWXUJgtC/sOrfHxET2jYz4SzrEvoP
Zj5vx5tHVs8HmUuC0DuY8V15vPWFCZnQbm8klEVtgtAdzJiD3Xlewya2b1YE
QRAEQRAEQege/N86Wf07PhcZn+uBEQRBEAThxEQx+KEQJ/uhIkTet4j87USF
S4kqXiOqfZlo1BKiSc1EH15GdE6M6KIE0RfjRF9Dbm4h+nmU6PctNtv9UZtt
dtTpfDzmcv035vEsi/n9bbFgcE2isHA9tlvifv+OqNe7J+p278N5B6N2+yFc
l2ZXUNxuVxIOh5JwOpWE260kfD7V8ZNk35LuWqqtVVKDBqmeIT7GHibd72N0
Q3XNe1xQgYASw73ZyaS6mTjs/9Gje5t4n89hV5DuHMrGE6UHfUoaXVHcb+4/
9x3H1X6gjSh7jTjsQeJtV2dUpu0lyNPIfbj3Naj5ZGQA6vHjffbD6A4n9siw
q4bDr/k9o1Mml64o3uf22JlTjPac6H8BPsvT0O8bcPwe9PFp1N4ydKjSNmqU
lhEjlNYhQ5RUdbXmZeJaj+Z+MjijsnFEqV4pHj8eO/ZsGT53oz/saH6wGPu7
eMz5enw27C1LcHDfZCb8OeEz2482tsYLC1cnqqtfbx0/fuHK8867782rr/7V
hh/96Dtv//rX12+9776vvLNo0Vf3Ll16w4F4/Ju7X3jhpq0LF/7vptmzb9o8
ffr1m/72t6t2PvzwZTsXLPj8vpaWLxxau/ZL+zs6vrxnyZJr3olErsW11++M
RG7cvXTpd/akUj/a09Lys53PPvvLzXV14a1///tPt06devPmO+746oa77rp4
58yZH9359NPjd7e1DVS2bi1SFMWN2K1eY04A2BUV8Hg8I71e75Vut/t+h8Px
OrIL8y5dgbk9YMAA1Qulu5o4+hw0zhH9da7mIc9r47wvNHjjMmvCLrTLrqj7
xRUlCNnCfiilizOJ3UjsS5pfoDmgpmd8SDMKNSfSooCWF/D+v0s1x9PDw/D+
eKLGUzX/U/2FGT/Udci3sH8LtrcR1f2GaNb/4fXPcd13kWs1Z9TM03FsNPZr
tPbYy8R9UtekXJKplX1OD2T8UA+g1khQ8z7VV2j1zKhGjZVEc8twDDVGijU3
1MxyrY9cLzuxOLOHatfMLNHGhX1R4d78PjqHzP2b2/rjtP9hk9vPh3QgZxxn
HARBOHEJkTlrSyiLtq1e/8yqSxAEoaeYsX5Z1a6ZiWRZlyAIfQ+r1xdjwibX
agYhyq/fxFZ/hmbVJQiCIJgDf/da/Z1gTF8kQuaNRySP+mJlXYIg9C+sWnP6
yhqqJ5xlXUL/wcrvbqvng8wlQegdzPiuPN76woRMaLc3EsqiNkHoDmbMwe48
r2ET2zcj2awvgiAIgiAIgiC8ly+S9b/le5pdOR8VQRAEQRBOKBSDH6qByBEh
cj5O5Okg8qWICvC6HNuaKNHwZUQTYkSnLSU6u4XoM9i/LEn0lTjR/+L9W3Ds
t81E9yCPYH9hi832XLPdvqTF4UhF3e43Yj7fumggsDleWLg9Xly8O1FcvBf7
B+KBwCG8l2ZHkOrisduVeMYVpcbo+2E/U1GRkigvV5KVlVrYD1VWpiRKSrT3
juKHShj8QO9xArEPiB1Q3AZ7f3T/kDF8zOhtYn+Q7oriNjlZuKLYY6X2ubpa
9USxI6kV2+SAAWp/VFeU3gc9ervsqsq0zQ6jJYGA8lTGFXU1ap+CVOA1e2HY
FaP7anw4n30xRreT0e+US1eU7sVhZ05JxhXlwmM2Av2+GO/9Fuc8is9qMdc/
eLCSytSver8wLjyO7GVSPVn62NMRPFDHCjukeMz4ecp4teL8mesxuKDU9zMu
qPe5wjKOsHjGDcXPZYKfSySmtZVGDqGP+1pcrq2476pETc1rbZMmLVh1wQV3
r//e936y+b77rt3a2HjxroULz9v5xBMfO7Bs2UcOrFv38YObNoUOvvlmaG8q
dc7eePzcvbFYaA/e2/3aa6ftb24+ef/atSen33nnlAO7d596YP36D+95442P
HFi16uyDa9eef3DHjs8c3L37c7jHxbvb2i7d/eqrl+5+4YXP7X3llU/ueeWV
j+1PJk9Jr1w5endHx0Bl+/aSdDrtUxTFieTaKdJfcSDFeLbPxNz6NubbDDz3
McyDbZgDaX7+OV3nB295bvJ85H2en7nwRelt8dzTXVHGPgQza0LGFZVCm9Ow
/ZzX6x1M4ooShKOgHMGZxH4oo/+pAXOofhjRvKGZ/YFEc6q199iXxMfY7zRn
MrZn4f1POBxNl9jtjVcjN+L9H+PY7UR1dyEPYb/BZqufZ7PVNWZe/0XzR83C
ufWf0+4xe5x272kFWr9y5Vwy+rDY5cQ+rMWo96kizf/Etc0egbYnICejf6cQ
NU4iahqL90dpdc5F3xqmaP2sOwfvn4djZ2P/NKIZY4geGqj5oup9Wju9yjoy
929vNxyn/b+Z3H4+ZA9y4XHGQRCEE5MQmbOuhLJo2+q1z6y6BEEQeooZ65dV
7ZqZSJZ1CYLQtwiT9euLMWFzyzUNXiPzZf01sy/yWQuCIJx4WP19cCJ8N4TI
3HEJ5VFfchlBEISjkev1JpJluxET2jYz4SzrEvoHIbLueTO7bbMTOvbQCoJg
wIzvykgW7YZMaFfWF6EvYsYc1JMNYRPbNyPhLOsSBEEQBEEQBOFd7iDrf8v3
NM/nfFQEQRAEQTghUDKOKMQeIXLGidyribwvEBVgv/R1ouoU0dAlRONaiE7B
sY82E30qSnQp9q/C9sYY0Y+w/TXevwvbh7Cdh+0zOP5qi82WaHE4VrY4nW/F
PJ63Yz7ftkQwuCtWVLQ3UVKyP1FWdjBRXn44WVaWTpWUKKmiIiVVUKAk/X4l
wZ4edv0YfUnsDuLj7PUJBN51LyHs/+l0QbG/iXMEP1TXdHqD2BnEfiC9TTqC
f4idRexw0r1N7K3ifvD9j+eK0vvA57ArqqLiva4oJIXXXAt7iqJdfVWZMYh1
cUYtwVg8jfG6G/VegTYmYFuG1+yFKi0rU31N7Ilx4H4uXMe+GPbIsJ8mF44a
owvH6KsxuqK4XSfGrwbbc9HfX6A/8/H+a+z6qqpSUgh7stQxwdjwZ6d6m/TP
ojuuKKMjij9THnP2h3H4WWEPlf55s29Ld0PpXii+loPxYj8Ze8p0PxSH3VV4
xtOYB4exPYDt3mVE76Dtzbh+dbyk5PXU6NGPLj/77PvfvPban2363e+u3v7E
E+ezu2lfKjVmb3PzsD2rVg3Zu23b0HQ6PQwZgYzat2/fmPSOHaP3btgwPN3e
Puid1aur0rt2VeK9AWlFqU7v2VOb3rt32N69e0fi3NGKoozdv3//hDSyf9eu
k9Jbt05Ws2vXBNxnlHr++vWV6c2bC1evXu0VT5Qp2N1u9xjMqRvKy8tnVFVV
pfDcv+Pz+dJePFc8B43OJt7nY/weh+dJLlxRfG++h94Gz3c+zsf0++tto032
WO3G8WXY3orjp6KOoNUDKQj5A6+TXZ1JES/RogC2xUSzBrzrf2JPUv3pRHUf
IZp5JtEM9iGd8q5HaRbmVz2OzzoX51+E87+I19fZ7fXfQX5hs9XfiUzDsSZk
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
PvZ1TiHNp7MIOUDWr+89yV7keeSPyLm5HCShT8Ces5+R9t/FHCLrn8eepB2Z
hnyFxB0l5JYRZP3znYtMzvXACIIgCIKQfygZP1Q444d6IOOH6iDyvUJU+CpR
2TKigQm3e1TK7/9QzOP5VIvL9dUWt/vnzU7n37H/VNTrjUWDwTWJkpKNicrK
7Ymqqt3IPuRAvLLycLy0NM2Oo6TfryR9Pi28z8fY9cN+KHb76OHX5eVKorRU
czPhPPY+xXFdZ9jdxN6k4mL1XPUaTkWFel2cHUG6K4o9TbqjSfcDUTecUW63
Es84nXRPUxJtqK6o6mqldcgQzRU1ZozSyr4ovGZfFPdHdVZl+q+6mrg/enRP
FNfGHqruuKJ4XLgPXDvGLDV4sNq26opiT9TkyUr7pElK29ix6nuquwrXcrvq
WJDBFYUar0BfxiIFeM+BsKeG/TC6I0b3x+TSD2V01bAThx04Ri8NH2dnTiHC
rqhPIr/E/jz07RWunx1Ret0TJihtEycqbePGKa3Dh7/PGcafn+r9MriiYhlH
VDyTrn4o5BByoJloL7a7kG3Y34SxW9tss63EOMZaPJ5XY4WFT8UHDJjTOmLE
gytOPfXOVZ/4xK1vXHXVzW/+8IdfWXfHHZ/fPG3aJ7fOnfvR7YsWfWjnK6+M
3/vaa8N3L1s2cOfSpRVbV64semvxYr+iKC7ELo6ofsd7XFHIOkR1RXG8eG55
y3OiHHNYdzmZEb53KdYU45zXvW1GVxT6I64ooS+QcUOx/0mxa44h9iNxFrMn
ya3t83F2Jqlbt+YjigSJHivB6yrNUzR7nMvV8CGns+7jDsfsz7jdc77gcjVd
63Q2/q/T2XCLzVb/W+Qe5BHkUeQ/dnvdMoejvs3prO9wueo3ut0NWz2exp3I
HuwfeNeX1KDYbI1q2J2Ee2LeN2GuzcG8m3u4omLevurq+dsHDnx0zcCBCxbX
1CyYW1W14M+VlfO/X1Iy/wqPp+l8orlnEjWe5XA0hhyOOedynM65Z6MNHJ8z
Ge+PZvcT0b2VRPMxZyNerda7PEQv+bRj9aU4t5po5nCXa87EgoJGzO8F5yIX
V1Y+elVZ2fwbi4rm/TAQaPyVx9MwFf38O2qvRxuPo77/ut31yzye+nbU9ia2
b+Ocbahjl9fbuBfZ7/WqDqzDSNrtblQwfqh1jlqvy1W3D/dZj/FYinvOdzjq
ptrts25ETeehX+OJ7huI/hZp/eXP03K+ROb/PY7/5j7oOP2Y0Av9yNe8k/kc
BEE4MQiROWtFKIu2rV7PzKpLEAShp5ixflnVrpkJZ1mXIAj5j9XrSX9YWyKU
P2NmZl9ymVA36xIEQRA+GPw9YvWab8yJSIjyZ8zM7kuuEulmXYIgnNjwmmDF
GpPrds1OOMu6hBMffhas+p62eh7IHBKE3sWM9eZYa4xOyIR2eyOCkEvMmH/d
+U40s30r1hVBEPoObuQjyHeRmcjryBpkH3V/fdiBJJGnSPMFfQ4p7L1S+gQu
5PPIP5C1ZP2abmbWI39DLsrJyAn5RgC5grR1YwNZ/7yZmReRnyBjczJyQn/m
crL+ee5p9uV8VARBEARByBuULn6oCJEzTuReTeSdT1SA/VKkahnR0JjbPS7q
938oGgyenQgGL27x+2+Ieb0/b3a772nxeBZGPZ6leH9tvKBgW7KiYk+qtnZ/
atiwQ6kRI9Ls7GkbNkxpq61VWtmrxI4ldiIh7EZin5PqOxow4F1PFM5LlpWp
PibVEcUuJXYqZZxPatjdhNed7ib2TbEzia81OKa4DdXPhPOjTuf7fVHH8kbp
7xl9UbgX9/19nibU1zZypOplUn1RI0aovqjUwIHq+4mMv4prUh1WXDv7i/Tw
a90BlY0rSj/X6KxCW6081qNHq76k9okTVVdU+4QJan+S1dWd3iR1PFDX66jv
SXZFYf9LGM8xSACv7RgjdkWV4XPg6H4adjnp7hijS8YMV5TeZgDHi/A5D2NX
FF6H8f4C1PxaTY2S4np5zPVa2Y01frw2/oMHazWj/6qri/1i/Bnis4yj3jjq
5Oh+qLj2ubMf6rDRD4U5sAP7m7G/Dlnd4nAkMX6vRwsKIvGKivkY84faJk/+
88pzzrlt9Re+8N213/7219bffvvlb99772e2NjV9fPvjj5+268UXJ25fsmTk
nlisNr1iRaWyenVxurk5oCiKG3GIH6pf8z5XFPYPsSNK90Tp84I9Tpxczj2j
A06fd0fyw+mvxRUl5D+6Hyqc8UOF3ZobaaFfcyJNL9a8Q48Xaq8fDhA9gPcW
I0/heH0F0ZxB2I50uWZNcjrnnOFw1J3vdjde7HLVf9njmft1t7vp+y5X420O
R9NU5EG7vX6OzVb3NLav2O11+IqpW+V01r2F8zfjuu0eT8Nuj6dxn9fbeAA5
jP205kpqUnA9vnObDK6oJsz9OZhrczHv5h4uL5+7p7p6/obBgxfGhg599Ikh
Qx67u7b20e8MGjT/0srKuWcWFMwfg9oGE/0TeWiE2z17NPo3yuNpGu71PjLE
55tfEwg8XFlUNLOktHQGam4IEt0d1Gqfh7F4uBLHcG39GJer7hSvt+7jJSUL
Pl1auuDyAQMeva66+tHv1NQ89vOamoV3lJbOv6ewcO7Dfn/TfNTxjNvd8Bpq
TDidDauxv87rrd/i8zXt8Psb9yD7AoHGg4FA0yHspzl4T62N4/FwmhR2R2nj
U78W47IY4zIfx+/C+zc7HI2fIZo1iWjGIO1ze9xDqgMsL2gj8/8uNz2Lfny/
F/qRz/l1FmMkCEL+EyJz1ohQFm1bvY6ZVZcgCEJPMWP9sqpdMxPOsi5BEPIb
nstWryfdXS/7IiEyb8wi3exLvn3muapLEARB+GBYvd4bEza5Visxc9xCedQX
K+sSBOHEhf9tYMW/NXLdrtkJZ1mXcOLDz4IVz1rI5HZlDglC/mHGehPJot2Q
Ce32RgQhl5gx/7rznWhm+1bUIwhC/nMl8i/qnXXjZeQbvVNWXsL/fdRXkSb6
YA6uEyE7kUeQL5LmJxP6JmXI9ch8JE3WP1dWhH1630MqeziWQv/kd2T9M9zT
vJTzUREEQRAEwVIUgx8KW3uEyLmYyLWayLueKLCMqBj/qB+AY4ObiUYvJZoc
dTrPjHo8n4j6fJckCgquThYWfitWUHBbzO+/r8XrnRfzeF6Oer2r8Xp7orh4
f7K6Ot02fLiyfPx4ZcVJJykrJk1Ss3zcOKVt6FAlVVmp+ZLY3cPRfUfsXMJ7
qusp41Tq9ETpjih2NrHnCVH3cUx1SLG7ie/BviR2TnF0N5Pui8J5fP57fFF6
jueL6tJeIhB4109VVqb2u9PTNGaM5i4aPVr1FfEx1RlVW6ska2o0Fxa7rHCt
7n3SxyKRrStK90Xxlp1Vui+K+zFokNKKcda9VeyJYmcU90t1J/H4G3xRi1HX
k6jvLmwvxziPwjF/xhXF7qZy9JVdUeyJ4de6t8bocsqlr8bopdFTgGMlaHME
jn8Kdd6Gz/ZRjPfrGNtW9mLpY64HtavjjrFQXVE83jxW7BVDjQl8jgnUm8i4
ogx+qIPIPmQ35sJOzIEt2F+PvIFnoBXjtSTq9z8fKy19LFlb+wjG9u4VH/vY
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
/9i0aNENT51zTtMzH/vYN56//PLPv/CTn1z08l//eu7OlpZzdt9zz/Id//nP
ogPJ5Kx9g4M16RdeKN21ebM3vXGjQ5IkM9rEfChWjlJZUR/CtXarxWLZJgjC
MJ47ihVFa4XWRvaa0ZoVpV7LZsPhZ2ZFsfQQrhOVEUVspC+L2JoBbrQDtOEc
vM1vs91SZbGEZjgckYU2W8up2AZdrtiH3O7oJ1yu+Ofw8+VWa+Qqszn0fUFo
/oHR2PI9gDu/C9BytdEYugrPfVsQwt/DZ/zUao3+zmaL3Wq3R1udzuh96Cfc
7lgverPHE30BvR2f/ZrTGduHfQ7abJEhfPawxRJOq4woiyWW4UTFjmJEZZv6
imIkixUVkW0yhdIYy0GMdRfGsgn7djkc0Ztw3G95va0XBAIdJ5eUxGoaG293
19ffal2wIGxubFxjqa/fbC0tTTnr6h70lZW1l1dWdtQ1NNw1d968jpMXLLj3
rJkzV3+goWHVf9XUdHwRr3/T6439yOGI/RJj/zPGcge6HeO83+eLrauqauut
r+94trGx88U5c1bvmDv3rtcaG1ftx3sPlZW1HcavymG3u3UEa5B2OFol1Qob
SuFDqYwolRM1Nn+y3U6sqEga63kY++/G42fxXT1ptYbWmM0tNwlCy9XE9hKE
FWcArGgECJUo775ovmN7oDB/ozs7h1iuL1Asxe4H0AtzqBeLxSoeBUGb/SCY
w9h671la5cVisViTURC02b9ykd577ETdlGNeLBareKX3PnIi7ildoF0Nu4oo
lnw6OMG8WCwWi5Wb6LtX7z3+RPsdEARt61hMseTLXRPMi8ViTU/RXqDH3pLv
cbV2U455saa3aB5oPdf0GpfXD4tVfNJi7XflMG5Qg3ELYRYrn9J7ruq9nnJ1
U475sFis4hH9N3P13jvezB/QLnXNRf+t6svQT4D+dZwufhgUVhGrsDKjv4re
APrPgengjejPTeQFsE4IER9R77k5WR/Oe1VYLBaLxWJpImkcPlQYf/eHAGx4
7EwA+B4BKH8SoL4bYC7+Q2DpeoAz8Px7sL0gBXAxnv8StlfiuSY89xv8fAv+
0I3g57V4/HDCaEx0m0xPJczm51N2+8spp3NXj9P5esJuP5S02YaTdvuIzGwi
TlFZmdRfXy8NzpsnbVq8WGZGbVq+XPbg0qXjsqKSxPPJMJxkVlM2owmyOE3E
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
9k9XVHRcVl7e8e3S0vZr/f62P5SUtK0oKYm3+3zxf3m90Sddrkif3R552mKJ
bBGEyBaTKfKMydQyiO43mUKDohiia89ardFt6Fft9tguhyO21+2OHfD5Wg+X
lsaHKyraR6qqOqSqqk7ZFRWdkt9PzKR4hplE/KMjTCSFjxTNWOVHHc2QonOi
SLyocIYXFZIMhpYRg6F5H7YvYttjMITuR9+Bn6+zWMJfs1pj/w/HuwBjOxf9
Xhz3/Zjbh83m6EdEMfoJUQx/XhCiV+Dn79pssZ9ifL/1+dr/Hgi0RdFr0f/x
+1sTWJunPJ7Y82539FXMdTc+Zx8+56DLFTscCMSHams7RmbNWpUmRtS8eXdJ
c+feJc2atUZmRWGdM3nHZNaTksuRPLOt8qEoT9UqL0plRdntcTxuxeeEh/Da
K1gP/DoPtRkMK38FsPILAM1no2cB3F1ShKyo90Hh/l730RziObeA8UwFP5dj
3Vgsln4KgjbrP5jD2HrvUVrlxWKxWJNRELTZv3KR3nvsRN2UY14sFqs4pfce
MtE9cjopCNrVsmuCsXRpGIueebFYLBbrzUW/5fXe21U3aZxrMUrL79/gBOII
ahiHnnmxWKzpp3zvm7n++0LL/VoLN+WYF2v6iuaAHvOsEOPy2mGxilNarP+u
HMYNajBuIcxi5Utafvfm8r2o5fiF3k9YLFbxaCoxKdZqVIN8iRlR+pr+m9dX
vOVbYuUiZkTp553or7z1K2JNY9Fepvc8nKy/mPeqsFgsFovFOi5JGT5UUxYf
ak2GD/UQgCsFUPIEQOWjADOeBJiPPmUdwNnYnrsR4GPozyQALusG+DYeX7sB
4Pf4+R/4OZ4EuA+PH08YDD0Jk2lztyC8kDCbt6dstt1Jq3Vf0mw+kBTFwwlR
HMbzaWI69djtUq/bLfX5fFIf8ZmIR6Syj7KYSb14fZSZlOEl9WD/FF5PORwy
I4p4SzK3KZvdpPKh6BwxpIgnhf1l/hE9k8bE5/aQib1ErCjiL2Usj1dRITOj
iBHVW1mp8KmwP42dxPgnwopKjmVF0Tm6js+Qc6BcVD7TWI5VdjuWD5XNdco3
L0qNRa1XebnMhJJ5UY2N0sCcOTInqh+PiSNFfTY4ndI/8X38FfP6POZ0Mj6j
DGtlx/q78Fjl1GQznfLFihr7rOzPNCZxckqxrcJ6n4z1vwzfzY34nu4ThJFu
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
JurTNanE8YkZUcXrAfQ7jv3qWGP0dmBGVLH6m2/y3ljTTxeB/nNush6GN/3f
dLJYLBaLxdJCUoYPlTExokzrAMQuAOs2ADu23v8AlCUBatcDzE4ALO4GeNtG
gHehz0N/En0pXv8G+od47VcbDYabug2GFvRdCaPxoW6jcWO3ybQpIQhbk6L4
ctJi2Zmy2faknM79SY/nUI/fP9RTXj7SW1Ul9VdWSv1lZVJ/SYnURybeUGmp
1FdeLvXh9b7aWqmvrk7qq65WWEzEi1LZTWP4SDLzyW5XGE2CICVU/pJq/DzK
jCL+EnGi6F7iTxH3Ccce5UTROMSJomvYR342sZroHjId070qLwpzkHlR2NJ9
KYxtlFlltR7hRo3Hi8owo45iRaGTarwZrpXMi8qwrbI5TbowosawomRneFFU
A/n9ETcKLdeE3hnGtB5rcR/W4Ub0ZzCfkzCfUrQd7cS8VE4UHRM7RmXX5JMV
pbJv1OfSeNQSK4r4NSLG5sD6L7VYRi5xOg/+2mrd3SGK2x6zWjclnM4NKa/3
oVRl5Zr+WbNWblqy5M/PnHPOz7decMHVz33lK1/Z+sMffur5G244f9eKFe/a
t2bN215/8MElrz3++Nz9Tz5Z/3oqVbF769aSV1991bW5q8sqSZJAfCg0/yZm
FUrEippvsVi+KoriPwVB2I4ewc+j62CsaZ3kcx2OfeZ4vKhMewjNrKgTTrQf
vpVVPpTKgCJ+D7lLOGL6rF6jz7+zAIRsAGvcADcGAG6qAWieBXDHSQArTzeZ
Vr7LZGo5TxTDn7RY4pc6HLFvut2t13i9rb/2+1tvCQTikfLy9rUVFW2PVFbG
8Sug7eny8vi20tK2V/3+OPGQXne7YwedzigxoIYtlkjabI5JR0x8ozA6hOcj
I1ZrOG2zEauJmE2tsomb5PMRN6ldqqnpkBoaOqWZM1fJzCRqs7lJHg/dc2xu
0lhuFPWj/sSY8nhonDh+37Wmfb7WEbc7OuRwRPZhPK+in7VaI73Yf73DEX0M
83nU44k+irn9B+/tcjrD99ps4bsxl7VGY+g+gyH0ENYVfy629OPPwC2CEHoZ
c99pt0f3uFyt+7GGBz2e2BDGO4xtmuJ2u+OyKV8yHfv9bTILi7hYjY2rpdmz
V8stfaZalJURI4v6H82Lys5dZUWpfCij8YjpPL0DYmVlGFnDeLwfY6V4N+D1
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
GKjeMzhYKu3c6ZHWrcPEU2ZJkkzMh2IVgd7AihIEYQQ/y6woldmkrpNsrlo+
WVEqE05lUdGzs5+fOSZWVC+uz59gX2JsMCtq2mk8PlTYDPCwDY+dAHEvQKgE
4G70bX7l8y2uI2yoW70Ox4oym21llc12ew1ADC23legygDsD2LdMORdqBPjH
YoCVp+PxuwBazjMaQxeLYviLZnPkSqu19RqrNfobhyP2N7e7Ner1xu/xelsf
ReNPmdanA4H4tkCg7dXS0vZdfn/bXjx3EH3Y54uNeL2xDPcojt8ncZn9pPKi
FB/NM1JMfKdohl0Uk+10xmQOkt8flyor26W6uiOsKOImUTtjhsJNKit7a16U
ICim89SHnq1wotql2tpOmctEHKa6uvZ0VVVbury8bRjHPujzte7D5+51u2N7
PZ7Y6/iZvAdz3YWfX8VrL2OdXsXYd+C4uzG3vWjiLh2yWMJDNlt02OGIpokB
RXUZy4hS3JphPincJzomFlRNDeVM+a6R5swhK7krnKxOqaqKWFntco3oHqoZ
jiWzsNQaq7yobFaUyotSa47vZARbjDmCeYQH8Pw/sVa3mEzRn+C8+Bb6SzjH
Pov+JM6Zj+KcORf9DoUd1bYAj2fgtQplftJcJK4ZzWN1ThdExG8q1N/vtqBL
c4hpJvrZAsY11fzDHGrIYrG0VRC0Wd/BHMbWew/SKi8Wi8WajIKgzf6Vi/Te
YyfqphzzYrFYxSW9946J7o3TWUHQrrZdE4ylS8NY9MyLxWKxWEeLfsPrvZer
btI416kgLb9/gxOMRe/5oFVeLBZreijf+2Wu/67Qcp/Wwk055sWanqL3r8f3
sN7zntcMi6WvtNh7unIYN6jBuIUwi5UPabHuJrL+tByf1xuLdWLqGtB/zzge
v0uLYuSgy9Av5xgju/j8KLrqDW/1xNTX0DtA/3fCnri3gcL5Y01fvQL6z7PJ
+st5rwqLxWKxWKyxIk6UcR2AuBnAuhHAkQDwPWa3VzxptdZ3m81zN4risqQg
nJkwmd6L/kif0fiplNH45YTR+D/dBsOP8Z4bkgB/w/ui2N6D7SPdAKmNBsPT
2Of5hCC8krRYdiXt9r1Jt/tAT0nJoZ7S0qGe8vKR3srKdF9lpTRQVSUNVFdL
A3V10sCMGdLg7NnS4IIF0qYlS6RNJ58stwPz5yuMJeJFkTOMKOJFEYOpr6ZG
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
urpNqqpqkyZMWDzgjKLv1c4m4YgSXiNyHInEepiEK0rxRQ3dF64oOk+4osjr
RI4i4YoiP9XRXVGDfig6r6CgZYjvSoTaoDivxD2V6+h+1A6qr8OhuK1EhMNp
0BV1pC/qaFH7mIbzRZEjajhPlNoVFeuLOpor6mhuqEE/lNpp1SCH7ifKoO+o
T6ifKisXy54ocoTRMeojarPd3iCPO3KN4Rg9FPVE7cDx9DaOp25swyvY/ysq
K1v9s2Yt+/uZZz519yWXPHfbtde+dOMNN6z++m23Ba+4667ei+69t+/sf/xj
w0mPPLJ+6uOPv1nZ3r45v709nCFJkjkFPFEEzm/4D4z93/0eS7CeD+tQx3RP
G2Zygv3MMAy7ohJNexztYhiGGQ20zmixfsWD3musFu8ahmH0Re91QsSrdUPH
GdRfqbB2ezSsB7+TGIZhtEfL90miYRJDq+fQnmA92jWsi57tYhgm/Uj2ehTv
upEu66CIN852MenPWI0pgXcMy+S5wTDphQeSP2fbdSp3LNdVhkkErd/Dx3tP
al0+zy2GOTGpAP3XjpHkdyNs780pUHdOeuZ0SC1+C/r3CSf9cgsw6cCdoP9Y
GW06kt4rDMMwDJMGSFFHFMboV/mhXgRw4DYjCJD7CkDxGoCqoNU6pdNimRe2
288M2WwXdFitXwhaLNdEzObvRKzWH0Uslts7bLY/hOz2h4J2ewOetxLzUsjh
CIWcznXhjIxN4ezsd8Nu985Ibu5H4ZycfaGMjINBh+NwkPxA5IMix5DaFUWf
VcfIGSU7icivRB6h3FzZBySHnEDkA1L7odRJsnOJHERdRUWyb6mntlbqnTJF
6ps5U1o7d670xsknS2sp8+bJn+l476RJUndVldRVVqa4mYQvitqijla+qFhX
VGmp1FNZKfVUVyu+KDwm+6KwDrLvKdbzRL4otcOLvFH4LERkx1PUFTXkWSbi
jFL5oqge5G8aqPux2iWeyXCJXiv3tcoRFYmmC9ON6cDvluN592A+i5/LMOSG
ycOxRd4Yh8MhO2ToGCXW6ZQMV9Rw3x3NFWU2m2VXFIZdUcx4It9ms8muKMxG
HPOHcLzLfibyswlHVDJdbUebi2KOC4+bcEVRfbCeB3C7CeefH7fsiho1sX4o
yoMWgHY77mcAtOEat6AIoL4S4IkpuD8XYNEZJtPC861W3+ft9sA1GRmN38nI
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
mUy+v5nNvkUWi2+Z1ep/wW4P4I8pgbVOZ+Bth6P+XZerfmdWVuOH2dmNH+fm
Nh7Iy2s+lJfX1O92N+PzImdTU9QVRZ6oejl2e33UFdUkO47IE0X+InI9TZ26
TJo2bZnsNqqpWSI7jcj/VFambOkzHZ8yZemAJ0q4ougackwVFrbIXiLhJFKc
So1Rh5HiMSJ3ER0jzxDVhTxNwhFFXifhhVIy1PM0GL8c8d3RXFHCFxXrihK+
KLqOyqZ+cToH/VbxhvqR2kttojaSA4ucURUVi+X+qKxsk0N9R31dXt464IkS
vqyReqKO9Dop9xL1UQfHR0wZw3mijt32oY6oWOeU8FY1RdNwGPvyY5cr8AGO
0604btc5nfX4I0z9mry8hs7S0qZwdfXiSG1tW3dNTVtPVVVbBPtmTUlJywul
pc1Lq6paF0ye3PaXU0990nvhhau+881v/ueSe+5546Snn95RuWtXv7u/v98R
9UQZx4kfSk0ZKH//1eNvgzsw5yVY3/Mxm3Sq73jIrxLsb4YZz3hAm3nmiaNs
vdeCkYZhGEZL9Fy79F5ftXjXMAwz9ui9Noh4tW7oCYIHUmMd17Ie/H5iGIZJ
HvT+1XsdFmGSg1bPpz3BerRrWBc928UwTHqQ7DUo3rUiXdY+EW+c7WLSj7Ec
Q94xLI/nAsOkPx5I/hxu16ncsQjDxMtYvI/1Ln808cbViwzDpCr0/x3Wex1J
9rr5cArUjzP+sw+U/95OK+i/S2lKgXZyxn+uBCbV2Ar6j4vR5qak9wrDMAzD
6IwXwIgvOVM7gH0NQA6mCnNqJ8CFYYCrIkbjd4Nm889CFstvw3b7/SGn8zFM
S9jpbA/ZbK/hd12Y9Z0Gwxa85r0gwC7c7sHP+4JG44FOk+lQp8XSTy6hiNMp
dWdmKp4ociORE0rtbBIR7qT8fNmV1FNTI/VOniz1kS9q9mypb+5ceUsOKfo+
4nYrbiByAZnNR7qiMKGoUyhss8n+oAFXk/A2iejhjRJRO6MKCqTuoiK5fbIv
Cj+T+yhI7QOV/wo/y44kckUJv9NInFDHcGeFVQ4vOfhZ7m9yLAlPVKwrKpkR
zinhilI/X1U/UF3ICSX7oYQjSvihRP1U/qowjUn8LkIeKcUVdQCv+QCv3RzK
yOgNud2vdRUXPx2prm5cO2PGP9edfvrvN3/ucz9fdvnlv/jy6acv+NS8ec9e
cOaZSz912mmLqyoq/pOZkbEpw+Xak52d3S98Tuok00sjPsfjisLj7IpixiNu
zCdxbN+Lc6HH6XTuMxqN/eRmIi+UmAs0T8gRRe4mrVxRVNZwrigDrk8mXLew
Pgex7LU4H++hOsOJ64qK+qGEI+pBC8DDdoBWJ37OBni0EGBhBcATdbg/G2DR
JwB855hMCy4xGn1XYr5pNvtuMZl8txsMi/5oMPgeMRj8zUaj/xmTyf+a2ezv
tlr9bzkcga0ZGfXvZ2U1fJCV1bg3J6dpv9vdeDAvr+lwQUGzVFDQKicvr0V2
RZG7x+kc9DBRbDbFiUReIXIVkcOotrZNmjJlmex/Iu8TOaMmTlwqO6SqqtoG
fEe0T66oSZOWyr4oOm/q1KVy6Bh9X1LSOuA/UnuFhDNKcUQpjiHyRFH9yNMk
PFFqJ5TwOcVG7Y8SbinFExU4whMlXFGD9/ZLwhVFoWOD/VIvu6Ko30bmamqU
203PoqioRQ45oUSUY81yv9M5isNp0KuVjJC7SkTxRjUOeKKEK2qo7+n4jqjB
c448b6gjisZcS3Q/gGtD/U7MRkwIPz+fleVfimOjoaKipWny5CVts2YtXzF3
7oon5859ErfLl8ybt6L+5JOffPj001f+7/nnP+P9whf+fdOXv/zitddf/59L
br+9a/5DD71d9/rruwskSXIKT5TeE19DZmLeAf3+RnhNgvUtx6zUsb7pnteA
//tNhiE8oM0c88RRtt7rwEjDMAyjJXquXXqvr1q8axiGGVu8oP/awGtE8tHq
GbUnWI92DeuiZ7sYhmHGE6myVnu1bugJBPVlKvy85tGwHskOwzDjj2S/3+L9
nSFV3qvxxhtnu5j0gp7rWI4hvcdxMsIwzNjhgeTP4XadyuX1iUkltB6L3uOU
3z4GdeC5xDAnLktA/3Uk0fQdoz0LUqB+nBMnvwFtyAT+7yE4Y5fngEklKkH/
MZGMfDLZHcMwDMMweoAvNQPFC2BsBzBj7C8DZL0IUPY6wGzyRHUAXNdhNP6s
02C4t9NsfqjTZmsKOhxPh5zOV0IZGeGQy7UuaLdvDlqt20MWy86gyfQhnvsx
Xrsfcwj3DwcNhn7y+ERMJilisUgRu13qyshQ/FC5uQPeoSGOIvVn8iYVFkrd
FRVST22t4ouaOVNaO3eutHbePKlv+nSpp6pK6ioqku9FfiDZC4TlHeGLEk4h
cgQJnxDWJTa6+aJEueTPcrtlT5bcdnJFlZdLXcXF8nfUvmDUlzTgSLJaZS9S
wnU/miOKPFDUH8K5FNtXUQ9TiDxMWnuiYlxRwaO5osgjRefS86d6CUeUuD7q
maKEo2OyC7/rivqlgi7XoVBm5ofhnJxNkcLCju6ampU4xha8edZZf15/4YW3
b/jKV27a9KMffXXnH/7w+VW//e1lP7jiihsvv+CCX1xz2WU/uOjcc386oaJi
ocvl6sLsIlcUeWPISyOSbFdUbNTuKNrasF3kirLb7eyKYsYrGRaLZTaO75/g
HHjR4XDsNOB7h9xMNN/I10RzQziikjUH43FFFRQUyGWSt4p8UVarlebiG1jf
E9QVJRmUyJ4oM4DfCuBzADRnAjySB/DPUoBHqwEem4afcZ1adJbJtPBCk8l3
udEYuBZzPebnJlPgLjz2oMnk9xmN/uUGw6IXjcaFuLwvesNs9m2yWuvfdTgC
OzMyGj/MyWnc53Y3HsjLaz6Un9/cLxxRhYWLpaIiSiuOkWbZD0Q+plhXFO07
HPXyd3ReeXmrVFPTJtXVLZUmT1ZC++SPEq4o4Ysir1RFxWLcXyx/R6Fra2uX
yKHPZWWLsS4tEtZP9hUpTqIGuTyK2i9EXibyRVF9qF7kc4p1OYkMeqJ8Kk+U
4oESGc4TdTxXFN2TPFM2m9IvVJ+RuqLUvijyQImQO0udWEeU6I9kuKLULijh
hzpajvRGxfqfGoaNcl6THMULRfvN0dB+4yF85ruzsxs25OQ0vI5j8UncLnC7
6+8vLm65G8fK3XPnrvzDJz/59P3nnNN+/wUXPPuniy9edc/ll7/4q2uueekn
3/zmf773/e+/+pVbb11z6e23Rz79+9+vO+WBB96c3NDwbsnzz2/PlCTJOs49
UYLTMXtAv78T3jKCOt+nY33HQ+5OvMsZZlzhAW3mlieOsvWe/yMNwzCMlui5
dum9vmrxrmEYZmzxgv5rA6Vd64aeYFB/psJa7tGwHskOwzDMiYgH9F9/Rbza
NvWEwgOp8zOb3uMq3ngSbBfDMKkPrVd6rH/JLlfreONsF5M+0DMdq/GTbuOd
5wHDpAYe0GY90qPcsQjDxAO9y7Qeix6dyx9NvHH2I8MwqctW0H8tSTQPHqUt
jSlQN86Jle2QfIoxL6VA2zgnVs4BJlX4POg/HpIRV7I7hmEYhmHGCinqh8IY
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
uj8jI2M9jvcDNBco5InC4/KcEA6nZM09UQbtkztKlEFzkLY452RXlAHXJovF
cgAz3lxRUT+UcER5zQB+K4DPAfB8JsAT+QALSnFbAxCYDrDoFPzubNxehJ+v
wHO/hp9vxO0vTKb639vtgX+6XPWB7OzGJzEvud2NYbe7aV1OTuPm7OyG7S5X
wy6nM7DH4Qjsw3MP2Gy+w+SIsljqJauV3EmNKldU0xHeIvL+kLOppKRF9jRV
V7dJtbVLpKqqxfIx8j2RCwjvLzuRyI2k+JECspeJvEXkKiL/kHBGUdQ+JOEn
GnQWKS6i/PwmqbBQKZt8UeXlrfKWPtNx4Zqic8W9hCsqL69ZdklR6Dw6Rt+T
P8lqDQzxRVFon+qvuKIS80QN54uiCPeU1eqP9kP9ECfT0VxRg33ScIQjipxT
FGoDJbYOVJb4TjlXuKQCw2bQJ3WkN0rtihr0Qw16oo7liKLnMNgWtSeqMZom
OYorqjHaJw2Hs7IaDmL24/5e3JIfaieWtw3v/TaOw97S0ubVOPaenjZt6aJ5
85bfN3/+kzedeeZTl5555jOnnXbas3XV1U8VVVY25XzrW69lP/hgT/5TT31Y
tGrVuyUvvfRh0Wuv7c5fv35nzrZt2zIkqd+mdkSJ6L046Mz1oO/fDvHXLZg2
gnpfjflA57qne/4B4+P9yjDHwwPazCFPHGXrPc9HGoZhGK3wgL5rl97rqxbv
GoZhxgYv6L8m8M9q2tMO2jyz9hSph97tYhiGSWdS5WcBr9YNPYHxgHbPzZMi
9dCzXQzDpDb0s70evysku1ytE2+7mNTGC/qPpXSLd0Q9zTBMMvCAPu8zLcod
izDMsaD3mZ7vzLEon+cPwzD07/fqvZ4kmhejdXdink+B+qRz3sV0Yp7CNGEe
xTyA+RPmIYwPswSzCrMeczgF6pyquQVGziRQ+lfvNqRzyLPVgVkJg2P5fhh+
LL+dAvVN1bwJjN5MAP3HQTJydrI7hmEYhmGSjRfASI6o9QB2/GEyIwiQ+ypA
yRqAKtyfgr8ozcN8ssNk+kyH1XpZT07Ol3uKi7/bV1Hxk+7q6rt6amr+1VtV
1do9YcJLXSUl68J5eTvDOTkHu3JypG63Wwk5jMhlRM4hh0MKCeeQ8AcJv0+M
z0d2+kSdQ7LHSPiY6F7D+aLoO4zsNxIOJfJUkT+puFjqqayUeurqpN4pU5RM
miT11tYqvqiCAvlaqhs5oI5wRUGMN4rqSvXW2xUlQv2BbY1gf1NbqL1d5eVS
V1mZ4orC+pEXajj/lex6Iq8SPQPhdaJnJBL7nIQfKuqIkqN+XuT2oudFfinx
LIRzSjz/4bxRI/VEqX1RMZ4otStK1DeM9aREcJ8cUeHotfjcD3eaTAc7jcZ9
2C/kh9qNY/99zFbc34Dp6TAYVneaze3Y5/U9VVV/XnfaaT996/LLv7zp5pvP
3f3II1M/7Ogo7O/vdwzxQw3FkpeXV+pyuc6zWCz32e321W63e2dRUVE/+WLI
UUPRwhNFbppYX43ahyNcUVivd3C/3Wq1siuKGa/gkM85G+fAfbhdhzkgPG3C
FUVzQu1vS0bEXKO5R+XQnBTlUOgYuaIoNpvtAM7Dtbi9B+ub7q4olR/KbwJ4
0ALwsB1ghQugCdu1oAjg8UqAxybj93MAFp6Ox84DWHQpfr4a820A3634+deY
vxgMvsfNZv9ihyOwCpfiNW53Q29BQfOG4uLmd0pKWt4vLV28u7CweW9eXtP+
nJzGQ1lZDf3k6nE4GmRHlOKJasA1r0F2OZHLR+0sEi4j8v8ovqZWacKExVJN
zRKprm6JVFvbJlVUtMo+J3ICkWvIYiHvkk8OuZLIXSR8ROL+wzmihovwVJHr
icovKmqRiouV0GfyVwkH1FBXVOMxXVFUT3IoKW6nI71OI/VEDbqiAkPuRc4m
4YkSLibhYRouwpml9kPR9cIPJepNZSheKt9ATCbfQNmDCcjP5WgRTikqQ3ij
RD1xzAz06ZGuqMZhHVHiWaifseKfaozxRDVG3VH1NC4P4TkHMB9nZNR/hPkA
y96O99uMz3FdYWFLqKys9RUceyunT1/unz9/5d/OO6/9zssue+7Gq69+4fKv
fvWF06+7bvXEa655ofDss9szpk0LW6+4wm99+OH19o6Ora6tW/td9DMJRu2H
MrIfalhuAH3/frgD89kR1LsWs0Lnuqd7NmOuSrTjGSbN8IA288cTR9l6z3Et
28YwDDMSPKDd2hUPeq+vvB4zTPriBf3XBAn4v83TGg+kxpquZT2SHYZhmBMF
vddb/llgbGgHbZ5be4rUQ+92MQyTuiR73Yl3fUiX9Y7XvfGDF/QfR+kYhmH0
wwP6vM+0KJfXK0ZPvKD/GNR7fhwr3rh6kWGYdOAd0H9NSTQ3Rev+XArUJV3y
BiaA+TnmQlBcJBYYGRWgOEDoXm2YnSnQvlTIayPsz3JMJAXqny7pA8X79FPM
BaCMR3PCvQ5gx0zFXIL5HSgOqYMp0L5UyPwR9CeTPC4F/cdAMpKZ7I5hGIZh
mGQTBrC2A2R0AeR14s/lHQCT8NicEMAZQYDzMJdirg4ajd8KW623hLOyvJGi
onu7Kiv/2VNXV987adIzPZMnr+mqq1vfXVX1XqSkZF93YaHUm58vp5s8Tbm5
ss+IXEFHeKKGcRDF+ozk43geuYeGdUVFHVGyj0g4iSi4P+CLorqUlUk9NTVS
DzmiVL6onupq2a1E9xxwRcU4q4aE6hitE50vnEi6uqKi7YxQX2OfR4QvqqhI
/kz1O6oDS/ieVM6oYKyXSbiX1H4odfB4OOrOon6Q/VxYdndJidSNW+p/8lhR
H4eH80aN1hMVG5UrSnaNYf0iFPJDkS8qWudOs7k/aLMd6rTb9+N2T6fFsrvD
bN6Bz3cbPueNnUZjX9hk6sDjL2C9l3YXFCzora29f+0pp9z+1sUXX7/le9+7
fMsdd5z13mOPTfto1aqSbeFwBnkYjjHlLAUFBcUul+vTNpttiCuKnDEO7BPK
WLiixGfhr6FyTSbTQaPR+A6m3Ww2syuKGa+QK+qTOP7vwfEvu6Jonog5IZLM
OUhzjOYaZThXVD6ukfQZ59wQVxTOy3twm46uqKgfSjii2s0AfivAiw6ApVkA
jXkA/1cGsLAW4NEZAE+civsegAWfBfB9Ec/9GkDgRtz/JW7vwe0/MfUGg+9J
o9H3stnsizidgTdzcho3FxU1by8vb91VVbV4T3X14n01NYsP4v5hPNZfVERO
pxbs92bs8ybZF0VuILUf6GiuKPL/kG+puLhVKi9fLFVXt8muqIkTl0iVlYsl
LFf2A7lc9bJ3iJxFWEfZF0WuIuFKou/FPdVlxB5Tlz3ofWoa8D6RI0r4n9zu
QT+R+no6Rt+RL2rwvEbZfUT1IH+V8C4pbiclilcpeRneE3X0Nis+pUFHlPBD
xTqiRB+LDPq5fFH31eCxweODLill61M5rYZ6rahsdX2VPj1+hCNqqAss1hMl
t7Ef23gYcxCzH8fwHtx+gNmB57+D127AZ9ZTXNyyGsfYqkmTlrTOnbvi8bPO
evovn/3sc3dcddULP7zhhv98/Wc/W/2FO+7oPOtXv+qdevfd64tvvbU784or
wlZlrkkGr1f2QRmjbqghfih2RB2Tm0H/vyN+f4R1vz0F6p7uWQjK/8bCMOMR
D2gzbzxxlK333NaybQzDMCPBA9qtXfGg9/rK6zHDpC96rwciXq0byqSMI0Lv
scZjkmEYZhBa6/Reb0fyLmESxwPaPT9PAvVIlTEXTxiGGR/QO0aPd1ayy9U6
8baLSU3S6f2aSvGMoK8ZhkkeHtDnfaZFuWMRhjkaYzH+vMco3ztGddBqTWAY
Jj2oAv3XlJGkGNORAvVI5ZC36I+YL2LKQHs+hXkAs32M2peqmZtgv7kxr6ZA
vVM5/8Hch7kMlLmvJSZQ/h3zRzD7dGhrquS3o+1IZlT8CvQfA6NNV9J7hWEY
hmGSCL6sDPgLk+V5gEz8YbwEf+CcvBrg5BCAB3/R/FwY4Erc/wbmJswvgibT
XSG7/a/BjIwFkYKCtu4JE1Z1T5y4pmfSpLW9U6Zsxu2OntravZEJE/p7Skul
nuJiqaewUHEE5eZKYXJFOZ2DbiC1JyrGSTTE0yQcRvhdGK+NCP9T1BUl3zcz
c9A/RN4mh0OJcDjR+W637E7qrqyUsJ6KL4oycaLUU1V1pCsq1lkVrQs5ogY8
UeS7onKEl0pvVxT1idoXRX1PWzxGfXFUV5S6fRRquyrH8kMNeLywH7qwDl0F
BVJPebnUW1Mj9U6eLPXW1cn7OF7k47K/Sj0mqO+EP0ztDTueK0p4oI7iigpj
Ivg9pSu6JVdUWGlTP+ZQp9l8IGi17u10OD4Mulw7Qy7Xu0GncxO25Y2Q0xkK
ZWS8HM7OfrKrqCjQV1Pz97Unn3zX+vPP/+mWr3zl25t+/OMvbfnTny58LxA4
7YPnn5/c391dKq1fnyNJkvU4HgbZFZWdnf1pp9N5n8vlWp2RkbETP/cLP43a
V5MsR41w06jdUMJV48a5Qcfs+BzYFcWcIJAr6iycD/eSKwrnyQGcixJFuJto
bpA/jeZJsuahmGv0Wcw/2qfj5Iqi+WnBdQ7nYRq7ooQfipx5fhPAgxaAh+0A
K1wAT+Ba8nAxwOOVAI9NBlgwF2DRGQC+83B7KZ5/Ne5/B7c/Nhj8vzYYAvdj
HsdjbZjnDIZFazB9JpNvo9Xq2+Zy1e9wuxt3T5iweO/EiUv2T5my9ND06cv6
p09fLk2btkKaNGm5VF29VJowYYnseyJvEjmAyAckvEDCDaR2GA36mhTnUnFx
i1RW1ipVVrZJtbWKK6qmZrFUWtoi+5jICURuI/IPCYcR+YnIv0THh/NRxRPy
DpH7iZxRFKo/hfbpuPASxTqm1NfQPnmiqHyqh9oVpVXo/jabum8bhnVEDXqi
jnRECT/UoCPKP+B/Eo4oOiacT7HnxBvFIyW8UcrzUvuiBvtUuKAahnihhvNE
UX8rnigldC/ydDmdDYcdjsBBfAYf2+3+j3AM7sL97fj9pszMpjfc7pZgUVHr
SzjOVkybtsx/6qkr/37++c/effnlL9123XWv3PiDH6z52i9/Gbrs7ru7zv/7
39d/wud7a9pjj71d/vDD63P++Mc+G/mhhp2R7IdKlFtA/78n3jvCutO/jbI+
BeqfzvkQ891EO55h0gAPaDNnPHGUrfe81rJtDMMwI8EL2q1d8aD3+srrMcOk
J1quXVqsdczo0PtdJWjXsB7JTHuC7WIYhklH9F5rRbxaN5SRSZV3pt7jLd54
EmwXwzCpCa1Reqx5yS5X6yS6ljOpgwf0Hz/pGO8I+pphmOTiAX3eZ1qUOxZh
mOGg95me488zRuWPNJ74upFhmDSA3Ct6rykjyZspUIdUzHOg/BvQE0BfrsC8
APr3hx65NYF+smNWpUCdUzHPgPJviZcm0J/Jxoa5DtMH+vfHWCeShP5jRk4b
6D8GRpvHk94rDMMwDJMcDPiiMpInajOAswOgMAgwpRPgk90m0+dCAF/Gz9/H
zz/H/Ba/vx/zWMhobA5arc+EXa5Xw7m5XV0lJW92V1dv6a6tfb+3tnY3bvd1
19Qc7Kqq6u+pqJC6y8qkbvICFRTInqYBVxQ5gY7mAYq6gIJqX1SMK4rcQmo/
kuyJokQ9USHhHYpGdkaRx4kcSliXrtJS2VvUXVUlO6J6yB2FdZXrifeTr8d6
DNQhmgEvErmIhCeKXFTJ9ESR60lkpPegdqqD96L6yfWlvlV7uBLI0fxQ8vPA
crqx/+iZ91ZXS71Tpkh9M2ZIa2fPlvpmzZL6pk+X+qZNk/qmTpXdXNT/A84o
8lhRH+K9BsaGcD6NwBUVUaVLtY/Psx9zGOt/IGg0foz7H3ZaLLuCDsd2HJub
cUy/GcnPj4QLC1/FPNNVUdHUO2nSQ2+cfPK9b5533i82Xnnl97fceuuX37nn
nkt3Llz46T1PPvmJ/Z2dMz/esKHmo23biiVJysbYMabjzD9zYWFhUXZ29jnk
qcnIyFjtcDh2YvrJGyM8TslyRdG9EnFFGY1G2RVlNpvZFcWMZwZcUTgH1uH2
gJgf5IkibxPNDZoT5I9KhiuKQvNMuKLo/sIVRcdoHtJnK66tNlwLsVyq01rc
3o31OAPrnK13px0d4YfyRv1Q7WaApTaAFx24zQJ4Ih/AV4aZCLBoBn4+FWCh
B3MxHvt/RmPD18zm+pus1vr/tlj895nN/n9hGgwG31OYV4zGRRGDYdGbuN1i
Mvm2WyyBXQ5HYE92dsO+oqLmg1VVbYenTl3WP3PmCmnOnJXSSSc9JYf2Z8xY
IU2evEyqrm6TiopaZJePcEUJX5TT2XCEy4kcRuT+Id9SYWGLVFLSKlVULJbv
Q64ockZVVLTid82yL4hcR1h3SbiiyENE/iHyHg3no4rXFSV8RCKxXiK6p+Ji
UjJ4XdOA22jQEzXUxTQWnqhjObKEJ4rOU56Jcr3a/TQ05HVS+pXaMej7Cgy0
S1wrItxSR0usM4qeofB7Cc8VuZ9EBvtZRN2eoY6oQVcUjbF68kQdwDbuwfvv
wmzDYxvwum63u/k1HMfPVlUtbsXx+sj8+c/86aKLnvvVVVe98KPrr1/9rdtu
C195552R//rDH974tOKI2jizsXFb7ZNPbi9ds2ZnTn9/vw1/9hjWE8WMmB+B
/n9TbMS4RlB3+jc5FqZA/dM9SzDTE+x7hkllPKDNXPHEUbbe81nLtjEMw4wE
L2i3dsWD3usrr8cMk560g/7rAcWrdUOZAVLhGXo0rAe/rxiGYeKH1m6911kR
Zmxoh9R4hlrWI5lpT7BdDMOkJslec+JdG9JlreM1L73xgP5jJx3jHUFfMwyT
fDygz/tMi3LHIgwTC73P9H5vjlUdkl1vhmHSj1+D/utKoulPgTqkUroxP8PU
QOpxKZx4LqQVCfTP8hSobyolBIprS2/X2XDciNkE+vfRWGZOUnqOGQlbQP/n
P9r8MOm9wjAMwzAjR/a84AvK4AcwkSdqI4AjDOD+D/4e1QXwiZDJdFnIaPxe
0Gj8ZQfA/2Ie7gRoxKzsNBhexuOhTovljZDdvimcnf1uuKBgZ3dZ2YeR8vJ9
3RMmHOiurDwke6LIv0QupvJyqbu0VOoqLJQiubmKzynWB6R2AJF/KZqg8EVF
I/xMA64olZdJ7YqSPU/R6wfuL3xRdA7WI5KfL3uKuktKlAifFdWRnEpRV5R8
PXmRhBtJ1CN6T9kThefTfUftiVI7ooQnStxXnXjvFXVEyf0jPEzUt9E2DTiw
IE5XFDmisP1hanv0GXTR/d1uqbuoSHZE0XPvra2VeidNknrJCzVzprR2zhxp
7dy50tp586Q3TjpJWoshd1Tv5MlST02N4ozC64f0vajncK6oWE9UNGGVG0oO
nhuJnt9pNpMj6mCn0bgP27EHx/Ju3H8fx8jWoMPxFo7lbhzLq7smTFjVNWlS
a9/s2Y+uO/30P66/4IL/efvqq2/aesstX912992X7XrssfP3rlhxxkevvjpv
X2/v1P6tW6v3bNhQ2r9rl1vatg0HQtgap6vBWFJSku9yuTyY3zscjtV2u32n
0+nsJ08N+WLI40TOmGS6ooSbRnhphnNFkZ/GYDCwK4o5EcjB8X8Wzr97ce6t
w3lwgOaE8ETRluYffifPk9HOQzGfqYxYH5x6nqv9VDgvD2A9+vD7u3Aeng6p
54qK+qGEI8prBnjNAtBuB1jhAmjDdWNBEf4oUQVQPwUgMBfgiTMxFwD4Po+f
rzGb679rtTb8xOFo+I3L1Xx/RkbjE7i/xOEI/Ntm83dYLP4+szmw0WTybzOZ
Ajtwu9ts9n+M3x1wueoP5eQ09hcXt0jV1UulyZOXSzNnPinNnbtSOvXUp6T5
85+WPvEJckY9iceXS5MmLZXKy1tl9xN5gMhnRBG+oViXk9jPyWnC8dAse6bK
ylqlqirFFUWh/ZKSFnxWjbIPiFxF5BwSHiLyGpF7iBxIVGairqjh3FGDfqjG
Yb1EwheleI0ah3iiqH5j5YmiMpX6DPVexXqulPo1DNRvOE8UfRZ+KKUfG2Rv
ltvdJD/Pwfs1DLinlGes3I+eiXBCHc8bRWVRPag+g20YPmp31JHPgtrWJEdx
RQUO2u2+vTgW3sf9t/HaSF5e48tlZYtX1NUt8c2du/zBs89++q7Pf/75n3/1
qy9//+abO6/95S+7L7v77p7PPPDAuk/+858bTvb5tkxbsWJr9apV75Zs3Njv
3rZNysCfO+L92YNJnB+D/n9XXIOZMcL6fz8F6j8e8pNEO55hUhQPaDNHPHGU
rfc81rJtDMMwI8EL2q1d8aD3+srrMcOkHx7Qfy1IZJ1jkkM7aPMM21OkHnq3
i2EYJp3wgv7rrAT83+6NJR7Q7jl6UqQeeraLYZjUhH6m1+N3hGSXq3XibReT
OnhA/3GTjvGOoK8ZhtEGD+jzPtOi3LEIw8Si99jzjmEdtFgLGIZJL5aB/msL
Z2RZgLnwyEeaknhB//4aqxzG2OLok8YUqGuq5FHMuXH0md5kYR4B/ftrrPLf
yek2JkHIlab3s09GPpXsjmEYhmGYkYAvJYMXwEiOqHYAcxjA2gHg6gLIiwBU
dgLMCwF8Lmg03hA0me7uNBgexWNtQYDn8bwg7q/tMBje7jSZ3um0WneE7Pbd
oczMvaHc3P3hgoKDkeLiw10lJf2yL6i8XOrF9OA+fe6K1xUlPFHkChKh80TI
T0Qh51OsK0r4osgVhefKninhQyLPE5VDvihyO9F15FHKy5O6yBmFoX06Jt8D
z5HrIeoX4yQSzqrQMPVIiisq6ogib1KEPFTkeaLQfvTYEWWqrxWfRd9EPVFh
6kPhYBJtEX0Ex/FEUR+Spwv7Rr4v9lc3PlN6vt0VFVJPZaXsiSL3Uy+ltlbq
qauTeqdMkfpmzJDWzpqluKJOPVXO2pNPlvpmz5a/o3O6q6tlX1SYnkH0GQ7x
Qh3FFRXGRDBdlKgjinxR5LMKWiyH8byDOGb3Y/334vj9ELMD27sNx/dGHCO9
Ebt9Tdjtfr6rvHxp3/TpC94444z73/rc5+7cdO21P9x8yy3f2Pq7333x/f/7
vwt3r1hx1p5XXjl5/9q10/s3bKjd8/bb5f27dxdIO3Zk93d0uCRJssThaTDA
oGvJkp+fX+JyuT5Nnhq73b4atzszMzP71R6ZZLqi1Pc8miuKPpMrCut30GAw
vGM0GtkVxYxncnDuneV0Ou/FebAO59oBmhfCm6b2OY12DgoHlJh/an8bRe2M
onPIExWdlwfz8vKobn8wmUznUJ317rQoKj+U3wTQbgZYagN40YHbLIB/FQA8
Vg7w6EQA30yABacBLMLfjRdeDBD4otHou85q9d9st/u9Tmf9/2ZlNT6cm9vc
4HY3PZ2b2/Sf7OyGrszMhvWZmfVbnM7Ae3Z7/Qc2W2CPxeLbbzb7D1os/sN2
e6CffEA5Oc1SYWGrVFGxRKqtXSpNnbpMmjVrhXTyyStlV9T8+U9Jp5yyUpo9
e4U0bdoyqapqsZSf3yy7iYQ3iXxC5DcSXiC1m4lcRuQhcrupnBaptLRVmjBh
sVRTs0Sqq1uC2zbZP5Wf3yR7g8gJRW4i4R4iRxG5otSOo9G4ogY9UYNOIuoH
JfUDjiRlXwl5m6hewhFlNisZG09Uw7CeKOF2Ip8S1ZmuoT6ivlK7omif7kvf
0/3ID5WX1yQVFTXLji56HrQljxeFvGG0LShols+jcqgPqP3i/nTvYzmj6Jkp
XqpBh1isLyrWz3Vk6Bk1YZqjqcfx6v8Y67I9N7dxXWFh82vV1W3LZ81a9sT8
+c/86aKLnv3Vl770wg+//e1XvvnjH3d86c47Q5+77743zvnXv94+bcGCt2ct
Xvz/2TsP8MjKsv2/00t6b5u+vS8IKCIMoKKAH4rwB1EpfijwYS+ggkZRERtK
UcQOuCU92WxHGRekL7CZSd/GZrNsZXsvc/7Pfc68ycmQ7M4kMzmT5Lmv677O
nDPnvO/zPG85swv82DJp9ep3C9euPZi9aZOSum3btoQgI8qK3x9kfj/HTvRH
KMP/bnEf+dNDjH8O+fk4yGG0+wXyByKsPYsVb/KI2KwPTxh9G72GY5kbi8Vi
DUUVInZ7Vzgyen/l/ZjFGn2K5b4ViStinSirnzwiPvb2WMbB7ywWi8UKT0bv
r7zPGiOviM04euMkDqPzYrFY8ado7zfh7gujZZ/j/W50yiOMnzOj0TzPWaz4
kkcYs85j0e9ImMXSq0KMzLyrGKR/zwj1P1R7wq4ki8UaLdohjN9b2OEb/378
g+TCgQYzznURuUMYX8OR8FVnqcUjcRCj0d5FfoCcd5ZaxaNuJ58Qxtcw1n4t
WgVjRaRPCuPHPhpOiXZhWCwWi8UaiuilZPIKYSU7twrhfkuI1NfpN+haISb7
hTjPR7/d15rNd/ksll/5zOZqn8n0QrPJ1ELXN9E921XGjtm832e1Hm52OI75
Xa4TvsTEU/6UlAAYUOAtdWRlKR3Z2UpHTo7KEQIfqi03V2nLyxuYFSV5THpW
FK7je3CRgrykFj0vScdNCuUlvYcVJRlIg/GiwFMCMwp8oiBTSeVThcalZytJ
blEsWFFoR+aMHMGsQi1gychC7APlH8qKwneyneDzvfylEN6SZEYNyI3CNbpf
7ZvabQNfi8azvahIY0OVlmpHGNfIYEepxjl93wlm1LRpGjNq7lxl3bnnqtwo
1fg8b576PZ4Bg6p3jkiuVQgrqgUsKDChJCMqaHCjaNwDdP8pOh4nH6H5fKDZ
bN5Lee0k99Dn9fS9j+rxsj8tbVVbcXFV1+zZT2665JKH3r7hhnt7vv71O7c+
+OBndj711NUHm5o8h1966fzj69fPOrZly6TAu+8WHty+PUfZty9N2bEjMcho
sETAZ3CSk8iJpCzyVPInnU7n4y6XqzkpKWlvenp6IJpsGj0rSlq2PRgryk51
F8yKYo0Pqawomve/AY+J1sAJrAU37bNYF1grWCf0XT+u01Ct50GF8qIkIyqU
D0fnJxISErppj3iKDE5IpoH1CvKhJCOqwipElV2ISpcQ3kQ6ptN5rhALS8jT
hJh/Lh0/JMSiK+h4LX3/eau16v/s9prvuly1P09IqH0iKaluYWpq/bLMzIYX
srIamnNz69fl5TVuyctr2Jmb27A3O7vhYFpa/dHk5NoTbnfNKYejOkDPK7DT
CTYSmEP1NEYaI0hjOC1RpkxZpsyevUI555xVqufOXanMmqWxokpLl6gcIbCi
wDcCNwjcJK1NjQsEFlMoK4riUJ8Dl6iwsEltZ+JE8KmW0PlihWJV7wNbCDwi
sIhgjRWlcYok72j4nKg+VpRkQ8GIH0wk7dh3jr4lJyqarKjQdvqzomr7cbH0
fCg970rPstKzovR8LTC40tO1+mOcCwoa1ZpjvKWLi5eoY1JevlQ9Fhc3qfdg
vDA2eB6cKfQpeV5gUQ3EjMI1zAvkgxoil/BZUeBf1avWWFH18pnjlP+urKzG
zpKSJS/Nnr2y4ZJL/v3H66777wN33vn6V7/97bdu/cEP1n76oYf8Vzz+eMdF
zzzz9jl1de9MW7lyW+nrr+/M6+7el75rVyCJfnM4g3xKi2REMSdqRPSQMP7v
F+GKYeTwsziIfyz4Z5EWnsWKI3lEbNaFJ4y+jV67Q3VFGLmxWCzWUIT9JVZ7
Vzgyen+NxbuGxWLFVkbvA/z7zDh5RWzG0hsncRidF4vFYo0G4f1r9P7Ke6wx
8ojYjacnTuKItlks1ugW3jVGvLui3W+sHW5eLONVIYyfL6PVLBYrvuQRxrzP
YtEv72GskVSFGJk5V3GGGLwjFEO042axWKNTZcL4vYUdnrvI3yA7BhzJ0aMi
8hvC+HrG2g+foQbfjoP4jHQr+ctkyxlqNBp0OfmwML6esXZCtArGCltgqBk9
7sN1R9SrwmKxWCzWEEUvJktACJdPiDQwosjlbwkxl84v8QtxLfkun8n0M/IC
v9n8QrPF0tVsNm8DZ4fOD9H5MZ/NdsJnt5/yOZ2n/W53ACyituRkpT01VXNa
mmqVHYVjerrSmpmpMaOysvpYUeAdDcRkwjmug2+UkqK0BNtSeU6SgxRkKbWG
w4oSOuYRGEhgIqEfyYvS86gkU2kQPlEvV0l+F4xVtiM5T0PlRPXGgfb0bCf0
I41zxC65UUFmVIvsG20Ea6DWQbKm9G3pOVF665hRaq0kXwvPgIdFY4BxbJ8w
oY8RBRcXa3wout6en6+xwXJyNNPn9oICpaOwUH2ms7xc6ZwyRemaMUNZN3u2
xo163/tUXhQ4UmgPz6nsruA46seihdwK03lb0CofymIJkE9TvCfIR8mHyPto
7u6iebuV8trQbLW2+hyO1/xJSf9uycqqo1j+uv597/v1piuvvK/n9tvvfqei
4nPbn3jimr319Zfv/+9/P3C8s3POsY0bpxx5551iZceO3MC+femKoiQGAgEH
Ha1D4DK409LSihISEmbYbLbZLpfrguTk5I+R73K73f+k6x2pqakHsrKyAmDT
SF6M5DlFixclmTR6VpTsK5QVRQYr6j/MimKNYYEV9SGa97/OzMzcQGviBJ0r
tEYVWqPq2sA6oe/UYzRYUXpmVOi6RH9gVOEc6xFHiuc0rb89tC6fo73iPopt
LsVtHdky6flQVRYhnrQJscwhxBo3nacI8dcsIZ6ZIMT8SUIsmE2+QIjKy4RY
9Ak6fsZsrrrdbq/+hsNR/SO3u+63CQl1f09Kqq1PTa17Lj297vXMzPq2vLzG
TRMmNG4rKVmyu7x8yf6JE5ccKS1dcryoqOlkfn7j6czMhgCYOy5XncqIcjhq
6bPGSQJ3SHKcwBGaMGGxygkCMwjMqGnTlilTp2qePHmZQn30sqLAAzKZNGaQ
5EWh3VBWlMaLApOqQcnOBquoKcilWqqyqfA5J6dBZRGBfWS3V6mMqD5WVFUv
QymURTV0XlQfKwrtajyoqiCvSeM2hVrPeBoOGyrU8nv0q7GVBs8T1/oYV7W9
TCs8Kw2WE+oItlRGRr1aWzCfMLbgPw3Eieob7+XqWE+ZspTGe6nK8wI7Cs/Q
XKL1XK/GgT4w/oPxouSckPmcnRVVp3O9vB6gPE+5XNXHyXvT0uo2gBN13nnP
1l511fOP33bbq/fde2/z7b/6Vdu1jz++/vI//anr/ZWV3bMaG3dM9Hp3T+jq
CmRt2rQ3ddu2bQlBPqVVMiqZEWWIfi2M/3tGuJqcPMQcPkZeFwc5jHY3k6+I
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
GEhnukdymIJMpPfwinSsKJUxBbYQWFHkVskjkhwifC85UaGsKMl1AmtJDMCK
AtsJLCfJQALvCEY/uj5a6KgypKh9leUEhpOOP+W3WPrYStRnCyy5UWAsoQ/J
jIKD55IlpcYMgxUVjJtqr3kgzpV0kFXVe2/QofH0sqNQ0yDLyj9Y7fWMKN1Y
qKwo1Do9XWNCBcdDMrzadIwoWSu9e3lhkhlG9+FZMKfAheooKVE6J09WOqdN
U7omTVI6i4qUzpwcpYPua0eNNO5XAPPRZ7MdJx9ptloPUv57yTv8ZvMWyn1d
i9Xa7HM6X6YYVrYXFFR2TZ36x/UXXvjzt6+55p4td9xxx7YHHrjx3b/85aq9
TU2ewy+9dP7B9vZZx7ZsmRR4993CwMGD2fs2b04LBAIJiqLYyZYoMBlMaWlp
KW63e47T6bzZ4XD81mq1em022wbyO3RtBxhRqampe5OTk0+AG6PnQoEVA7YM
rsPR4ERJh3KiYPBrMmk8cZSsKIvF0kOxLqfzb9L5OULjPjOrgjWWlElr7lO0
Hv5Oa647IyPjhOQ5SceCFaVfe6HrE+fgtoEVhfMgK0qh/eM4rcf1tC5/S75U
aOy2aCnIh5KMKK9ViCo7HZ1CNCQJUUl9PZNHx1I6TqfvzhXinxcLsfDjQiy4
zmyuutlqrb7b6az9vsNR+wuXq/bJxMTayqSk2hUpKQ0vpqbW+dLTa9dnZtb3
ZGc37MzNbdxbULD4UGHh4qMlJU0nysuXnpoyZWlg+vQVyqxZ4PqsUmbMWKlM
nrxcKS1dqkyY0KSymSQrqj+fqI8XBV4PmFHgOsFgKoELBWYUjM/gA0m2ErhH
oawojedUrbap8af6WFFam30MquzsRpVlBGdno/069RnZtmRFmUxVvcwhxAzm
UB/fKnJOFEw17WVGoR3kjnbRR7i8KMmJQr5gOSUm1ryH7+RySV5UX/xgPUl2
kmRD6a21pecnabGhH9mWrI/mSjU+yYpCPhhrPSsKbCiND6WxocD/wpyg+aSO
RVYWWGAaE0wyoyZO1HhRM2euoPm0QpkyRWNFgTeF51BDxIt+0b82Vv1ZURg7
xKpxsWr68bCQlzTN+SCvq+q01brouNlceYj8LrXZbbXWtNL1V6gWS2me/G3e
vJU/uvbal2+95x7fR554YuOc1avfLdy3T0nr7g64goxKC/OhRoW+L4z/O0fp
R4aRRwm5MQ5yGAv+BzkrkuKzWAbII2Iz/z1h9G30Gh2qK8LIjcVisYaiWO5d
Rvdv1LuGxWLFRvg9ZPQewL/L4kPxsMd7YhgHv7tYLBZrYBm9n/K+Gh/yitiM
qzdO4jA6LxaLFT+K9j4T7n4wWvY33ufiWx4x+uZSPLki4oqzWKyRlEcY8z6L
Rb8jYdb4Ft5pRr8/vSMYQ7RiZrFYY0O7hPH7DLvPy8jvO+OIjT3dKYyve6z8
LV2en4+DeEbSDeTZYnzpD8L4usfCB6JZJNZZdY0wfsyj4bRoF4bFYrFYrDOJ
Xj6mKiEsXiGsLULYu4VwvSVEKrlgrRAzfUJ8pFmI2+nzT+jzn9eaTPU+k8nb
bDKtXWs2b2g2m98Bg6fZaj0OXlCb06lxosA4krwf6YFYUYM5yEkakBMl+UR6
rhFYUXgOXCHwoiQnKsgkCu1f5RKBtwSek2xfsqLAVZJsJVwDzwnto+2cHKUt
P19lFrUXFmpHuKCg9zO+Bx9J5UZR+yqXSfQxm/xgT8GS00S5qMwoHZ9JzVse
pYMsKdVgXNH9PrCoZMxiEE6UCGFGydyC9iMmxIKagluFvtCH5GnhM5hRqHUo
L0rPicL3knmFZ8F5Qv2lMQ46bhd4Uv360LOwQthhbag9jWk7mFBU466yMmXd
lCnK+smTlXUlJUpHXh7GO+BPSjpNdTlB43aU5uZB8r5mi2UXjUEP5biBrrf4
nM7XqN9/tebk1HZOmvTXDeed96sNH/vYfT233vp/W++777PbH3/8mr21tZcd
fuGF9x/v6Ji9f+PGKUf27ClWDh3K3d/TkxHYtSsp0NXliBIfqlfp6enJbrd7
bpAT9YjFYlltMpl2kMFgOm2320/R96eSKMfU1NQAODLgwuiZUcNl04SyoiTv
RrKi9GwasKmyaJ7rWFEnKO4O+m4hxfJFOp9BThbMimKNHZlork+jNfpNWhsr
ae7vyszMPA1GE9aCZKdFixUFS1aUZLUNxnIDKwoxoF/JiqJ94xR5M/n3tDbB
JI4CK0rPh6qyCLHGJsQyBx3dQjybIsTT2ULUFwpRM0mIRXOEmP8BIRZS3wvp
z+uVNwlR/UWrteZbNlvNA05nzaMJCXVPJybWNSYn13lTU+veSEur7cjIqNuc
nV2/LTe34d38/MX7CwsXHyEfLy5efLKkpOl0WdmSQFnZMqW8vM9g/JSWLlGK
ippUPhB4QRkZDSqrCbweMIsk+0hj+FT3soskNwq8Io3FVNvLV8JnfIf7ND5Q
dS8fSLKiwDGSrCiwjvScJvSPIzhG4EVlZGjGZ3CHtPZr1Hj62u6zZFFJVlRo
++GyotA/uFd6o3/kK3PTeFBVQS6TxjsaiBWlcaJQo1rKo643H7SJvtAmaqHn
QvXncr3Xet5UKCcKsUiGluZK1biOuqF+qCP6z8ysV5lO4ELprfGh6vvFKg2+
lMaMWqwyxjCPMJ8mTQInaqk6p8CbAl9KsqLkeOnZXnpeFK5p861KV7eaoMGI
qqNrdfRdDXI5aTYvOkht7bDba9ZTDdZQTCtpzi+YPHn5o+edt+q+q676zxfu
vPPVKx59tHPO6tVHVE4U/f5wyt8hzIgaVYqn/2fCS2J4/wzim3GQw1gw/jnz
LRHWnsUaSXlEbOa+J4y+jV6fQ7U3jNxYLBZrKIrl3mV0/0a9a1gsVmxk9PqX
roh1oqyzCr+N4+E3d6ziMDovFovFikfh/Wv0fsp7anzII2I3vp44icPIvFgs
VvwI7xwj3mHR7nckzIovVQjj58RodkXkJWexWCMsj4j+2vca1O9ImDV+5RHG
vz8rRjAGXh8sFkuvcmH8HsPW3CM0ltB41Qph/BjEwv/U5bg+DuIZCW8k3yDG
p8DGeVcYPwax8LlRrBPrzPqxMH68h+uuqFeFxWKxWKwziF4+Jq8QVnoBOVYK
kfCKEMkvCpG9VojSt4SY2yrE5W8KcQt9/nGzEE83m0z/bjab3yKvByNqrdm8
x2c2H/RZLMd8Vusp8IJa3W6N8QTOD/hMQS5QL/8phAHU6wG4Ui3hsqKCfCK1
XepP5QqFcIlC+1N5ROAtSQaSbB9sKLSva9sP9hHazc7WmFDFxUp7aanSUVam
dEycqHROmqR0TpmidE6bpnROnapea6N7VGZUerraRj9elAjhRumYUegX3Ci/
NGIAvwkcKcmSAt8qGLfabricqEHcy4pCP2B8oX5ZWWq+rWBuUQ4q0wl1QL8Y
D1mz0FgRn+RMyfGX1rOhpCUjSm89Lwrx0LGNnm2nuDoors68PKWL6tuFuk+e
HGgvKzvdVlBwsiUj4xjde8jncOynuuymuoBjtqnZam33u91r/MnJ/2nNyWmk
sXtq3dy5v9142WU/3HLTTV/t+da3btn+u999aveCBR858u9/X3h87dp5yqZN
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
hM9iqfLbbP/yu1xvtCQlrfenpOxuSU4+1paUpHJ82lwupRV8KItFdS+rSPKi
JB8K1+T3MPhFeA5cJ/CEwIrKyFDasrOV9vx8lRPVAQbT9Okamwicpbw8pTUt
TWUNgUcExpEvyEzSt+nXsarAGVJZRSkp/Q12ERhE4DY5nX0xSgdZUS16VhQ4
UXBOjtJOsYCp1F5UpHQgVnCjSkvVODsnT9aYUTNnqmyldXPmaIwlygecKbSp
8pQo3iHxokR/dpTahj53cJqkkQdy0/Gi/Dq2lE/WDffROKisqIICNY8uygGx
gxW1/rzzlPUXXKCsP/98lRnVOXWqyvBqo7FCfXr5XaGsLVn/M7Ci+vGhgm7T
vgv4NT7USV9CwjG/232o2eXaT8fd1NY7NBc20Xxpo7mypmP6dO+GCy5o2HDJ
Jf/Y+PGP/3bjddf9cOuXvvSVLd///s27Hn30k/tqaj68/9//vvD4W2/NDfT0
TFG2bSsJ7NyZF9i/PyOwe3dy4KWXjGYvSFbUzNTU1P/LzMxckZycvNXhcJxw
0jjq2U8DcaIkw0nep3e0GDWyH7BwwKbBESwcirWXFUXx9pjN5hV0/Ep2dvas
iRMnJhtUTxYrVpKsqN/b7fa3aa6fpM8qKwrrAmtGct2wJrFOosGK0vPacJSs
KJyHsqKwVt20/4IVRetRoTjPxorS8aEUcoVViCq7EJUuIRpoX5qfKcQ/CuhY
JsTTM4VYdB59d4nFsuAqs7ny/5nNVbeZzdVftVqrf2CzVf/abq/+i8NRXeNy
1axyOmteoSO9jqs2OJ1VW+nzrsTE2n1pabWHMzPrj+XlNZwsLFx8uqSkKQA+
VHHxUqWwcImSnw9O0WKV/QNmUEpKfS+zB6wkPTsp1JITBaYPWFGS46OxfPrz
ovAZ18H8kQwktA9GEJhF4BLl52tMJbCTKFYlN7dRZRiBG9SfRVUVbKu6lzul
50VJ/hTyAc8I7cPIEZY8Kj2XCt9L5tGZOEfa9YFrE8rTQi0lLwqcJTCbwIia
Pn15ryXjCSwn5Iv4EAPycTqr1dzRH9oBown3gTUFRtTs2StVXtTs2WBGaW1p
DCrNaFeyolBTMJ/Qh8xZ1gPGOdrH94gV44AxwHNFRdpn8KLAjgplRen5W2fj
Q53JGntsIE6UnhWFeVBN86Ca5kGN0seIwjxbdJp8UoiFx8lHhFhwkNYSGFE7
6XwzHdtNpoWvuN1Vi0tKFv/hssueu+eLX3z5xh//2HfJM890TX/jjcP5YETR
7xMn2RZkWZqN2PxYMVcW+d/C+L+T1Puf5OFwPz9B3hAHeYwF15OLIys/ixVV
eURs5rYnjL6NXn/xZq94L0sqnDqyWKyhySPGBgMqXIcjo2OM1J4w82KxWNGT
0eteuiLWibIilkfEZqy9EcbhjVEcRufFYrFY8SC8f43eP3kPjV/F6h3siSAG
T4xiMDovFotlvKK9x4X7LovV3hpLs0ZWHjE650k8uiKy0rNYrDiRR0R/P/Aa
1O9ImDV+hPea0e9Ro+f72eyJpKAsFmvUaqIwfr8Zb36OPD2cwRnHmiSMHyf2
2b2cXD7IGLI03SWMH6doOzuqFWINpB8J48d5uF4f7aKwWCwWixWqKiEsXiGc
rwiR/LIQOWuFmNwhxEU+IT7bLMR9dP57cqXfZFrlM5tf8zudnS3JyT2tGRnv
tmVlHW7Jygp0ZGQoHeA7gfsDNlCQPaQa7CG9wXQClwhcI2nJdwJTCLwgyYoC
hwmsKLCXwFyaNUvpmjNH40UVF6ssKXCH/C6XykdS26J3qGQf9eNQybbBogIf
ivroNZ2r7CIwiagtld0EzpFkLuFccqzS0lRWlMqLkpbMKDg3VzPiLijQOFdl
ZUpHebnKhwJXCe6YOFG9B/2j7V5+lqyNGAInCrVFO+BdgW2F8UBeksuEa3oW
ViivS5evynbCOFBuKi+qtFTporjX0RismzdP40WR8blrxgyV5QVWFu5HHdHO
e5hVsv4hvCiVITUAHwrX/AkJAXoOfKjjlNPhZrf7gM/lepdqtp2ubfYnJ3e0
pKe/2Zab+3x7efkSiuefGz/ykce23HTTj9/56le/sa2i4gs7Hn/8uncXLbri
gNd70fHm5nOOvf32dGX79rLDu3cXKAcOZCp79qQoa9a4g9yFeGAu9LKikpOT
705PT1+RlJTUy4qSzCbJhAplOOmZNJJTEw1OlOxHtolz9OOi+QsWjWRFgVtD
3x1HzPQ9OFdfpudm0/fD4QuwWPGodKvVeonNZnuY1men3W4/CiYTeFFYG3Ld
YU2C4QTLNTtcRpTecl3qWVGSH4XruEZxqrwoivMUeQBWlKJjRFVZhHjSJsTf
nUKsTBBifpoQC3KE+Gcx/RyYQp/nCbHog0Is/KjFsuiTZnPVZ83myjvN5prv
0PnPLJbK31ut1f+02aqXOBw1z7tcNW8lJNR0JiXVdqek1G5PTq7ZQ58PJCfX
HUlLqz2RmVl/KienIaDxf5rIS5WCgiVKXl6Tkp3dSHk0UI59fCjJQepjIWkc
Jsnw0Zv6D+H59DF9+rhOlSo3Ss+JwrNoOzm5VuU5gVOE+MAlAtcIfCN65ajn
+A73om3ZXv82tf4Ri+RPIRcwpsB/0hhIDSrjCKwjjUWlsY80/lEfP4lqFeQf
1av8o1AGkqwJGFkD1UNv3CNj0XhRjWr9y8qWKlOmaJyoGTOWKzNnrlCPkheF
OiBm9I3aoy3J1AKfCTn0b2OFyo2aOVNrDxwpcKImTlyq3ldSsoTybFKfG4gT
hc+ITdYH96LuiEUa9ULdwPLqq9XArKihuK+2/TlRfXOqWmVE2Ww1dNRssdQE
eVGVAfIp8gmTadFRWjuHaO3sJ+8mv0NrahN912qzVb7qclWuongXlpY2PvL+
96+85/rrX/zMffc1X/z3v2+aunr1zrxAIJAsf6uAZylt6C7IirUWCuP/blLv
jeQrh5GPm/ynOMhjLJj2EfGFyMrPYkVNHhGbee0Jo2+j195otFfnCvFerlQ4
dWexxqI8YmDuE+wVY5f/FInDkdExRmpPmHmxWKzoCHuq0es+kj2NNfKKh/3e
E8M4+D3GYrHGu4zeN6UrYp0oa0jCuMRivL0RxuGNURxG58VisYxVtPeWcPeA
0bKn6e0JMzfW8FUhjB/vsWJPZKVnsVhxJI+I/p7gNajfkTBrfKhCjOy8qhgg
Bu8IxxCpPZEUlMVijWr9P2H8njOe/GB4w8IiLRXGjxd7cFcMPnQsnRLJp4Xx
4xVNXxzVCrEG0mJh/DgP19VRrwqLxWKxWDrRj1FzlxAOrxCpbwlR4BdiWovG
ibq+WYh7yU+uFWKZz2R61Wc2d/is1i1+p3N3a2rq/ra8vKPtRUUn24qKAmAJ
gREE5pLKKQKzKIQF5TsbAwlsJ3CFwGQCSyg9XWVBUT9Ke2GhylbqmjlTYxPN
nq1yl1TWUkaGyhtS2UQihJ2k51CBF0Vt97Ki0tKUNvRBz6MvnLdIZpTbrfGU
JD8JnxEXWFKIDXwpMKOCbpNtBdvrZUghfvCjkAPYURMmaOyo0lL1iO/UmoEV
JfsL8qL8Mn5dLv2uif6MKBmjPxhjC2JEXuBaYWyQJ/KTPCx9fqGWbC3wopAv
PYscwOfqxDhMmaLyodbROIAd1Tl9usaKKilRc8Z4gFmlsquCte/lT+lYUW0w
nbfT/XBbkBsFPhT5FPm4z+0+4ne7D1Bue8k7KP5uf2LiOhqrZsrtxdb8/OU0
Fxate9/7nnj7Yx/7Wfctt3xn+/e+98Wdjz56w84FC6468Nxzlxx+883zjnd3
zzy6Y8fEwOHDEwIHD2Yre/emBrZtSwgyFyxxxlqQrKgZiYmJd6SkpDTS8W27
3X5MsqIkF2YgVhQYNXpejOQ6RYsVJbk0si+wotAfroFNE+RYHaf7t9LnleSv
ut3uOZQPs6JYY01Yp+fQuvwh+U2Hw3HQYrEEQllR+vUTjXUYyoqS1yUnDp/1
rChcQ0zgRUlWlN3u/L3F4vgwpZCh8aHAyauw0ivfIcRLLjomCzE/U4h/FAix
sFyIRTPp/Hwh/nkpnV9tNi+8wWyu/AL5a1Zr9Q8slurfWCxVf7VaK2tttsp/
2e3Vrzqd1a1ud83GpKTarWlpNbszM+v3ZWXVH87Orj9Gx5MZGfWn6VoAHKCc
nMWqs7PBIWpUOT9gNKWk1Pdj9YRacqLA73E6+7hQ7+VDhbqPFyWNa3hG40TV
qEwqMIbAc8rJ0ThK4BqBEwVuEgxuFBhGYErhWT0rShptoy/0ixjBckI+kkGF
58E5AvOotFRjUcHoC9c0XtTifgwkPCt5UVpt6oKMqL5agGekZ2VpvCq9tfvA
jEIbaA/xSF4UeE5gPYHzBOOzzBnx0hiqNdK4U1pekheVl7dYV6tlKh8KnjJl
mdqGZEQVFS1R+wN/Cvmhf9RbWrKiUH/JEpOsKBxhxIL6DMSJ0ubQ8DlRyFPW
l+Z1v7kl2VA2W23QNcHrVafJJ2lNHCcfIR+gubDHbF60g+ZJt8VS2WW317xJ
9XshNbVuKcU/f+rUpY+ed97KH195pfcrt9zy8o3f+95bl/7pT+tmNDV1F2zY
sCeFfqvY5W+WOPvdwoqtHhHG//1kqH82zJxuIG+LgzzGgueTsyIrP4s1bHlE
bOazJ4y+jV5z48VeMTBfCvYI5kyxjJVnEOvnqXcAG72uRqPDkdExRmpPmHmx
WKzoCHuy0eteEfzv5cWzYjVHvBHGYfQcjVVeLBaLZaTi5XeAEutEWcNSrMbc
E0EMnhjGYWReLBbLWOG3uxF/Foh2v7y3jQ15xOicG/FqTyTFZ7FYcSePiP6+
4DWo35Ewa+yrQozsnBpovXhHOIZIXRFRRVks1mjXL4Tx+8548Any58IcE5am
G4Xx48Z+rw+Srz/DuLHeq0XC+HGLpr8U3fKwBlCPMH6ch+vvRb0qLBaLxWIF
RS8aU4sQ9jVCpNCx6C0h5tLxsrX0Zwjyt5qFeIyOS5pNprfWms2bmy2WXT6b
bb8/IeFoa2bmifaSklMdU6ee7pgyRWME5eWp3CSVVwQulBiECTWYJfMITKGE
BI3nBO6S5EVRH53Tpinr5s5V3UWfOyRvKTVVfQ5tNA/Qtspeslo1/pFsG3wn
yXPKzVXbadMzlZAHGEdBdpLKVnI6NdZSYqLKlJLMo1bJjyL3cqP0LCk9Qwr9
UD5q3HRd5VyhL4qttz/UQTKj9NZd7+UwSY4VYkJeQT6U2k9BgcamotqBtyVr
pfYJpldIf2qbsi/Ui9pW+VpgOCEPqk871QpsMMmNArMLR7UPMMPA7nK7FR89
Lxlh/mCcaEtlQ1Gc7RRHB45BXhTVM+BPTDxFPuGjOeZzuw8F+VA7ac71UMzr
/cnJ/pbMzFdacnOf7Sgrq+6cPfvP6y6++Jebr732u+/cffedW3/2s5t2/e1v
n9i7YsWlh19++YLjGzbMPtbTM1nZs6cocPBgzr7u7nRlx47EQFeXIw75UHoh
rkS73T4lKSnp5tTU1Pkul6vdYrEcpWsqb0bHZDorK0rep2fKDIdRo+dT4Yj+
cA1MGtkfXWdWFGs8yEWeROvzyzTHVzscjj1Wq/U0mEx0rq4XyVbDms2kvTka
7LbQ9SzXJdaiZFTpWVH4jmJTeVFOp/OUw+Ha7HS6f+9wpHxYiJxsISrsQnid
QlQl0ms/TYi/5wqxsESImqlCVM8TYtEH6fyjQiz4FJ1/zmyuvMtqrbzXYql+
0Gar/r3VWj3faq1aarFUvkBeS9912e1VW5zOqh2JiTV7UlPrDmRm1h/Ny2s8
UVi4+FRR0eIA2D5gQ2Vlac7MbKSYG1ReEdzH6NG7tp+p7fewe/TsJ/CZ+jww
MwrXNY5TlcpPCuVEpaVJVlSDyiTS84/AUsJn5EI5qs9LVpQQfTaZqtTr6At8
JrCZkJ9kUOF5sI/AYCorQ/vaUeNFaVwk3AOmFOLQs6LQDphZaFPPiNLqEVqD
qt5c9TXAvZIZhfbQPvpDrhMnLlWmTVuuzJy5QjU+I2/EBzYT8ka/kj0luVNp
aQ39ckMe4GDJfMB8KihoUplSublghDX24zvJeYDPGRl9vCjcD2ZUfzcGayNZ
U/1ZWsPhROk5ZZgXMle7vUZlQmmcqD5GFM37ANXzFPkEmd7ZVYccjqr9tBZ2
0zx9x+Wq3UA1op80ta/Q3Ho2L6+hpry86S/z5q389aWXeu+/7roXvnz77a/c
fO+9zdf84hdtl/z5zxtmV1VtLXrhhX1p9JvFSbbG8W8XVmz1TWH831GG2kue
OYycwDeaHwd5jAVvF9o/B2SxRkoeEZu57Amjb6PXGzs8ewdxxSD2nMGs+Jcn
DA829oPNFdjoecwOT0bHGKk9YebFYrGiI6PXfCT7GcsYeUR87PkVMYyD5zOL
xRqvipe9tSLWibKGJa+Izbh7I4zD6HnK85nFGnuK9v4W7r4Wq301lvaEmRsr
cnnE6JwT8WxPBPVnsVjxKY+I/t7gNajfkTBrbKtCGD+nvAbEEIkrIqooi8Ua
C3pWGL/3jHWvJZ8T7oCw+mmvMH782H1+lTzjjCPGGkifFsaPXTT9cHTLwwrR
BGH8GEfDV0S7MCwWi8ViQfSSMZGtLUIkviVEAThR9AeuK/xC3NwsxHd8JtPD
5Gqf2fxys8Xytt9q3eO32Y74nc4TLUlJp1pzcgKd5eXKuhkzlK7p05UO+tyW
n69yivzgBIE5JAZgQcGh1/UGWwj8IjCZwCeS7KOsLKVtwgSlY+JEpWvWLKUL
rCjqG/2qDKTsbKUlOVnlEal9D9APeEUq+4jiU9lO4DfRc+0Ud3tRkWbqox0c
JzCjqG+V3yT5TDpmVAvio3ZUgz2FWCU7CjGDG4UjznFd/53ue5XvRG2o3CYw
n9C+5DfpmVH6GKRxP9hXiCGYj1onxI88SkqUDnCcaHxQq04wvShH3AOmlNov
2tAxneQY+WHJeKJ4VMaWZEYFuVgqNwoML/Co9OwrylXldslxCLbVSu20URvt
YEXR8+0aRytAsZymNjGvjvoTEw/53O79NId2+RMStlJ9NtJ3rf709Ndbs7Of
o5zqO2fN+tv6D3zg4e7/+Z/7u2+//Svv/PCHn9/++99/8mB9/eX7//vfDxxq
aZl7rKdnytFt20oCO3fm7e/pyQjs2pUUCAQco4yx4HS5XBOSkpKuTk5O/qXD
4VhtMpnetdlsAXBgsqj+ocwZyYoCF0ayouQ9uBYtVhRYNJKBo+dQSSaOnhVF
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
iKe0dInKiMIYauO3RGV9ISbUsa/+VcF8tXYkh0uynpD3YIwomZfMTRrjDOO6
xvOqfc8YhbYzHFZUaLv6+eZyVQco39M050/QnDpC8/0AeQ95O43vZrqnnfJ7
IyenfnVJyZLFs2atePqDH/zXo1df/Z8HPvvZl7/5f//36he/9721Nz74YNvV
jzyy7tK//nXjBQsWbJhdU7Nl0ooVPYUvvrgte8MGJWXr1q1u+h1jGyu/Z1hR
VZrQ/h8ERv+9Zai7ydcMM7evkE/FQS5jwd+OsPYsViTyiNjMW08YfRu9tths
Nns8ORwZHWOk9oSZF4vFGp4qhPHrPZK9jGW8vML4fd8ToxiMzovFYrGMUKz2
9UhdEetEWVGRR8Rm/L0RxhEv8zbaebFYLGMU7T0l3LU/WvYyvSvCzI01sDxi
dI77aLEn3IFgsVijRh4R/b3Ca1C/I2HW2BPm60jPo4o4iCHaa5rFYo1N3SiM
34PGqr8awTiwBleeMH4sx7vvOOsoscIR/nsRo8cyWu6Ocm1Y/RWP/81UpK6N
elVYLBaLxRLqS8a0SQinT4gc8mzylT6z+SvNFstjfpttSYvDscafkLDRn5y8
szUl5VBLSspp8KE6UlKUdnJbaqrSlpGhtOflKR0lJUpnWZnSUVyscpzALVIZ
ROA7SWYSWEswuEngJAX5RyrHaTA+kWQS6blI1HdrVpbSNmGCxkSaOlXjOs2Z
o3TNm6cewZBSWUiIJT1dfa6XFyX5TmiP4mtFHtQe+FLgQuFZtLdu7lxlHbUH
1hLaUttJSurlKvWyp/TMKMly0nGhellQ+A65hHogBtRgrCj9OdqVOUjeFWoC
htakSRorSm/wr2bNUrpmz9aYWjRmeAb5ow21vbOxonTux4wit4AbRXGBD9VG
cbVRnWCwpKjmAXrm1FohTjSbTEeabbaDPqdzbwvmVmZmT2tOzvrW3Fx/S37+
K63Fxas6Jk2qorH804ZLLvnFlmuv/W7P3XffufWBB27a+de/Xn2wqclz+PXX
zz++fv2sYzt3TjqyZ0/Rwe3bc5R9+9KUHTsSFUUBH8oy1ngKWVlZiQkJCbOt
VuudZrO50WazbU5OTj4K/gwMJgw4UJI/A1YULJlNerZTNFhRkkelY0L1+w4O
sqmO05FZUayxLpfD4ShxOp03uN3uZ2h9bqBrJy20N2It5NBeC66bXKfgReE4
tPXXn/+UkoK1nkX7QC59zqY9IJOuoy+NHZWcnEbGMYP6zKK+cxS3O59cfNLp
nLzV4fhAldV6y9ctlt9cb7Es+rTZXPN5s7nybrO56rsm06KHTKbKPwqxaJEQ
lcvI/zWbF9HPhMp1dntlj9tdvSMxsXpvUlLtIfLRxMSaE05nzSm7vSoAHpPN
VqM4HLUhrKgmpaRkiVJWtlTlDOHzhAmLVfYSGExgCOm5PGdj+OB+yRoCwwc8
IrCawCyy2TQ+lN6RsqIG6jctTeNFZWc3qIwnGBwlGQPYSuhDsqJC+UsaK0pj
J4F3JPlTaAdMKDCjYMmHyshoCDKV+uIIZSqBoyT7pfHpx6jSc5vAzcL3+prI
72SMem6UZGyhRugDcYJhBT4UmFFlZUvUMcQ11AD102Ko0vGxKtW6y5xlfc/E
dgrNTWNhaTmCs4Wjxp6q6WVKDfT8UBlRMj5tfvVxrSTLjPoLuN21pyiO45TX
IfIe8jsuV/UG+s5Hz7ycm9uwcuLEpZXz5q168tJLvb+47rqXvvelL7129733
vnnzT3/a9qlHHun66JNPbrjomWfePqeubtO05cu3laxevTOvpWVfent7IIl+
xzjJVmZEscLQb4Txf3c5kB8eZl7TyaviII+x4HpyQWTlZ7HCkkfEZs56wujb
6HXFZrPZ48nhyOgYI7UnzLxYLNbwVCGMX++K4P/edDTJI2IzB7wRxuGNURxG
58VisVgjKY8wfp+UZo0exeod7IkgBk+MYjA6LxaLZYyiva+F+2eAWO2nsXRF
mLmx+uQRzIiKtb1hjgWLxRp98ghj9oxY9DsSZo0deUR8vFO9BsURzfXMYrHG
rn4pjN+HxpqPka+NZBBYZ5VPGD+u49H7yFeFMT6s8DRNGD+m0fKJKNeG1V89
wvgxHq7vi3pVWCwWi8USwuQVwvqKEMl+IcrbhLiE/qBwW7PJ9KDPaq1usdtf
b3G5uluSkva0pqcfbsnJOdmakxNoB6MpI0NpS09X2UlgQqmcpbw8lbWEY1tm
psofAiuqNSlJaQXbKS1NdQu4RImJih+8JcmLAmvoTIwiySTCvU6n+jz6bsvN
VdqLi1UuUtf06cq6OXOUde97n+quuXNVxhMYSbgHceJZlRcVyp5CnMH2wLrq
nDhR6Zo2TWvvnHNUtlIH9QEOU1t2tpobntXHK7lJ4FDJPnySARVkKan3hzp4
v5791Gs9Z2og03ctsh5U23bJiqIcwIFSjc9FRZrBkKJ6oFbga+EcOavjQm20
oE/EEiYrqjdvcgu5lXJpo3zbKK5WMKKSkgL+lJTT/sTEkz67/WizEIfW0p+L
6Lir2Wx+x+d0bqRatrbm57/eVlb2XOeMGfXrzj33bxsvueQ33Z/85P3dd9zx
5S0//OHndz3xxDUHGxsvO/Kf/3zgeGfnnGM9PVMCe/YUH9q5My+wb196YNeu
pE2bNjkVr1flKRi9sGKlvLw8d1JS0mSHw3GrzWardblcmxITE4/qmU2SFQVG
E871HKloMaKk0WcGrSscQ1lUA7Gi6MisKNZYlpWcRuvTQ2vz53a7/RWz2XyQ
1qq6RrLp3SFZUcF1MYT1mKoz1l06tZNB7WRTuwXUTzF9LqY9oJCuT6Dv8+k8
hz5nk3PJBfRdsZKQUKa43VMVl2vWKYfj/O0229VLLZZv/dRs/uPXzebqb1gs
1T+yWCp/Z7FU/cNkqqo3mSqfM5kWrjGZFrWbzYvetlortzmdVbuTkmr3p6fX
H8nKajielVV/Mj297nRyci21XavyoWibUo3PuAb2DphHeXkaL6qoqEkpLFys
5Oc3qsyloXCiwGxKT+/jNaENXEMcYDCBWwT+EzhHGruqWuU0waG8KI0VVaPG
eiZWFCzZQegPLCdYz4oCwwhtahym/qwosJfATcL3kpuk5aK1hxpprlfblBys
cHhKWr9a++hXcp6Qr8wT9ZCMJRifNa5WdfC5qn68KD0zCvegL+Sbn7+Yxq9J
ZUaBFYWxBO8Lsco2++Ko7OVNaX33sZ1C89LXWbtW2y8/GSss2VMY59A2zzZ3
zjbPJCdKP85gd2n8rkbMswDFdoJqeCghoXoXPbMxLa3hLZrLzxcVNS6eNm3Z
U+edt/J3V1zh/dFNN730ja985fXbf/hD/w0PP9x51R//2H7p0093XlBf3z1r
xYruiV7v7glvvnkga8MGJWXrVsVNv2VsQealyoiSNnqTY8W97hTG//3lQH6T
fNEwc/tuHOQxFryTfF2EtWexziaPiM189YTRt9Fris1ms8eTw5HRMUZqT5h5
sVis4cnotR7JPsaKH3mF8Xu/J0YxGJ0Xi8VijaQqhPF7pCKYOzHa5BGxmQfe
COMwet7GKi8WizXywjo1Yt1Hu9+RcEWYuY13eQTzoXhOslisaMgjor9veA3q
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
wvhxDYTTAl0YFovFYvVtKWPHmhePHZvoGjJkWO2AAefV5OT8ydW//3+qMzMd
rpSU5a74+GZnbOzBGsmKkvwmWPKVYmM1ThT4TZGRSpXNpvGVzGaNFRUSotmb
YQROEZ7xWOU0oU0d16k6PV1jKWVlKTX9+2t8p8RE7T70K5+VRht6ezGjqmXb
4DSB1wROlMxFtqdjXenZT5WdWL2mt+RDyWO0ASYTYqM+0HeN5ENRTrU5OQrV
XakDI6qgQONEwYMHK3VDhih1w4erzKj6UaNUXtSyE09UDWZUPV3DvWgDuYDD
BaYTal3lYXOptUb/3rwoyYyirYvO1VDutVSLWooPWxyDmUWxuyvN5oMVYWEt
S0JC9lYIsYO8rSokZEOlybSGri+lsa+oSkz8ypmevrAmP7+IYnt1xZlnPrVq
4sS/rL/33ps3vvLKb7bOnPmLvd99Z29ZvvwE95Ytw/dt3Ji/Z8+e/jvXr09R
FKWfu6kpkrbh5DBmKPgslUljtVqvsVgsU00m09KQkJB9YEWBRZNEY4ktmFDg
RGGLY/BpsAUnCuymQLKiJCNKcqH0rCj05/F+OqeyoigWZkWxepsSaU6fS+vt
OXKlzWbbTuv0IFlltmEtxMVpjChsY2PjaE1gncaRwYhKI2fSuVxyAZ0bRut3
DPkk8mnkn1M7F5Enkm8g36rYbPeQ/0b7T5GfJb9Mx68pVuubisXyX9VW6zu0
fUfdDw9/i/ymYjbD4EO9A0YU+X3yVHKR22wu7sCH0vZLVR4QLHk6YDtFRZWq
zB+N3zNTNfbB1NHYSBonCtylzthIks+jt+QowTgG28diKVVZRIfjNWnMJj0v
SmMhgU0EdhV4SAUF82h/rsox0rObwAXS2EEd++7Yv8YN6oxVBTYR2gOzCBwk
2Sf4SNnZc9RzuI64kYOeTSXrActa4LpkUx2OFYW2pCVHSd8/uEwwWFDgeKEW
YFbhHowPtjiWNUKsYGrBqBP4Tng+M3O2yp9C++gL+YO9hPgwJpK7hBoiN1xH
POgjLU1rGzHA2Ed/aE+yovRsp59iRYGJpbGu2nPAFuON8+3sqTJPnKWeOCWD
DPMWYzrNHRqqOSRkmmesi1XreVFyzDEO4HbBaD8pafoBqumOIUPmrj3xxA+X
XHihY+5vf/vt8/ffX3nHs8/WXDhr1toxK1a4s91ut+RERdDW4nAoJmZFsbqZ
bhPG/855OINTdFYX8/s1ubEb5NKT3UK+yt/Cs/q07CI4c9HuQ99Grxc2m83u
S/ZFRsfor+0+5sVisfyX0etbujDYibKOiRzC+M+BYMUQDLNYLJbRwuev0e9C
fif2HtlFcOaGoxvEYHReLBbr2Alr04i1Huh+2ezeYofg34ZZLJYmuwjOO8aI
fo+FWd1bdtE9vv8Viu7129BPxcpisVjeGiyMfz/1VDMnyhg9Jowf+95m5kQZ
ow+E8WMfCD8e6MKwesyfL47k1QGvCovFYrH6tPD31RcXFkbUX3JJ5soTTjip
fujQq2ry8x91ZWeXVPfv/6MrLW2DMzFxHzhLYEVVe/hLTo9VFpOH0aRyiGAw
iCRnSTKWwImi7tqYUTqOEZhMKr9IspTAcMrI0LhQ2dlKTW6uylKqHThQqaV9
nK9OSVF5UpLvdAgfqjNeFFhRMJ5BP+BGeTOvkBdYV97xg7/kYTAd1p57qqTB
iwJnCvlRXcDYqqG46zIzlTrKo47yUflQ+fkaIwpbOlZzRZ45OarVvMGOGjpU
ZUYtPf54ZdkJJyjLxo1TeVFLR41SaNzUumAc1Hg9te4QgxcryuVhRFWDE0Xn
ayl/lRGF+iclKc64uFYa45aqyMi9lRbLzgqTqbkiJGQTtbu2KiRkOeVYRee/
pfs+cmVllS0dMeKN5ePHP91w0UUPrLvlllvXPfro1VvfeOOXez/66PTdixef
5F6zZqR7374C95492TTvUt3NzfGbNm2KBjuBjk3MTTgq2SwWS67NZvtVeHj4
v8PCwr4PCQnZDSZNAo1lamqqugWrCZwoPSsKTCc94ylQvCjJhUJf4EJ5nwOz
iryfjtdSvwvJzIpi9SaF0XweRXP9ftp+SN5I6/OA2RyugOFmpXdxZGSUhxWV
ROsintZFPK2VZHIaOZucR+eGkEfSvSeQx5PPVCIiLiD/SrHZribfTL6T/AD5
UTr/NN3zAj37Kq23t2hNTyZPofan0bkiaquYrhfTfZpttmnkKYrFMkUJD59C
sU0lF6kcHXB/9Iyo8HC41MPZ6chT0vN0IiNLqa+yNnYROD3g64DT0xknSs+L
+qljjZ2k9dPOijqU16RnKoE/JHlR6ekzlczMdmaRZBVpLKvpbdwjfY4aL0qz
nhUlWUjezCbJagK3CG2jD/SVkzNH7RdMJj0rSrKpJJfq0Hw1NhZik+1LnpK+
vrgu6wGOEvpHX5JVBd4TjP3cXI0Z5c2LSk6e0Van/v0l12lOW+ySFQU+E3JE
P95xICcY8eAcrsl4wK4CmwvGPtpCv6iHnhOlZ18dngVWrsaAZ/XW4vJmROn5
UJJD1saHatU89aAQ8LRWslvPMNPzr/SsKKq1Oy5u+t7U1PJNWVmz6gcPnvv5
2LEfvHvOOZ8WXn31V9c/9FDVz6dNWz1u+fJ9BWBi0vec5IaG5rjJk5dEjh37
mlmIwlCjX1QslpdOITuF8b95Hs5PdTG/ePLkbpBHT/ej/hae1WdlF8GZg3Yf
+jZ6nbDZbHZfsi8yOkZ/bfcxLxaL5Z/swvj17c+7i9X9ZRfBmR+ObhBDMFzo
R14sFosVDOE9ZPS7kN+HvUvBmiN2P2JwBDGOQJvFYnU/Bfod4jCoXza7p9sh
+DdhFovVUXYRnHeNEf0eC7O6rwqF8fNDEcyJYrFYvUNXCuPfUT3Ri4X2/26z
jr3uFMaPf2/yF2SbXyPACpTeEMaPfyD8TKALwxIzhfHj2lXPDHhVWCwWi9Vn
BU4U2bx53ryYhjvuGLjqvPPOqB016tbavLzna7Ky5rsyMupcaWnNrqSkVnCO
VI4SmFCHs45DdFhWlN6SGUX3qc+A55SUpFRnZmp8KHCT8vO1LaxnRaWmKq7E
RI3zBMbTkXhRuKa3FzOqjROFa8iDYqmyWJRKir1ScqI6i78ze7hRVTA95zSb
VSZTDThMyclKPcVeP2CAUg82FPhPHkaUei47W6kFHysjQ6lOS1NzVLc4J5lR
dH/9sGHKUjCjRo/WWFFjx6q8KLCnUA+wodriQezgRaHGNps6PpIPVU3jVSMN
ThdqkJDQWp2U1OJMStpH+7uq+vXb7oyJ2VwVFbWuympdWWmxVFdarYsrIiI+
pb5m1mZnv7N87NhJq849929rbrjhj40PPnjd+ueeu6S5qOjsPZ99dsp+l2u0
snbt4L3btuW6d+9Od7vdCe7Nm2Noa2M+VEBkJidardZTyHdbLJap5NqIiIhd
cXFx7kRaI+BCgQUFVpNkN8ljsJuwBTcqELwotKFvG9azqNA/WFEUH1hRjXR+
Pvl2OjdCMCuK1bOFd5mF5nku+ebo6MhyWosNJpNpPxhRNlsErYcYWgtYa4m0
HhJpPSTRekgmp9N+Lq2bwbQdQcdjyCeTT6O18nPyReTfUBs3kG8j30vHf6Pt
U7SdRO2+Qs++Qe3+V0lIeE9JTi5S0tLKlNTU6bRfrvKS4uJm0HXpcpXNEx1d
onKjrFaNhwMelORDdWRElaqMJNibb+TN1AFvSTKDsN/xmaK2ZzRLFtOh/Cg9
NwnPtbdfojKAjsSK0jOjJC8KLCTwkaQ1VpFWG8k90jOPwGjSmFElHh5WSVt+
ehaSnhUlOUZoExwk9ANeFDhLHdlUZR1YUWjfmxWFmko2FvLVs6m8+UyoiawL
aoI+kC/YWOBD5efPVQoK5qrbgQPnqBwoMJsQI9hPiFeylmStJNsJccNpaVr8
uIbnJGcKls9rnCbJeSo7hJ8ln9H31/5MWVtO2HrXV7Kk9OMq3c6ZkjVpn6uS
EYV6SoeETAUn6oAQU/cLMW0vbXfTdhdt92jnph4EQwo8KcnskuOO9sFEi4oq
PUh97kxImN6UklLuysqa+emQIfOmjB//0T+vvfbrux57zHnd1KkrLlq0aOtp
dXW7RjU07B34zTcbUt94oyZ67NjFZs/7gsXqbrKK7s1T+lZoTKuu6Hrytm6Q
S092MTnCz7qz+p7sIjjzz+5D30avETabze5L9kVGx+iv7T7mxWKx/FOhMH59
K4L/P//eJiM/36QcQYwjkHb4mReLxWIFWka/B4/mHc/q3grWZ7A/3xftQYoh
GLb7kReLxTo2CvR7zNfv/MF6f7LZPc0OwZ+PLBarc9lFcN45RvR7LMzqfrKL
7vOdz9GNYvkpFx5FrVksVt8RGB9Gv6d6mmvJWUdTbFZAdI0wfg70Fv9ITvKv
/KwA6nFh/BwIhF8OdGFYYrUwfly76sKAV4XFYrFYfVZKcXGYoijW5tWr4zdN
mjRozZVXnrd83Lg/1w4Y8KYzPf1zV3LySldS0q7qxESVdaSyosCDkj4cKwpM
IotFZRZJVlTV4XhLkhUFhhH1UZ2SotRkZWlcJMmJon2wo8BLUjlR6enqfV1m
RUlelJ4T5Ylf5S0djnHlg530nJNyq6Z2aqjNWoqzNi0NubmrBwxw1wwceLBm
wICDlFMr+FD1GRlKfWqqypOqBi8LpvzULeWqMqMob+RP46NypuqHDlXqR4xQ
OVH1I0eqzKlqel7ldMm4JY+LxsFFY1JNuamOiFBZUci5KjraTeN3gLyP6rDb
mZi4g9rZ4kpNXU/j3+BMSqpzJiT8UJWY+AWdm1Obnf1e/bBhL64cP/7Rhksv
vbvxT3/67Yann75sy+TJ5+758MPxu7//fuy+VauGKuvXD3Bv3pyh7NiRqGzd
GktzLQJsMuZDBVyhVqs1Kzw8/JLY2NinEhMTP4yPj2+IioraDy4TuE16npNk
RtloHtAzKrsJrCgwpQLBikJb2AcnCv3Ic/rz1GcLxbGRrn1J/ivFcqJgbjir
ZyuU5nYizfHTaftcZGS0Kzzcsjs0NEwxm8NVTlRcXLKSmJihJCT0p7WRQWsQ
zlEiIgbR9VF07iTa/ozWx1l07gLyZXT9GvLNitV6J20fID9G55+he16ke1+j
NfUWrd3JSlLSVCU1tUTJyChTsrJmKDk5s8lzlP795yjp6XPo2mwlJWWW6uTk
mRSHxunRuEVlisUi2VB6PlRpG/sJHCJYMo7A3PFmG0mujsad6sjqwTWNudR+
j57FpGdPyfZkm3pOFPrXWD0/zYrS2E1gFWm8KMkrSknROE7gIcFgIKEeet4R
2gcbSPKuYI0XVNrGM9KzjPQcI8lcQl+oNdqHcQ7X8Tza0lhRHfOXNQUfy5sV
pfGXytpi05hW7XXGFvfGxJSpuSBHcKHy8jReVF7eXCU3dw7ND8mKmqmyohCv
xlsqU416oR7gQqFWiF0ytiRDChwqaRzjGvLV19B7DGDJdvLmO8l8tLlW1qHG
8n49L6ojX0obFzlW+jnXzocqUa3Vd2oLeZcQU5qFmLaJ9jeQm8gbyc0aM6qo
JSRk2kEaB7fGCeuwFlqpzxbqeyfl05ScXF5Pdf5+6NB5n5xxxifFN9/8zcvP
PFP92Pvvr7x71qy1V370UdPpDseW4WVl9ZnPP18fM3bsa2ajX1Ys1k/oLmH8
b59H8kNdzK8/uawb5NGTjf/2NczfwrP6lOwiOHPP7kPfRq8PNpvN7kv2RUbH
6K/tPubFYrH8k9Frm9d475RDGD9P7EGKwei8WCwWK5AqFMa/AxXB/79tb5Nd
BG+u+KNgfR8JtB1+5sVisYKvQL8/fF3nPeW9xWYHyw7Bfz5msVhHll0E591j
RL/HwqzuI7vg73pHa7vf1WaxWH1N/H71z2vIQ46q0qxA6Xxh/DzoDV5KzvGv
9KwA60/C+HkQCL8V6ML0caUL48c0EL4w0IVhsVgsVt+VhxUV4Xa7k/Z/882w
TY88cuHKs856oD43d0p1YuK3zri4tc74+L01cXFKbWysUi15UB6DMyR5TG2s
qIgIjVUUHt7OivLwoio740XhmO6TrCgX2EgZGSoXqlbyobKylJrMTPW8ykwC
O4nucyUkdGQ9+cqK0ts7dnCiwLmimNV4he98qCqy02MX5eWi510yt7i4Vor7
QE16+n5XRsY+ymOPKzV1jys5eb8zObkV+dQgd8qpOj5eUWtOxn4bM8rDjaI2
lNrsbJUZBZZW3eDBSt2QIep+dWqq2h/YXFUyJsRC9UcsLnC5kJ/N5q6KiDhY
GRGxn/b3kHeQt1EtNjgTEta40tOXVmdnV7hychZV5+cvqBs6dNryMWP+veJn
P3ty9cUX37vmD3+4uemxxyZufOONC3bMmnXa7m+/Hbd/2bLhe1evztvT2Njf
3dSUrGzb1o+2kTTHwsmhRs/3Xq5+FovljISEhEfS0tIc8fHxTTab7QBYUGBC
SWYTeFBgRYEPhfMw2E24BgeSFYU+9f3C2Mc59En3uOneLXSulPZ/TbFkUh7M
EWP1VIVERESkRUf3+2VkZNTkiIioRnJLZGQ0rbd+NOcTae2l0/rIoXWQT8cF
tP6GkEeRwYg6nXy+EhFxMfk3dO4GxWq9jbb3kv9GforamUT3vELtvEHtvKMk
JLyvJCcXKenpZUr//uVKTs4sZcCAOcrAgfOUvLz5qrGfkzNXyc4GN2q2yvYB
7wdcHzCCoqKm61hRpW2MJzB3NC6TxidqZ/WUqVwecJ70bCON71TUxnbytmQZ
oU3wfTTGTzsjSLKT0K63O+c0/TQnSrKbwCcCwwisKHCP0tNnUi1mqTyt3NzZ
bewk8I7AR8J94DqhPpIbBR4R+tYzjDpjRbX3qT2PfmHJY9LYXBqHqzNWlLTG
3SpW+ViSFaWvm2wD9ZEcLridF6XxsZAreFFgRCFf5JqRMcvDx2rnRElmkxzv
9pppzCjMGcwd2RbmGSzZU+1tlndgQnXGdpI5eI8/8tHzybRYvNtoHw/tuZI2
XtahfCjNQpR4jP2pB8g7ac6uDwmZtopcT/WuDgmZ6hJiWh2dX03bLeTd5Ba6
1qoxy1DrUs9cLGm12UoOUJ33REWVbqWcm6guq0eNWlh3zjmO72+88duFjz3m
fPeVV+qffvXVZX985ZUVv3zmmWVj//zn77Ovu+7HfkOHFocb/bJisXzQz8jV
wvjfQA9nB3lkF3O8ldzSDXLpqaZ3pTjP76qz+orsIjjzzu5D30avDTabze5L
9kVGx+iv7T7mxWKxfFehMH5tw45gJ8o65rKL7jFXHEGKw+i8WCwWK1Ay+v0n
XRjsRFnHXMH6DLb7EYM9SDEYnReLxQq+Av0O8/X7frDenWx2d7dD8Gchi8Xy
TXYRnHeQEf0eC7OMl13wd7yu2O5vwVksVp/UdmH8+6qneBt53NGVmRVAnSSM
nws93evIw/0tPCvgulIYPxcC4SmBLkwf1y+E8WMaCGcEujAsFovF6rsCvwes
KHLq/m3bRm17991LVk+c+FBtQUGpMz6+Atygqqio/WBC1YANFRmpcog6cKI8
zCUnmEse3lKVZEVJTpSOF6UyjCQzShrX6Bm1XbCfwERKS1OZSLDKh0pN1RhR
yckqO8kVH//TjKjDsaJwTvKhkI/NpvGtwFCCzWalEmwrb65VJ9bzofSuwrOh
oW7K7WCl1dpSFR29l+Ld6UpMbCZvdSUkbHImJGx0JiVtcqWkbHMlJ++mvPfT
uYPV4ERRbnXYgh0FVpSHIaXuow6oD5hamZkaV2vgQJUdVYNaYWzAhqI4XDIm
1DwsTIvHZGoh760wm3dVms3bKN+N5MYqm205jWOVKzX1m+q8vI+WjhpVuuLU
U19fee65/2yYOPGBxttvv3Xtww9ftemVV365c8aM03d//vmJ+2trj3Nv3Jiv
bN2a5d65M4XmUpyyYUOUu77eQvtgkTH759gIdY7u16/fhISEhMejo6O/MJvN
W8PCwlrJioXmNRhOKTR3wGsCKwrMKLpXPQa7ycNvCggrSjKh0IeeFYVrOOe5
1krXNtG2hFlRrB4smrN4zxWG2mzxmVFRsZdFREQX22yxNLcTW+PjM2jeZ9H6
ylIiIgbQ2htC+6Nofxx5vGKznUG+gPYvI19L+7coVuud5AfIj9Hx03T+BXrm
VVozb1Fb7ypJSdOUtLQSJSNjupKVNUNlAA0cOFfJy5un5OfPVwoK5iuDBi0g
Yx/cqLkq0wecn4wMjYcERhDYPRonqrQDmwncHfB6wOQB8wfMIbClYI0FVK6y
esDm0VhR0xQ9L0oyoyQ3CswjMHYkwwgMooSEGR2Mc2ALafyg0jZ+kJ4bJBlR
h2M0HYkVhRySk2eqTCPUYeDAOVSbucrgwajZXJV7hPPgHoGJJNlRGk9JY2Rp
fXfOiZLnDseRkiwm5KbnYklWVDvjqJ0Tped1dcaKknwkPKNnTOE8xge5Y7zA
ecK4Iyfs6zlRiE1fc62/UjVf1A3Pow5ga2EOYS6hbjD2UbcjsaLa2U4d+5Bj
qzGzOnLC5PzDfWBJdWSLyedKPM8U6xhR7XWQDDOND1XsmaNTD4SETNtF19eF
hk6rpfu/I39Oxw4676D7vyQvoXsb6N5t5L3kg2gnNLRE5UVhvMzmIje5NTy8
uIVi3BMXV7aL5s7OUaMWNJ91lqPxqqu++vGPf/x+3gMPVLxx331LHrrtth+u
vPzyRaeecsqXAwsKZiWedNIiW2FhIfMzWT1BNvI7wvjfQY/kO7uY42Dygm6Q
R0/2zX5XndUXZBfBmW92H/o2ek2w2Wx2X7IvMjpGf233MS8Wi+W7HML4tQ0X
BjtRliEK1vyy+xFDYZBiMDovFovFCoS60zuS1ftkF8GZKw4/4zB6bgcrLxaL
FVxhTRqxxgPdL5vd3e0Q/GdhFovln+wiOO8iI/o9FmYZJ7vg73ZdXZd2P2vO
YrH6poYI499ZPcnnHF2ZWQHWKGH8XOjJdpMn+F11VjB0tjB+PgTC7wW6MH1c
fxPGj2lX3RjwqrBYLBarz8vtdtvI6S3r1o3bWVJy+Zqrr36kbujQcldsrKvS
YtlCbqm0Wt1gKalMpYgIjekkGUzgNXmYTU7wlyIjlSq6rwMrymzWLHlRHmZU
GysK+7gOXhPYTWg7Lk7jI4GNBDYUTMcqIwo8KV8YUZ3xosC08sSJfFQ2FGKV
8ZHBrqrUxycO5UN1xojCuQoqKd1zkNyyJCRkH7Wzq8Js3kE13OKKjm6iWjVQ
HktdaWnV1VlZlTV5eRXV+fm11Tk5Da6MjI2u1NTt1Skp+6vT0tx1mZlKXf/+
Sm1KilLr4UfVoCZgaYGZBdM18KFq6b667GylDgwp5Ek5OD3xUkyt5APkveRd
S4TYTtvNFSEh6yrCwlZSvtVVERGLnXFxDmdW1oylxx339qozznh29RVXPNR0
xx13rHv00Ws3vfbaxc0zZpy1/bPPTtnvdI7at3Ll4L1NTTnujRvT3Nu3J7g3
bYpWVq60KopiYj6UcYqOjk6Iior6tcViecdkMq0mHyArVlpbYDVJVlQErWNs
k2kO4bxkRYHj1FVWlDTakqwoMKIkKwr3SVYUeRPtgxV1GV1nVhSrJ8nDiNI4
UULcbLZYsnIjI9OuiI5OKY+NTd/Sr19Oa1xcAc35oUpk5HDFZhtNPonWn518
LvliWpsTFYvlBtreTtf+j7aF5L/T/iS6/gqty9dprfyX1s57tF6LlLS0UiUz
s1zJzp6pcnq8GVEaJwqe14ETBdaPxj5qZzLpmUXerChwesA3AmMJz4EFBIaS
5CjhPLg94BtJLo/k9GjMqHZWlGT/oE/wicAUQnv9+2tsJlgfH+4Ba0gylvzl
Q3XGimpnHs1W6wE+1JAh85Rhw+arHjJE42rpuVHItZ0XVd7GPzocI0pjGXXm
dj5SO+OonRWlubjNOO/NiWqvg3aMNtEOaqxnI2EfbeB5yYvSs75gcLmQi2xH
4zVpceE5OVa4B/enp89s42uhPnpOlMYf0+qEe9GXZGvpuVb63PXW16GdLyZj
aWeFwUfiQ7Wzobw9zR0SMq2VvD80dOpOun89PVdjNhd9aTIVzaa+poaFlUwO
CSl+V4gpxeSFQkz9kbaNtG2m5/eGhEw9qM3rYtUaD22am9xK7RyIiiptyciY
eWDEiAX7Jkz4eOsvfvH50okT//fFddd9XXTVVV89ffHFi35vt3/28zFjPh1x
/PEL+l955Rdx8+a5LR5eK3/msXqCbhPG/x56JM8i53Yxx3u7QR492Y/7X3JW
L5ddBGeu2X3o2+j1wGaz2X3JvsjoGP213ce8WCyWb7IL49e1P+8sVs+TXQRn
vji6QQxG58VisViBUKEw/t2nCGZG9mbhsy0Yc8beDWIIhlksVvdRoN8dvn7X
70nvLDa7K3YI/q2XxWIdnewiOO8kI/o9FmYde9lF9/m9pae60N+is1isPq2r
hPHvrZ7i64+uxKwgCP+OstHzoSd7ov8lZwVJo4Xx8yEQfjPQhenjmiGMH9Ou
enbAq8JisVisPi9FUazuNWsyd3zyyambJ026tnHixCeXDh48yxkVVVsZFrat
MjT0QIXJ5AZLyWmxaLwoDyuqGjyn+HiV6aQynPr1a+dFgfsk+UuSFaXjMYEX
VenNi8J5sJvQB1hO1JYL1nOp9Iwo/XUf3YFnhb50DCs1BmkZl8dVHjth0ZEP
5cVj2kfevUSIHeRt9OwGyms19Vfviotb4kxJWVSdk/NR7ciRs5dPmFC24qyz
pi8//fR5dePG/a9m6NCqmsGDV9SNGNG09MQTty8bP37f0uOPP1g3cKBSl5Sk
1FGNayUnimpeQ/WvAT8K51NSlLqMDKU2NVWtUUV4uBvxUAz7yLt/1OLZQl5P
bqC4ML4/UFyfuxISZtfm5Ly3bNSoF1aeffYjDddee1fTgw/esOGlly5rLi39
+Z4vvhi/u7Jy7L5Vq4buXb9+wO7NmzOUHTsSla1bY5W1ayNoDpnBPDB6LrNU
xVgsFjt5Unh4+FKbzbYfvCYwmhITE5UEmjc4BisKW/Cb4K7woQ5nyYrSM6Ng
yYqKiopqpTg2RUZGMiuK1VPkxYfCe89hEuJ5ixCTI8PDfzYkImL4DXFxQ2cl
JAzf2q/fca3R0aNprp+gREaOp3V3JvkC8mXkaxWr9RbFYrmT/ADtP67YbM+Q
X6R7X6Nn3qR1M5nW7hQlKalYSU0tUzIyypWsrFkq68ibD6VxjjSDHwWOT06O
xjtKS9MYPhojqp27482IkpwoPSsK/B+0kZs7W+UDSU4QmEtgDqEdcKH0nKjO
WFFoD+wgxAG20IABc1XuEJhWGtdKixncKMkeSk5u5xp5M5r8ZUWhXzCqkEtO
zhw1B/ChRoxYoIwcuVDdghk1eLDGi0KNZSx4LiHh0Fi8GVGSiSQN1pGej3S4
WustWU1oCxwnjRPVnouWV1kb6wvcJG9eFFhGOG+zldDz4EWVqfwm8K40jlNH
VphkVek5Tegb/YGTBVYUaoGaYIzk3MIcADdMjpXGiSpva1+bZ6VeTKjiDpZ8
KMwXvcPCvOvV8ZmfZkS1zcVWund/WFjRTpOpaAO1VUcx/S8iomQ6+RVaD09Y
rWUP0X0PCzHln0JMe0OIqQtCQqbRV8FpjeSt9PwuOt9C592yXQ+HSsE5iq2V
cm/Ny5tz4IQTFu4880zH6gsv/Pz7X/1q0ZyJExf954orvn7gsss+vfKCC76c
cP75nw655ZZFGfPmbY6h703hzIti9SCdQP5eGP+76OFM61Tc2MUcx5I/7wa5
9FRP9r/krF4suwjOPLP70LfRa4HNZrP7kn2R0TH6a7uPebFYLN9UKIxf14rg
/++/t8shjP9MCFYMwTCLxWIdSxn9zuN3X++XXQRnzji6QQzBsN2PvFgsVnCF
94wR761A98tmdzc7BH/esVisrskugvNuMqLfY2HWsZNd8He5QLjQz7qzWCzW
s8L4d1dP8ANHW2BWUIR/f9noOdFTfddR1JsVPI0Qxs+JQPjfgS5MH9dqYfyY
dtWPBLwqLBaLxerTwt9Rb2pqitw2f37Opn/96/T1t91286pzznm2ZsCA+c6I
iPqK0FDwhdxVoaEqS8kJXpTNprjAioqN1ThRYBelpKj8IldiosaLApMJLKbw
8HY2VCesqCpvJhN4TXStUt5Lz6t8KqtVoXgO5UL5wokCW8rDl1I5URQ72pKc
qEpvZpU3H4quOckuj7HvlPdofKiDVKP9tN1D250/CtFM20103LgkJGR5ZXh4
VWVk5NdViYkfugYMKK0bM+bN5aef/lzDr3/9j3W33fbEujvv/HvjTTc9v+rS
S99Zfs45M5eff76j4Te/Wdz4+9/XN95xR1PDVVc1Lx0/fl9tQUFrbW6uUpud
rXKhaimfushIpZZyUplR4Eelp7udyckHq6KiWigvxLPjByG2USwbyKvJ9RT3
koqwsP/RPfNrUlOnUrv/XnHqqU+suvjie9fcfvtNTU8+OXHj229fsOfjj3/W
UlU1bv+yZcP3btiQ5969O9O9c2eysm1bPzfNGQ8fKszoOcw6RLE2m+0k8pNW
q7U2KipqP1hQSbROwYoCMwqcJrCi6JrKbQK/CeclxynQjCj0B2Nffw+zolg9
SF6MqGJ6971mFsJhJUcJMSdOiH9lCHHNyTbbz//Yr9/PFiYkjG+OjZ3gttlO
o/X2c1oDl5Kvov3fKlbrbYrFci+5kPx3On5OsdleUSIjX6d7/ktr8T0lPn4a
rdsSJSWlTElPn6FyebKz5yi5ufOUvLz5bZwosKHAPRo4UGP4ZGe3s5aSkjS2
kcYFaucVtbN6Ds+LkqwoMIDQJlhOQ4fOV4YPB1NpgXoMThC4QBpvqJ35ExJS
3CkrCu2BPZSZOVvlWQ0ePN/T5vw2VhO4UcgHLCLkIXlRej6TtD+sKLQB7lVa
2kyqpcbbQl/I57jjwIpaqLKjwNxCbOBJSRYSWFGIW2NFtcfSzolqZ0MdWuP2
Osh6awyp0jYmlGRMyX20h3YlJ0rmgL5h8JhwDvXE/bL+kp8E4xhjjnZwH+6X
z2jxlrRxpuSYyXGTz+JeydhCHcDZQu2wlYwoXENdcR9i8+ZQabUo8WJCFXnc
zobS+pfx65lRep7UkflQklHW/mwRfID630VxbKKc6unj5iuqX1lKyoxJqakz
7k5NnXVNXNzMy63W6VdT3reSCynuN2y24g+jokorIiJKVlosxRvo/A6TqaiF
tq0am6tYaedFFVFNS9w0Xw6OGbNwz1lnfbrpkku+rL/22q8X3Xrrd9PvuefH
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
Kmef/RnYZgdyc2fvy8yctY/mSgu134q1esYZXyg33/yD8tBDzt3PPlu79I03
li+YNq3hpfLytXfOmtV4YXl546iyss2ZH364PNbpVMKZFcXqBXpYGP976ZHc
QL6kizmeS67tBrn0NG8k/+wo6s3qHbKL4Mwruw99Gz332Ww2uy/ZFxkdo7+2
+5gXi8X6aRm9nv15V7F6vuwiOPPH4WccRs/3YOXFYrFY/qpQGP+uUwT/fcC+
JHy2BWMO2btBDEbnxWKxgqNAvzN8/Y7fk95VbHZnLhQsFosVXNlF4N9dDoP6
PRZmdV12wd/RgmGH4D/7slisrusaYfz7rDt7wtGXlhVkMSvKdx8kH390ZWYd
A+UI4+dIIPxQgOvSl1UujB/PrnpuwKvCYrFYrD4t/P10spWcuK+xcdDmV145
a8XZZ//RmZT0JlhRS4RYRd5ZIUSrS3hYUTA4SuA8gdkUF6dUp6YqtTk5St2g
QUptQYFSk5urVKenK9VJSSq/Cawmlc0ETpSeFQVOFDhO1A7YTirridoD60nl
RYWEqP1VCI1R1dav5EXhGT0zCgYjCu2hXcmGkv3J/sGcAu+K2nOGhrbxocCN
ApOqIjS0tcJkOlgZHr6fYtxTZbPtoHa2kTfSuUbyMtqvrIyI+NrZr98H1Wlp
JZT76/XHH//MijPP/Ovq3/zmjsZbb71+80MP/Wrj3/9+3tZXX/3Z7ilTjt9S
VjZ878cfD9y9aFHGjsWLE5Xly2M31dREu93uSHL0Drc7ibbZ7h07hrasXn2C
snnzWe6dOye6m5v/0NLY+OCemppJe7/99p2dCxeWb3n//Y+3vP32t1umTats
njevascnn3zfPH/+l5tefXXBmt//ftoKu/2VZSef/MSq88+/Z/VNN/2u6Ykn
Lt/4+uvn75gz52ct33xz/M7q6uF7ly7Nc69Zk0n9JdEciG1qaoqkLfhQYUbP
TVaX1IEVFRkZqbKi6Fih8+oWvKbExEQlISHhEI5ToIx24+PjVWNf34/kR4EV
RbExK4plpDphRC02C+GwCjEjWoh3EoSYkm6xFOWazVOGmUxTjhfi/dOEeO88
2v5aiKLrhJh2B/mvQkx9JiTk7SmhoS8tMpv/uT4i4p8H4uJeVJKTX1dSU99R
0tLeU9LTi5SMjFLydHK5kpk5kzyrAx9qwIB5ysCB8Fzax7l2bhJ4OOAbgdMT
FVWqcojA9tGzeCRTJyxM4zSFh5d6XKJyoXC/ZELhHsmKwlayjuR1yYuKiSlT
GTzoHzFLZhSYTmAVSVYU+EBHYkWBaYW2wGtCexovaYbKoQIzqn//2Wo90tNn
qQwg8JNwH1hEkm+kb1fykHANfCJwisAr+ileFOonLdlR3pa8Jj0HSd+GnuWk
cazKPAwrLV8Zl+QtoS/kkpw8U80tM1NjPYEBJvMGM6ozPlVsrBYT6gVWFJ4F
PwxzA3UD10rjI2EM2llRWt31LC0tTllLzIXQ0CKP2zlResaUzNs7Z++a6msF
Zpc3L0oytMAuO5QFVezlQzlRaAPtRUdrdUC9MP/AFpN8MZzDfExMnO6meXaA
8t9ltRavi40tXZKePnPuoEFzXxs//qMHL7980VUPPVR52tSpjQWLFjXHL16s
mJ9/vt7yyitLkmfPbho+ffq686ZPX3v7Bx+sf+nTTzcuXLiwyTV16up1L7xQ
t42e23XbbYu3X3nlV5svvviLjeee++mmE0/8cGt+/pzt5Ga7/ZOtN9307brH
H6+ufPXVpXOLihpepHb+/OWXWyYuWbJ1/JIl2wu++mp9itO5IQr9FhYWMpOT
1Rt0NrlOGP+76ZH8EtnUhRzDya90gzx6mlvIFx1FvVk9X3YRnDll96Fvo+c9
m81m9yX7IqNj9Nd2H/NisVhHVqEwfj0rgv/+YF+TQxj/2RCsGIzOi8VisfyV
0e84aVbfkV0EZw45ukEMRufFYrGCI6xDI9Z1oPtls41yoWCxWKzgyC4C/85y
GNTvsTDr6GQX/L0smC70eSRYLBbryJokjH+ndVf/vgt1ZQVfzIry3dceZY1Z
x0aDhfFzJBD+S6AL04eFf0fe6PHsqh8LeFVYLBaL1eflrq+3uN3uBPf27fnb
ysvtq6655qaavLyXKq1WR0Vo6LLKkJBt5JYqobGiqiSzKTxccUZGKq5+/ZTq
5GSlJjtbqSsoUOqGDFFq8/PV4+q0NMWVkKA4Y2IUp83WzmzSs6LQBhhP8fFK
dUqK+gzaA+8J/bSxouDQUI315OFFqc+CGeUxjtGPyoiSbCiTSTNiBhvKYxe1
BYMVVaXxodzkg+QW8t4Kk2lnpcXSXGWzbaJY1jqjo1dUx8Q4q/r1+86VmPhx
dXp6eW1e3ttLR49+buXppz+88te/vmvtLbfc2HTffRM3PvXUBZtefvn0zZMn
n7h15szj9n3wQb77s8/6u//3v2Tlxx/7uTUmUziYTORQj03gdtFYxNBYJLh3
7Urb53bn0/HxdP4s94EDlx7csuV3LWvW/GX/0qVP7auufoX8/t66uvI9y5aV
71u6dMqeqqrXdn788T+2vv76/esfeeT36x9++Iqml1++cOfs2fbdixadsL+2
9jj3mjX5ytq1WTvXr09RGhriNmzYEKWLhRk9vUMdWFG03W+hNRNOayKS1kgM
rTfJcoJ13Ka2a12xvh3Zh+REefcBVhTFxKwo1rFWJ3yo18xCzLMIMStCiPJ+
QkxOFuKdrPDwqQVmc/Eok2nqKWFh084KC5t6UWho0ZWhocU3C1F0D5n+jFb0
Ivk9IabNCQl57+uwsLdWhIe/tj0q6j+tCQn/VdLTpyj9+5co2dnTldzcGcrA
gbPJ4CyBbzNPteRD5eXNU7k3+fnt/BtwhMAQ0phJZSrDh2JSuTsaS2eaoufp
gPWjZxRp7J6yNnaP5C1p3KjOWFGSN1XUgRcFHhJ4R2BVge+Unj5T5fKA2wNO
kGRFgU/U3n6xGqvGHypp4w9JXpPkNEluFAzukdxPSJih3ofn0IaeOYR9rf2S
Q9pHzp0xjQ7HjmrnR5Ufwj3S2/t+8KRk/O1sqTKv+8o9jKgZKgML4wnGEzhg
Gg9MMp9mt9VTsqL0MaJ9cKQwF8ANA2MK8wNbPa9L1l/P6UJdcA3GWOrHqZ0b
Vtx2v8aK0thSndXMux6yFtKyjnge/ennhORFtbtEZ3lOMqK0Y21el6p9JibO
VBlbWB+DBs1Thg6F56v7OIdaZmbOdCcnlx+guHbRHGtKTZ1RkZc3e96oUfNf
O+OMTx787W+/uerZZ10TFi1qzqPvPv0838FM27Yp/Rob9w1avnznWcuX77px
3bq9f9+wYV9RQ8Nux+LFW7+bO7ep4v33V7pee225c9Kk+sonnnBW3ndfVdU1
13zttNsdFccfv/C7c8/91HH77d/PeO65uteLixsedTjW//777zf/asWKPadt
2bJ/xJYt7v6Vlc1xq1e7bZ5++TOP1VtkI78pjP/t9EiuJv+8i3n+irymG+TS
03z50RSb1aNlF8GZS3Yf+jZ6vrPZbHZfsi8yOkZ/bfcxLxaLdWQZvZalC4Od
KKtbyS6CM48c3SAGXh8sFqsnCe8Xo99x/J7rm8JndjDmkr0bxBAMs1gsYxXo
94XDoH7ZbCPtEPydj8ViBV52EZz3lRH9HguzfJdd8HexYNsh+L/1sliswOoz
Yfy7rTv6ha4UlXVMlCKMnyc9wf842gKzjplGC+PnSSB8Z6AL00eVJowfy0D4
kkAXhsVisVgsDyMolpyze8mSE5sKC3+zbMKEJ1xpabOrYmJcVVbrxgqzeW9l
WJjb5eEsVYLBBBYTeE2xsYorMVGpycxUGVF1Q4cqdYMHK7UDByo1/fsrNeBF
xccrzuhojeFksbRznMB8Au9JtpGerrZTTVtnv37qPSojShqcKj0vCqwpsKE8
fCinvm3Jh/KwoGAnPS8N5lVFSIh7SUhIK21bloSG7qO2d1WEhm6vCAvbUmky
NVG7KymOGldy8mJnevpn1Tk5s+oHD568bMyYF5ba7Y+t+tWv7lnzu9/dvPb/
/u/K9f/4xy83vfTSmdvfeefkbcXFo7bPnz9oz8cfZ+9yOFKbFy2KVzZsiHK7
3RYPFyDUawxCPJbMqHC6FwyBfrTNcGvMqJHuPXsmHNix4+KD27df7969+46D
O3Y80Lpz5yOtW7Y83LJly19aNmy4df+KFdfs+/HHi/d+882Z27/88uT9VVUj
9634f/bOBD6K8u7jz967ue+LhIQjB4RTRMWr61XPUg/UetVWW22ttcWjttU2
b7VetZdXW4+qoEA2m4OEkHBIV0AuQYFkc2I4hXATCLkgmXn//5l9spMQcJPd
zWzM//v5/D4zOzszzznPjunL992e2dbYmCYcPJh4/Ouvo4VDh0Klujgc5Cj4
dhKh1+u7XVFms7lDB88CHJM8TTHwrKGniXuj/OGKCoXnHXOu7zDoioLtIQi5
ogh/08sPxR1ROUbGHGbGFoYyNieasflJjM0bDdtsvf6j6Waz7TtGY+4NFkvu
7SZT3o+NRvtjRmPeszqd7a8aje09SD5jucsYW7BBo8l1arXzd+n1Hx8xm+d0
hIV9JMTF5YnJyeiIKhbT00vFjIwyMStriZiZuQT2l8CxclfKXHF7otAhhE4c
dAOhUyk4WPYlocPJ7YiSwz1R6PhBPw+6e9CzFBdXDNeXSFv0D6HvCb1BJpN8
L6UvCr1LeA+8Fw/3ReF36PvBOuA9uLsIHUh4X6Uryu2iUvqczvRFKT1I3BvV
2zeE3+O5eF+8T++6KZ1R8v3djiyl86m/6e2I4l4kZX2x3ehuio9HZ1aJ5GvC
fXRCKcPdTjiW6DFCPxT3geE+9z0lJ5dI5ypdUcr6y84puTz0dOH98Fq8J94f
r+FOLewPHhwL7Hd0Nik9UXycuCeKn4vfuV1jnrmi+Fzo7fzC+nJnFJ8bsi/K
HZ2OR/KUCdwFJkc+n/vP8F7Yfmw7+tYyMhaL48aVidnZS6SMH78EPmOwj0tP
p6UtaoVzD0B/V0+dumS51brig1tv/ey52bO/fHDevIar9+1rHwfvQ/HwLhTk
ekcLb2pqG3PiROulzc2dt7e3d87u6up6pb296+3Gxra51dXHczdtOlqwdu3h
hf/734HioqK9xR9+uLPo+eed+T/5yYaP7rhj9b9/8pPPX/rzn6ufzs/f89Da
tUdub2hovmb//paLjhzpyG5tFUeinxXLgxh6vw8SxLeEByAtTP2/oZ4r3v5v
O5GQOQHQjqEW+v+9MrywMv/MI6sHZas91ykUCmU4xRPUrmN/Y/WwXQRBnJ0c
pv6z3J91ivh24WDqzyV/1UHtdhEEQXiK2msbT46/G0oEHFbmn7nkCIA6+CPW
frSLIAjfg2uLGmuVr8ulUAIhOYwgCMJ3WJnv1ymHSuUORoizY2XkhxrM5Hgy
KARBEP2kmam/vgVaVnnVo8RgMYapP1cCPUsH3LvEYDKDqT9XfJFHfN0xw5Qb
mfpj6Yuk+bhfCIIgCAI9RVpBEILRSdSxZ8/kIx99dOPOe+55qm7y5Hk1I0du
csbG7qsKD2+uDA7urDKbxSr0MWHQ+4SuqLAwyQVVnZgo1o4eLdaNGyf7ojIz
JV9UbWqq5ICqio6WfVFwjeRzQpcTRPI84T3g++q4OMktVZ2QIFZFREjuJ8kP
xXr5otABhddzZ1VvP5TLESWd6/JCVcK1la57bGWsC3J6M2MdsG2BHN+i1R6F
a/bDPXZVmEx10N7Nzqioz6pHjiyrGT9+Qd2FF/77q2uueWnnbbc9/fWDD/58
zxNP3Lf/hRduPvzaa9898sEHlxzLzT3vxLJl446tXDlK2Lgx8Xh1dfTh9evD
du/ebXH5AHSeepkU3ih0RgWjuwC2sejz6ujomAzbSyFXC6dPfw9yqys3Qa4S
Tp26ROjoOE9obx8nHDs2SmhpSTpx4kTM0YaGcEGuyxmuKuJbB3dFvQKpN5lM
HRp4BrTwTKCfCV1R6IZCVxR+xn2Mt46ovsLvzT1UPEpXFJx3CLaSKwrqS64o
wsf05Yd62wD7ZsbmBjP2QQRj8+MZmzOSsY8yGft4CmMLLoZj1+h0uTcbDPl3
WywFD5vN+U9ZLPkvmM32t4xG2zy93laq1dpWabULNms0uXVabe5unc62X6/P
bTKZctuCgxd0RkbmiQkJReLIkSWSEygjo1zyRI0bt9Tls0FnVLnkj8JwP9So
UYu63UHoH0L/Drp20OHDXU6yK0oO90ShTwfPQ2cQOoeSk9EltFhyUI0evVi6
H96L+6L6cgXJ+7YeTiaNJq/bycSdPVgOdwTJXiPZHYTfGY35Pe7Lr3X7ovKl
8tFFhPfhPiLuYFI6nvB72W1l73ZF9W4791nh/fE8PF/pMfLGEdXXOUo3EvqQ
0NOUmloqBR1GKSklUnAfxxFdTuh04o4oHhwT/A7Pk8dadnqhf4q7snj9ufsK
+xrLRFcUloHXc1cU1gf7FPuB9z0P7/veOdPp1dMVpXR6nS28P7DeSjcWbxN6
o7AtwcGFMPZYvwIoL7/bEQXlCvA8Ybrk5AowBwW5TnZpPnEHGJaF95NdWSVS
v6Jza/z4cnHixKXi5MnLxGnTPhEvuOATcfr05V3Tpi1rnzZt+ZEZMz756rrr
Pl1z330b7L/97dbX//Of+qdXrDh4x9dft86A96sx8F4UA9tQ1/sWOjoniqLw
HdjeAnkQ8lhra+dvmppO/eHIkY4X9u9ve6WhoeWVzz8//Mry5Y1/zsv7+tm3
3tr2+F/+Uv3T11+vvstm2z5z/fpDV8I5FzQ2Nk9oamobffLkycSmJjHS5QIl
VyfxbScdsoSp/3fUc2Uj5BIv24nuo6MB0JahlJ8OqKeJoYiV+WcOWT0oW+15
TqFQKMMpnqB2Hfsbq4ftIgji7OQw9Z9lkdG/CxiuWJn688lfdaDfPYIghgKB
8h4g+ruhRMDiYOrPJ3/Vwddx9LNdBEH4Fl+vFZ4+00NljaJQ+hsHo//GJQjC
N1iZf9YoNcodjBBurIzcUGrEwegdgCAI/zCBqb/GBVpaIeO96VRi0JjM1J8v
gZwjkFED7l1iMLmSqT9ffJEHfN0xw5Q/MPXH0tsc8HmvEARBEIQLQRBM6CIS
2tszm1evtu595pmfbr/hhjfrpk79tCYzc3vNyJHHqmJjO6rCw8WakBCxCh1R
mOBgyf+EXifJ8zRypOSIqsvOln1R48aJ9VlZYt3YsWJNSkq3L0ryTHGvk9Eo
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
UBB6l4q6vTXodIqNXSg5mdAJhE4f9PjgFj/Hx8vfo/cmKqpQ8jYpgz4e3KKH
CK9Bx1By8iLpWnQBoaNH9kXZuz0/uDUa7ZL/CK9DJxE6etLTy8Ts7CXi5MlL
JVfUmDGLpXvy+2D9ebg7iZeP7iIe7gjCLdab3x/vl5FRJo4bVy6F3x+vwTpi
ndA/JLuKckWlL4o7i9DxhF4p2RclO6J4goPdrii8F57bV4xGpeuqoNtvpPRD
ye2UXVj8HGW7e7ulejuR3PeQr0GfFfYTOr2wzehrQi8UOqMwvR1RfPzR84Tj
z91gfMyV7qXe/irlMbwGxwDvNWKEPD+wbPSR4dzCe2E/YH/x+dHbFaX0RfHg
mPCxkd1bsi8K+0tu79lcUTiXsC3YLmwn1kVqvzB2bGkX9MWplJTi9ri4opaI
iIITMAZHzWb7fqMxb6fBYKsyGm1rTKa8RVDWXDj2b/j8LxjPd4KCbLlwf0d0
dOE2eH6aoH2n0Y0VF7cI+m4R1KVY8rJBXwppaYu6JkwoPzVjxvK2665b2Xr3
3evbHn30i44//KHy1JtvbussKtrbsWrVgSOVlU2Vu3e3Fh850vGPtjbh0ZMn
hRvhvXcSJBkSxv1OrhjhmAVdnAofJ74rm12OTnRLRbgSjsfq6+vJ2UkQ5+Zm
Fvg+/48hUV6288kAaMdQyYMD7GMi8LEy/8wZqwdlqz2vBxqCIAh/ofbapfb6
6o/fGoIg+iaHqf8M07sVwXEw9X8n/FUHemYIgghUAmXdy/F3Q4mAx8r8M7cc
AVAHemYI4tuDr383PV2jAuX3mkIZrOQwgiCI/mFlvl+LHCqVOxgZaliZ2wWF
cTB6PxoqyTljNAmCIPzLSab+2hcomeZlXxKDz/1M/XkTaDkFGedNpxKq8DOm
/tzxRbz9tykEYzcw9cfRFxnt644hCIIgCCX4b9vx38m3CkLqqaam81u++OK2
E8uW5TQVFxce+/jjrQf+9Kf9O267raVu/Piu+vh4sS4yUqx2+aKc3BcFn6tj
Y8XqpCSxJjVVrB07VqwfP17yRNWNGycdq0ZXVGioWGk2Sy6oM5xPLi9Uty8K
YzTKgX3JL4XnuIIeKCec3x2XH8rp+n6rRtO1RaPpgOuOQZk7qhIS1tVfcEHu
znvu+eveJ5/8zd5nn/3JvmefnXX4L3/57tG33760ac6c89vLysa3LV8+umXt
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
0EuEfYo+KTwf68Y9SrIjyV1npWcJv8P+c7u+3F6moCDZgxUdvRDGDN1epd2O
KtnvtFiqB3q/kpKKJU9VVJRcV6U/y+27kscf24BjjvfDe+A9sS3oWkJXFM63
3r4xpe8K66wM1lnpeOLzkMd9Dzw335UC1xbngHIu47ifOfa9PWlYD9kTVdA9
LujOQs/ahAlLxEmTlkrb8eOXQPuwn0q7kpJKOmB8jkdHF+6Gdm6CeVMCY/EW
PBtPhITYb42LK75oypSy8Tfd5Mi69trV2dOnO86HZ3HGBRcsu+jyy5dPvfPO
VRmvvFKT1NBwNNzliqK1nCAIf4EuujeY+n+/PVfehVi8bON/AqAdgZKHvehL
YnCxMv/MAasHZas9TweSHA/aRRAEMVCszH/rlyeovcb647eGIIjA+bel9B5F
9Bd/zd1AqIOv4+hnuwiCGD7g76/aa9RA1l+CsDL130n9VQd/xNqPdhEE0X/w
fVuN93dflztY+bZiZYH1bkVxx3H2YSMI4luOlamzpvijXArFV3Ew8kMRBDE8
WMvUX3MHO5k+6TkikJjL1J9Xg51OyGhfdB4RMIxn6s8rX+R1X3fMMCOeqT+G
vsjdvu4YgiAIgugP6GASBCEUki60tV3V8sUXDx3+179e3Xn33cXbpk3bUpWS
sq8qPr6pKi6uFbanqhISutANVZOQIPmhqmJjZT9UZKTkiKoKCxOrQ0PF6pAQ
sSY4WHQGBYkVFkuH02I5WhEcvNsZFlYN537ujI1dXp2SYq/LynqvYcaMv+z+
3vd+8/UDDzzQ+Pvff+/4v/51UVth4Rjx2LEI9ESp3UcEEcCE6PX6i8PDw1+I
i4uDxzG2PSwsTEA3FPqb0BXFnU342d+uKO6JUrqiTCaTqNPpznBFwbXkiho0
uB+KO6LQD/WaibG1FsbKwhibF8OYbQRjC8YwljsB9i/Q6exWna7gRtjertXm
/Yix/J/D8dmQJyGPMTb/p7C9H6PV5v4EznlEq81/SqPJe0Gny/2XTpc3X6Ox
lcHxz7Ra21b4XA/ZrdfbDuj19qN6fd4J+NxmNOadCgsr7ExKKhbQbTNp0jJx
+vQV4mWXfSp+5zufihddtEJy3CQnL5I8OOgWQkdOX/6cvp06bucSenX6ckWh
Xwg9Q+iKQkcQunZiYha6XFFFHriiCiVXFPc9cWdVb7cPuoDQ5YS+I/QTcadR
eHiBVCd0IildQ0pXVO/7oUOIt0l2FqFzSXYGYV0wsjeq4KzOJ6VDqf++qCJo
R5EYH49t4c6oUsmzNHq07FrC/sXyZVeUXD/ZaSV7jbh3Cvdl35bbH4X7WH/8
Ds/BshISFkr3lb1OZZIjauLEJVJwHz1IY8fKzi/et+iE6u2L4m3A72JjF0pz
gN8X6y7XX55v2J99Oby4p0vpi8KxO5snzO0ww+/tcL0dtvmuSHMG1khbJ5xz
Gp5BTBcfZ+6Lkr1TblcVlsnHG9uE/jHeHnR1ofuKu6JkX9RScdy4chyjLhiv
UzDPm2GM9kI/bIUxWQp5H/rlOfjuZxdfvPye73//07tnzlz148svX/5Idnb5
rzIySh8ZP37x3TNm/O+q73/fMeXpp50jHY4dEeSKIghikLgFspup/3fcs6UG
cqWXbfwRpCMA2qJ24DeQTfSuK4lBwsr8MwesHpSt9jwdSHI8aBdBEIQ3+Gv9
UrNsf8XqYbsIYjhjZeo/q/1ZhwhCiZWp//uR46c6qN0ugiCGD4GyjuX4u6HE
txIH8/1cdPSzDmo/O/5qF0EQ/cPX65Gnz6w/1sHByHAgh6nfz72TE6D1Gqw4
zjliBEF8W7EyddYTf5Q7GMlhQ/f9gnL2OJjbD0UQBDGcaGfqr8GDmed8021E
gIG/4WrPrcHO73zSc0Qg8T2m/rzyRWb7umOGGdcz9cfQF8nydccQBEEQhKfg
v+2HGARBiIXtFLG19fb2+vo/HJk796PdP/7xurpJk/ZWxce3OiMjO53R0Z3O
mJiuqpgYsRrSww8VHi45oqoUjihMNaQyOLjLGRx8HO6x05mUtKk6I2PJtilT
Pm646KLXdn73u3/cftddv2p8/PEfHXjhhVuPvfPOlU12+/nt69aln9ywIaGx
sTEYXVZq9xNBBDDB6F2KiIj4Y2xsbEVMTExbaGio5IoKgWcRfU1RUVFS0N/k
C0dUb1cU+qAw/BgPlocOKXRFabVaQafTnYBshPpKriioO7mi/EsvP1SejrFN
BsYcZsa2BDNWCv3/QQJj+amMzYP/JpkzlbHcSxizXaPT5d+s1drvlf1Pub/T
aGwvQl6H799jbMGHkHch/2Bs/guwfR6Ov4zfQ96HFGi1tk/g2s8h1TqdbYde
b9un1+cd1uvtTQZDXovBYG+H7WnYdhmN+UJICDp7SsTU1MVienq55LS54IJP
xMsu+5948cUrJBdQamqp5G9CfxB6cs50J/XtieKuKHT7cK8Suojcrij0D6Ev
apHk10GHU3x8seQmQvfOuXxK3HWEW6wXup76ckXhPpaPbh88F11UspeoVHIs
xcUtlO6DDiV+jzN9UX23z92uvG5vEXcycd8SepjQZ+WpK8oTjxRvO/YTOpnQ
GYV+JtmBVSI5i/B79BihzwiDdcHr8BpsM16DwXN5f2PQ0STfV/4e3UfcR4Ue
KOw39CBlZZVJLiScH9nZ5fC5XMzIWCx9j+djGdz3pWwP9gUG64ff43k4Jlh3
nAM4Nikpi6Tj2HfoueIOLz6ncB/7G7/DfJMrSul90mjs3P8lQDo1GskN1QFp
g/Na4Jlqhf122Hbya/GeeH90ggUFFbj8UAXdzitsB/YXbwfOZ/R2oRsK+wiD
zrXMzHJxzJhFAvTlaejb1piYwkNwfT30xRq4ftHo0Ys+mjFjxX9mzVr97wce
2PDeXXetm3v11Y6PJ04s/y/0+cvZ2WWPXHHFpzf86Ecrz3v++S9Si4okV5RB
7cWOIIhhQxTkY6b+33LPld972UZ0JK0LgHaondVe9iMxOFiZf8bf6kHZas/R
gSTHg3YRBEF4g7/WLzXL9lesHraLIIYz+O6i9rNK71CENziY7+ejox/lW/1Q
vr/Sn3YRBDF8UHtt4iGIgWBl/pmP1n7UwR/vIv5Kf9pFEET/8PVa4Om7+1Ba
g5QZTuQw9ftbmZwArddgt58giOGDlfl+LXGoVO5gpHcbchRxBED9KJ7H4RpD
KyMIghieTGXqr8WDmV0Q+ve4304amPrzazBT65tuIwKMXzP155YvcrOvO2aY
8QxTfwy9zXGf9wpBEARBeIjLE6UXBCEYkgyZIXR2/rijsfGvJ8rLS/Y+8YSz
7vzzjzijo7uqLBaxKiREdKIXisflh3JiQkOl79ENVR0UJFZBnEFBwv+zdx7g
cVTnGj7aXtSb5W7ZlnvB2BRTl94SIIQUWkgoIaHcUJIbSEgWCOmQQGgG7k1u
CLa1VV2WG2tsigEbG+Pee7dly92Sdu75ZnS0I1m2V94Zzcr63+f5npmdnZlT
5+xE9/qFp/5rl+sAP3/j0r59P1910UWhTXfc8Y+tjz326+1PP/2Tbc899709
b755Q+3kyZ59FRXnH5gzZ7i0bFm/6OrV+dG5c9N5/Wyop9F9RRBJjNvlco1N
TU19NiMjYxHPEafTGYWfyc2fR7ia4InKzc1tdjchRrmi+PYLHi+vN7mi9EPl
iIIfKmJhrNrO2CdOvk1nrDyXMV9PnoGMvT+SsYnnMzbZw9ikm/ix75pMvvtM
Jv/jZrPvObPZ/2pKSvF7KSn+kpQU33R+3hx+3ieMFc/i+1V8G+Dx8+tKeKby
cz7i539lMhWv4tdvslh8OyyWwF6rNXDAavUfsdkCx+32YIPdHog6HHDwIHAk
wRFUJjua4LkpLKyUhg+vkcaNmy6NHTtNGjZsiuy+gT8IviE4ek7lihI+H+GJ
au2KgrcInh3hLBIuIjiO1J4o4YE6lS9JuI3UrqeYVyjmikLZcArhGpQ3YIDi
OoLPp1evctm3hO/geEIdcb3I6XxR6vbBoyWcUahLzBsVavZGqdsAZxKOK9+d
2EbhVWrrO8UXFXM7weUF/xY+4zu4qoQnCn4jHIPPCE4peJ9E0H7FMaWMAfYR
HFefJ3xecDlhjqDv4IeCDwkZNKha7lecI3xVp3JFYR/jhzqLeQBHlLg/6iDm
HPoS/YqxRR+jf9Em0XfoY5zT0hnlO8k8LY7y56SR7x9XnFDFB3n28+zlx3bx
7W5lv/gAvufPU4PN5m90uQJRxXFV0lTvUl7vMtkPhbqjzegzBH2FNsCpBT8U
Ag9b//7VvH/k/m3Izy85lpMT3p+dHd7K91cWFlYs4M/b59dd9+Hnd989d/6P
f/zFgnvvnfvFTTd9OOO886ZPGjGi+s9jx8546NZbP7r22WeXjQyFvuo1d+7u
dHJFEQRhAD9myf3f9qng6Z1gG99IgnYYnT8n2IeE/niYPmPviaNso+fnmcQb
R7sIgiASQa/1y8iy9YonznYRRFfG6OeU3qGIRPEw439DIjrVweh2EQRx9oPf
X6PXJXoPIBJFj9/hSDvK9+hQvl5pT7sIgmgfWq9F8T6veqyBHZGuhpcZ3+fq
eJK0Xh0V78mHiiCIsxAP034diRhUbkckHtA2LyN/VDIl0hQvo7//EgRBCO5n
xq/PHZn7tek2IsnIY8bPrY7OPZr0HJFsvMaMn1taZJTWHdPFCDLjxzDRRDTv
FYIgCIKIkyZXFFxMGdKRI/349pKoJD1QX1f3j0Pz50/b+dJLy9dcfXXt17m5
jUssFmmJzSb7oOCHWgI3FA8cUYvhkHK74YaS87XTKX3tcDR8Zbcf/dpu3/+1
y7V5cW7uwhWjRpVtvPvuv9e++ebje6qq7txXU3P9/pqaiw7OmTP66OefDz68
ZEnfg4sXF0i1tZnRjRudcA94vV5yGBPEqXE7nc5xLpfrNzyL+P4Rm80WtfBn
lu/LDid4m+CLwhaftXJFIbiX2hWljnBF8frIriieOrPZTK4ofVD5obBuwhE1
z8r/54aD76cyNpH3tb+A/0+ovjxDGCs+lx+7hLHJ1zI26VuM+e7m+Sk/5+mU
FP+fUlICE8xmXzHfrzGZ/J+mpEz+mmclP38tzwZ+Pd/6lvL9BTzzeRbx+6xI
SSlez8/bZjIV7zGb/fstFt9hq9V/1GYL1NvtwUa4kuDXcbtLZD+UEsXbI5xD
8PbAfQPfD9w/gwdXS4WFFVK3bqVNLiXFFQU/Ult+KOFVUkc4l4RHCe4iOJPg
2xGOI3iFhOfodI4otSsJ5+Na4SXCfV0uxRkkfFEI9nEM18FH1b9/lezAQvvQ
VriK1K4ouIZa+6JO7cfytWgvfEUnc0YJbxSifG7pkhIuJXHOqVxSii9KGT9s
cSzmTooF90d/w2mE9vbvXykNGBALPsNthMDVhOA8OI/UTinFH6UcxznKfark
/sRnHIfjCXMI46o4v0pOGE/RFjGGOBfX4P64D+6JuqC+mCMZGUrfiP5CG3G9
aLdyf9F/IXmOCeeXMjfFWE2O8jTyHOM5xJ+lWp5tTc/VKn7OCr5dqTxjxVtM
Jt9em81/iJd7nJfTiLrk5JTJjii4odAX6Cd10Adqrxb6Bm3p27eSn1/Z5EQr
ifJ2N/A6H+U5yOff3kGDqnZceOGMrTfcMGvrHXd8suXeez9be/fdny64+eY5
Uy69dMY748ZN+9UVV8y884EH5l369tvLhyxevKOAv6ulkiuKIAiD4O8zbBoz
/m+7J8suntsTbON9PA1J0BYjc3OCfUjoi4fpM+6eOMo2em6eSbxxtIsgCCIR
9Fq/jCxbr3jibBdBdFXw3mL0c9qeNYggToYeczLSjvI9OtXB6HYRBHH2Y/Sa
JOLVu6HEWQ3mjx7z0tOOOkR0qoMeIQhCH7ReB+J9b+9M609723Y24mXG97+I
p6lOniSoi5HtJwji7EePtTee3zKPDuV2RBIBbfYy8kh1RCKMvFAEQRCnoyv9
N1w/1qjPiOTjOmb8/OrIfKhNtxFJyBRm/PzSIi6tO6aLsZYZP4aJ5mXNe4Ug
CIIg2kE0GrVLkpTJt4U8F0cbGu6PHjv2j6Pr1s3cU1y8csNdd9Uu7d27fqnJ
JC1NSZGWOhyyL0p2Q4k0OaLkOJ3SIru9cZHVemSRxVLLtxv5sa++7tZt+upx
497Z8eijvzhQVvadw2vXXhbds2ektGFD/0PLlvWoW748d++aNRlb5s1z8fpY
eMgRRRDxIVxRv+XbRQ6H44jZbI7ySHxfdjXBESX8TXq5otq6p9oVxesZTUlJ
gSvqc4vF8ltGriiNkFSOKPihIhbGFtsY+8TJ2PQMxnx5jIV68e1AnpGMTbqA
sfevYGzyN3i+x4/dz/MEY8XP88+v8v1/8/0yk6l4ltnsm8+3y3k2pqQUb+fH
9zR5bep4DvDz9/HtLsVz40N2paT4avm5B0wmH5+H/uMWS6DBag1E7fag5HQq
jqj0dHh3SpocOzHPTsw5FJb9PnD3wNODwMOE4/DzwDvU0sFzoiMq5lgKyOH1
kCPcSfAY4V5KmSXN5QqfkHAlteVGau1JgrsHjiH4iVBX+KbgFYJPCGXxvmjy
OPnk8lEu2gbHz8CBVbLrCNfiPsIxhOvgtRL1Ft4oca+T+aJizijFTYXr4IwS
jizFG6W4m1BOW0HftBU4klA/0e62+kP4pXA+xhzliTLVrij4i9B24QIbMkTZ
4rPoE+GKQj/B39SjR1lzcA9lv1wO+g/bgoJy2cMF7xbmDPr0VK4oMb74Pien
VPYv4V6ifvBFoQ49e5bxe5fK98X44p4iwjOG70RwDPMJ/YC+F3NVGaPiaJMn
Cs/RVr5dpfjWimfxbQ0/h6c4wsdwLr92Ca/jpry8kn29epUd69OnItqjB7xi
aCt8UIoHSolwbFXx41Vyvyl9p0SZn+ifcl6/MrnufKyifGwanc5AA/98lN/j
4Nix02s9npm7rrtu9qZbbpmz5OabZ0euu27W+5deOv33F18846Grr/7oxgce
mD/2H/9YXrh06eYc/u4It6cZ/lGjV0OCILoszzLj/757qvwlwfaN4VmYBO0w
Kmt4nAn2IaEfHqbPuHviKNvouXkm8cbRLoIgiESIMH3Wr3gweo3V47eGILoy
eG8x+jml9ydCC/T6bfQkQR30CEEQBEiW9wBal4hE8TB95mUkCeqgRzztaBdB
EPGDNcOINUjrcjsi7Vlfz0a8zPgxaGsckqVeHRlPmyNEEMTZhh7rWzy/ZR4d
yu2I6ImHneiSihjUzs4S0Ufepv7ztK/LCYIgujSfMuPX8Y7KdRr1GZF8PMOM
n18dmWu16TYiCVnFjJ9fiWaF5r3Stchnxo+hFrlb644hCIIgiPYgSZINriie
ftFo9MJoQ8M9jY2Nf23Yu3fKwVmzlm39xS92rxg+vH6ZxSIt46cvNZtbeKHk
2O3SEp6lfH8JP77I4ahfZLXu/8pq3fi1271gcWbmtGW9ev3fqvHjn9vy8MN3
1ZWVXXxk376BvLxuvNyM6MKFbr61kmuAIM4It8ViGedwOJpdUSaTKcoj8c/N
nqjU1FTNPVFqX5RwUqm9VMIVZbVa8d4ru6J4vcgVlTgqP5TXxLdmxuZZGfM5
GYukMlaT7XL5C+z29wpttslDrdbQuRaL/xKzufg6s3nybfy8exib9Ahj/mf4
/p8Zm/wOY8V+nqk8n/DPX5tMvtX83M38ml0pKf59KSnFh/jxozz1iutG9t5E
mz4fwfc82B5LSfHV8+sbzeZA1GKBKyck2e3w5oRlTxQcNXD4iGRnK66mmMMn
pHL4hJu/g4NI8SjF/Dsn80PFHEuKc0lEeItcrhC/X/gE75HaEXU6T5S4Fl4g
eIrgFEKwD59QzBXkl/1NCNxNKB/3xjlwTHXrVir3AdoNvxTaiHNQV/idlLrH
74pqyxmF/mntjWorMbdTywiHlOKLirm92vZExXxeov4YM1wLJxPaDKdRUVGV
7IcaOnSKnCFDpvBj1bL3qG/fSql37/ImR5Ti4FL6KuaBQr+rA9dTLMq8wlyD
l+xUbisxz3A+7ouy4FiCe0nxRVVKhYUVTd6q8mZ3mZi/8EvBwYS6IsLJhHpg
jqHtmJMYA2UeFB/nqeXPzlr+HH7Kx6qE53/457/zZ+kv/Jy/82v+j9enkvfT
pyNHTll1wQXT91x66Yz68eM/kIYPn9bkgkK9UMeKaGFhebRPnwr5eJ8+1fy7
al6PStmnBccV5phSZzisSnm7S+TnEWNtNvuiPPV8jI/k5ZXU8fbuGTGiZvO4
cdOXjh8/bc7FF08LXnLJ9Fd4nrzkkhm3X3XVrPF33DGryOtdmL9w4Tbx/kZ+
T4IgjOYyltw+pVk8QxNoH1xJxUnQDqPyVgJ9R+iLh+kz5p44yjZ6Xp5JvHG0
iyAIIhEiTJ/1Kx6MXmP1+K0hiK6M0c9oe9YfgjgVHmb8u71edaDfR4Ig9AJr
nNHrUXvXWoI4GRFm/Huq0c9SvIm0s10EQcSH1utQvM+qXusfrUP642XJNxbJ
UKeODkEQZz96rG3x/JZ5dCj3bF8XPezkPinE6L7RK6J9XkY+KIIgCC05xoxf
4zsixVp1GJGUBJjxc6yj4teoz4jkw8KMn19aJKh1x3QxrmfGj6EWGaZ1xxAE
QRBEe5AkyRKNRtN5evP9sXx7G89vGg4eDBxZtOjLnX/725bVHs/hZWlp0vKU
FMUVJfxQfH+JySRnKVxSDgccUtGvnc5Di93uzV9nZ3+5tLCwauWoUe+svuii
32745jfv3fnEE5fv8/kGwk8VlSQ7+aEIImFkV5TNZvut3W5fxLeyK8rMn0+3
2y1lZ2fL3ibswxfV2uekhytK+KjgisK2lStqPq/bc4xcUWeApHJEwc0S4f/b
uNrO2CdOxqZnMObLY+w/vWy2iUVud8nItLTABW6370qns/ibDkfwe3a7/wGL
xfdkSkrxC4wVv8rzHmOTy/l2Ft9+ydikFXx/Pc/2lBTfHp46fu7hlJTJx/j3
DYojCh6iIE9I3ja5bxp5Gvh+o8nkj5pM8OLAjxOULJZQkysq1OQKCst+nbw8
xcsjnDtwCAnXEM5D4ByCn0hE8ScFm/1D8EDF/FD+k/qhRHAd7gHvEcpp7YJq
rydKuKJQf/iBFG9PlexBgt8IbcP3Tqfs42lyNynOJtRF1EO0Wd1WfBdzRok2
+5u9T8I9Fa8zSpTdsr9iUX8WPil1vykeKaVuqG9rx5ZweaEdos5ijFq6osKy
70lxMVXx/qqW/VDIgAFVch/CeYT+hOcIXia1HwquI+GAwr1QB8UnVtIc5Tsl
J3NEtR5znKc4zEpl9xPKhhsKdUS94I3q169Crhu+E/MWvi/UD/VFm5CePSvk
Y1lZMVeUMlfhT5t8zGQq3mMy+VbwMZnGn6m3GPM/zdjEBxh7/x6Hw3dvXl7Z
YyNHVv3pyisjE2+//ePI/fd/tuynP52356GHPm+8554vpGuu+VAaM2Zq47Bh
UxqGDq2uHzCg8njPnmX1vMwG3l9RlN+jB+pQEs3NDTVmZ4cbMjNDjenpih9N
cUSF5HHm9Ygqz/bkI7w++x2OwK7c3NKNvXuXLy0qqvp45MjqkvPOm/b6ZZfN
+OUVV8y848orZ1x6+eWRgd/4RiT3xz8ud82bN488UQRBJBv8/cbwv/WeLHU8
30mwfc8lQTuMyrcS7DtCHzxMn/H2xFG20XPyTOKNo10EQRCJEGH6rF/xYPQa
q8dvDUF0VfDOYvQzSu9OhJYY+fsoMPp5ijeRdraLIIizE6PXojNZZwniZHiY
PvPT04466PUuYnS7CIKID63XgHjf2TvT2iPijbNtXQH0RbKNRzLUqSMTOdng
EARx1qDHuhbP2uHRodyOSGfCw9r2SyGRNtKRvy3qiDqp60sQBEHoy7nM+N/U
jspwjfqMSE7WMOPnWEdltEZ9RiQfQ5jx80uLeLXumC7Gr5jxY5hoDmjeKwRB
EATRTvBv/Hlc0Wi0e1SShkfr66+NNjQ82njs2ISj69d/sLe4eNmGH/xgx7LB
g48szc9vXJaXJy3NzFTcUPzypTxwRS2GJyo1tYHn8NepqdsW5+YuXDF6dNmG
b3/7H9seffQX259++q7Nzz9/1e633hpWN3t23sqVK+1Gt50gzhJkVxTPb81m
8yK+lV1R8DOlpaVJubm5srMJnig4nLDfUa4o4amy2Wx494Ur6iCv41c8v2Pk
iooXlR/Ka2LMb+axMRZxMLY4lTFfNmOh7nxbyFh4qNXqH+twBC51uYLXZWSE
b8vODv0gMzP0SHp66Fdud+gvNpvvXZOpOMDPn8rY5E95FjNWvCYlpXgLzy6e
fSkpvoN8e5RvjyseKPhk/HwMA02BI0pE9s3IHiK1I0rxRIkoriG4n+D1gV8H
7h+R3NxS2dMDZw/OUTuSRPC5LVdU67TliBK+I3Ef+I7idUHF44qCuwhOI3iO
Bg2qlqP2RaWlheTyhbNJ7Yyy2xVnFOrkdsfcUeoIjxQfV9nvg+uU/vbL/R+P
L6q1Nyo2bi3r1NonpfZKCecTxkj4opSEJMVDFGp2eqnHCFscQzvQXxj/7t3L
pT59KqW+fUWEZ6lc7suCAjiiFD8U5ge8TMIBpfY/qccRx0Xa+v5UvihshWcK
5WFeoi5wQ6F+2PbqpdQNdRKuKnF+QUG5PN5oF1xT2dmlzfNZ8Wb5oxaL7xjP
HouleKXV6pvB8wbv/5/yZ+paPjbnZ2cXXzhyZPVVN900+/uPPDL/ly++uOSd
119fWfP226u/evPNldtfeWXF4eefX9zw6KPzj99++8dHrr9+9oFLL515YPjw
mroePcrq+Dys4317kNfvMN8/kp4ePMLn1GGnM3CEz7FjfP7U8/nWiLFUPGPF
PJP4sz3xOGPvH+Db7XysV/N2Lejdu2zWsGFT/OefP/WVq6+e+fPbbvvoe9/9
7seX3XHHp0W33/5J9vXXV9u9Xq+JXJ8EQSQpt/FsYcb/3fdkeSHB9n2P53AS
tKOjs47HnWDfEdrjYfqMtyeOso2ek2cSbxztIgiCSIQI02f9igej11g9fmsI
oqti9PNJ706E1niY8b8lev1GG90ugiDOPvD7a/Q6RO8BhNbo8TscaUf5Hh3K
1yvtaRdBEPGh9RoU73Oqx9qnd7xxtq2rgP4wekw8reqEz51xbtGcJAiiLfRY
ZyNxlOvRodyOCKHgOUUIgiCI5OcBZvxvakfkDa06jEhK8pjxc6yjMkGjPiOS
k28y4+eYFvm21h3TxQgy48cw0Xyoea8QBEEQxBkgSZItGo3m8AzgGR9taPi+
1Nj4XP2ePe8f/PjjD3b+6U9fbbjrro1rb7xx7+rLLju8vKioYWlqqrTMZJKW
ulzSkoKCxmUDBhxdUVRUt7R7921fp6cvXtKzZ83am256Y89LLz15oKbmewc+
/dRz4OOPR0QXLOgZnTs3nZdpMbrdBHGW0MIVxdPsioIfCr4m+KGE10n4nPRy
ReEzHFX4jLJxTOWKOszrtoLX8RX++TKeHEauqJMgqRxRkomxt62MVdsZm+pm
bHoGY6F8xib35v+zqIixSaMsluILzWbflWZz8TcdDv/3U1PDD+bklDzVrVvZ
7/LzS17Lyir5T3p6qNzpDHzIz12QklK8gl+/gW+3m0y+vfzaOovFd1jx2fjr
+Taq+JfgfQrIHqiUFHViviJ8h3Na+6HUPifsw4mkuIJKZQ8Qr5vs5BHuHTiV
cA78SXANtfY7iYhz1C6i00XcS3iZUJYWrigEdUdb4IcaPLhaGjp0ilRUVCX7
j+AWgucIHijF8aT2RCn+JFEX9A38Q8JBJILPiotJ8UWhLWg3HE7CF6UkfmdU
fD6plh4plCe8T+hDuKFQdxHhilL7vETfo97oA7QDbi2MOfxKcCshcEMpfqiy
Jn9YCe+3Uvlc9EFGRkmz10mJKPfUDiiReL1fou9RLuqhrpPwVeE80V7cG3WD
Gwr1zcoqlT/jOMbW6YQnTB57/jwV8+fLv4k/n5/ysXyf55m0tOA33e7AcN4H
fa6//qMBTz01f+zrr6+4MRjc/NOZM3e+9MknO4Nz5uz8aPr07curqrZs8/s3
1r711sp9L7zw9a6f/Wz+tjvvnLv58ssjGwYNqlrH77GO13N9VlZ4M5/n26xW
3w6enbz/d/HnZY/d7t/P14fDfL2o52lk7H14orB/kK8F2/kasJTXZ06vXuWl
Y8bU/M8110Re/M535jzy0EPzvvXrX3950R/+sHTQq69uzXviiU+c5IgiCKIT
kMszmRn/t9+TpYQnM4H2jeVZmgTt6Oi8nUCfEfrgYfqMtSeOso2ej3q1iyAI
IhEiTJ/1Kx6MXmNpTSYIbfAy459PJKJ3Q4kuhx6/ke2Zpx4dyqfnjyAIPTB6
DRLx6t1QokvhYfrMU0876qDHu4heaU+7CII4PVo///G+r3emdUfEG2fbuhIe
ZvxYetqol9F1onlJEIQW4PnWes2IxFGuR4dyOyIEQRAEcTbwJjP+N7Uj0k+j
/iKSk+uY8XOso1KoUZ8RycmTzPg5pkUGad0xXYy1zPgxTDR/17xXCIIgCOIM
kCTJHI1G03h68AznuZLnvsYjR144vm7du/uqq0t3v/POnJ0vv7x429NPb1j7
zW/uWT506KHl/fsfW3XeeUf554Ob7r1374bvf3/z6vHjFy/p3v2DZX36/N/G
229/ds+kSXcc3rnz0ujRo0Oju3f33LdhQxa/t52XaTK63QRxliC7omw2m5fn
a74vu6LMZrPkcrlkVxOcTcLbJDxOBriikOO8bpt53f7D92/h6clDa0EMlR/K
y/vFb+axMRZxMFaaxti/cxib1IMxXyHPMMZKxlosxZeZzb7rzebwbSZT6AcW
i/8xhyP868zM8F/z8sre7dGjLNi9e9n0vLzw3IyM4BK3O7TGbg9s4eftMpn8
+0ym4kMWi++ozear58cbnc5g1OWC56ZEDvbt9pBktSr+p5gfyt/sD4InSu2E
ah3xHfxOcOwIV5DwRCmOnRLZvQMPkfBEYV9xKSkeHxHcA04ifK/2Sp3OF4Vz
W3uOtHBFwS+EdvTpUyENGlQtDRs2RRoyZIo0cGCVfAy+oayscLNHCb6q1FTF
ScTHqLkfROAmgj+pR49y2ack3Em4h2i7cGUpHq/YeAhnlFbeKHVa+6KEdwsO
KIyT4kZq2xWF+gpHF/oLcwDjDm9YLC39UJmZipdJeJ8wZqIc7Cc6hmI+tT7W
2h2lzDnF/eRyKW1E+5UoPii3OyyPqVKvoHwevlOenZDsirLZ/HVOZ2BVZmZw
Wo8epa/16VP6yIABFZ7Bg6f0u/32T7InTVrTraZm15D583detmLFvjs2bTr4
9JYth99cv/5AeNWq/R8uWbL/qwUL9qyaNWvHGr9/47I33li54Fe/+urzu+6a
+9Hll0dmjRpVM6t//6rZfA595nAEFvB1YZHd7l/M+2hJVlZoOd+u5ce2MTax
jrH3j/C15IjZXFzH67s1P79kyYABVdPPPXfKv6+55sM/3Xvvp0/9939/ee/L
Ly+58d1315wfDO4s8vt3FFRXr0yfN0+ykiuKIIhOxM+Y8X//PVmW8VyYQNuy
eaqSoB0dnasT6DNCezxMn3H2xFG20XNRr3YRBEEkQoTps37Fg9FrLK3JBKEN
Xmb88ykx+nd4hPZ4mPG/J3r9ThvdLoIgzh6S5T1A0ruhRJdEj3kaaUf5Hp3q
YHS7CII4PXimjHhGtS63I+KNs21dEfRNsv0uGFmnjo7nJH1AEETnRo917GRr
phqPDuV2RAiCIAjibOAzZvxvqt75m2a9RSQrzzDj51lH5K9adRiRtOC/H230
PEs0hzTvla5FPjN+DLXID7TuGIIgCII4E/Bv/pv8TfA49eIZxnMFz90NtbW/
OLZmzZ8Pffnlvw7MmVNZ6/d/tOP557/acP/9azfdf/+Wrc88s23Xa69t3vPe
e2t2v/baws0//vHMFWPGvL98yJDfr7v55vt2vfuuJ7p/fxG/V1501640XoaN
PFEEoSmyK8rhcDzrdDoX2u122RXFI/Fjzc6mnJwc2duUmpoqu5y0dkVhezpX
FK9TA9/fZbVaw/zz93n68piN7T7DaeWHwvr4tpWxajtj81yMlWQyFuL/+6ek
N2OTBzFWPJqxiePN5sBVZrPvZpMpcIfJ5P8x3/7cbA79zmoNvu50BiZmZIQr
8/PLZvfoUbqwZ8+yFfn5pRuzs8PbU1NDe12uYJ3NFjhssfiO8zTY7f4oPDjp
6XD0wN1UJuXllcseI3yGJ0c4gBT3k3BE+U/piGrtioIzCOXAvQMfkHACITgG
z47i4VG8QvD1ZGfDKVUm+5PgXOrWTfEKwSMET5DwEwnHVFvlqssX94bfCOVp
4YpS2lMqu50GDKiSXVHI4MHV/HOl1KdPuVz3nBzFf4R2o029e1dI/fpVSn37
Vsr7vXpVyG6pwsIqaeDAajn9+1fx7yuknj1j90hPD8n1R5tFO8V4tOWN0soV
hfupfVHwPwn/FsZAjIOYJ609XYojK9TkYIqNvTqKH6rkBD+UcDQJP5XaUYV5
gHOReP1QrT1RSlktfVRKmaHmNon5pfR3oNmR1uTDijoc/iivX4PLFWjEPLPb
w/xaPDvwTAUbcnLCe/j4LuJzI3zBBVN/f9VVM39w882fXnDfffN7TJ260A1n
56FD0Z4HDhwbdeRI/dWHD0fvPXz4+LN1dfWv1dYen7h375Hq3buPfrB+fV3k
iy92Tams3Bz85z9X/+f55xf/74MPfvHOTTfNeffCC2f+i8+bSfx5CebllZb0
6lVZNmhQVeXQoVVTCwsr5mRmhhfx+m7g47GTz6WdgwZVb7j44plf3XLLx9N+
9KPP/vfxx+d5f//7xQ9OmLDitmBw0xUzZmw595NPdgz87LODBZFIbea6desc
kYhkIVcUQRCdjPN55jPj/w58svwwwfa9kQRt6Mh8mmB/EdriYfqMsyeOso2e
i3q1iyAIIhG8TJ/1Kx6MXmNpTSYIbTD62WzPukMQ7UWPuRppR/keneqgR7zt
aBdBEGcPePaNXn9oDSL0Qq/57WlHHSI61UGPEAShHVo/+xGDyu2IeONsW1cF
/ZNsY2NknTo6BEGcfeixhkXiKNejQ7m0DhIEQRDE6cG/fahnxv+m6hm0r7tW
HUYkLQFm/FzTO4d5crXqMCJpiTDj51qimat5r3QtrmPGj6EWGaF1xxAEQRDE
mSJJkjkajTp50mWvUzQKv9NFUn39rQ11dfc3bNv2y/oNG/569Kuv/mf/lCmB
PZMmTd/j98+tmzZt3sHPP//s0MKFsw7MmlW667XX3tn0ox89t/7GG+/f8sMf
XrP1jTeG7tu4MbvJEUVuAYLQHjfPGIfD8UxaWto8t9t9yGKxRFNSUiS73S47
m7KysuRgn38v+6K0dEWJoAxscX+UBT8VjglXFK9PI/9uL69DhclkuosfK+Sx
GNt9RiG1ckR5eT/4bYytczD2URpj4RzGJvVgLNifb4fzjLNYii8zmyffYDb7
bjeZAveaTP7HeJ5NSfG9ZDb7/5cfC1qtoekuV/CztLTQkpyckrUFBWVbevYs
3d2tW9m+7OySgxkZoaOpqcF6hyPYCP+N3R7i46U4ovLzy6WePRVfkXAY4TOc
UfD3CC8TnDnwRSGnckS1Dq6D4wdun5P5e5TvQlJmZpiXWyo7klCXwsJKeduv
X0WzOyk/v1TKzsZ1oWbPVEunT8xppfiN/M2+KJyr9kW1dge1N3Acwf+EPoMj
Cq6ooUOr+T68T1Vy/eGC6t69XHZKoQ04jnORQYOqpaKi6uZrR46skTN8+BRp
yBDlO3ioevUql/sFdUX9Y/6umLuotTdKOKNaxq9KayeU7xSOqZgvSj3+whnV
2qkkzhGuKOF2Er4oxQ3Vsv+FI6q1q0m4qZSyYo4qxRulzAHhjYrHESX8UMIL
JdKW9wp927LPlH4zmYqj/JlssFh8x2w2/1G73X/U6QwcdbkCx/lz1sjb11hQ
UFo/YEDl/vPPn7rhxhs//PSuuz7792OPzf/lM88suvWPf1wx+s03V+c3vSNZ
eTIlKdo3Gj02pr4+eh3//MOGhob/rq9v/AN/J3uVb986cKD+zU2bDr28ZMmB
5+fM2fF0MLj5qZdeWvbzRx9d8N+33/7JM1dcEfnNxRfPfP7yyyMv3nTTR3+8
9dY5f7vlltlvX3PNrEnjxk2fOnr0tHkXXzxj+be+NWf5ww9/Me+FF5ZMnTBh
5b8nT173u/LyjQ9Mm7bppk8/3X3B4sW7hy1ZcrjvypV1ecuWRdOanKJmepcj
CKIT8zoz/m/BJ8sLCbbtl0nQho7MYwn2F6EdHqbPGHviKNvoeahXuwiCIBLB
y/RZv+LB6DWW1mSCSBy91pD2xqt3Q4kuS4QZ9zspMPr5ijeRdraLIIizA6PX
njNZVwkiXjzM+HdXr0510COedrSLIIhTg3drI97VtS63I9KeNbWrYuRviScJ
69SRiZyk/QRBdF70WL/iWSs8OpTbESEIgiCIzs5YZvzvqd75g2a9RSQza5jx
c03veDXrLSKZ2cKMn2uJ5n8075WuxTPM+DFMNIc07xWCIAiCSAD82/8mBwBc
BQ6eLJ5+UUkaHT1+/LL6/ftvbjh48IfH9+x58tiGDS8cXbny9SMrV753fNOm
ice3bPn3se3b3zi2du2L+2fMeHzXu+/eufkvf7l6z4QJI3dUVhZI6+A+IQhC
J/B8DXU6nQ9nZmZ+4Ha791oslkZ+TOLHmj1RcDilpaXJHidstfZE8bLjdUXt
43WsNplMP+DHBrCu5Ypq5YeSeN62MlZtZ2yqm7GSTMZC+Yz5+zDmG8y351gs
ky8ymwNXmc2Tb7FafXdaLP6HbLbgL8xm/+/N5uDrKSm+iTxVJpN/tsnkW8i/
X+l0BjampgZ3ZGeX7M3PL6srKCg90q1byfHc3JLGzMxwFI4clwsp4XOhRMrO
LpUdRoq/qFIaNKhK9hMNHTpFdhjBf9StWxkfyxLZxQOHjuKLap8nCtfBxQOn
DyL8PvD24N68vnzOlEi8nrIHCj4oOJZQB9QFDqXhw2v4tkZ2MMEb1aNHGT9X
uRaOKXiDRP3UvqTWfiN8Dw+Q4i5K3BWFa3NySmWXE5xOQ4ZMkeuMoC/hgMJx
+K7g4iosVDxRI0bUSKNGTZW9UNgXn885B5kmjR49ladGDs5BX6AMtBdjEXN3
tRyPtpxRp4raI9XaMdXaF6U+L+bhUvq0tadLOMWU/lZcYSfzcwlHlHCStXZP
iXbB+dVyXgVUzqhgm84odVlqP5RwUbWOUq7iiTKZFE/Uid6sYp7JDSkpxUf4
s1fHn89ah8O/lz97e3JzQ7t79Sqr5eO//+KLZ+6+9dY5G3/yk3kLnn/+6ykT
Jqx+7b331j8SCm24ZubMXYMXLZLftyzC2cm3uXxbyDOG71/Nt9/j+RHPQzwP
HznS8HBd3bH79+w5dufu3Ue/vXx53S1lZdtveeml5bc++eSiW3/60/m3Pf74
gu++8MKyO//0p8U/evHFxY8+++ziZ554YsFfH3ts4T+ffHJh5QsvLJkzYcKq
OWVlm6sike3/nj9/9x8XL977yMqV+7+xalXtuevX1xauXh3N37tXyti4Ua6T
hRxRBEGcJdzNU8eM/7uwHv/3gnuSoA0dlX2M/psxyYKH6TPGnjjKNnoe6tUu
giCIRPAyfdaveDB6jaU1mSASx+jnsj1rDkGcCR5m/G9KRKc6GN0ugiA6P15m
/LojMfr//yf0Ra/f4fZg9DMWbyLtbBdBECdH67Un3udTrzVPz3jjbFtXB/1k
1BglY51ojhIEcabosXZF4ijXo0O5Rv4GEARBEERn4UFm/O+pnjnAk6VZbxHJ
Cv7/po2ea3pnJ1P+jSxxdpPJjJ9rWuRnWndMFyPAjB/DRDNH814hCIIgiARp
8kUhpmg0aufbDL7N59s+0bq6YdHjxy+K1td/I9rQcGfDkSM/aThw4KmG2tpf
Nuzf/2TDoUMPHduz586jmzbddHj58osPLFw44vCqVb1r163LhGPA6LYRxFmM
1el09khNTf1WZmbmJL5dbzabj/HjsrMpLy9Pys7O1s0RdSpXVG5uruyLEq4o
k8nUaLVaa3mqePDv2fuzruGKUjmi4Ify8jb7bYzBo/dRGmPhHMZKezAW5P0R
GG6xFJ9nsfguN5sDN9hsodut1uAPbbbAf7lcod+4XIGXnc7AP63WQNhi8c8w
mSZ/npJSvJRnrclUvJUf2+1whPa53eGDmZnhY7m5JfX5+SXRvLxS2WWUkVHK
x6dEDjxRWVmlsgeqd284jiplfxGcTKNG1UhjxiiuIniP4DfKzy/j15fIjh14
f4S751TOKPEdnD7w+cDRI4L7YAt/D9xHqCPqUlBQJjugeveGu6pKGj58iuxO
Gjt2mjRu3HR5i8+oV//+insJ5+fllfB5qPiG4A+Co0jtQGrLbwQv0MncRe0N
fFeoP5xbRUXVzb4tERxDfeGLEj6pkSOnyn0MPxQ8UcKJpXZGYRzGjZsmtxvH
4c+CSwt1Rf/Ba9TWWIjPSmLtPlnadki17Ytq6YzytfBCtVWW8EWhv9V+rpgn
KtTCE4X5FfNOte29OtH9pdxfmWdqZ1SoyUMVbuWhivmthDuspStKlC28Y2hr
cVTpD+GOKj7Oj++3Wv1b+X3X8nm8ol+/8iWjR9csuvzyD5bcfvtHKx9+eN7y
559fPP+tt9bMKC3d/N7s2Tte+PzzvffMn79//Jo1h/vMnbs7vcnVmdLk60yF
L0p+94pGh/Gcx/cv4fHw/avgj6qvr78Sx6JR6byDB4+N+fLLvaMnTdo06rXX
Vo98/fUV5wQCW8d9+OHmi2bO3HRlaemGmydNWnvve++te8Ln2/S7qqrNEz78
cMfkBQtqi1eu3P/u+vWHXty8+cjD27cfvWXXrkPjtmw53GfdutrMdetkb6iZ
HFEEQZyFFPFMZ8b/bbitVPOkJ9C2q3l2JUE7OiJvJtBPhHZ4mT7j64mjbKPn
oF7tIgiCSAS91uV4MHqNpTWZIBJDr/WjvfHq3VCiyxNh2s/bSDvK9+hQvl5p
T7sIguj86LE+nkkIQk88TJ9562lHHZLlWdO6XQRBnBytn/t439M703pD6077
8TJjxuhU88+oOtE8JQjiTNFj3TrVOinw6FBuR4QgCIIgOjsTmPG/p3rmT9p1
FZHEXMOMn2t65zea9RaRzFzCjJ9rWuQqrTumi7GGGT+GieZVzXuFIAiCIDRE
OAuanFEuvs1u8haMiErSOL69LFpff2390aM38e31/PMVPON5Rh+NRouihw71
kPbty9q4caMTrgGj20MQZzHmjIyMzLS0tPF8+weXyzXXZDLt44nC19StWzfZ
FcWPyw4ntdNJ64j7wkklXFEoW7iieBpTUlJqeWRXlN1uL2RnrytK7Yfi8fN1
MMLbGnEwNtXNWEkmY5O68eN9GPMN5ttzLJbARWaz7xqzufhWqzV4p90eeshm
C/633R78vcsVejM1NTSJp9rtDn3kdPq/slh8q/j5m1JSfDtSUop5v/rq+Ocj
drv/eGpqsDEjIxzNzoYjqoyPQxkfe8UT5XKF5cDRk5NTInXvXib7luCKGjSo
SnYVwV8ELxMycqTiJ4IHKTNTuKKCLVxQwtcj/D4xV9GJniDhBFK7ouCxEp4o
1Kdnz3LZuYT6oHx4ks4/fzrPDDn4PHp0jVzXwYOrZAdTr17lsi8KDiKXS6lf
a8+R2hsF/w/qJeqQqCsK16I/e/Qob/ZBwQ81aJASeK/Qj337VsrbgQOrm9xQ
NbJXqqhIaUf//lXyucLbhfYLZxT2cV/0EdxUiherbVdUW94utc8pHpeU4otq
2xXVuk/Vvij1tbHvYs4w4edq7YrCuMHzpXia1PeJ3UtdrtoZJbxRijNKKQf3
E1EcUWKO+k/oC+Va5TwRXKe4zYJRtzsQdbkCjfwejTabv5Hfo95u9x3gz9qm
3NzSr/i4zhkzZuq0a66JVN5xxydl//VfX1Q+99zX0195ZeXM995bW1VZufnf
c+fu/uPSpXUPr1598KZt244N37o1mrdu3TqH8DHB1clj4+9STh44pHL5tidP
Ic9AnsE8Q/nxIfiM97KDB6PdV68+kD979ta82bNX5n322Y6CTZsO9aqtPVK4
ZcvRIcuWHRr75Zf7rl60aN93V6+u+/HatQd/uXHjoRe3bTvy+127jj5dW3vs
voMH62/ct+/QeUeOSP34PTPnzZtnJUcUQRBdgN8x4/8+3Fa+4OmXQLtGsrPj
b+fxZGwC/URog5fpM7aeOMo2ev7p1S6CIIhE0Gtdjgej11hakwkiMfRaP9ob
r94NJbo8Hmb870pEpzoY3S6CIDovHmb8ekPvAURHocfvcKQd5Xt0KF+vtKdd
BEGcHK3XnXifTT3WO73jibNthIKXGTNO3iSsE81VgiDOBD3WrEgc5Xp0KLcj
QhAEQRCdnc+Z8b+neqaXdl1FJDG/ZMbPNT1zlCdLs94ikpnHmPHzTYvka90x
XYg8Zvz4aZEfatwvBEEQBKELTc4o4S5Ia3JGFfBt7yZvwXCEHxvM05/v94hK
Ug7fT8U1uNboNhBEF8CSlZXVJy0t7R6n0/m+1Wpdb7fb64WvCX4ot9vd7IpC
tHBD4f5IW9+hDHii8D2vj3gHbjSZTLU8Z7ErSu2H8vL1z8vb57cx9omTsep0
xibmMvZ/PRmbPICx4hEWS/F5ZvNkj9lcfKPNFviO1er/kc0W/JnDEf4tz9+c
zvA/Xa5wODU1PDMtLfx5ZmZoWVZWaH16enCr0xnYbbEE9ptMxYdTUiYfS0mZ
1GAy+RrhvOHXSWlp8CaV8pTw/TCfA2F+XPE8wS8EN092tuKK6t27QvYXwUME
R9GIEYqf6Jxzpsm+on79KvhcKpXvI+6hdkQpfp6gfFz4ouDfEc4huHlwjvBD
qV1RuCe8R3l5pU2uqPJmVxT8ScOHT5FGjZoq+6tQHziTzj13mly/UaNq5O9R
Z/iZ0Bb4muAeQnm8P6RTOY7gCVK7ixJxRSFZWWEpP79U9kXBvwUvFOolgmNw
WiHoc3yPdvbqVSFfo24/zsWYwB0F1xTGAW4pxRVVLo8d2on6K26lU7ui1D6p
ts5Te6NaOp98p/RFKc6mlq4oBB6n2DliHsScYS37O+aKwrgp1/tO8EOdvHx/
C2+Uel4iMYdZSw+WOq3rBi9aXl45HxeMTVm0oKC0Pi+v5Eh2dugQfw4P5OeX
7Onbt2wDf1bmjx8/veqGG2a994MffPrWU08tfOUPf1j2tzffXPXKv/619s1A
YPOE6uqtr37yye7fLltW99D27Udv3rfv+Pn8falvkw+qeQ1UvXMhFvg6d+zY
gfepjKb3L7ij8njy+X5W03uZvel9yyb8nrt3y/fNOnDgQD7e1/h2RF3d8Yv3
7z96Q23t0dsPHDh298GDx+7Zt+/wdw4cqL+an3sODzxRuTwOencjCKILcRPP
Rmb834lbB66nRDxIRTyLk6Adeqc4gT4itMHL9BlbTxxlGz3/9GoXQRBEIniY
PutXPBi9xtKaTBCJYfQziXh1byVBKESY9vM30o7yPTqUr1fa0y6CIDov+A02
er2hdwGio/Awfeavpx110ONdRK8QBJE4Wj/z8b6jd6a15kzWUkLBy5JvrIyq
U0cmcor2EwTRedBjvYpnffDoUG5HhCAIgiA6M/h3EQ3M+N9TvfKWdl1FJDn4
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
wvfqiHor7Y55g9ryC8GxhWvgPErUFdXaGYV91F+4qxRPVMs2qD1aOA/9Cn+V
8H2JccKYwMmEPu7ZE/OhTN6Hpwt9jvpjzET7lfvE3F5irHEePE5wTSG4p+Kb
UnxWah/YqdxTuD/KQ9nwQ/XpUyH161cp9e1bIfXuXSHXDfdW2q8EZbTlB4v1
U4jfNzbWai9Va9+Z2iOF79XzPdZvYmzDvC7wmZXzulXyelZJhYXVcn179Spv
LCgorc/LKznK5/FBXu/aHj3KtvXpU7ayf//KT4cNq648//yp/7zmmg/++P3v
f/L4E08suPvNN1fdPGfO7qu3bDl88bFj0ZHRaLR3ba2UGXMwRe1834nwz66m
LdxMZp4UIxa0Jl+USIpR9SAIgugk/IYZ/zdkdfbwjE2gPfw9le1IgnbolURc
WsSZ42X6jKcnjrKNnnN6tYsgCCIRPEyf9SsejF5jaU0miDPD6GcR8ereSoJo
mwjTfj5H2lG+R4fy9Up72kUQROcBv8FGry+S7q0kiLbxMH3ms6cdddDjXUSv
tKddBEG0ROtnPd538860xtBaoy1e1rHj5j1NfTwdXB8jcro+IAgiOYkw7deD
SBzlenQotyNCEARBEJ0VM08jM/63VI98W8N+IpKficz4OadXrtewn4jk55/M
+DmXaNZo3itdi2uZ8WOoRc7RumMIgiAIgiCILo/sikpLS/sF336Rmpp6KD09
PQqfE5xNcEXB5wRPlMvl0sQVJe4BHxSCz/BFqY9jizJtNpvE69XIv9vLj1U4
HI47eZ37MuXvb0mGpHJESSbGIhbG/DbG5rkYm57BmC+PsVAvxiYWMRYYZbEE
LjCbg1eYzYFvmEzB75lM/gcsFt+TVqv/Bbs9+KrTGXjP5QqW8cxKTQ1+ybM8
PT28PiMjuD0rK7QnMzNUl5VVcjgnp+RYbm64IT+/JApHVEFBhdS9e4W87dZN
cUV1714uDRhQJY0aNVUaO3Ya39ZIgwZVy24eeIPga4IDSHEGKYF7CK4ceH3g
zoEnSjiShL9JeH8Q4V3CdYq3KNjs4IGXSXh5hL8ITig4fuAEUuqt+IFwreJF
8jU7fXAf3B/1ao93CZ4f1Al1iPmeiqWYL0rtDFK8RsKTJBxDiierbVeU4rAK
NDmswpr5omL1j7miFH9WbAzwGX2C83JzS+UxVLxfsbHDVvQxHFH9+1dJRUVV
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
HvrZz+bf5vV+ddnLL68e+dZb6/r5fCvzFi+WUrds2eKKRqNOSZIcTZ4oI9cz
giAIQl9eZcb/XVmkisnvsWfMD5OgDXrk7QT6hDgzvEyfsfTEUbbR802vdhEE
QSSCh+mzfsWD0WssrckE0T68zPjnMKJ7Kwni9GAeGvXbKTD6WdSrXQRBJDfJ
8C7g1b2VBHFqPMz499xkeBbjjacd7SIIIgbWBCPWGK3LpXWm8+FhHTt+3jjq
5O3gOnV0InH0AUEQyQOeWSPWAY8O5XZECIIgCKKz8g4z/ndU6xzgcWnZSUTS
czkzft7pkR1adhLRKbiIGT/vtMh1WndMF2M1M34ME80bmvcKQRAEQRAEQTDm
5BmVlpb289zc3C9ycnIOpaenRx0Oh+R0OqXU1FTZ5cS/k7KzsxN2RbV2QrXl
i0KZTY4oOfxzlNfloN1u/4JvX+R1u4TX2drxXaX2Q3lNiiPKb2Ms4mCsNI2x
mmzG/tOdMV8h3w7j3421WIovM5t919ts4dus1sC9drvvUYcj/Gu7PfxXhyP4
Lk/A4QhMt9v9cx0O32KetfzzFqczuMvtDtWmpYUPZGSEjmZllRzPySlphB8H
jijhh4q5ohRfDgJ/jgg+4xrFjVMqO3Hgi4KXB34hOKLgDhLeIBHhDxo0SHEP
4T5wAMFT1NqzJLxJ8DAp/qcTfUvCuQTXkXJuLLgnPD5w/AgfkPAkCWcSvlMS
PsEVFTtHRDkXnij4peBxgmtJ7XwSzihRb7W7StQXriHhG1KubenKEq4ofI/6
C4+VlkE7hCsKdVOXJ9xNcEXBr4TxgvcL+xjf/v2r5LHG93A6we00dOgUaeTI
GtkVNXbsdOmCC6ZL558/XR7/UaNq+D1q5DmhOKcUVxPmFjxMwu2E++F7zA2U
AReVco4yz8Rcw/zr2bNc9lZhK5xOIrgXtvgO94QbCg4qBPu4DveIuaIUFxQi
6iKuhb8K94f/Cd9jLODTEuOIfcwF9CnupbjTRNmVvK3Vsh9qwAC576IDB1Y2
8hzn7TzCtweLiir38eO7+OctAwdWr+HbrwcPrpo7bFj1tHPOmea/8MIZ71x7
beTP3/vex0//9Kfzf/LMM1/e+fe/L79hwoR14//zn/XD/P4tfcrLt+RGIjtS
Fy+WbJIkWXjMcETxJOLsIAiCIDoHDzDj/7Yskqgv6udJ0AY90ieBPiHaj5fp
M46eOMo2eq7p1S6CIIhE0WP9MqpcWpMJQj+8jJ5DggAeps/89rajDhGd6kDP
LUEQp8Lo9aQ96yRB6Ilev8Px4tGpfD0SaUe7CIKIofU6E++zqNf6pmc8cbaN
iB8PS74x7Ixzsz3xxtEHBEEkB3qsR5E4yvXoUG5HhCAIgiA6K/OY8b+jWudl
TXuI6Aw8zoyfd3rkd1p2EtEpeJQZP++0SJ7WHdOFyGXGj58WeUDrjiEIgiAI
giAIjoNnhNvtfjI7O/uLzMzMQw6HI2o2myWbzdbsioInKisrSxNXlHBCwQeF
bVuuKGxzcnLkcl0ul8TrU2+1WjfxupU7nc5H7Hb7AF5vWwf0j8oPhcAP9baV
sWo7Y/NcjJVkMhbKZ2xyb8YmFjFWPJpvx/PPV5nNvput1sAdVmv4QZst8HO7
PfQ7hyPwmt0efN/pDFU4ncHZPAtcruAKng38u+1OZ2CvyxWqS00NHU5LCx/L
yAg3ZGaGo9nZpVJubpnshoqlrCmlJwQeHbEPrw78ONjiM/w/8PDAxwNf1KhR
U6Vx4+ANmiGNHz9DuuiiGdKFF86QzjtvuuwUgn8ITiBcC+dOW74nxb2kdi6d
3BXV2jOFY/geTie4nuBAgu8nKyvcXHe1Q6q1JwrXwA0kAicQ/EoI7gmvElxL
au8TvEsoV0R4ohDhiBLXiOuEZ0rtisJn3I+PKS9LKV/ttEo0uJ/iuoL3SLis
/C1cUfAkwd2EcUKGDGnpisJYI337Ko6wIUNwXo3shmrtCDvvvGl8LkyT/WFw
TsHbBBcTHGOYUwUFMVcUysEWHirhdIKrqaWHqUKuA+YazsNn4XbCPMR5cDzh
3F69lGC/Rw/FdYZ7wVPV2hWFY926KW3HvRW3lHI/fIe+Qx+J8ePPljwv0Gf4
HufBcYU+KSxU+mrAgMoob289v9cxnkOFhRX7+/cv38uPbR8woGoDb+vyYcOq
5/N++3Ds2OllF188471rr428+u1vf/rc/fd/8cQvfrHwvj/+ccl3JkxYd/1/
/rPh0tLSzWOmTdtZVFGxsWdNzb7sefMklyRJVvihOmDdIgiCIJKPC3kWM+P/
xowk6ov6UxK0Qeu8mEB/EO3Hy/QZR08cZRs91/RqF0EQRKLosX4ZVS6tyQSh
H0Y/g179m0gQcRNh2s/xSDvK9+hQvl5pT7sIgkhe8DtMawlBKHiYPvPc0446
6PEuolfa0y6CIBS0fsbj/R3tTGsLrTH64mUdN4Zn8/ykuUwQZx96rEXxrIMe
HcrtiBAEQRBEZ8TKE2XG/45qnaFadhLRKfg3M37e6RH6bwN3Pf7JjJ93iWaN
5r3StbiWGT+GWuRcrTuGIAiCIAiCIDgOt9s9kucpni94Dlmt1qjJZJLsdrvs
bNLKD4XACQXnFLZwRSFqf5RwSOFzXl6elJubKzkcDvmd2Gw2H3Y6nSv553ds
NtuN/Fh3HrMOfdLKD+U18VgY89sYizgY+yiNsXAOY5N6MBbsz7fDecYxVnwZ
Y5NvYMx3u8kUuNdiCT1mswWftdtDLzkcof/hCTqdoekuV/AzniWpqaG1aWmh
Lenpwd2pqeF9qanBQ2lpwaP8c316eqgxPT0czciAHwe+Jzhwypp8UUoUNw9c
OopPB4FbqXWEawlbnKM4fxQ/Dzw+Q4dOkc45R7iCpsueqIsumimNHz9T9kfh
ONxCcOvAwQP3DrxJJ4viXDrRFSV8S3BKqV1R+Izj8CEJnw/qKrxD2KLeal+U
2hGFa+BpUhLzQ4nAbwVXENxPyr7ijlK8UbE647NwRImcyhUlPFfCL4X7omzU
RzijzsQPpfZg4V6K6yrYXF/hisL36Bt4lRTvV5Xsd4IPCp/hZIJ7CU4mBPs4
hu/gRlK8UdXSiBE1shsK3iiM//nnT5fHfOTImmbvVL9+FfJ8gdcJTqaBAyvl
7+AawxzCcTFOGLNu3RQHFMrE9wMGVDWlUvZPifthHuJceJ8QtePsRE9UzBWF
eY1zURfcF84q3Bfl4TjOgStMjCHGBmOC47iv0o4KuR48Ud4vDfzaozwHe/Ys
3d+rV9kufu/N/fqVr+ZtXTRsWNWnY8bUTL3oohm+a66JvH3bbR/96d57P3v6
8ccX/uS55xbf9eqry2/53/9dc7XPt3l8Tc2O0bNn7xz04Yd7es+evTVv7tzd
6dFo1C5JkpknES8HQRAE0flx8xQz4//OjCTqi5qcBG3QMlsS6Aui/XiZPuPo
iaNso+eaXu0iCIJIFD3WL6PKpTWZIPTBy4x/BpFIU7yqeFQhiETxqCLmWESV
ZPqt6Yj60G8oQRACo9eRk70HqN8FCCJRPOzEd4GOfA+ItLOuRj+TerSLIAgF
rdeceJ/DjljrtI4nzrYR7cfLOm4cvXHUx9OB9TEikTj6gCAI48GzasTz79Gh
3I4IQRAEQXRGLmDG/4ZqnSma9hDRWfiaGT/3tE5Q0x4iOgsLmPFzL9EENO+V
rsXTzPgxTDT1mvcKQRAEQRAEQSg4Oeelp6f/lmcBz2G32x3lx6TU1FTZ6QRv
E/xNWnij1K4otRdK7YpC8L1wRcFZxespmUymBpvNtot/LrdarT/gxwYwxduu
Fa38UH4zY2/z+1fbGZvnYqwkk7FQPj/eh7HwIL49h7HJFzFWfDXf3sKY7w5+
7Mcmk+8XZnPgRZst+IbdHprocAQrXa7wbLc7uNDtDq1MSwttTE8P7sjMDO3N
zCw5kJUVPpKdHT7Otw38mOyHSk8v4X1TKicjo5T3meKEaumHKm3hghIuJUR8
5veUI1xROB/+HdwDTh04hODyGTiwWvYMwQk1Zsw02REFVxS8UePGTZdGjZoq
u3hwHZxMwqHU2r8kjgu/UuvAIQW/EvxQ6sDDhGvgRoITSNRP+IPgIUIbFEdU
qIUjKuaDCp7geRL7ao+TuB6fhTMKUV/b2hMlnFJK3dWeq9a+qIBcH3iKFF/U
mbmihAsL9UXd1XXAvnAfYUzRP/AuwQMl/FBwISHCxYRzlCifcRyOKZwvnFHD
h09pdkZhDowaVSMfw3dwPMHLhHv27Ak3VUWzmwrzAscxt8Scwz7GDMeFn0rt
iYKnCd8pYxvzgbXtOStp7hMxt4UrCm2FKwr1gC+qb98KuW34Hv2D8RDzQJlb
Ybk8pf2KQ6ugoLQxL6/0KK/D/tzcsh38vht4fy7ndZ43ZEhVZMyYqaWXXz7z
/77xjQ9fufPOT7yPPDLvZ7/+9aIfvfzymm9PmLDx+vff33hZaenWcTNnbhs+
Z86+/vP/n70zgY+rqvf4STL7TNaZ7E3Spum+L7QUBa5s4gYqij7wuSHKouAT
UZQno4i4Igo8UZDdtklmsqfpiqPIItBaioVCQZYCLYUCpVBausx953dvTuZm
svQmc++cmeb//Xx+n5ncuXPP//zvuSeQ9/i6YW/Vk0++Hdy6dVeBqqoeHgc5
ogiCIIgkfsTk/70Z6U5hDi6eRzJgDlbmnBT6QYyMGLPnHiomxpa9zuyaF0EQ
RKrYsX/JGpf2ZIKwhxiT/wyOJjE2tFcCURi5po5GlEFivO8xll7vw0jX7Ejm
KbteO+ZFEETmgb1T9j4y2r1HJDxEFEb/LHA0orDs/OcAlZE3kiAIHTt+J5oh
m/YV2l/SQzrXhGKiHiWN9chI2EQPCIKQix37YszEuIoN46YjBEEQBJGNXMjk
/w61Ov9laYeIbMDH5K87O3KGlU0isgIPk7/urMgPrG7MGKOJyb+HqeZhy7tC
EARBEARBEDoBn893emFh4Q2hUOip0tLSfTxxOJqCwaBaUlKieZvscEUlfyY8
UXiPc0QNwhWVk5Nz2OFwvO10OtfyfI0fm8z0/049FQx+KC25jMUcjDXz6z7P
/53y/nzGloa83qZqtzta73RGZjgckYUOR9OJeXmRj+TlNX2Gn/tl/q8dl/D8
iLHG6/Lymm9zOqMtHk90Hc/DPl/0yUAg+nxBQev2wsKWXYWFbbuLilr3BoNt
+0tL2w6WlWmumngw2KE5oQoK4IhqU/3+VtXna1UDAd2RI1xP/T06wi2kO5Dw
Kpw6A71R/b8PNw8ft8+bA98QvFFwA82Zs6bPGTR37mp15syVmpMH5+KacDQh
8PGIcTA+/EvC2TSYKwqB70h4l0SMrijUibqE3whuH9SLMQZzRPH70s/pZIzu
gNIdUegLro15I3Aa4XoJ15Tuekr2RPV3RSU8UUZfFD5LjJdwU+H6Rv/TSKLX
Bi9XVHNsib5hHOE+wnXRG/QL0T1ibf2iO5zaBqyJkpLWPl+Y8DlNntyjTp++
kt9v3RM1bdpKzQlVX687qHTPVLvmjWpo6NYcTVgX8Eeht+L+6PNu0cbHmsHa
wvfxqvuZOrR6RX34rnCa6enviII3S0Q8C/g+riXqRp3wUPV3RemeLdxLrBlc
S1/7GBvntWO8gwUF0T18vFd4P7bwuT08eXL3mgULVjUpyl//cOaZ9137la/8
83uXXbbhgp//fMs5N974zBl33/3SSU1NLy9ZtWrnnPvue23y+vVv1j7++Dvl
zz+vFu3YEferquriyePJJU8UQRAEMQSf4nmTyf+7c2MKc5jG80YGzMGqrE2h
F8TIiDF77qFiYmzZ68yueREEQaSKHfuXrHFpTyYI61GY/OcvExIbImGTUY6Q
oxnFZIbr31D9l70u7Igygt5mUw8IgshesA/L3kNkJzZEwiajHCFHM8oIMlT/
huq/7HVh11obSW9l12s24RHMiyAIeXtLNu6tism5EaMnnffTDOE010RrmiAI
I3Y89zET4yo2jZ0J+zpBEARBZBq3Mvm/Q63MDmvbQ2QJH2Dy157V+Y+lHSKy
hSVM/tqzIh+2ujFjjGeY/HuYav5oeVcIgiAIgiAIgjGny+Wa7vF4Lvf7/avz
8/NfLSoqOgQ/FBxNCJxNcDdZ5YoSvihjhnJFifF5ffBEIXGHw/EOT4znG7z+
KWzUriijHyqcy1hzHmPrnYzFPIyt9jPWVsTYsnKP5y91LlfTFJ+vea7HEznO
74+eEgi0nun3t53jdrd8w+Fo/l5OTuPPcnKa/o+xxmX8Oz25uU3/cLmaN3m9
ka38/G0FBdGdRUXRt4qK2t4pKWnbFwq1HSgtbT9UXt4er6joVCsr4bfpUktL
O3k/2jUfDnw7wmGEV+E6Srh0Wg0enZZ+Ea4hoxtI+IHg49G9PG197iijVwgu
IHiDGhp6NA8QAnfUlCnwBXXzWhNOINSJ65WWtmnOIXwffiA+Z61uo2vJGKP3
aDBXFBxBustHeI70+Rh70t8PFem7FrxNiLgmPsd3MH94lHQvlh685/dCuz76
hrr16+u+JxGMI1xRuPZgrijjmDgX30GdqBl9GqkvSqwB4ToarFeoVbiojOtB
fF9/r68J4XAyBsfxPfRaOMPgc4J7adKkFVrq63X/EtxQuPfC4YX+4Tj8TA0N
K7TvYV3AbYV7gx7q6zba57MS9zPhOUv4qwZbs2IeybWLusX9xHpFnRMndmvv
+XPV5wFDHWLdeTz4fhv/fsLHxs85HAhE9/JatvNncRNf5+uOO27t8tNP/9uN
Z599f/i88x6+5IorNn3p+uuf/vTtt2/78PLlrxzf3b19wbp126c/8sir9Rs2
7K168sm3g1u37ipQVdXD4+x1ROWQI4ogCIIwAVxLjzD5f3u+NYU5fDwD6rcy
81LoBWGeGLPn/ikmxpa9xuyaF0EQRKrYsX/JGpf2ZIKwnjCT//xRUktshJFd
71gP7oFZwhlQr9mERzAvgiAyC9n7ByW1xEYY2fVSRobsWu2aF0GMdax+/mIm
x43ZMLbdUUzOjRg9Ckvf/Tya16rVPSAIQg6ynnvFprHtDkEQBEFkIxuY/N+h
VuaX1raHyBK+xeSvPasTtrRDRLZwMZO/9qxIqdWNGUMEmfz7Z0W+bnVjCIIg
CIIgiDEPHEu1Ho/n816vt8nlcj3vdDrf51Hdbrfq8/k0P5RwOVnlikr2QcFL
ZRzDOI7wVMEVlZeXp+bm5sIVtYe/xnid+GfkkbqiDH4oLbmMxRyMbebXeNDL
WE8BY0tDjLVXMRatdzojM7zexmM8nqYT8/OjHy0sbP1sSUnbl0tK2i/huSoQ
aP2txxO5w+Foas3Jabo3J6fxUZ4n8/Kanne5mrb7fJFd+fmtbxcVte4NBtve
Ly1tO1hW1nEYPia4oeCIqqrqVquru/krHDedfR4meHbgKRKeG7z3+aL9XFDC
pTOUKyo5/X1RrZqrJxH9M3h8dBdQp1pT06XW1XVrjij4g2prO3s9PG1914P/
R/iX8Bm+n6jfnC9KRPf5JPxHwoM1tCOquZ8jKtndJK6J76NOuI7gEho/Xp/T
xIm6BwnH4YxCT4TrCr3GmMIdJXxRRh+VSLI7Cuc4nc1998w4H7PBd3w+3buE
XuGaYm769RNrAvPD+eI7om4En4skH9O/19rrmtIdTnBBoR9wPyHV1bojCveY
r12tTwjuNdZDQ4Pulaqr69J6DFdU4j7rTqtEndE+39Ng7ioxB6MfSswH997o
TcO6wDoU9WKt4t5WV3do7rLCQv0+on9OJ3qIdQN3VCu/Zqt2XV7TQf6Mvsuv
9Spf85unT1+5+iMfue/PF164/qfh8OOX/PznT3zht7/d8ok///mZD0UiLy1e
t+7V2ffd99rk9etfqX3ssXfKnn9eLXrssbhfVVUXj4MnlxxRBEEQxChw8ixn
8v/+fH0Kc7gsA+q3Kjek0AfCPDFmz/1TTIwte43ZNS+CIIhUsWP/kjUu7ckE
YT2ynz0KZSzGLEoG1Go2sRHMiyCIzCHM5O8fFMpYS5iZJ5YB9ZqNMoJ5EcRY
x+rnL2Zy3GzaU2hvSS/43ZSuexo2WVM2rlere0AQRPqx45mPmRhXsWlsu0MQ
BEEQ2Qb+2zTZvz+tzgxLO0RkC7cz+WvP6oy3skFE1nAbk7/2Us1/LO/K2OJU
Jv8eWpGFVjeGIAiCIAiCGPP4eGa7XK7L3G73/fz17by8vHhubq7qcDg0X1Qg
ENB8TXA5WemKwrWMrijhixKuKHyGnxGcj1rgikJ9cEXx3DsyV5TRDxXOZaw5
j7H1TsZiHsYe8/PXIsaWlTP2lzrGmvg1l81zOBo/kJcXPcXrjX6yoKDl3OLi
1guCwY7vlZW1X1te3nFzRUXb8mCwrSc/v+V+t7tpU15e4zM8L+XmNu50OJre
8ngi7+TnR/fx7x0IhdoP8e/F4YKCH6qysrvXEdWljhvXpXluEPiZgsF2zZUD
Lw58O8KFhFc4d4QnZzBHVP+0GiIcUi19vqjBIj7r7wzSHTw1NZ2aLwg+IJwn
nEY4F8fhFYIvCt/DcbiBRuqKgosJ5wsnkPA0Yd4JP1RkUD+U0ROVm9vUd018
D94h+I1QIxxRkyf3qDNmrFJnz17NX1eqDQ0rNO8R5gtPFuaEPuhz1HuH+Qhn
VGIO+hjJdRhdUZiD8B+N1BUlfFtGV5R+/aYhetW/58LTNJQ7Cr4k4WkSjjHM
G/cYviXcS90N1a4FaxO9QXAc/ZowoUtzRaGvWAeYp8sVNXi8EvdDuKOMQX2I
cR795zPwfBxH7ahX+KIwNuoRvjLUAW8V/FDwRIm4XM1xnsM8+/lzu4ePs53P
+Qm+xv/6wQ/ee+fFF2/48S23PHN+Z+crn1y5cofS3b19wapVr0996KG3xm/Y
8HrVk0++HdyyJZ6vqqqH/FAEQRCExVzD5P8NOpxC/Zngu7Iir6bQA8I8MWbP
/VNMjC17jdk1L4IgiFSxY/+SNS7tyQRhLWEm/9mjUMZiFGaeWAbUa8e8CILI
DGTvGxTKWEyMmUfJgHrtmBdBjHVkPX8xG8a2O4rJuRGpk871oZioR0ljPbS2
CYIQ2PG8x0yMq9g0tt0hCIIgiGzjWCb/96eVWW1te4gsYiOTv/6sTJu17SGy
iKNhLUcs78rY4vtM/j1MNYd5cq1uDEEQBEEQBDHm8fMsdLlc/+t2ux/jeY+/
j/Nobiafz6c5m0KhkBoMBvs8T6m6opIDXxSuj1fhihIOKbii4KtyOp1qTk6O
5ori7/fwmHFFGfxQWvg/U8ccjPW4GXvQy18LGFsaYqypmrHlExlrnMl/XsTf
K3l5TR9zuSKfdbsjX/X7Wy8tKmoNB4Pt11dUdN5RVdXRVlPT+dfa2o71lZXt
T5aUtD4fCER28HN3OZ2Rtx2Opveczqb3PZ7IwYKClsO6dwcOG90TVVWlB56o
6upOzV8ET1RdXbf2Wl7eobmY4MOBIygnR3cEwUcE/07CPTS6CF/UUBG+IOGA
0mvTa4WTp6iojY+vu4wQfAfH4bnCOWVlHdo5cPmYcUXBgSQifFGJ83S/UMI7
1Kz1YzBHlOhRwknU3OcWEq4o+K4mTlyhTpu2Up03b426aNE69Zhj1qqzZq1W
p07t6XMeYc6Yu3Al4R6iH/ASYb7wEAUC0V4fll6n0XklPE1wS+F+6S4m854o
nIvv4Lu4zkBXVKJPYo7CpWTsLV5xzOuNJDmiBgbjoU9D+8TaDNHXB7xa8Iih
bwj6huOoG3UYaxaOK+O9NjrCxFyMEfe+fyJ9jizUrPuidL8VXFbFxXCVYf21
9nqi+pxkh/PyGg/y7M/NbdzLX9/i13uF1/pEMNh6X0PDiqZTTvnbry6//PEL
IpEXPr5x4+5FTz21Z+r69W/WPvDAjrKNG98qeuyxHX5VVV08eeSIIgiCIGzi
a0z+36LPG2Xt/J+t2TMZUL8V+egoe0CYJ8bsuXeKibFlry+75kUQBJEqduxf
ssalPZkgrCXM5D97FMpYTIyZR8mAeu2YF0EQ8gkz+fsGhTJWozDzxDKgXjvm
RRBjGaufvZjJcbNpP6F9RQ7pWiNm12w4TfXICkEQmYesPU+xaWzaxwiCIAii
Pxcx+b8/rczXrG0PkSW4mfy1Z3X+y9IOEdnC0bKWf2B1Y8YYTUz+PUw1j1re
FYIgCIIgCIJIuKKucrvdj/PsgysKniiv16s5muBsgisK3iZ4ouBxssIPBQeU
cE8ZXVEYU4xrPCZcUQ6HAy6rPTzDuKKS/VDNeYytdzIW8/AEGOsu5scqGFs+
nrGlUxlbNo+xxg/wn0/j//rwqdzclnMdjuiFLlf0Crc7+gu/P/KnoqLWxlCo
fWVlZecDNTWdj0+Y0PlsfX3XS/z1terqzrdKStreyc+P7vP5Igfc7shhl6s5
DpcNnD8lJe1qaWlnrytKT1VVR286tQhX1Pjx3ZpvCb4duJaSfTtw3sA/pLuH
Bo9wOA2WhC9KdxIlO6LgCRI+KXiR4EuCJ2rChG7NswQ3EM7F+PALCQ8S3EH4
DOfzPmmuHq+3pdejNHQS/ifd85TsEEq4pJqG9EMlPFEJTxPGRW3CgSR8VuPG
dan19SvUqVNXqnPn6q6oxYt1X9T8+Ws0f9Ts2bo3Sp9zl/ad2tpOrQ/wIuH+
wOcFNxHmjV6ht3pPdL+TGNvoYTqSK8p4L3APhCtK9NDo1RLzHMy9lXye8Crp
dQzvi4L/SqwTzCuRgbXCzwSPFvoxcWK3OmVKj+bZQm8wV3jC4HY68n0b/L4n
z6W/T0w4sKK9fivU1KatO3jMsPbweV5eUzwnp/EQf77f59nHn/F3eN7iz/xr
/PiLvL5/5+dH/s7n0DRz5qrfnn763799+eUbP9ne/uLC7dvfq9uzRw3F4/F8
VVU9PA7yQxEEQRBp4sM8u5jcv0efNsraT5Jct1W5bZTzJ8wTY/bcO8XE2LLX
l13zIgiCSBU79mYzyN5jaU8miCMj+7mjUMZyFGaeWAbUa8e8CIKQS5jJ3zMo
lLGaGDOPkgH12jEvghjLyHr2YjaMbXcUk3MjrEFh6bu3YZM1hdNYU7pj9tkl
CCJ9yHrWFZvGtjsEQRAEkW3g/3dU9u9PK1NkbXuILOFYJn/tWZn3eJyWdojI
FpYw+evPinzY6saMMY6G/y3zWyzvCkEQBEEQBEEw5uOZ73K5fuh2uzfw13fh
YoKXye/393M6wRGFY1a5ooQnCsEYcFHhNdkVJRxVvDY1NzcXzqi4x+MZwhUl
/FDhXKY5omIOxnrcjD3oZeyfBYw1lTJ2zzj+2sAzi2cRY8sV/voxnrNzc5vO
czgi/+N0tvzY7Y78zu1uudPni7YHAtFYUVF0Q2lp+5bKyo4Xamo6djQ0dL0x
bdrKt2fM6HmvoWHF+9XVHYeCwbbD8OrAF8S/q8Xvb+XzaldDoQ61rKxD8+jA
p4TgfXl5u+ZYgjcKHiJ4jOCLwufw38DxAy+O8CnBmQQHDrw+I/VE9fdFDXQV
JV8Dx1AbHEl8jpo7CV4rOILwOWqDDwgRvig4ruDswc84Ppwnyug/MnqDBstw
figRoxtJ74/uNBJ1of/wGsHJNXHiCpXfP80XtXDhWnXRorWaM+rYY9dp7+fO
1X1RmPekSSu09zNmrFSnT1+pTp6se6TGjYP3K3EP4cjCOEVFbX397N/3oR1R
qBFuLkT3Tw3ui8JaEL3DPBH9eMKllOzdwucJV1RLv2Ct9ndaRQd4xQZGrw91
wpeFtYo1O2lSj9ZX4TrD9XVfkzlflPE+6u8HXwv4XHdFRfm8UD/WY5v2rGE+
cKm5XM2H8/KaDubkNO5nbNle/py/zdjSN/j7HYw1Ps+v84TT2fwIf7ZX82fv
7lmzVv7i1FP/eskXv/jAZ6655sljH3jgzTpVVQt5XDx5whElb6smCIIgxiDT
eTYyeX+Pfr23htHwPYl1W5Xdo5w7YZ4Ys+feKSbGlr2+7JoXQRBEqtixN5tB
9h5LezJBDE+YyX/uKJSxnBgzj5IB9doxL4Ig5CJ7v6BQxnoUZh7ZtY4kBEEc
Gaufu5jJcWM2jJ1JeyVhDWGWefc3G9eu2YRN9oAgiPRgx3MeMzGuYtPYdocg
CIIgsg2Z/3+7VidqcW+I7OFCJn/9WZm7rG0PkUVcxOSvPytSanVjxhBBJv/+
WZELrG4MQRAEQRAEQXA8PNNdLtclbrf7Pv66Oy8v77DD4VB9Pl8/T5RwOFnl
ihKeKMTopBJjJLuieH0qrw3OKM0VxdPrinJNZazBzXRPVC5jzXmMrXcytpUf
iwUYW1XCj1Uwtnw8Y1F+buN8xpZ+kOfDjC37FGORL/BjF+XmNv4gL6/5Fy5X
5E9eb7TJ642s8vmiD/L8OxCIPltY2PpyKNT2WkVF51vjxnW+M3Fi9/6ZM3sO
zp+/+vDs2avUhoYetaKiS/NCBQKtmsMGriR4fuDVgTsHLqHSUj14D88Ojuse
o3a1pkZ3MsFFBJ8RzoOXB9fRXUC6Kwfvcd2hfD5mfFHCXaSn//d0j5DuokKN
NTWdWk16XV1a7borqr+/SPcRtfT6eqJ9HqPhIjxYw3mEhvIKCTeSMbge+oX6
4F1CrSJwRcFrBN8VPE/wG02ZslKdNWu1Om+e7oyCLwpZsGANP75Kc0MhuMc4
B8FxuKPgkOLrQPNGoS+4Jq6PsTA2HFCDuaF0D1Rrn3MJ5+F89FrUijUhvFG4
D/A4wReFoLe4/7pDKtrn3Er2Men90N1ZQ7miEs6oxOdmXGNwoul1t2rrFHOv
r+/WXGdYx5gD5oYaMf5I7/FQ9133X2Ht4LpYZxijtXfdRfjeEDnkdDYfyMtr
2peT0/gOf+7f4s/5a/wZf4lnK//+Yy5X8/2FhdGeqqqOpdOmrbzh+OPv/d/P
fvb+8y+9dMMZv/rVM0uWL3958vr1aigej7vJD0UQBEFIpoCnh8n7mzT+b97u
Uda+SmLdVuXTo5w7YY4Ys+e+KSbGlr227JoXQRBEqtixN5tB9h5LezJBDI/s
Z45CoZAjgiAIeYSZ/L2CQhnriTHzxDKgXrNRRjAvghiryNpPsmkvoT1FLmGW
nvtrdu0qaaqH1jlBELL2OsWmse0OQRAEQWQT+P+Xlf2708p83tr2EFnErUz+
+rMyn7C2PUQW8Wcmf/2lmmct78rY4hQm/x5akUVWN4YgCIIgCIIgOC6eWo/H
c67P5+t0u907HQ7HQTiZ+LF+Hie4m0SsdkUZA1cUXuGIEq4onI96nE6nwRXl
vdfr9X7D5QpMY+xED2MxB2M9bsa2eRlbW8hYUyljy2v4awPPLMYiixlbdhI/
9nH+8+d4zuPH/icnp+knOTnNv8/Li9zldDZ1uFzNf/N4Iht8vuhT+fktLxYU
RF8tLGx5o6io7e1gsO298vL296urOw/V13fH4QxauPBedcGCdeq0aavVmpru
PkeOcPvApwS/Dpw/cP+I4Gdj4Ani19X8QzNmrNIcRrheSUm75u8Rvh34cuAF
wrVxfDBX1EidUckR7iD4ouADglsJdU2btlKdOHGF5kPC9VEDahGeJrx3uaJ9
LiOzvqjBPEdD+aGSHVH4rjHCFQUPE3oHPxQiHF3GYB61td2a52vq1JVa3+fO
XaN5oubPX635oWbMWKkF93revNX8+Bp+zuo+jxR6AocW+gJfFO4hxguFdAcY
7q1wRgkvl7HXwhWFc0VNlZV68J6vN21t4DzcD+FzEq4pOJLQY9FDEXjFcAz9
xX3C/cC5wg012D035kiuKOGLEmu3oqKd97Kzz5kF9xnmhTExvu46S9Q4WjeY
0RPldreItXaYP2cH3e7m/fwZ3puX1/R2bm7jLv697TzP8TzBe/GI19v812Cw
tZU/u7fNm7fyN6ec8rcrzz33oYu++91/nXPttZtPv/PObYtWrnx9yv33v161
dWu8QFVVp+wNmiAIgiB6uYPJ+7v00lHWzP8ZnR2WWLfMuRPmsOu+KRLHtjNm
5kUQBJEqMWb9/mUG2Xss7ckEMTRhJv+Zo1Ao+rNollgG1Gs2ygjmRRCEHGTv
ExQKRY9ZlAyo1WxiI5gXQYxVZD13MRvGtjuKybkR1pOu9RI2WU84TfXIiNln
mCAI+5H1jCs2jW13CIIgCCKbWMLk/+60Ku/yOKxtD5FFrGfy16BVec3i3hDZ
xb+Y/DWYapot78rY4ntM/j20IvQ7mSAIgiAIgrADuKKqXS7XmYFAYLnP53vJ
6XQecDgcfa4o4YmCt8nobrLKFSV+zs/P7wt+FmOK8Xht8ESpbrdbuKL+6vUG
vuF01sxg7FsFjMUCjDWVMHZPJWPLx/NMY2zpAv6vVB9krPHDjLV8in/+3zwX
889+yF9/mZPTfEtOTlNzbm7z6ry85ofc7qbNXm/zf/z+6MsFBS2vFxe3vlVc
3PZOSUnr/lCo7UBZWdth+HvgTqqrW6H5oebPX6cuXLhOnTVrtVpfv0ItL+/Q
/Dlw6sAThcDvI9w6cP4MFnwHvp2GhhWaowguIviH4B0yepmEBwgOIFzX6O6x
yhklXFF63a2a92fChG7NXwWvUlVVhzaXZFcUaoK7R3cN6T2Ao+hIvijhERqN
HwpuqOQkXFHwLyVcUfB4ITgOXxde8RnuZ01Nlzp+fLfmfYIzCv2HI2rq1B5+
bAWfe4/28+zZq9U5c1b3fr5Kc0VNmtSj3fu6um7NFYU1gvHgUOJrSHMmoZ7k
3grXl3BFYe3As4TroJbx47u0ulAfroc1gr7jfOEcE14y9Bh9TPQl2RMVHdQD
ZVwfyb4ouKn0DO2LQi2oC26sysp2Pn/dcyWcaRgbNQgnmFgvZpxR+lpP3HPc
W90TpV0zznOI3+v3+et7fP57nM6mtxyOpp383G38dSs/tpGP/w9e4wq+Zpfy
e3jTkiVrr/nEJx647PzzH/3alVf++3PXXff0R++558Xj29p2zo3FdjY8+uhr
lRs3qkWqqnqam5vzZG/QBEEQBGHg50ze36avHGXN35JYsxV5fZTzJsxh131T
JI5tZ8zMiyAIIlVizPr9ywyy91jakwliaMJM/jNHoVBG9t+DKhlQrx3zIggi
/YSZ/H2CQqHoUZh5YhlQrx3zIoixhsKsf+ZiJsfOpn2E9hP5KCzz7nM2rmGz
CZvsAUEQ9qEwe57vmMSx7Q5BEARBZBPfZPJ/d1qVO61tDZFF4L+Dyvb/rV9j
/mBte4gsAv/Ns+z1Z0WusLoxY4xGJv8eppoNlneFIAiCIAiCIHScPNVer/eM
QCBwj9/v3+ZyuTRXFD+mOZrgikIG8zul6ooSTihcHz/DE2U8bvwMrij4q3hd
cf5+j88XiHm9wYsdjnkLGQuPY6yFJzqJsWWz+b8GHJuX13RSXl7jJ3Jzmz/v
dEbOdziaL8vJabw6J6fpBv56N3/tzM2N/I1//i+Ho+lpfs6LHk/kVZ8v+kZB
Qcue4uK290Kh9vfLytoO8cTLy9vV8nJ4gLq0jBvXrXmT4IiaP3+t5hDSPUqd
miMIDh14duDKQfDe6Njp742Cc6dF8+vADyScRPAT4Xo4B84p+H+EYwfvcczo
8TmSM2ok3ijhNMJ7eIzgMIK7CoEPCX4gOIBQBwJXkc/X0uu90j1MhYVt2nWE
K2hoV1RkgENoOEeU0Qs12PXgq0LdcCmhp/AsCVdUMNiuHReOI7zHMXwGbxTm
WV/frTm78Ir7UVene6RwbOrUlZofCg4p3B9xHvxONTWd2v2C8wnjoQe630n3
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
78vPb9lYUtKyNRRq3xYMtu0sKWl9s7CwdU9hYcu+goLW9wsKWg4VFbXG4fkp
K+vs80MlHFGdWuCJggMJbh7hf4IjSLiE4AjCZ3D1wOWDV5xvdErB3ZPwFBn9
TC0DPEZ4HwrpvihcC9fBMbig4NERnigE3ij4onT3ULPBlaQ7o+D60X1Jgzuj
RA2DHcf3jK6oQCCquYww/8S89HOFRwr1wlsknFnl5QlXFDxDwzme+vuiBvqh
MH+RZF9U8ndwjj5/fQ7CC5WYU2J+Q7m0BvYkkWSnlPBBGc/DexwXLim4jjCu
7lcSc4oO8FoJ/xh6WVfXpY4f360F73X/FtZgu/aKn8eP18+BN6qiolP7DGPh
vvr9EX7tZi36PURtbb3OqMGdUPBLJTuj4G3yeFo0P5TT2cL7DG8ZgjXZFE+k
WTuW7Pwy74mK9Dq04LjSPVElJR3anHhfDvJn+F2+zl7mc90wf/6qzo997L6b
v/zlh37y7W9v+NaVVz5+7q9/veUTt9zywkmNja8eu2rVzjn33//ylPXr36x9
/PF3yl98cXfxjh1xv6qqLp48nhzZmy9BEARBWMASnh0s/X+vPnEUtX5WQp1W
5fOjmC9xZOy6X4rEse2MmXkRBEGkSoxZv3+ZQfYeS3syQQwkzOQ/axQKZfCY
RcmAWs0mNoJ5EQRhPwqTvy9QKJTBE2bmiWVAvWajjGBeBDFWUJj1z1rM5NjZ
tH/QPpJ54HdVOu652fWspKkeGTHbA4IgrEVh8p5pu8a2OwRBEASRLXyLyf+9
aUX28tD/nvrY5gCTvw6tyGtWN4bIKpxM/hq0IldY3ZgxRiOTfw9TzUbLu0IQ
BEEQBEEQAyngnBoIBK7zer1P+v3+ffznOPxQIvA5Ca+TFa4o4YES1xbHBzvH
+LPuiirc5/NNeM7j+dRat/vaqNu9vNXlalnrckUf9niiTwQCLc+VlLRuLy9v
f72mpnN3bW3X3qqqjv0VFe0Hy8raDgeD7fGSEvhnOtTSUt0TNW6cyEBHFDxI
oVC75j2C/0c4geDcEX4feJFwvtErhe/pniCjR6i/K0o4h4xeouJi3Rcl3FQ4
V7ii4IdK9kUNdEY19zmj4AEaygk1lBNJeITgDYI/CN4lvAovFPxHiN4P/RW1
ClcU3EXoIeaP83Eds64okYQjSvcpoQY9Ee1nBD0Rriijc8joizI6kMR7cTzh
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
YXiEJkxYodbX96gNDSvVGTNWqwsWrFWPO+5edcmSder8+WvU6dNX8s90VxQc
PsLZU1zc35t0JEeU0a+ECAcU/Ebw7MC3hMBBJDxECRdRf2dUfx+R7g/Ce/iB
4C2Cy8jpbB7gbkr2ROG48EThOxgP3x/OFZWYi1670ROF6yWPAccProtroW/w
NaGPcCDB34RUVnZofqdgsF2bB+YpfFHohT6f/oE3SDikhCsKY4RC7ZpnafLk
HnXWrFVapk7t0XxfcC9hDMwR9Q7n0Brcq9Xc1zN8X/QNdQpnFHo3mBtqsIg+
il7jGHoEN5Toj96b/q6oZNfUYNczeqISvqhWzRelJ9LrdLqNf3Ydz1U8l/Fc
zOdyAb9nF/J5fZfP8Ro+5xv53P/Me3AXzzIe3Odob/+beQ8a+fnL+XeXaY6o
QOAuXsNtvJ5beF03xgsKfru/qOimF0OhOx8IhZrai4palgUC0abCwpYVfG6P
1NV1PcefsV319Sv28vkeLizs5DV08Ou28utrayzu80UOu1zNB3Jylu9jbPm7
vI7djDW+npvb+DI/51mfr/Vx3puHKiraV0+c2L18/vyVN5522t+uPOecB8+7
/PLHPv673z11THf39rpeT1Se7A2VIAiCIDKIM1l6/3599ShqbE1zjVbkslHM
kxgahdl3rxQT48teT3bNiyAIIlVizPr9ywyy91jakwkiQZjJf8YoFIq5KMw8
smsdSQiCkIfC5O8BFArFXGLMPLEMqNdswiOYF0Ec7eB5kLV3ZNO+IaKYnBuR
ftK1npQMq0dGwiZ7QBBEauBZs+MZjpkYW7Fp7EzZowmCIAhCJpcw+b8zrciV
VjeGyDr2Mfnr0IpcanVjiKwC/81znMlfh6nmCqsbM8ZYzuTfw1SzyfKuEARB
EARBEISOx+VyTfX5fF/3+/0d/PUFj8fzrtfrPQxvE/xMwtGEV3idcByuKCQV
T5TRFYX38FEZx8R7HBPn4Rje8/o0V5THo7mi+PFF8YqKSw7X1d0Sb2joUCdN
WtmXhoYeLdOmrVTnzVutLlq0VsucOavUKVN61PHju9Tqat3ZU1LSqvl6BnNE
De1VSniidIeP8EMlu5CaDUl4iBLOqKj2fbiA4AYqKoKzSrirdI8QxvF6W7Tv
GZ1RcBzl5jb1eaOMnijhpsIYCR/VcJ4ofS6oB98V1092L+Fn+IRwbVwPfi04
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
+7/8/v2POnXq19UZM77A+/7Zg/Pnn/Xq8cd/qfUzn7nm2xdf3HXGd77z6KmX
XbbhE1df/cQXbrnl2cvb2l66qb395fbbb3/u/quuenzzhReuf+Gii9bv/OEP
H9/5m9889cqNN259/ic/2fzU2Wc/uH7KlO6/lZS0tvF1cceMGSt+e/LJsR+d
e+6D3/r+9//1xeuvf+aTd9314iltbTuPi8V2zn344dcmb9q0d9z69XtCW7bE
81VVhScqV/amShAEQRAZzK9Y+v6W/dER1nZ+GmuzKr4RzpEYGoXZd58UE+PL
Xkt2zYsgCCJVYsz6/csMsvdY2pMJQkf2s0WhUEYehZknlgH12jEvgiCsIczk
P/sUCmVkiTHzKBlQrx3zIoijmTCT93zFbBjb7igm50bII13rSjFZjx3PWKYk
bLIHBEGMDrv2j5iJsRWbxs6UvZkgCIIgZOFn8n9fWpGlVjeGyDp+z+SvQyvy
J6sbQ2QdtzD56zDVPGN5V8YWJzP599CKfNDqxhAEQRAEQRBjHl9+fv7kgoKC
C3h6PB7P9ry8vAM8fc4m+JngbYLPCX4oeJsQfAZvE2KFKwrj4D3cUGJcXFuM
Z3RFifPgi/L5/JorqqRksVpV9W11woRb1YaGDnXixBWaNwhOourqTs0vBIdQ
MNjGo7/C06O7ekbviRJuH93dk3A16W6l4R1ExghfFPxM8BihFtRbXd2hOZcw
j/HjuwfMCT4p3bWk14Dvwxs0uCsqanAWCWdUS5/PSPiTcA3hiXI6m/tcUcnB
cZwDd5JwUQmHEupCjah50qQV6owZq9R589aoCxasVefOXa15o+CQwuc4D3OF
Bwq9TPZtCc+TcDThXsGfhV7AB5bwgnVrvQqF2rVadH+S3g/MCz3Cd3HvxVrA
3DFXjGHmfuEcXA8uqpG6ohLOqMTa0c9rUZO9Y6hf3A+MJfxQ+nGjJ6qVz7Gl
t09LeW7nP9/Aj1/L7/0V/LwL+Hc+y6+p8GvP4ZnM08B/ns5fF/IenMZ7d756
6qm/Ur/ylWXq97/fo15zzTr16qtXq9/6Vov60Y/+UZ016xre6+/xPl/C790F
/D7+Nz92pjpz5qk8yqHZs094efHi0+8+44xvfPGKKxqPWbbsmRltbdsXrF37
uvLgg2989vHH3/rOpk27r/vHP167p7V1W/fddz93/9Klz21sb39509q1r27g
ub+5+cVVV1/9ZONnPvPAH0488d6fnXba37/7pS89dP5VVz32uZtvfvajTU3b
Tuzp2X7Mww+/MePf/949cdOmXeNeeUUN/fOfuwpUVfXwOHhyZG+oBEEQBJEF
rGTp+Vv2I6OobWeaarMqS0YxR2JwFGbffVJMjC97Ldk1L4IgiFSJMev3LzPI
3mNpTyaIo/u/j6NQjubEmHmUDKjXjnkRBGENYSb/2adQKCOPwswju1a75kUQ
RythZv2zFTM5dsyGsWnfIEA61oLZdc5Ydq51eiYIQj5hJm//Umwam/YkgiAI
YqxzPJP/+9KKfMXqxhBZx31M/jq0Imdb3Rgi61jP5K/DVNNkeVfGFpcz+ffQ
itD/TjlBEARBEARhNUUej2dJfn7+zwKBwCb+fq/D4VCdTqfmZ4LDCZ6o0tJS
zc+EY/AzwdOU7G6ywhUlfFTi2vjZ6IoSbioch08Kdfj9Af4a5McXqRUV31Zr
a29R6+ra1JqaLrWqqkMtL9edQHD4CBeP0dOTnJF6ooyuKLiMhKcJ7qeRuKJw
rnAvwRFUWNjC+96muaLghpo4sVudOrVHnTFjpTp9+krNvwTPEtxI8CbBj4T6
UQf8UPAsIXA9ud26c0g4owKBqMFbpAceKXyO7wpHlLjGYJ6oZFdUwkelX6+4
uJXfjw5+P7o0b9fMmavUBQvWqIsXr1OPOWat5o2aM2e1dnzy5B7tfpWVdWi+
KDEH3d+UGCvZFwVX1rhxnX0R9xuf4Rr6PHRPFK5bVtauealQE4Lv4HzcQ/ii
xFyPdK9QC+qA42kwR5RxHQn3k/A/JXuj+ru7Wg3erpZeb1eitzjW3xMFHxY8
URFe9zKeO/kcbuLHr+HnXM7PPZ9f67P8mqfyWhbwNPBU81Tx1PI6J/G1s0hd
uPCz6n/914/UK664Tf3lLyPqdde1qNde+xf1u9/9g/r5z1+tnnDCt/m9+yo/
71z12GPP5u8/ok6bdpza0DCP39uZBxsaZrw4dersPy5e/KEzrrgiXL9jxztl
b775Zu327XumvfTS3mNfeWX/mdu377vguef2XPXEE7uvf/zxN+/YtOnN6ObN
u1u3bHl7Oc+t//znruva2l7+0e9+9/Q3w+HHvviznz3xyT/96T+nRCIvHBeL
7Zz7wAOvTH3iiffqNm/eWbF7t1q8Zcvr+fF43K2qah5PruyNlCAIgiCyiFqe
11h6/p79tRHWdkOa6rIqF4xwfsTQhJl990kxMb7stWTXvAiCIFIlxqzfv8wg
e4+lPZkgyA9BoWRzFGYe2bXaNS+CIFJH9jNPoVBGlxgzTzgD6rVjXgRxtILn
QNazZcfYdkcxOTdCLgpLz3oIZ1g9MmL2eScIYuRgj5H13Co2jW13FBNzIwiC
IAiZXMrk/760IhOsbgyRdbzD5K9DK1JmdWOIrMLBc5jJX4ep5vtWN2aMsYzJ
v4epZrPlXSEIgiAIgiAIxkrcbrfi8Xiu93q9z/r9/vfhYIKXCa/wNsHLJHxQ
cDPhmDgHnyFWuKKMDijhhRLuKOGmMo4nXFGBQL7miiosPEYNhS5Vy8v/yAPP
UrtaUtLGj7dpzp5AoNXg5hna+TQSR5TRC4TrjsQVlfyZcEXpPqSI5gyC4wr+
o/HjuzQ31KxZqzTH0vz5a9TZs1drzqgpU3o0j9S4cV2aLwq1wCsETxKup19T
dzq5XLoLKuF1Sjij8DPGxfhwJonvJvuh4G4Swc8OR6TPFyW8Rrgu+hIK6fXD
dQUf1OzZui/qmGPWaL4oPevUuXNX8/n1aO4mMQdcS3dFif4kfFFwX6Fe9AiO
JnipkJIS/RXfh08J5yJwNKGXuH59fbc2FvqGTJjQrTmncK2En+rIXi/MGdfF
PI2eqIFrqqWfKyo5xjU5lCtK9FUEP6MHqMHhwLrRPVG5uTfz+f6Cf345v/Z5
/Dpn8RpO4VnMM52nhtcI71uIv8drlVpRMYWvqQ+pn/nM19XvfOcaNRz+vfrj
H/9WveKKn6kXXfQD9XOfu0g99dRz1eOO+6S6aNFH1IULT1FnzlzE7+lk/t1a
3rvqg2Vllc+VlVX9vr6+9qQvfOHUsng87lVVtZC/lu3bt2/8u+++P+/dd+On
7d793rm7dx+68I03Dnzv9df3/fiVV/b+9NVX91/56qsHLt22bd95Tzyx+3MP
PfTGR9es2X5iZ+f2Y1av3jbz0Ud3Tnz66b3Vr7yyJ/Sf/7xZuH79Kz5+bSf8
UDw5sjdQgiAIgshSPsXS8zftp0dYV7b97zHdPML5EUMTZvbdJ8XE+LLXkl3z
IgiCSJUYs37/MoPsPZb2ZIKQ/1xRKJTRJ8bME8uAes0mPIJ5EQSRGnjeZD/z
FApl9FGYOZQMqHUkIYixToxZ/1zFJI6dKXshIZ8wy6w1ka56ZCRssgcEQYwM
u35PxkyMrdg0dqbsyQRBEAQhi7uY/N+XqeZZy7tCZBszmPx1aEU2Wd0YIutY
xOSvQytyqtWNGWM8xeTfw1Rzt+VdIQiCIAiCIAjGgm63+ySfz3ej3+9/oaCg
4EAoFFKRwdxQwtFktSvKeC0RoysKSR4Px3jNmisqPx/1LuKfXcK/9wf+vlnz
9sC9o7t4Eq6o4TxRI3VFCV+UcEXB45NwRSX7lXTHEBxSxojjRhcSnE2BQFTz
HlVUtKu1tZ1qQ0O3OmPGKs0TtXDhGs25hPfz5q3WHFINDSvUysoO/p02zUEk
XFGJMfXrC7cTvEhwDglnFF5xDJ6oZD/UkX1Ret3CGSU8Tqi/rKxdq6u2Vvdd
zZixUp0zR3dGLV68Vl2yZJ3mi5o5c5Xmbaqo6NC+h2ske5vEeMZ5oFdG9xXm
LlxZOAd14We4ompqurQ+TZu2UnNtzZkD39YqzWUFr5j+vea+cYdzRmHO+n1q
GWZ9tBzRFaX7ohKeKHG+36/7roQrKtkX5Xaj5428jr/weu/gffkTf72OH7+S
z+Mb/DrCE7WIr9EZPPU8FTwlPMW9CaqlpVXq5Mkz1ZNO+qh67rnnqRdc8G2e
S9TzzvuGes45X1TPPPMs9UMfOl1dtOgE3q9j+f2bz+/TJN7PUj6G9hweKCwM
PF1UFPh1KBQ4fs6cwiJVVfPi8bibv8LrVLh3b7ya/zxdVeNLeE7ev//gx/fu
PXjWe+8dOnvv3v1n8Z8/dvBg/KT33osf99pr78976qk9UzdseLNu8+adFZs3
byvZvFkN8Ou4cF04omRvmgRBEARxlHANS8/ftS8eYV1Pp6kuK/L3Ec6NGJow
s+8+KSbGl72W7JoXQRBEqsSY9fuXGWTvsbQnE2OdMJP/XFEolNRiFiUDarVj
XgRBpIbsZ51CoaSWMDNPLAPqNRtlBPMiiKMRO57XmMSxac8gjKRjjZld7+mq
h54Ngjh6sGvPMLNvKTaNTXsRQRAEMdbZzOT/vkw1d1jeFSLb+AKTvw6tyE1W
N4bIOr7B5K9DKxK0ujFjiCIm//5ZkW9b3RiCIAiCIAiC4AT9fv9JhYWFN5aU
lLzAcyAYDGqeJvigjK4o4WnCe+FuEj4nK1xRQzmjko8bPVFer5e/R20VPMfy
99/kNd/EX5tN+aGsCq4P5w8cPrqjSPcN9U+k16mUCH42Bl4j+Jq8Xt0VVVTU
qpaWtqlVVR1qXV2nOnnyCs0LBT8UXEvHHLNW8y0tXLhWnT59peZjCgbbtTkL
V5TRb2R0LWGsxHjCP2TOFSV8UeK6cFH1rz+q1YD64a6Cp6m8vF0dN65Dra/v
UqdMWaHOnLlSc12h/sWL16lz567W5jduXKc2Z3wf1xvO15SYS8JVhYi5CVcU
6oELCteeOHGF1it4ojD+rFmreU3dfMx27R6KHgjf18DxG3t72aSNJbxY8EIJ
N1RyBnNF4Xu636qld43iOtG4/h3Mv51/3tbni9J9WPr3Eq6opbzWO/nrn3iu
58eu5te7lH//HF7LqTwL+fup/HU8f24qeeBUMz6vcLIF1erqWnX27HnqSSed
op555qfUs846i7+eoZ5++mnqCSccz/u0UJ02bSbv3VR1woSJakVFBa/Dz8dz
xj0e1z6v1/1vr9d5jcPBlvA9pRAbC5xOvW4nOJ4C8Xi8lL/W8tcGnmk8c3iO
QfjxuTjGX+vhldq+fU/prl3xgm3btnn5MWfvtXIk75UEQRAEcTSyktn/d+0X
RlhTuhxWVuT5Ec6NGJows+8+KSbGl72W7JoXQRBEqsSY9fuXGWTvsbQnE2Md
O559CoWS3ijMPLEMqNeOeREEMTrCTP6zTqFQUo9ZlAyo1WxiI5gXQRyN4BmQ
9VzZMbbdUUzOjcgMFJaedRHOsHpkxOxzTxCEeez6PWnmeVVsGtvuKCbmRhAE
QRCyCDD5vyutyFetbgyRdVzH5K9DK/J5qxtDZB1/YvLXYap5xvKujC1OYvLv
oRU5werGEARBEARBEARj+cHCwuBJwWDohoqKiudLS0sPCB8UIrxMwg1ldDUl
+5tSjRgz2RU1mDsK48MT5fF4NFdUcXEl/+w41e//Js9NaiDQrPmb7HZECU/U
YK6oRHRnEY4Lj5LPF+l1/kT4HCKaC0iP/jM+gyuqsLCFz61V8xhVVrartbWd
6qRJK9QZM3TXEXxRixat1TJ79mp1woQVaiiku6IwVrIrSjiOhDMKEY4ltzva
55cyOqGE68o4J/yc7IoS/imjK6qwsFXzRSFwNQnvVU1NJ6+1S506tUedO1d3
Xs2bt0adPr1HHT++S62o6NC+i3p0V1OjKhxNg82nf60JR5SYG+opKmrjPezQ
vFAYd+bMVZp3C96o8eN1VxRqRv91z9RQvqiEK0p4qHTX00A3lDg+vCsK34/A
EXWooKDlIL/nhwsK2vj3UE+b5ofCGB4Pamvl73EMr8389R6eW/h5v+P9+ilf
K5fz+/9Vno/z94v4+pzMM46njM8/yM8pHtTNxp973oPxfE3NVo87bol6wgkf
UJcsWczvyVzen2m8Z/XquHE1anV1Nb9/FfzaRbyvDt6f3MMul3OP2+162OVy
fY9vKLN5/MYdBo4nHgePJx6P+3kKeEp4ynlqev1R1Txl/H0xvFK9fqk88kMR
BEEQhO1MZen52/Y3R1DT/DTVZEUOj2BexPCEmX33STExvuy1ZNe8CIIgUiXG
rN+/zCB7j6U9mRjLKEz+M0WhUFJPjJlHyYB67ZgXQRCjI8zkP+sUCiX1KMw8
sQyo1455EcTRhh3Pakzi2LRfEMmEWWatjXTVIyNhkz0gCMIcdv2ejJkYW7Fp
bNqHCIIgiLEMPA6yf1dakclWN4bIOuz659R0p9rqxhBZx6NM/jpMNU2Wd2Vs
8V0m/x5akXyrG0MQBEEQBEGMaXL4P2byBEKFhcGTQ6GyGysrK18IhUIH/H6/
5mGCQ4b/rPlkAoGA5mcSLqfi4uJ+ficrPFHJ1xduKLwXP4vzhSvK7Xapfn9A
c+EUFByruaICgf/j75ttd0QN5YqCK0n3FDX3RvcVwQWFcwoKdP8TAocSfsb3
dZeQ0R+ke4bgTMK5wWCbWlbWro4b16lOnLhCnTy5R/McCWcUXFE4jnPwPeGK
6u85GtyzZHRAGYNjwv8kfFbCKYW56d9p6jtPn6dwXbVo/UH9ImIecEaVl+vu
q6lTV2qeKAQOLLicqqs7NbcU+on6hnNFDfRFRXprjvbVjHowPnpTW9uljQHn
1qRJPdp79DQUahvgikp4sQYbV/eA4frDuaKSHVEJVxTWix6/PxIvKIi+X1jY
8i6vk6flfb4uDuXnR+L8s96+ox/wR3XwPqKHzWpFxZ28VzfyOf1MHT/+e3wu
X+f5jFpTcyKf6wy+vmr4PQj1OqKGdrrh+SovL+PXqOXrapI6bdpU3ptJal1d
nVpVVcWvVartBaWlSJDPMQBPFO9LziGn07nL5XKt4a/43x6o5/EMtuGoqprb
63+CN8oVj8e9PPkI/FD81d37WW56t0KCIAiCGPOEmf1/2948wpqeSkNNVqVm
hHMjBsfOdaiYGF/2OrJrXgRBEKkSY9bvX2aQvcfSnkyMZcJM/jNFoVCsicLM
I7tWu+ZFEMTIkf2MUygUaxJj5lEyoF475kUQRxtY/7KeKTvGtjuKybkRmUW6
1lqm1UPPCEFkN3btFTETYys2jW13wibmRhAEQRCy+DaT/7sy1bxgdVOIrGQ3
k78WU82TlneFyDbymP6/6yx7Laaa71vdmDHGMib/HtJ+RhAEQRAEQWQSOYyF
cxlr5v/ONL3C5xv34ZKS8pvLyspeLCkpOeDxeFSEv1fLy8s1RxP8UQgcTfDK
wBuDV3HcDleU0WNjdEXhFefBFeVyuXitXl5DiRoILOT5Jr9Oel1RwhcFJxD8
P7rXR/cmiRh9RXAlVVS0q5WVHZovCY4ieJES3qgWg3soMYbuWoIjSP8u/EZ1
dV2a82jGjFVa4D0qK+vQvgvnEVxHublDu6ISrqXmPteS7ltKeKKM7qeB3qMo
vw8RzemEc8RrwnXVv0+YA+YpXjGX8eO71enTV6mzZq3W3FfwXdXUdGmfYR5w
Uul1HtkVZfREoRZRp/BWoc/oHXxR6B1SU9OpHcN9wXm4X2L+cEEJJxaujz7B
EcVYhL9Hf6MGV1R/b9hw8XpbtXg8bTyt6NnB/Pzo28XFLa/yvFxcHH21sLD5
7YKCZe8HAsvifn8z/x7WSafWm6lTO9UFC1rUJUvuVI899rfqokU/VBcuvECd
O/dzfB2cxnt4jFpVNYmfX9HriRr++SsqKuTnFvOel2rPfGVlJV+j5dpzjn2g
uDjhbMN7n88HTxRy0Ol07uD7RTvPOXxvGc+GcEUJVFXNSfJG5fX+nJOW3Y8g
CIIgiMHYwuz/G/dZI6jn12mox6p8YATzIoYmzOy7R4qJ8WWvI7vmRRAEkSox
Zv3+ZQbZeyztycRYRvbzJBK2e6IEkQEozN7nKDaCWsI21yJrXgRBjIxM2gsI
YiyA32l2PkfKCGqR/czbNS+COJqQ+c/Wdu9XtFcQRtKxPsyufSVN9ciI2R4Q
BHFk7Po9aeY5VWwa2+6ETcyNIAiCIGRxD5P/uzLV/MXyrhDZxhQmfx1akT9Z
3Rgi6ziGyV+HVuRUqxszxsim/w3yoUK/mwmCIAiCIAiryNEdUb93M7be53Z/
YUIgMOdTgUD17fn5RS8VFBQcCgQCmosJjphgMKi5ZIyuKBwvKyvTvDHwNcEb
g/Ot8EUJF5TwQiVcNkUDPse4cEW53R5eRzH/eT6v8ZtqIHCTJa4o4f2Bv0nP
QO+RCH4Wrig4iuAPEp4oeKOEa6m4uFXzQ8FPBE8RfE8VFR1qaWmb5iqCC0pc
b7AIXxScRzgf36uu7lTr61dojqVx47r6nEcYV7ii4FIa3hXV3xclPFGidvQB
tePaSCjUrkWvGXUlHFfwRBn9TINFuLAwl8rKTl57jzpt2kotDQ09mssJfYFP
Cr3Myxu+9v9n70zA5KjK/X26u3qffSaTWTOZNZM9JAQFBYpFELguFwEFRXEX
/uL1ouh1bR6uXhVwAVcEQYEk08vsSyYJ2iIIohfxKoigUVkloECQSMgy9T+/
qjnTNZOZSXW6zpzume99nu+p7urqOt9ZvlOdufJe4bey3FYpcx7s7aMtHNFe
dXWfOWZoA4G5QFuHuqKs/mM+w+Fu0z8FN5TXi0iOe6kSY6FQcoz3ecxaK728
rd4ZHVGRSM+EJyoYRJjzNBYOJ/fw7z9RUdHzQHV1768WLUr9X2Xlpr+Ul9+8
u6LipgPV1Zv4euk21qwZMk46adR4y1tGjXe+s9+46KJbjbe+9SrjzDP/0zjx
xLcbGzeeYaxadRwfz1VGXd1S3qdFh9TSzFE24WlDjQtHlL3mxL1Q916vFwFX
1JO8FrtDodD5wWBwKd9jwqo3OYIgCIIgsgYeJ9l/496RRT7Hz0E+bsX5WfSL
mJkYkzdHuoP2Va8jWf0iCILIlTRzf/9yguo9lvZkYqESY+rrKZu9giDmAzKe
tUfyjNIl50HPXoIoDFTXtoiY7I4SRJ6gM7m1lM4iF9m/SVT1iyDmEyrrqZD2
CBG6w74R+YfO8muNzFU+KiLmcAwIgpgdWTWadtC2LrF92n8IgiCIhcqDTP2z
Mtf4sOujQhQa+N81q16HbsS73R4YouD4IFO/Dt2ISrcHZgFRxtTPnxtxmdsD
QxAEQRAEQSxEYl7GrvczdneYsU3ljN1aG4l8dH0kcuq7g8GmLr+/6KlwOHoA
Lhg4ooSfCQFHFBxSwhW1aJHloHHTFWX30djbnuqSgssGIVxRgUDQCIWQy1H8
3CU5u6IsR5TlGhJOIxF2ZxM8Rgi4knAUDiQ4geAXgmdIBHxL8E3B8VRT02cs
WTJgLF06aPqi6uoGTH+U8EXhXofzRYnAtXA2wXUE59KiRX3mebQnXFHwHglf
1EzOKLsryvIkJUxnEvohnE5wLNXV9Zt+KxF4j9xF3sLLNHW8xLiKMRXuJFyD
/Bsbh4yODssXhePSpUPmuFRV9ZrXWP6m6fuA93ZPlLivNTeWf6usrHfSeMEV
1dw8ZLS0DJnzgH6gLVwj5k7cq7QU3+8z84czircz5vcnDvKc9geDqVf49a8U
FaX28/kdE66ooqIemyMKr3vNo+WKsrxTgUAC99nv93f9i7/fxe//AM/hJ3wu
e+rrE4O1tTffW1f33Sebm7+1d82aG8dOPjlhvO1tI8all95ufPaz240rrhgw
PvWpm4wPfOBK401veq9x/PFnGevWHcvHbxVfXy18XmrH6zg7X5vdyWadLzmk
PlF7mqbxcfft5zX4RCgUSvJ4G7miCIIgCKKgSTL5f+d+VRb5PD0H+bgRl2fR
J2Jm0kzeHOkO2le9jmT1iyAIIldk7F+q2qU9mSAOT5qprydETHZHCSKP0Jnc
ekpnkUu+7AFu94sgCGfg+au6tkUQxEJC9vPXKbrkPGifIIjcUfm7WvZeJSN0
h30j8pMYy6/nSSHWANUKQcwdsuoz7aBtXWL7MiPmoG8EQRAEoYJipv456UZk
87/TJeYnVzH169CNWOX2wBAFx/eY+nWYazzi+qgsLE5m6ufQjdBdHheCIAiC
IAhiwQFP1EiQsXQRYwNVjG1ZyljXqmDwv08Lhc75mN/fPqBpkWdDofAB4WOC
GwpOGLyHHwqOGLii4JIRHpmpPqdcPFHCAZVx1GTub28HueA6eKrgq/H7A0Yo
VDruirr4iF1Rlsuox+YySplRVJSacEZlPFGWgwjuJziGEHhtd0bZfVHCuYRr
4FZqbMy4ouAtgj8Knif7PSY7l6ywPFaT88b1+B7yQW7IGZ4j+JX8/oTNF5Vx
Rk12RMXHP8u4ouBdshxX3eY9kRvyRM5wLCHgc0I/4FmCR8rKvfcQz5VwRAl3
Eu4pAu/xndrafqOlZdjo7NxqRmvrML/3IB+rftPFBfdVIJDph8hb5C7cVsLJ
he8gn8rKPjPE2CBwHn1pa0N7I0Z7+7A5D8gB/cR4inFHbosWoX+mS2qstLT7
AG9jH4+X+Zy+xI+7+Xi/wPv3Ymlpai///CCPMfQ544iywlpbKb4WkgcDgfgB
vz++1+fr+ifPfRefp0ei0eSdlZU9W5YsGfhGc3PyutbW65PLl3/ld0cf/cUX
Tzvt6wcvuuiHxqc+1Wd85Ssjxte/PmhcddVtxmc/+w3jve+9zDjjjLcYGza8
mvdludHQ0MT7UsPzruT9LjtiV9TU9/b6xN4QDAbhatvPj0/wfSJBriiCIAiC
KHiWMfl/5742i3wSc5CPG/HlLPpEzEyaqf2/r6heR7L6RRAEkSsy9i9V7dKe
TBCHR3UtUU0RC5U0k1tTTtEl56GqXwRBOCPG1Ne1wei/FyUWHjrLn9/Wsn+T
qOoXQcwXZNRS2mHbhbQ/0D4xf5iLdee0BuYqHxWRzRgQBDE9KutTl9i+zIg5
6BtBEARBqEBn6p+TucZ+Hl6Xx4UoPG5n6tdirrHb9VEhCpFfMvVrMdfocn1U
FhYfY+rn0I0odXtgCIIgCIIgiIWE4WEsEbA8Ud3VjKVa+D811vPjSX7/Ve8M
Bt/5Fb9/zR2aVvJ8KBQ5WFJieWLgYgqFQqYbprq62nQ0wRsTjUZNVwxeC3+M
LFfUVF+U3RWF3Lxer6Fpfpsr6pIjckUJB5NwGsE5BL+TCMsZlXFFwT1UWdlr
uoXgfoJnqKbGcibhvOVs6uZ5TXZFwUOE7+D6hoYBM4SjCA4jfA/XCa8SQniq
Jrujpu+D8EShTcsVleTjk5zwRU11Ldn9UPawXFFWn9FXOJvgboIjqrV1yGhp
sVxRS5ZYrit8XlV1qC9qtjFFnsLthP43NQ0Zy5aNGMuXbzU6OkbMtjA+GFPc
D9eiX8J/JQK5oq+4H9rCGGMOkI8I9EH4t5BfXd2A6YhatWqrsXKl1R76hP5g
PkRfxudqrKGhf39dXf8r1dW9e8rLu1/kOT9XUpLaxe/5OH/9V/76MZ7j30pL
u3fz2MvPHeC5jFl+qF7h9DrAY19xceqVYDCxx+fresHj6XqKz8NDPl/8Lt63
RFlZ91X19f0fbW/f9OG1a7/6pWOO+a/tuv6fu84++1P7P/Shq4zPfe5G4ytf
+RGP7xuf//w1xqWXftJ461svNI4/XufjtoLPUQOfi2rTE1VZaXmi3HBFTa1P
OOPG94f9kUgErqgkuaIIgiAIYl5wI5P7d+5ns8jlw5JzcStuyKJPxMykmbw5
0h20r3odyeoXQRBErsjYv1S1S3syQcxOjKmvJURadkcJIg/RWf48p9KSc6Hn
L0HkL6prWkRMdkcJIg+R+fzN5ve1LjEPlf0iiPmCylqSuU/JCt1h34j8RWdz
s1ZieZaPinA6BgRBTI+s2kw7aFuX2D7tOwRBEMRC5DKm/jmZa9zt+qgQhcg/
mPq1mGvscH1UiEID3rsDTP1azDU+4fbALDA2MfVzmGv8wfVRIQiCIAiCIBYS
8ET5GIuH+c/jKsa2tGra5qN9vp7TvN7ut2vatZ/RtEtuDQaP/W04vOil4uLS
MeGEgQ8KXii4YSorK81z8MbgvAxXlHBETfXVTHXWiFyCwaD5m9nn04xQqCxn
VxS8PpbTqHuSb0l4iPAZrhOuqKoqy6EE7xAcQ4i6Osv7VF5uOZLEfeCMwvfx
XeEgwnerq/tNrxH8RvAYCZ8SvofAa5yDA2qqNwqOpamOK1xvzxsepYwv6lBn
lN0PZf8M30H7aEe4ouCEgs8Jjigc0V+4nND/Q11RvZNcUejD1DHNjGvKbAP3
b28fMVas2Druixo+xBc12TmVHA8xTt0T+VquKOsocsJnwvcFv1db27CxZs2o
cdRR28wjnFGdnSOmC6uxEQ6vAXM+eT8PtLQMvtzcPLh7yZKBv9fW9j/J772z
srLvd/zev+Rz9/Oysr6fl5d338/nfSdv6xnexj/5/OwtLe3eX1bWfZDnsZ/3
4eXq6t6XKit7nud57/J643/h9Xg/Y13b+Jj/kI/5F4qKet9XVZU6s6Pj5lOO
O+7Kd7z2te+7Qdff9sgZZ1z48tvedsnYJZd8yrj88iuMj33sM8bFF3/EuOCC
C40zzzzT2LhxA+9Ps1FTU837XMH7DLdTWVaeqNncUVNdUcIZF4lETFcUf02u
KIIgCIKYHxzF5P+9+60Oc1kzB7m4ET0O+0PMTprJmyPdQfuq15GsfhEEQeSK
jP1LVbu0JxPE7KiuIxEx2R0liDwlzeTVVTqLPHSJeajsF0EQs4Pnr+qaFkEQ
CxGdya0rPYtcVO8BsvpFEPMBlb+p05Lapz2COBwxll/rZa7yoZohiMJCVl2m
HbStS2xfZjjpG0EQBEGo4Dam/jmZa1zr+qgQhUYbU78O3Yj/cXtgiILjaKZ+
HboRp7o9MAuMh5j6Ocw1Nrs+KgRBEARBEMR8xmOFwSPmtTxRI0F+LGUs1eT3
JzYEAj1n+P3J9wQCqc9q2rd/4Pdfdkc4fOpjJSVL9paXV45VVMA1UzHhhJnq
bbI7ZKb7LFc3TXFx8cR9hT/K7pSS4YqyvEaWb0k4jSzHUsJ0LNl9UbjWckX1
GTU1/UZDw6DpT0IIrxE+F64ofBf3g+MI5+BRgrvIciplHFHwSdk9SiKCQbs3
qnvCGWUPnBeOKbsjarqwO6Os/iVsLikrcB3axb3Rl0WLes2+wueE/iLwGj4l
eKLgvhJOJniv0C8xrrgHchN5Zdq2+ofPcD3u09w8bHqi4G0Svii4m+ClQvsZ
H5VoI+POQgiPF65B4LW41ppfq09wSGG+Vq8eNTZs2G6GcEbBVdXWNsI/Hzav
aWkZ3N/ePvTismXDT/HzjzQ1Dd5XW9v3Uz7PA3xctvCcfsjjlqqq3u7Kyr6f
VVT0PcTbfYq3/xxv55/V1b3/qqvrf4n34R9Llgw9Xlvb/zDP6T4+DjsY69rE
WPwqHv/Bx+Y8Pn8nFBX1LG9uvqbj2GM/cMLRR7/+80cd9dp7jz76+BeOP/7U
sTe84WzTD/WOd1xonHfeucZZZ73eOP7444xVq1bwMWrg41M57l1zx90m6hHn
ZnJF8aPpiuJBriiCIAiCmB/AfSTz7939WeTyN8m5uBF3ZNEfYmbSTN4c6Q7a
V72OZPWLIAgiV2TsX6rapT2ZIGYmxtTXUTZ7BEHMR3SWP88q1fsAPYMJYu5R
XcsiYrI7ShB5TJrJq610nuShsl8EUejoTG0dFdLeIEJ32Dci/5mL9ZfNM6UQ
68HtMSAIYjIq61KX2D7tOQRBEMRC5PdM/XMy13iH66NCFBrnMvXr0I34d7cH
hig4PsDUr0M3osLtgVlAlDL18+dGfNztgSEIgiAIgiDmJeN+KOGIimmMXRtk
bCDCWG8ZY1sa/f7EOniigsHUB3hcGQgkb/L7r7/d7/+vP4TDZzxfXLz0QHFx
memAQdhdTXYvlPDITD3vpi8KMV07dldUOBw2fD6foWl+IxQqPWJXFDxClkuo
Z9wVZTmM4DTyeq3Aa+E1snxPPaZvCH6juroB02XU1JRxRcFPJLxTdu9TKGR5
nUTgfvBIifaERykTyQmn0mRnlOWtQuC18EQJx9XhYjo3lP0z4YrC/UVf4YNC
f+FsqqnJOKIqK/vGnUy9kxxR07mi0CeMp8eTGVfkLPxNjY2DRkfHiOlrgi9K
BLxRbW3D5jjX1Vk5YJzhsML3hBvK/lo4okROaAOuKATOwXXV2bnVWLfOckWt
X7+dv4Yvahtvf5TnMWo6o1pbB/d2dAzv6uwc/n17+/Cdzc1DvY2N/TfU1vZf
tXhx7xX8+Gmez+d4Pl/m8cNFi/p/wo+/5+PzWG1t79MNDX1/a2oafLSlZfDB
1tahO5uahvv4uN0YDif/h7H4RxhLnsdY10mMJdYFg/3N/NyiaPRD1U1Nx61r
bFz+Hw0NzT9pbGz+e1tb+8ENG9YbJ5+sG6ef/jp+PNF49as3GqtWrTSam5v4
fFSbdeGGI2o6V9TU81NdUaFQiFxRBEEQBDE/OIXJ/5t3lcNceucgl1zjAYd9
IWYnzeTNke6gfdXrSFa/CIIgckXG/qWqXdqTCWJmYkx9HRmM/BAEkWby6iud
J3mo7BdBENOTL78DDNkdJYg8R2dy60vPkzxU9YsgCh2dqf09nZbUPu0PhBN0
NjdrJpZn+agIp2NAEMRkZNVk2kHbusT2ZYaTvhEEQRDEXDNffBTL3B4YouD4
ElO/Dt2IBrcHhig4vsfUr8Nc4xHXR2VhcRJTP4duxMluDwxBEARBEAQxb5ji
h0r4GLvez9jNIf66iLEbKhi7tZaxLa2MJY/y+bpO9/tT74UnKhRK3sxjNBj8
wf/5/Z/ZFQ6f+XIk0ngwGIwaXq/XdDAVFRWZ7hnhhrH7msR5Nx1RdjfUVE8V
fDXCWVNRUWG2D1dNIBAwgsGgEQqVHZErCs4gOIVEFBdnvEaWKypueDzxca+R
5U8Kh7t5Gz2mGwmepOpqyxcF9xCO8Cfh3nBBWfeZ7GSCG0n4ofBeeKEsL5XV
nhV2p1Lm+5ZzyvJDiRCeKHHPXEO0AVcU+gIXFDxMVVV9ZqDf8DFNdUTBt3Wo
g8saU9wXfWEsPhF4j/PwXWH8a2v7jZaWYWPZshHTEbV27aixYcM24+ijt5sO
J5xvaRkympoGjcbGAdPNZY17xh+F/OyuKCuvbtMVhXYQeI9rcS94qXDvtWsz
sWrVqOmRam0dOtjcPPTP5ubBnfA8tbQMdi1dOvy1xsb+T9bX93+goWHw7bzt
8xYv7jlv0aKBCxcv7v9kTc3AD2prB37c0NB335IlA79uahr4RUvLwI6OjuEt
PK5tbR3+dG3t0HtLS3vfrGmpExi7bR1jqRbGhmoY21TOazjC2IbSoqLazpKS
8g/yNT/Ka+CZysryA01NDTy3Fcb69euM1atXGu3tbXwcGnlfcvdEZeOKwrlI
JAJfm3BFpXiQK4ogCIIg5g8/ZXL/5v1+h3l8WnIebsRTDvtCzI7MOdIVt6+y
XwRBELkiY/9S1S7tyQQxM6priGqJICx0JrfG8iUP2jsIIr+IMfV1bDD679IJ
AqSZvBpL50keKvtFEIWMztTWUCHtCyJ0h30jCoMYy691M1f5UO0QRP6jM3n1
mFbcvsxw0jeCIAiCmGvmg4/iH66PClGIjDL1azHXeMz1USEKkXuZ+rWYa3S5
PioLi48x9XPoRpS7PTAEQRAEQRBEwTPFERXTGLs2yNhAhLFEKWObqhi7tYGx
m9oZu2Ut/6fFaxiLn+X1Ji4KBBKfDQRS3w+FksPhcPK+cPimR0OhK3ZHIm/c
H4k0jQUCEfN3KHxRcEVVVlZOOGjsrii7SwbhpjNqqrdG+GpEO8IhFQqFDL/f
bwQCubqiek23EFxI5eU9plOIjw+/t+VwEu4mvLY8SpabCdfh+/gu/FCLF/eb
3ij4k/AZvFLwTWU8UNZry/uUGHdRZe5vdyjZQ/ii7N8XeaAN4YgS4YYnCvdE
H+G7glcJ/cTYoG/T+aHscagrqsfmiprat7g5DhjvkpJu0/ME/xMcTvBCwRV1
zDE7jGOPvd3YuHGHsWbNqLF8+YjR0TFstLcPG21tQ/A5GUuXDprfg2sKc4G5
zLiiuidcUdGo5YqCAwufwzHV3DzE7zfC77vV9EatXGm10do6ONbYOPBKff3A
3+vqBn5XX98/0NAw9PWmpoHLeFsX8PNnNDT0ndDQMLKxrq53XU1N8mh+v39r
aBj82JIl/d9rbBzc3NQ0eGtLy/C329qGv9DRMfjRZcuGL1i2bPD0pqb+V1dU
9K0IBuPNvGbHHVH/G7HqGPW8OBoMBtsikeB7wuHgcCgU2MWPB0pLS3jONcaS
JUuMxsYGo6amho9ZlWveNlFjqHk42fAeTjacQzvYD9AW9gY42njs43X4BH+f
IFcUQRAEQcwrzmVy/+Y94jCP10nOw434u8O+ELMjc450xe2r7BdBEESuyNi/
VLVLezJBTE+Mqa8hRFp2RwmiQJBZk7Es8khLzIP2D4LIL1TX8JHsUQQxX9GZ
3DrLlzxU9YsgChmdqf0tnZbUvszQHfaNKBzmYh06rYm5ykdVEAThHJ2p3ZNk
tp8v+y1BEARBzBXzwUdxu+ujQhQizzD1azHX6HN9VIhCw8NjP1O/FnONT7g9
MAuMTUz9HOYaj7g+KgRBEARBEEShMsUPlfAxdr2fsZtD/HURYzdUMHZrLWO3
NDO2ZTljXes1bcvxPt+WM7ze5Hleb+ID/Phpvz/57WAw2R+JpH4Zjab+HIn8
8Llo9AuvFBWdMxaNthmhUJHh9foMv18zPTF2P8x0Xhk4Y+BxcstTg3uJ+wlf
zXRt4xp4ojwej6Fpfp536RG5ohBwH8FRtHhxn+kZghMJTiH4iyyfU3zC5wRf
k3A1wdM01aUE/xDeT/ddOJ/s3ie8nskPdThvVMY5NbPzSXw+2zUzuaIQlivK
cmLBtyTcT2LcZnJEHc4VNdWLhb6gPYw5xhDzAO8THE5wNq1fv830RcEVtW7d
NmPVKsvphM86O0dMZxTcUo2Ng6Yrqrq6b9z7ZfdZWa4ohOWKSpnncF1t7YCx
ZMmQ2V5r67AZS5cOjtXXDxyoru7dw695uqKi99eVlT1d/N6frasbeKvliBpe
3dAw2tbQcHs9v0dVbe2mqrq64Y6GhqHXNzYOfbCpafBjzc2jH25pGXxXa+vg
G3muJ/Kcj+rsHO5YuXK0saVlW3Vp6c1lvGajvIYDVk2jvk0icEXxNf6eUCg4
HAj4d/l83gNY86gT1KS9Nt1wttmdbKg73Buvw+Gw+Xl1dfWElyoSiZj1x2M/
z/OJaDSaJFcUQRAEQcw7XmBy//Zd5SCHUsk5uBG7HfSDODwy50hX3L7KfhEE
QeSCzuTsX05QvcfSnkwsJFTXj4iY7I4SRAEhq87SWeSgS8xDRhAEcWTg+au6
fqmOCWIyeF7LqjM9T/JwO2JZ9IsgChWdyamftMP2C2lPOJI9jygc8um5os9R
PirC6d5AEAS5omifIQiCIOYT88FHcbXro0IUGs1M/Tp0Iz7v9sAQBccGpn4d
uhGnuj0wC4zfM/VzmGt0uT4qBEEQBEEQRKExxREV0xi7NsjYQISxHaWM/WAR
Y1saGdvUztjmNfwn5Kt9vi2n+Hyb3uD3p97q9yffr2mpy32++Jd43KBpiYFg
MPHLSCT1l2g09Vxx8aa9paVfGystfbdRUrLGCIfLDJ9PM4STRvho4G2a6myC
V8ZNV9RUXw3aRIi2xDXIQ7ii+PiMu6LKcnJFwREFZ1Bd3YDpGoLzCT6hYHCq
8ynje4KDCY4jeJDsYf9Oti6obJ1RM3mjjtQTZf8OXFjoD3xYcCzBrTRdHG58
8V3cB2PF1+AhriiMk9+fMB1OcFJVVPSavqj6eviiBk0f1Jo1o8batduM1atH
TVfUypVwRW01li0bMd1OTU2D5vU1Nf3mXE51RdndVsgnGrUCn8MTVlNjzX19
/SA/Dpr34ef383XwEs/paf6dX/O4tays91J+/oQlS7Y1t7WNLFqyZKh80SK4
2uBti2ltbbeWNDT0t/F7HdvaOnRSc3Pv8S0tfUe3tw8t7+jY1tzZubV248Yf
VR53XF9xU1M6tGGD+T3vNHUfCQQC7XyNv5cft/LjMx6P56DP5zM9TaIOpqvL
XOvP7mlDnYn2sBfYXVHIRdM0uKKeivLBhCuK572UkSuKIAiCIOYL32dy//Z9
ocM8HpScR67xssN+ELMjc450xe2r7BdBEEQu6EzO/uUE1Xss7cnEQiHG1NdP
NnsDQSwUZNamnkUeqvcFehYThHzSTH39ImKyO0oQBYasWktnkYPM3yMq+0UQ
hYqsmnRaP/nymyGb0B32jSgsdJZf60dWbeZDOB0Dgljo6ExeHaYVty8znPSN
IAiCIOaah5j6Z2SucYHro0IUGmcz9evQjfg3tweGKDjez9SvQzeiwu2BWUCU
MPXz50Z8wu2BIQiCIAiCIAqCKX6ohI8fA4ylQ4z1FTMW5/9WuLWWH5sDgfgK
vz+xQdO6TggG468PBHrODoWS7wqHk/8vFEp9Khjs/kogkLqBX9Pt9yd/zK+/
PxhM/DUSgSeqe29paddYRcUNRlXVx43yct2IROoMr1eDA8b0QMEXI3w0wt2E
1wjhdXLDFSXuL7xQCOHAQR7RaHTiHHLCMRQK8Vy9466o0qxdUcIdVFZmuaLg
GlqyxHIO4T08QvAXCfcT/EwZx5H13u5pssI6J9xSzt1PwkPl/HviO3Zf1HT+
JziapsZMnijcx34v4YuynFEp068E15JwR8HtdLgxxnf4WpzRFYX3GDe+bs17
wtMFXxQcTrW1/aYHqq1t2PRCiejoGDHPNTcPTcwZ/E7wfOF7+D5cUbgX5nGq
MyrTB2v+Kyut71VV9fPX/fz7pi/sAO/fvyKR5DO8/7/ldbOZHy8uLU2sW7bs
ruJYzPCee27Cd+65hi9Tugkfv1dxU9NQTVNT79IVK3YsgR+qrS2+aMOGHaUr
ViSKzj33gQC+Z9X3jESCwWCb3+9/Dz8O8+Mun893EHWJWhA1Yw+3fFH2ewsf
nN0fJVxRqD2e035eh7t4ToP8+A5GriiCIAiCmE+8jsn92/eNDvPokZxHrnHA
YT+I2ZE5R7ri9lX2iyAIIhd0Jmf/coLqPTbbiDnsF0HkG1i7quuHaoggpkdW
vaWzyCEtMQ+V/SIIwkJn6mtXBEEQk5H5DNazyEP13iCrXwRRiMSY2t/RMvcl
2heIbJFVD0dSG4wVZn04DYIgDo/O1O5FMtunPYYgCIJYSJQx9c9GN6LT7YEh
Co4vMPXr0I2oc3tgiILju0z9Osw1HnF9VBYWOlM/h27EqS6PC0EQBEEQBJHf
2PxQZmiMjQQZG4gwdnMZY7dUM7alkUeH39+1VtM2HevzJU8JBLrfGAr1nF9U
1Pf+0tLuj5eW9lzJ47qSku5botFUfzjcfUcwmIQj6pFAIPkEf/1cJJJ6ubi4
+2B5ecqort5k1NV92Vi8+DyjpGSF4fdHefgPcdIIV5TwReEz+KIQbrqi4KaZ
zhWFdnBNZWWleQyHw664ouARgicIvqGlS4fMwGucw3WRSPe452iqL8oKuJpE
CNcSXk/nfBIuqKkx3XcP542azRWFfOG4gqMJnicc7YHPRAh3VMZzJe5pv1dq
4l4YD+GMgttJhBhXu5sJ44vr8X2/PzE+hof2Be2hHb5eTf8UHE9wPcH5tHhx
v9HQMGA0NQ1NzA/8UI2Ng3zdDpg+KVwDv9dUT5Q9puaV8V2Jz3vNKCuDJ8x0
hY0VFaX28n7/nY/Dw5rW3atpqct47a236lIw1fkU8zY1pUMrVqSLli3rK16z
Zlv0xBPToQ0b/tcfi6GuHREOBoOtoVDoQh7dgUDgCU3TDvDjhLtpqtfJDV+U
/R6itu01Luof9Yja43GQ5/Q8z5XvMcH/x/NexsgVRRAEQRDzib8y9f83kC9L
zMGtcPobj5gZmfOjK25fZb8IgiByQWdy9i8nqN5js42Yw34RRL6hunaohghi
ZtJM/b8ldIk5qOwXQRAWeP6qrlv6HUAQ06MzeTWXziIPmb9HVPaLIAoRWc9t
p7VTSPuBCN1h34jCZC7WZCyLfFSvd1nhdI8giIWMztTWoMz2ZQdBEARB5BMn
M/XPxlxjt+ujQhQiw0z9Wsw1HnN9VIhC5F6mfi3mGl2uj8rC4jKmfg7diEq3
B4YgCIIgCILIS+yOKI1HgLF0iLG+YsZ+xH8Tbq5jbFOL3795paZtPlrTNp0Y
CGw5IxCInxMK9byrpKT30oqKvs9UVfVdvWhR3w1VVb1JHtsrK3vvKS3t+V1x
cc/OoqLUk5FI6tlwOLWbx8vRaGp/SUlqDE6dmppeo7HxBqOh4TKjqupkIxqt
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
RGfqayMtMQfV+xmxMIixuVl3+ZbPXIfTPYUg5hOqa0qXnIPq/hEEQRCETP7E
1D8Pc40Puj4qRKHxOqZ+HboRb3B7YIiC4z1M/Tp0I+i/pzxyipj6+XMjPu/2
wBAEQRAEQRB2DJsjCn6otMaPAcbuDjPWV8zYjyoZ21zH2KYWxpIrGevaqGnx
E32+rjN9vuS5fn/qIk1LXMrjsz5f4mp+7gaPJ57ksd3jSdzDj7/zeLp28ngC
rhv+vRf8/sSecDi5t6Qktb+iovcg/EL19YNGYyPcQ8M8hkwXETxEcEfBNQQv
1Lp124yNG3cYxxyzw3RFwTW0fPmI6SNqbBww3UDw9tg9UFM9UfaA6wduKDiE
8F0EHEPCF3WoKwr3vIXHNfyz9/Hja4xotNaIRKK8zSJ+rmTC25RvrijGvs5j
kyF8UCKm8zDhPNxGcBzBdQTvEcYU4yHGCv4luKEsD1PfhIdJeLfgZsLncEvB
G9XcPGS0tQ0bnZ1bJ3xR69ZtN1as2Gp+Vl/fb94L4wznk+WLSkybo8hP+KGQ
H/xMCOSJucM8ZjxRGVcUcpvqiJrsd8rcLxpNTaylmbxR4h52PxTywtihD8hz
eu/Vlv28FnYHg/En+H0f4vn9oq6uf7SpaSC+ZMnAD2pr+79dWtr93UAgcSu/
32h5ed/9vB7+2tEx8lxHx/ArbW1bjaVLR/m4DfMxHoCja4yP9wHex1d4H/fw
MX9x7drR544/fsfTJ5xw+6OvetWOP/B6uY/X0h3t7SODy5YN33rUUdu+ceKJ
6c+ef/5dF3/0o78655pr/vDaoaGnW55//vkywzA01TvTLODvBCcEg8Gv8rW+
0+/3m64or9dr1kRVVZVZD8LtJKMGKysrzbpD3QtXFI6ov3F33D7+GbmiCIIo
BM5g7vz97t65Tpwg8oRrmby/i7//MG2fLLHtXOJrTgePmBXZ86TnQQ4yIu2g
XwRBELkga/9S2TbtycRCI8bU10c2tU8QRHbIqlfdYfu6xBzoeU0Q7qC67kTE
ZHeUIBYgeK6pfl7KykFW6Fn0jSDyCZ2p/41caPVONU9Mx1ysY6c1NVf5qIhY
FmNAEPMB1XuKLjkH1f0jCIIgCFksYuqfhW7EMW4PDFFwfIKpX4duRL3bA0MU
HN9i6tdhrvEH10dlYXECUz+HbgS57wiCIAiCINxn3A9ld0Rd72fs5hBj26KM
9ZYxtnkxYz9awtityxi7bR1jW47z+eKvCwRSb/b7UxcEg90f5K8v58f/DgQS
3woEkrf5/YlBny95h8+X+DW/9mGfr+tRfnyan/uH1xt/kce/NC2+LxCIH4hE
Ugfh2qmogM8HrptB03mDqK7uH/cM9Y17hgaNtrYho7Nz2Fi5cquxdu020xu1
ejVcUVtNBxG8UvACwd0DZ4/l++k2PT7CBwT3j+UAyriiLPdR74RTqLKydxZX
lIhb+WdX8uO5/D6d/P4ZLw2iuLjYVUeN266ow4VwMcF1BO+R8EVh3DIerkzg
vd23ZF2bMs/DHYXxra21nFFLlw4ZHR1wf42a8wgHWEfHMD8/aNTXZ3xfcDb5
/UmeQ9J0RomwO6zQnphHMTfC/yXcX2gbc4oQPivhE8P6QK7BYMq8H/oqwupz
cpKDyu4Zyzimus1cxfenOqIOdV0lcBzjdfCvsrLuJxsb+3/D1/XtGzdu23zi
iT++9vTT01ecdNKPL1+3bvt/8PH4z5qans93do5+77TT0tvOP//uB84//+d/
e8Mb7nxJ13964DWvSRvHHnv72PHH/2TfSSf9ZC8/vrRmzdbdra2Dzy5fPvLE
CSf85E9vecvPf3vuuXf94k1vunPb619/R/x1r7vj+rPOuvPL55xz56fe975f
fejyy399/tVX/+GMm27663F9fU+tuOOOZ2p/85u/RQ3D8KrepGbBdEWFw+Gv
8vW+MxgM7vN4PKYrCu4meJxEPciqwelcUfgM71H//PU+Hn/k76/RNI1cUQRB
5DOvZe79Da90jnMniHzgS0ze38UvPUzbb5TYdi5xOMcV4QzZ86TnQQ6ygiAI
QiYq9y7V+yvtycR8QXVdiIjJ7ihBLFDSTE7NpvMgB1mhZ9E3gih08PxVXXMi
CIJwH52pr1mZOciIdBZ9I4h8QuYz3WldpCXmICt0h30jFg46m5u1F8uzfKj+
CEIeOpNbS+k8yEF1/wiCIAhCFqcz9c9CN8Lv9sAQBUcXU78Oc43HXR8VohC5
m6lfi7nGZtdHZWHxUaZ+Dt0Ict8RBEEQBEG4xlQ/VFpjbCTI2PURxu4qZmxT
FWM/5L+/ftjK2C2r+D+RNzK2Rff5Np/l98fPi0S63x2Ndn+kqKj7czyu4a9v
jEZTyXA4tT0YTP0iFEo9EAoldwaDySf5+2f58YVAILHH70/s1bSu/ZqWOGh5
fuDf6TGKi/uM8nL4mTIBnw9cPwj4feBwqqnpN+rq4BrqN51CcAvBEbVixYjp
HWpuHjI9RLge/h7h7UE78PgIl484j/e4Ds4gtIM2hUsI72d2RCF6ecR5XMXj
XfzaNUZZ2aIJRxRcMTZfTF64ony+DxoeT3auKHiOhC8KzqbJ45k0wz6mcDqJ
64VjCh4mOJWEkwtzuXix5Yxqb4f3a9R0RnV2jpi+L3ikLF9U74TPSbicAoHU
xNwJRxS8T5brK+P5Qkz1RIl5FZ4ozL24L/omnFQi90wfLCcV+mo5xjKB99a6
Ek6ryX4oEVPHFu3wXPa1tg79/VWv2v4AHFDnnXf3Dy655Jdf+MQnfvORT37y
N++8+OL7zj799DvOamkZPoOP0Vve+tZ7LvvSl35/4403/vFn3/rWw/+fvfOA
b6M8//ijZVny3ntl7wkkQAFBS6Et0MEuXUA3hULpgP5LRVltaVNGaQu0JZCQ
2LLkPTKJGAFSZpghISEhCQESQvZybN3/ee78WmfjJJJ9r06Kn+/n8/ucdDrd
u98zov2y5ne/e+PjH/3oxb1XX/3ioZ/97JUDN920cs+tt76x/Ze/fPWjSy55
9v1TTlm66qSTFr/85S8/+eTVV/+v6brrXn7shhtevvf661/x4jXX//73b175
l7+suuiBB9af+8gj607z+zdPffrpzaNeffWTkldfVTIVRUnCWMzerY5Cpt1u
73FFJScnd5AnymazqWtPrBHhbzJyDVLo3tnZ2T1uKOGKouh8cR342btYv79i
/dgVxTBMPDMZjPsN78oY151h4oFbQN7v4j88RtnflFj2YPK5SDuPOSqyx8kT
B3WQFYZhGJmYuXeZvb/ynswcD3jB/HXB64Nh5OIB89etzDrISDCKtjFMomP2
ehPxym4owwxh6LkmY916oqiD2XuMzLYxTLxAz1Kz/z6Wtd/wemdijcz1NJD5
F6v6xDqR7i0Mk+h4wPy1JLsOZrePYRiGYWRxM5j/LBxsXjG8V5hEZDWYPxcH
mybDe4VJRA6A+XNxsPml4b0ytJgD5o/hYLPZ8F5hGIZhGIYZeuj8UEq3I+ol
B8DsZIBFKQANmQDzCwAerwDwjcbXU/H1qQDVXwSo+ZrVWnuFy+X/cVpa/a8y
MurvzM5u/AdmXmZmfSu+fzo9PbAyPb1udVpa3caMjMDHePwUsxuzPyWl7pDb
Heh0OmtD5PlxOMj3U6ckJ5Ovh1xR9aq/JytLO2ZmNqghtxBFnBPuKHL+FBY2
KhUVLcrw4W2qX2jYsFalrKxZ9UnRNW53Xbe7qFb18vT2+GhHOkeeH/INhcup
7ym3f0dUnZqMjFrMI/j693i8GMuciPUq7PHGiAiPk9muKIcj7IqyWOb18hgd
zWmk+aK0/rLZhEsp7FTSzmt9qv8+uZL0rijyKol+Fn1Nzqjy8hbV80XOr7Fj
25XRo9uVkSOF96tFyc9vUj1PmrurQZ0rInr3VFFRk+qXohQXa/OgoKARv6+5
ojRPlBjXuh5PlN5vJdqhxdcTba7UdnuyNGcUroUe95j+HsIRdWT/Fl1fj/Vr
Dk2fvmTv17++fMM117y0/JZbXp/zl7+svu3hh9f+eM6cdRfW1Kw/86GH3jnx
qquenVBaunDE5MlN4//0p7e+9OSTH/125crttU8//fELfv+mtQ8/vO7DBx9c
u33u3Pe2t7Z+8MGSJR+t9fvff/2229587rLLnlt4/vlP13z7288/+NvfvvbH
e+9d8+uHHlr7o0cfXX/5nDnvn+/zfXhWe/tHMxcu/Hjyk09uHfnCC5vL1qzZ
krdixSfpa9aEnIpC+0Rck4lrrJcrym6341g5YuKKEuuNXutdUaLM7vMdKSkp
7IpiGCYRGAbG/Y7XFuO6M0w8QP8OQ9Zv4985Rtk/kFj2YJITaecxR0X2OHni
oA6ywjAMIxMz9y6z91fek5njAS+Yvy4UYD8Ew8gmCHLWrieKOpi9z8hsG8Mk
KvHyd4Aiu6EMM8TxgJx1G4yiDrL+FpGVaNrGMPGCzOd6pGsi0dY6xRNh25ih
RyzmczTPm0RcX5HEG0UfMEyi4gHz9xLZdTC7fQzDMAwjCz+Y/ywcbP5jeK8w
iQb9/7bMnodGxGt0xzAJxxQwfx4akbOM7pghxhtg/hgONs2G9wrDMAzDMMzQ
oNsPJRxR5IcK2gHanQDPufCYDjAvF8BXAlA9HODxiQBzZuDxTMx5eO5Sq9V3
ld0e+LnbXXdLenrDrJychv/m5zfWFRY2LcH8r6Cg4a28vIb38vMbtuD5T/Dc
Tjy3r6Cg8SAeD+fmNnRlZ5Ofp0H1QiUn1ylOZ516JJ8TOXuicTWRI4iOmi+q
SSkra1GdUeSJIl8QeYPoHm53QHVBhR1Avh6PjwidD7uM6pTUVK0uooz+PVEB
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
OsiKJ8K2MUMbD8TXfIxVfWKdSPcahkk0vGD+2vFIroPsMAzDMIwZ1IH5z8DB
5lGjO4VJOOh/v2z2PDQiXqM7hkk4JoP589CInGV0xwwx3gDzx3CwaTW8VxiG
YRiGYRKbbj+U0u2IeskB4HMBBFMBFmYDzC0CqK7EjAWYNx3fnwYw/1x8faHV
WvMdu732p3Z74CabrfZPNpvvQYvFV2Ox1LZbrf7leO41PPeuw+Hb5HTWfpyS
EtiRmdmwJz+/8UBZWcuhkSPbOidMWBCaPHmR6oaaMmWxMmnSYmXiRO1I78kd
ddJJS5WZM8kZtRSvW6yMGdOuVFS0qA6fjAxyOWmuHuFnIk8ROXzI53M0VxR9
Rn4hzf2jeZz0Ed4j8vr09UT154rq6wmiz+ga4Ywip5AWH+ZxzB/w/l/AYxFe
b8P7WFVXDHmihCtG74sy0k9DPpr+zgsvDZWdnZ2ths4nJydjW+w9riiXayrW
9RrMA3i9T+1P4XDS+7fIh0QhP5beHyXGS+s/X7dHSRs/6nMaF5wrqh+qryuq
txuqb+p7+ZdwriklJc1KZWWrgvNNGT26vSejRrWpjqiqqlZ1PpWVhb1M5Gui
7+blaZ4oKpvaR20S80I4xMhRRvU/0thr46/5s5KTtf4Q7SM3VFFRK5a9AOuw
UBk+fCHWbaEybhx5rRap3rQZM5Yop58eVL70pWeUb3xj+eGLLlq+/stffrp+
2rRFN+fltVxkt887w+GYPzUjo6nq7LOfzZ8795N0RVGSMY5IXE4ffhhKCYVC
ZYcOhSZgpuLryeSHwgzHlGLy8B4ZGHf3PW3Hix+qDz2uKMw6nPcdYv2JdXG0
tTNQT5twstH7lJQU9f60BwhXFO0JwhlF/ip8z64ohmESBaN/0/trbKvPMKay
DOT9Pp5+jLIPSix7IOH/LpNxeEH+eHkiqIfZc0pm2xiGYQaCzP05EszeX3lP
ZhIZs9eCiFd2QxmG6YUH5KzlYBR1CEqqg6xE0zaGSRTo+Wv22hJhGCa2yFrL
ngjL90isg9ltYxizob9bzf6bWGYdZMUbYdsYhuaK7PkY6VqLVX3MSDR9wDCJ
guz1Gsm68Uiug+x4ImgjwzAMwxjNejD/GTjYXGd4rzCJxulg/jw0Iucb3TFM
wvE9MH8eGpEMg/tlKJEC5o+fEbnN6I5hGIZhGIaJIyy6o6X3eaU7+mu83X6o
oB2g3QnwnAvf49/MvjyAR8oA5o0EmD8JYO5MPHcWQM35Vqvvcqu19vt2u+8X
DofvD06n/96kpMCjDkdtg91euww/e8lm863CbLDZaj602/3bk5L8u9xu//70
9LqDOTkNh4uKmrrKy1tCI0aQs2eBMnbsImXMmIXKqFELlJEjF+CxHd8vUMaP
X6hMnLhIdeZQ6DWdJ7dPcXGTkpvboOA9VVeUcDaRg4h8ROTxIScPOYuO5ooK
O400N1TY59S/H6o/XxSVq/mieruixPm+3iCHYx6+/yfmOsyJ+Hm26oqy221Y
D7fqihGeJnqtd9QY5anpey/hoxJOHCqbfFV0pPfCFWW3O/B1BvbZNPz+tXjN
P5WCAr9SWNikRviVNK9T75BrifqbxiXsjdLGTITO0TjQ2AhXlAh5ouge5FkS
Hio60j37uqLoOvo+lUuuJ/I/4ZxTKitbVG8URfihyCVFn1P9yT9GbaDvhP1U
4bprcySgG//w2JPzisaa5g5dp9WPvkd1pnvQ/bT+KSpqxvLJVbUY10AQ5/WT
ON+DypQpTygzZz6hnHFGUDnnnKeUr399ufLd7/5Puf7615XbblujzJq1puve
e9e8d/fdq+b8/OcrrzrjjMUz8/Nbh2FZRbhes0pLZ7m83qA9EkeUgNxPoVAo
fe9epbDbDVWMycfzWXhMwzjxtXpPA/eqeKTHFZWVlbUOX3eINSKcTUavQ+GK
EutclCHWPr2n6NYnu6IYhkkk9oKxv+ltiGntGcZcXgc5v43vOka5BZLKHUz+
E3m3McfAC/LHyxNBPcyeUzLbxjAMMxBk7s+RYPb+ynsyk6jIXLsy1jrDMMbh
AfOfcTLrYHbbGCZRMHtNiXhlN5RhmM8QBDnrORgHdZCVaNrGMGYic21Fug4S
bX1TvBG2jWGIWMzxaOZkIq65SOKJog8YJhGgdS1zzQQjqINHch14X2AYhmGO
N+Lxf4s6kJxmdMcwCcf1YP48NCIlRncMk3DcD+bPw8FmleG9MrSgZ5rZY2hE
vm50xzAMwzAMw8QJOh+UcEB57QAPOfB1khZyQqnnrdpndM7nwvOpeMwGmFsE
MKcKj+MA5k0HqMa/AX3nAtRcaLXWfsdu91+TlBS42eWq+7PbXf+g211X43L5
F7pcgWedTv/rDkftWrvdtxmz1W6v3YHZi+cO4GcdeG1nenpdiFw5BQXNSnFx
i1Ja2qqUl7dhWpWyMnrfoh41p0+rUlXVpgwb1qa6oUQqKlpVtw/5fDIzNX8P
+YWEK4qO5PDRu6KEP+hYrihyTtG9RI7liRKuKFG2xVKrCFeU8EXROeGMCmcu
ZhZ+7yq8x0Q8puN1VjzasC4pqjtG748R/iaj3DRH8t3oy6LyyRVFR70ryuFI
Ul1RaWnTlLy863DMHsIxasCI8dH8S8XFmoNJH3IxkYOJHE7U9zQ+NE6ir8OO
r7ArSnimaKzJC6a5pgLqdRRyMtH46V1R+vEWzijyPpEHipxQwgtVWNjY44Yi
fxNFOKK0MjVHlJgrVA6VSXXVjznFZtP8YnQNOaGyssiXRe1tUud7aWmzMnx4
a2j8+AVd06YtUk46aZly8slPY57D18uVqVOfxCztmjlz6cEvfvGpgxdf/GzH
1Vf/r+tXv3o19Oc/v6088sj7SnPzduWJJ3YqS5d+9MnSpVuampu3/OiBB1ZP
Offcp/MKCuakALzkgN6OuIhRFMWBcW/bprqhUvB1cvc5W6TOqeMA1RWFmZWd
nb0O06F3NtHapLVglCvqWPcRfihxLR2xHh1YD3ZFMQyTKHwIxv+uNyqmLWAY
c6C/vbpAzm/jbx2j7C9IKncw+WHEPcccCy/IHy9PBPUwe07JbBvDMMxAkLk/
R4LZ+yvvyUyiYvY6EPHKbijDMP0SBDlrOhgHdZCVaNrGMPEOPX/NXlMiDMPE
Hg/IW9OeOKiD2W1jGDOJh7+Hg5LrISPeCNvGMIQH4uu5E6v6mBGGOZ6Q/XwM
RlAHj+Q6xMu+yDAMwzBG8SUw//lnRFKN7hgm4XgMzJ+Hg80mw3uFSUSWg/lz
cbCZZ3ivDC1+DuaPoRGpMLpjGIZhGIZhTKLb3yL8UBfbNA8UuaFmJwO85MY/
49MAlmQANGTiZ3isTdXcULNc2ud0fk4+QHUZ/rk8EsA/CY8n4/vPY75qtfov
dzj8P7DbA79wOgO3ud3196Wn1z+WkdHQmJVV92RmZv3L6el1q1JT6zakpAQ+
TE72b8frdiUl+fc5HL5DdnvtYYejtgvPhfC7Sloa+XfCDh3Nz6MdydeTn09e
HeHx0ULntM+1zyj0PiurXnUDkTeotyvK38sVpXmEejuiyP8jHEC9XVGaL4qc
PyLHckb1dUWRH0rvi+o/j+J1d+F3L8cyRuN9UntcUeSk6euJipUriqJ3RZEn
R7iinE4n1teGdXWorqiMjOlKScn1yogR/1HGjWvBLFDGjGlXRo1qV0aObMPz
berr0aPpnPaeXFLkkaJx1cawQR1D8j2J/qbXmiuqrtdY0XucY+rneqcXzq0e
X5TwgvXnBiPvU3Z275ATSkScE14qrUxtfog5IupJY653f+H6wDrVqfM7N5e8
WOTMaleGDVPbH5o8eVHnaac9cei88545cOmlz++/4ornOy67bEXowgtXKF/6
0vLQ6acv23/CCUs+xKw666zg65dd9ty6a699Zfvvf//GoQceWN1VU7NBWbbs
E+XNNzuUDz5QlPXr93W9996eFzds2P+7t97aNePVV3dker2KdTCbCfmgur1Q
duGHGkKOKEEmrr/Tcd7PysnJWYfpoPkvvE20NoUryog1KJxw4v5iTfa37sWe
wK4ohmESjDVg/O96N8W0BQxjDhNA3m/ji49R9q8klj3QjIy455hj4QX54+WJ
oB5mzymZbWMYhhkIMvfnSDB7f+U9mUlEZK7baOOV3FaGYfrHA+Y/52TWwey2
MUy8Y/Za4r8DGMZ8giBnXQfjoA6yEk3bGMYs4mENJNrapngjbBvDCGjOxGJu
xlt9Yp1I9x2GSQRkPx8jWS8eyXWQHU8EbWQYhmEYI/kdmP/8G2yO9d9mZYYG
r4P5c3GwaTK8V5hEZD+YPxcHmxsN75WhxaNg/hgONh8Z3SkMwzAMwzAm0e2H
8lrDfqh2J0CzW3NCzcsFqCvC1+UAgQot9NpXAjC/QMvDpXjdMDw3Dj+bDlB9
GuZL+NlFVqv/u3Z74GdJSYH/czrr/uxy1T2cllZfm5lZvzA7u+G53NyGNwoK
GtZhNuflNW7NzW3akZXVuCc9ve5gSkqgIzk50JmUVBvSfEp1Ct5DcbnIuxN2
NZGPR4T8PJq7p1HBe/e4e8gHJVxB4jviHPl7yAVFfifyBen9TfT+SK4o7V4N
qjtI+KLIQ0QRXiDxOuwHCvS4iYzwRVkss/H6O/C7F+M9q/DoVj1R5GEiPww5
msgPQ24aigxXVH/uKOGsEd4a4bKh8skVRXW02Rz4mj6frlRUXK+MHfuIMnly
K2aRMmHCAtUZNX78Any9UD03efJiZdKkRep7+ozcUcOGkTOqRXVG0ThTXwsH
lN77pHc9aeMd9kRpfa4dcZ72+l7f7/Z1hIXnU4Mu9b3mgyiP7isSLluMM9WB
ztP3GpWCghbVDzVx4iJlxoylXWedtezwBRc8c/A731mx74YbXtl1661vfHr3
3as+vuuutz7+9a9f2/qDH7zw0SWXPLfmi1988pmZM5fOP/HEJX8///xn/vHT
n77cctttb6z+17/e3V1Xt7Fr+fLtyurVB5WdOxWlq0tROjsVZffujo3793fd
HwqFzlIUJcvsDek4ITM5Ofl0nPuz8vLyVFeU8KcJj5NwORnpaxNrrr91qHdI
dV/bgfVhVxTDMInCK2D8b3svxrQFDGMOl4K838dnH6Ps+RLLHkj437Ubixfk
j5kngnqYPa9kto1hGGYgBEHe3hUJZu+vvCcziYgXzF8H0axzhmHkIGtdB6Oo
g8y/I8xuG8PEK/H0d4BXclsZhjkyMveCSPFIrIOseKJoH8OYQTz8LRyUXA8Z
8UbYNobRE4u5Hum6i1V9eH0yzMCRvUYj2S88kusgO54I2sgwDMMwRlIP5j//
Bpu5hvcKk2i4wfx5aES8RncMk3BMAvPnoRE50+iOGWIcD+67dsN7hWEYhmEY
JnZ0+6GEI8prB6hNAggmAzSmATyWAzC3CGBOFUD1WPxsCkDNiQC+k7TQ68dO
wEzVMhffz/scwPyz8fqvYr7pcPh/YLcHbnQ6/bcnJ/v/npJSNyclpb4pI6Pu
yayshpfz8hreKShoeL+kpPmjysrmT6uqWnZVVbXuLy1tPlRU1HQ4N7exi3w7
bne96odKStKiuaKEt4k8PuGEHVDCD6X39ghnU0D19tBRuICEy0lLfbfXSXNH
kddHeKI091NvZ5DwA2llNfSUTZ4qbIMa8lWRU0p4jIQv6liuKM0X5fuML4re
W60+vM6H1z+K37sD73ch3rcC48Zzdnyf1MsVlZKS0uOK0rtlZLmi9N6aI7mi
rFYb1pPqM00pL79eGTPmv8rEiW09PijyRU2cqHmipk5d3B3t9bRpi5UpUxYp
48cvVEaMaFN9Ufn5jeqYHM0VJRxONP7C16Tvb3I3CV+UNk/6zrOje6M0P1R9
z5wSTipcBz2OMBEaa6vVj2OqhVxoaWkNSmFhC/bFgtDMmUs7zzvv6Y7vfe+F
/Tfc8Oqe229/c8ff/75665w56zfV129c09i4eaXPt3H5PfesXvyrX62sv/LK
Fx6+4ILlvz/55MVXYh9dcMklz1/2hz+8cdcjj7wXbGnZvG3Fiu2hDRs6lB07
NE+U4PDhzo2hUOhBzJcxBXjKZvYGdRyguqJw/s/Kzc1dh+uww+12KxRaD3hO
XQ96t5MRfjbhhurPFaVfm90hf9W7+Bm7ohiGSQSeAjm/7+XGshEMYwK3gbzf
x393jLJXSSx7ILkn8m5jIiAI8sfME0E9zJ5XMtvGMAwzEGTuz5Fg9v7KezKT
aHjA/DUg4pXbVIZhjoHZz3DCK7EO/BxnmP6Jp3XHMIx5eCA+npVm70PRJhhF
2xjGDOJh/gcl10NGvBG2jWH0eCA289MTRZ3MXkvx0AcME6/Ifj4GI6iDR3Id
eC9gGIZhjjc2gPnPv8HmF0Z3CpNwnArmz0Mjcr7RHcMkHN8D8+ehEckwuF+G
EseL++4OozuGYRiGYRgmBnS7ocgRdbEN4CEHQLsTYE4KQEMmQF0+wGPlAHNH
Azw+BcB3MkD15zHnYb4B4L8Yz12Cry/FzzHzL8L3X7fZ1OM3rVb/VXZ73bVJ
Sf7fulz+u12uwL9TU+trU1PrFqWn1z+fkdHwRk5Ow7qCgsbNJSVN2yoqWnaO
HNm2b/z4BQcnTFjYMXbsws4RI9pC5eWtqi8nK6tJdTdprqiAGuFvCrubwg4f
4YrSu5vC/p6wu4e+L+6hfU+7PiurUcnOblRf03nh+xE+KXIA9eeKCvuhGpX8
/CalqKhZKSlpVkpLtWNRUZOSl9eo1kXzUB3ZF0X+IPIVCX+RcEWJaI4o4TTy
Y388hrkD23Ux1m0E3j9d9URRyA+Tk5PTyxUl3E2yXVF93wtXFJVPdbNYLBgr
tpn8VVOxj36uDB/+H2Xs2BZl3LgFasaObVeD80N1R2neqIWqJ+rEE5eoIV/U
6NHtSnl5i4LzSu1jrX/96lyh8RauKPpMzAuaD263cDaJvtZCY6D17We9YvQ9
/ZzTRziiyC0mfFVUD4ejtmdMw+ntiaLXWFYI507XhAkLDp999lMHv/e9F/be
fPPru+65Z/X2xx9/78Pm5k0bgsGP3n722a0vvvDC9sUvvrj98Sef/Pie6uoN
t9x11+qfXX/9q1d861svnj1jxtJJBQUNlRde+L/xs2e/9+2lS7c8/sorn2x4
773dnZ9+2qns2dPZ1dHRdfDw4a49XV1dmzFPhUKhuzDnYIoVRUnCWMzerBIc
1RWFa24Wzvl1eOxwOBzq3Kc1kZeXp3rcjPBE6f1Q/XmjjuCJovXY44rCup5G
dTa70xiGYY5CK8j5fe/7sWwEw5iAzP+e0teOUm66xHIHmnOj6jnmWARB/ph5
IqiH2fNqoPFG0DaGYZiBIHN/jgSz91fek5lEg+af2WsgmjXOMIw8PCBvfXvi
oA6yEoywbQwTr5i9hkS8shvKMMwxoWea2c9KWXWQGU8U7WOYWBMPfwcn4rqO
Zt9iGD1eiM0cjRRPjOrDa5Rhokf28zGSdeKRXAfZ8UbQRoZhGIYxikIw/9ln
RM40umOYhONnYP48NCIlRncMk3DcD+bPw8FmleG9MrT4HJg/hkbkQqM7hmEY
hmEYRhIWUN1Qwg8VtAPUJgH4XACNaQAP5QLMLwaYNwyP4+32mhPxszMA5n4F
oOZiAP938f01mF9h/s9qne+1Wmsw1b/H/NZun//rpKQaTOD/XK66u9zu+gfS
0+vnpKfXNWOezMyseyUrq251Tk7D+7m5DR8VFTV9Wl7eunvYsNYDY8a0H5o4
ceHhqVMXd5H/Z9Kkxcro0QuVioo2paioRXU3kVtJ8+1o/h5yLJGHRziA+rqi
wr4oLWFXFHl8NFeT8D/RZzk5mt+psLAZ06QUFGheJ6yv+n29B6ivG0hzRWn+
IfJEkauI3FDkLaqsbFVTUdGK75uV4uJm9Rr6DrmEyEPUnyuqry9KOKMowhFF
11CfaH0wB3MX3vcyJTt7LNYnB++d3MsVRV4Y8kSlpaV9xhcjwxXVnzuKQm4c
ek91A5qQ3a4ot3sK9vm1SlnZQ8rw4U3KiBFtaoYPb1VwnuBRez9qVJvqjiJn
1LRpi5Tp02nOLFTPk5eLxo3mAs0Pba74e5xgNH7kiCIXGI05jRvNAfI5JSVp
fdvXxyXuQddQX+u9Ufp5JxxRwgOmH9uw98vX46KyWPzd0cq02Xwh/F4nzp9D
2J4D55//zJ6f/ezlHXffvWrr44+v39TevuXd557b9trKlZ8+t2rVrgVr1uyu
Xr9+770bNuz95Zo1e765bNn2c+bM2XDKHXe8OeWGG94cMX16M67pa51nnBFM
Xbbswxn4nVs3bdq7/NNPD27Zt6/j446OznWHD3e+3NnZtayrq6s2FAr9FfMD
zKmYIoyTXVGDRnVFud3uWSkpKeucTmcH+dFsNpu6LoUryqg1JpxQfdf10VxR
eK4D94R3cW8gVxT9czq7ohiGiWeqQc7vewti2QiGMYHVIO/38ZFHKdcjsdyB
5CDGGk3HMcckCPLHzRNBPcyeWwONN4K2MQzDDASZe5fZ5fOezByPmD3/eR0w
THwRBDlrPBgHdZAZTxTtY5h4gp6/Zq8fXkcMEz94wPw1LrMOshKMsG0ME2s8
EB9zPyi5HryumXgjFnM+mjnqjUF9zIg3ij5gmHgkHvYJTwzqwfsAwzAMc7zw
FTD/2WdEMozuGCbheATMn4eDzSbDe4VJRJ4B8+fiYDPP8F4ZWlwH5o+hEaky
umMYhmEYhmEMpo8j6iEHwOxkgEUp+CdtFsD8AoDacgDfaIDHp2BOtdl8Z9ts
NV+zWmuvwPM/Bqj5NR7vwPwdM9tiqZmPqbFYqqvxurl2e83s5GTfv10u/3/I
D5WZWV+PWYJ5Pju7/s2cnIZ1ubn1H+TnN2wrKmraWVratK+8vOXg8OFtHWPG
LOicMGFBiPxQkycvUTNu3CJlxIh2paysRXU2kYOJ/Dvk3dEcSZq/h9w9mgMo
0MvZczRflD7C70RuIayXUlraopZJR3I9FRU1q/4ocgrRdeQYEs6pvqHzdA25
pfLzG5Xi4ialoqJFqarSHEfkO6LX5I8iF5VoE9VfOLCO5IsSbqiwI0q0X/Mf
UdnZ2fMwf8Jcju0Zj8c8vLcb7+3s5YoiTxT5YrKysqQ6ovRumv5cUXQUrigA
K7YrDes7Da/7Gfbfg9j/Dd1j0ayOBYU8W2VlzT39OnJkG86VBaozauzYBapP
ivqdxoDmA80P0Y+aW0y4wRq63WCN6tjTWGi+qIDat5rPqbcvSt/vmjeqt6eM
jhTyf2ljGug1fnQvXDu61HbHF8K11GW3+w7j+jmYl9ewD9u06+yzg9uvuebF
LbNmvb2+tnbj20899fELK1duX7Zmza6GTZv2z/7wwwP3bt160LtzZ8dPdu8+
+LVduzpmbt0aGvXGG/vLmpo+KrjhhjezR4y4zyk2gS1bdufhdRfu33/4/gMH
Ots6Orrau7q6qjEPhEKh2zA3YL6DOQczAZPHrihDUF1RLpdrltvtVl1RVqtV
oZC3jdYlrUWZrihxTu+KojIpdA7rhXPP9W5KSsrdWKdT8Rp2RTEME888DPJ+
4+NnHnO8kgPy1s2+Y5R9p8SyB5KmyLuNiZBYjJsnTuohI94I2sYwDDMQZO5d
ZpfPezJzvEFzz+z5z+uAYeILD8hb5544qIOsBCNsG8PEG2avHX0YhokP4uFZ
GZRYD1nxRNE+hokVHoiPv4ETcU1Hs2cxTF88EJt56o2iTom4DiOJJ4o+YJh4
Ix6eZZ4Y1CNe9kGGYRiGGSy3gPnPvsHmHcN7hUlEXgXz5+Jgw/9bbIag/w+B
2XNxsLnR8F4ZWjwK5o/hYLPV6E5hGIZhGIYxCJ0fSrECeO0AtUkAPhdAezrA
Yzn451gJQPVwgJoJAPNOwtcegPlfweOlVmvtlVar/zqr1fd7i6Xmb3juEfxu
wGLxLcb3z1ks1S/i6xfw8+cdDt/ypCTf0263/8m0tMDTWVn1K7Kz61/Lyalf
k5dXv7GgoOGjwsKmT0tKWnaXlTUfqKhoPVRZ2Xp4+PC2LvJBjRq1QBk9eiEe
tYwcSc6fdtWpRP4mcvmQC4kcPOTeIe8ORe+L0jt7ju6LaujxOeXmap6ggoKw
J4ocRFg39UieIs0X1aQ6heg7whUl0tcXJdxTdC3dlzxHlZUtqsOIQn4j4b+i
e+ldUdSWI/mi+oaudbn8apvDrqsavO/dWNcr8P04JTs7X3VFJScnqz4Y4WcS
Hhn9+75Op4FG+Gn0bhr9vUW5ubm56mvyWIH6d7UV25WJdZ2BfXIdXvsv7MMA
toPGSUQbLxoLcm1RaHxovEaMaFN9XDRnqN9pHMgfRv0Uni+aL4rmEY0d3Y9c
YOSWontq3wn7ooQrSu+MovR1lYm5RxHjSffQvGZ+/I7qg+pOjf51CNOF6cD7
HsDr92Rl1e2oqmreesopSzZddtmza2655bWVs2evfXbJkg/aX311x/y1a/f8
c8uWA3dt397xm337On966FDo24cPh85TlNBJoVBoOCYfk/7ccxtdXu+bSdr6
11AUxYafjQuFOq/o6Oi8GfO7zs5O8kNdjbkU8xXMaZhJeG05JgPjYFfUoMm0
2+09rihcjx02mw3nhh3nS0ovp5NRrii9D+porihai+Srcjgch7E+72Id/4qf
ncauKIZh4pxZIO93vq/FsB0ME0suBnnr5oVjlP2ixLIHkmsi7zYmQmIxbp44
qYeMeCNoG8MwzECQuXeZXT7vyczxhtlzP9r1zTCMfDwgb50Ho6hHUGI9ZMUT
RfsYJh6gv0HNXjciXsltZRgmcmQ+gz0R1sEjsQ6yEoywbQwTSzwQH/Ne5r5i
dtsY5kh4ITZz1RNhfTwxqg+vVYaJnHhYH54Y1ENmvBG0kWEYhmGMogHMf/YN
NtWG9wqTaCSB+fPQiNxqcL8wicdEMH8eGpEzje6YIcbrYP4YDjYLDe8VhmEY
hmGYwdHth/JaAWptAA85AGYnAyxKAWjNAphfAPB4BZ4bA/DYVICaUwGqv4jn
v47XX4GvfwLg+43FUnunxeL7p8VSMx+P7ZjlFkv1Sny/GrMBs8lq9W202Xwb
HI7a9S5X7frUVP/6jIy6Dbm59Rvz8xs+LCxs/KSkpHlneXnL3oqKloOVla0d
w4a1dQ4b1hqqqmpXKivblYoK8vu0KWVlrUpJieZmKi7WQj4lcgQJh4/w/ghv
j3D2kGeJ/DzkBurrihK+KM3hVK9kZ2vOofx8zTVEHigqi5xOwhM1EFdUWpoW
fZlUFn2P7kEOIwqVQ+XSveg68gwJT1SkrijNURRQ+4TqQ/4kakNZmQ/L+gu+
/ya2dTTeP1v1RJGPKS0trccNpXfF0JE+i4UrSnxG5ZIriuojXFE2WxLWtQjH
8fN4vAn75d8Kzid1PHFO9fJ8Ub+KUD9Sf5Lni8aLvE90jr5HHieaI+Rqoghf
FPUdfU5zS4wNjQt5qagccj7pv9vXGaXNv7CvjO5H/ikaDwqNadgVVavO1bAf
ir4v7lnTabXWHMTP9+I62oFz+EMcy/Xjxy986+yzgy9cddX/nrjrrrfqA4H3
/7tixSez1q7dfcvWrQev27tX+d7hw4cvCoVCX1IUxYOZjq9HYvIUJZSC7+1H
8jvh+cxDh5QpeO0XMedhzqV74HEGZmK3b6qIrsOjE4/WGO9fxyPkijoD5/rf
XC7XOjx2kCcqKSlJdUUZ5Yjqby3254rSu+KEKwrr02G1WsljdW9+fv7n2RXF
MEyccyvI+51vbuyawTAx5V8gb93MPkq5JRLLHWiqouo5JhJiMW6eOKmHjAQj
aBvDMMxAkLl3mV0+78nM8YQXzJ/7Il7JbWUYJjrouWTms5zwSKwDP88ZRkPm
Wpe1NzAMIx8PxMez0ux9aSDxRNE+hokFHoiPv3/j6W8OGfsVwxyJWMz9aOaq
Nwb1MSPeKPqAYeKJeNgfPDGoh9ltZBiGYRijeB/Mf/YNNr8yvFeYRGMmmD8P
jcgFRncMk3B8F8yfh0Ykw+iOGUK4wfzxMyJ/NLpjGIZhGIZhBkC3H0o4orx2
gNokAJ8LoD0dYF4uwKMlANXDAR6fiO9PwuOZmPPw3KV43VUANddjvPj6HovF
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
+Ji1hmHksx3krZWbj1KuX2K5A8l3o+s2JkI8EJvx80RQF7Pn2EATjKBtDMMw
0eIFuXtXJJi9v/KezMQ7stepjHXNMIw5yFz7ngjr4JFcD97bmKGI2etDH6/k
tjIMM3A8IG/tB6OoR1BiPWTFE0X7GEYm9JyVOdcjXcuJuI6VCNvGMJHigfh6
BsWqPrx2GaZ/vCB/LQQjqIcnBvXgNc8wDMMcD9B/B9jsZ95gc7T/vS0zNDgB
zJ+HRuQCozuGSTi+A+bPQyOSbnTHDCFcYP74GZE/G90xDMMwDMMwGno/VK0N
j0kAPvwbKpgK8O9sgLlFAA2VeG4cfj4doPo0gPnnAsy7EKAG/972XYPHm/Gz
P1ksNQ9ZLLU+zEKHw/ec0+l/PTm5dm1ysn9zcnJgK2aHyxXYg+8PJCXVHsZ0
ORz+kMNBjhxKnXq02wMKOaM0Z07YE0WeHPIWkVNHc/kIF1RdjwtKRO+JItcP
5ViuKHqvj3BFCV+PcEXRd/u6okQZIuRUEr4ofTIyGnrq0p8jitpG0eoY6OWH
0telf0dU2O0k6peSooVei/vq3VOf9UT1dmVpbizNTxRuL/XrXHx9F97zom5X
lFP9u1W4osjN1NcVRZ4Yma4o4a3Ru6Iooi4uVwrWMx3rexL2yS+wTf/C9zWq
I+porijhyCJXVFFRk1JerjmiRo5sU0aNalOGD29VysqaVScY9TX1r94xFvZF
ac4t7V6a44y8W5mZ2hwWrij9WIejOdOsVpoXNGfou5p7rKCgMVRc3NxZXNx0
qLCwaX9hYeOegoL6HVVVzR+efPLidd/85opXbr75tYV/+9uqhx9/fMNv2to+
vPTpp7ec8eqr28e/8cb2ss2bd+W8+aaSGgqFnIqi2NkPldCQ+z3N5XLNxNye
lJS0HNfkTrvdHhJrwQhHlH7NibVIXjaxHqkcclLRe9oP+rqiLBYLzndXB9Zp
XXJy8r1Y5zMx2Sb3HcMwTH9MA/m/+f02Zq1hGLlcDHLXymlHKDdLcrnRphOT
Gm3nMRHhhdiMoSeCupg9zwYThmEYo5G9P0eC2Xsr78lMvBME8+e7iFdyWxmG
GRwy94tgFPUwe68aSDxRtI9hYgk9e81eH/owDBO/eCA+1r/seshIMIr2MYxM
aC7Gw1yXXQ9Z8UTYPoaJFC/E1zMoFvUxI9H0AcOYRbzsB54Y1EN2GIZhEgn6
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
UuT40buEIvFEHckRRfcS5YQdUZpP6GieKO1zzeWk91dR/+TlNaguo6qqFmXE
iFZl1Kg2ZeTINnzfqvqN6LPCwia1/8kZRd9JTdXapPdFaZ6o2p66aM4ofZmP
Yt3vxO9donNF2cj/ovqZyBOTlZWl+mjID0OvhVMmVq4o4a8R5WdmUoqwj05X
iot/g/PwP9gPdfiZ6AdtLlL0/jEx12i+kmuroKAJv6/5oqqq2nButykVFS1K
fn4jXhdQ54wYxyONn/CPaQ4yf080T1RA9URprijND4XpwnV6GI8H8LjXYqne
abf7tuH8+cDt9q/D+r6ekVG3Asd/cVlZk3/s2PZ/n3rq4ruvuOLZm26//fUf
+XzvXfLyyzs+//HHhyaHQqFSRVEyMEnsiTpuSUtOTj4F5/9duC7ewRxKSUkJ
ud3unjUp/G2DXYN6B5xYayJizdOR1iVd43A4VKec3W7vxNfvY/7BriiGYeKY
FIjNb38/ilWDGEYSPwW5a+TCI5Q7VXK50ebtqHuOiQYvxGYcPRHUxey5Npgw
DMMYTRDM37fM3lt5T2biGbPnuT5eyW1lGMYYZD7bg3FSj3hoH8PEAnr2mr0u
9GEYJv7xgNx9wBMn9TC7fQwjC/p7VOYcD8ZJPXgNM4mGF+JrDntiVJ9YJ9I9
imHMIBb7QCRrwBODesgOwzCMmbgw38W0gzl74GbMPZiTZTd0iENuGrOfd4NN
veG9wiQiHWD+XBxsbjW6U5iEYwKYPw+NiMfgfhlqrATzx3CwWWp4rzAMwzAM
MxTo9kN5rQC1NoCHHACzkwEa0wB82QD/KcZjFcD88ZgT7PZ5Z9hs1V9KSvJd
5HTWfi8lpe7a1NTG/0tNrf+Ly1X/b6fT709Kql1ktfqft1pr3rRYatZhNtts
Ndvw/E63278vI6PuYF5eY0dpaUtnVVVraMyYhcrEiYuVKVOWKJMmLVbGjVuo
kDeKvDpFRU1KdrbmcOrriqLX5FXSfD31qtMoK6sBr29QvT6ZmQ3qOXL3HMvV
dHRXVNgRJaJ3RYV9UZ/1RIm6Hbm8ozmiovdDaY6h2h5HFEV4hqhu1C7qG+rX
ykrNETV2bLsyfvwCHIOFeFyojBmzQO1/8kbhGKnOI3IfUV9S/9A96F6iXlRW
f54jqq/N9ii2IeyKcrs1BwyFXFGamykzJq6oozmk9K4oLUXY7jOU8vKbcB4+
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
3ZEHHI7mzYw1P8fzCs+OgoLIG05n5G2XK7rP44ke9Hpjh3lSwsUEN5TbHZdd
LkR1E8F7BE+OcDPBtwS/UEWF+qj6d9SUlrYox8D9pHp4EkfOO9QThddaVxS8
TPgOAmdRusNn8HuDvigch2uhjpqaNsUTxfuhuJDgSpo1C+mVGxt75KlTu+X6
+i7Fj4TjMRb1/LGB4LW2Fq0rCnWiDt43xR2U7ohC8B4+R32oDV4h9AP9Qo/w
WoxNeKFQP45BH+HhgvcJj3hdXIxj4wPX1jq2tLXCx4Vr4HvwdE2c2KG4oNAH
jH/OnDWKJ2rePDVz5vQq/Zk2rVtxaU2a1Km4ptTrqtcWNRcV/YNf6+c85yqu
qMLCYv48qHiZtL4mrSPKaGeUcNDACQUvzXCuKDz3+/2Km8bvhyenih93En//
m/yYlfwxfsQPJZI4cm/jQ+5tQUF0yD3FvUa/MQcwv6ur0dtuecYM9LFPXrx4
nbxs2boUz+ElS/oO8v7umzmz++2pUzvfaGjo+O+kSW1b+Zx7jvf3CZ4Nkya1
/7OhobOVz82/LFvW/6vTTkv+38c/vv6rl1zy4KfD4SfO+vWvn37/TTe98M7m
5i2Le3qen33HHVun9Pdvr33iiTfKN29OFcqy7ONxCz+U3ZsTYTuKK4qvxysD
gcBmnv08KR5LXFF4HM4VheuSK4ogiDzkP8y6vwNeZ9GYCMIIPs/MXQ8Pj3Dd
i02+bqaBT86RafOIUWHVPZVyqBYzEtYxPoIgCL1IzPx9Sw927620JxO5ht1z
ezTrmCCI3ENi5u4NyQxqSZpcC/2sJ8YSmHd2z31aBwQxNjD756+ksw7J5DrM
SlLn+AjCKCSWO/Pa7P3D7vERhBFYtU4knfWELaqH1jUxXsmV+S5ZVIuZCesY
J0EQRCZ8kdm/t5mZ641r1Zinjtl/v4wI+XWITzH756ERmWR0Y4i849fM/nmY
bZ4wvCvji3cw+++hETnf6MYQBEEQBJHvaP1QUSd/dPFHD2M3Bxm7taK4OD61
rq5t6fTp3R9qaur58sKFa65evLh/9ezZvesmTmx/uLg48ZTPF33J7Y685nRG
Xi8oaH6Tsea9/PGAw9F8yOmMplQXlOqHEoEnCj4ifAZ3DiLcTnAgwasDT5EI
XiPiM+1rrd9IPZ8a7fnS/UzDuaLcbtXPhKAe4YvCMVpX1OTJHfLUqV1yY2O3
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
FSIf+Sezfy5mmw7Du0LkI28w++ditvmG4V0ZX9zE7L+H2eYtw7tCEARBEITd
aPxQSlyMRT2MRfyMtRXyx7JAIDGhuDgypaambXZdXdvShoa2UyZN6vpAZWXH
2YFA2wVeb/wSlyv2g4KCyFX8+JU8zfz5Gocjut7lijzm8USfCQTiLxcVxXeU
lLTurqho3TdhQvuh+vqO1MyZPYofauHCfp4+ee7cNTLeg2sIjiN4htL9RsKT
BK+Rz6c6l+BCgpcIXiF8D24huIREJkyAUwhuoy7FbTRjRo8SuIWmTetWfEzw
D+E8cCXBFyU8T8IVpXUqCUcTnEbCFTXoUOrg12xTPsN5hJNJ65nS+qJEcDzG
oPqshANJOJ86FP8UjsO1tf4pXAPvwyWF7wrXFL6H51VVbXJp6VBXlBib1oWF
11r3VFnZ0D5qPU04p+gzroG+oo/wRE2Z0qU4pFA/jofvCefDvRyakV1RWmcU
vo+xoTd4FBnufqOWyZNx/QSv43f89YX8PDN5r1VnU7rTSThljPJEaV1RWl9U
up8G73s8Ht7/An4v3BpX1Ff5/LqBP8d9wr2Oi/lyOBSKH+Dzcy8f91uVla27
qqpatvP+buFz7z98fjw2eXLHfTNmdPXPn98bW7583R8/+MHbr/74x++59Mtf
fuBLP/rRo5/41a+ePvOmm154byz2/Dv6+rYtvPvuN2Y+9NDO+k2bttW8+OKu
sm3b5FAqlfLKsuzicZAfijAB/rOFVfv9/jN4/urz+Z5yuVz73W63sj6xNrJ1
RWnXNc4ZDAaV5xUVFUM8ccIfle6K4mvykNPpfIHn916vl1xRBEHkMt9l9vxt
MGDF4AgiA+AwM3vefyjtmlU8Oy24bqZpGl0LiSwIM+vur6SjHrvnYLYhCIIw
ilzZs+zeV83+uUMQx8PueUxzmyDGPkmWO/tG2IJazEpY5xgJIhNycU3QXCeI
sYXEzN83khnUY/cel00IwkysmMN612rSonrMSFjnGAnCDCRm3VyXdNaUz+uZ
1jqRK2C+WTGvkzpqkSyqxewQBEFkwmyet5n9e1eu5v+NvrVjim5m/73INmsM
7wqRj+xi9s/FbHOZ0U0h8o5ZzP55aERONbox44xHmP33MNvcZXhXCIIgCIKw
gyN+KOGIijoZW+lm7K8+xm4OMtZawh+rfL7VdR7P6saSksSCqqqWFbW18fc2
NLSf2dTUe15TU8/np0zp/lZlZcflhYUtv/V4Ejc7HJF2xiJJnocKCpo3O52R
593u2FavN/Zfvz/xRiiU2FNc3HKgrKz1UFVVa6q2tl1xDDU29sj8nErgb4Jr
CF4neIDgE4IPCr4c+I3gaRrOFQUXEpxB8AWpnqVOxf8kUl/fJU+d2s2vobqp
Fi/uV7JoUb88b16fUgOOg49J9VPFB5xMWp+ScCqpjqa4Ul95uXBFDV4PY4PL
CD4o1ItzCM+UtnZ8HgyqriicC64qjHtwHGpU51O74k/Cd0VdwluF8+C7qrdK
PR5BXXgPzqVgMD7EFSXqGhxXRHEUqT1FLa2KLwrjQ+BngrcJ7+NaalRfE2pV
+6wGz1E3xoHPcX9Qg3BA6fFEaX1RiHpd7bW176n+KFyruhrXjfKaruPPP8s/
m8XHU6L4YIQnRuuUEV4Zo5xRWlcUku6KgpsG14Qfh69Ffh9ciivK7T6B56u8
/zco94r3KMXHf4ivv/18rG9XVrburq1t3VlX1/Eq7/ELPP/ma+Wh6dO775g9
u7tj8eK+m9/1rtuuO/PMO35y4YX3feNb33r4wiuvfPzcG2545oM33fTsqbHY
K0tvu23rnLvv3jbtvvt2TLrzzt2VO3akilKplF+WZTePE34ockQRJsJ/3rAg
n/sLA4HApX6//zafz/df/jwlXG5GutvEusN6g4dK+KO07+ERPimtK4o/J1cU
QRD5wJeYPX8bPM+KwRGETi5i5s/524a5bi7+NyGuHUX/iOxJMuvusaSjHrvn
YbYhCIIwAonlzp5l975q9s8dgjgWYWb/PKbfNwhi7CMx8/eNZA7VQvsjkU9g
7dg9r9MTNnXEBEHYgRV7TS7VQvsjkY9YMYeTOmvJ53Wqd4wEYRb4WZFrc93u
dWlWpAx6QBDZgPWWK+tasqgWs0MQBJEJ65n9+1YuZwdP/ai7O3bYyuy/F9nm
54Z3hcg3ZjL756EROcPoxhB5x/nM/nloRAqNbsw4wsvsv39G5DqjG0MQBEEQ
hJVo/VAyT9jFWNTDWMTPWBv/Xa+lnLFVtV7vrVM9nshslyu2NBSKnFpa2vLB
mpqWc+rr2z/d1NR9yZw5a364aNG6q+fO7V9ZX98drahoXxMKxe/1emOPOZ3R
ZwoKml92OJq3u1zRXR5P/E2fL7ovEIgf4MccFs4fOIgqK9sVr1FdnepyEo4h
OI6qq9vl0tI2xVmkdUWJuN2qbwm+pkAgobiE4AlSnU2qtwgeKgTuKXii4IOa
N2+NvHRpv7xixTolJ564VnFGzZ27hh/Txa+repXgXsL54VOCl0nrihrqaEoo
/iQ4kbSuKNRQVdWmeKdU55T6PTweyxeFa8N5hDqEKwr9wblrajqUa/n9g/4p
4a3CeXAtfBduKHilcH30BE4lnBvf4/doiCtK68LCo3BgYVzCX6X1O+E9bVS/
VeuAowo1C08VnqMv+KysTHU7aX1Ro4nwRo30mZhbZWXNfOy/5vkM79kc/lm5
4ocZzhWl9ToZ5agZzleD57heRUWF8ujxeJTfsYUryudbejgY/MrBioob90+c
2LqPz909PG/W13fsamho3z5lSueWxsbu/8ye3fPYvHm99y1a1N+3bNnaqCTd
tvKMM+74xfnnr//+l7/8wJd+/ONHz//1rzef8ec/P/+eSOTlFV1dLy+87baX
Z65fv7P+/vu31bzwwq7STZvkkCzLHh4Xj4P8UITFVPn9/o/y/ImvjWf52jgI
l1sgEFDWqHY9al1r2rU0nJdNHI9ziPPAByU8UeIzHCfex3NeB1+HTmU9kiuK
IIg84hPMnr8NNlsxOILQQRWz5v8W/q60655rwTUzzW5Gv7PYRZJZd58lHfXY
PRezDUEQhBFILHf2LLv3VbN/7hDEsQgz++dxesKmjpggCLvIlZ/7IGlRPbRH
ErlOLv4ekMlaJggif7Biv5F01iJZUAvtkUQ+YsX8TeqsJWlRPXaOkSDMxKo1
pHe+SxbVQ+udGKvk0pqWLKrF7BAEQejld8z+PSsf0jvaBo8RGpj998CInGNw
X4j8A/+NarvnoRGZZHRjiLwD/01nu+dhtnnc8K6ML1Yw+++hEfmU0Y0hCIIg
CMJ0jvihhCMq6mRspZuxHi9jfUHGWksYS1T5fNHJHk9Lo9udWODzrX6H1xt/
r98fOzMYjH+8tLT187W1Hd+eMqXn8qamvt8uXrz25hNPXNtxwglrb581a81D
kyZ1/ruiovWF4uLEqz5f4r9ud2y3yxXb4/FE9nu9kUP8PCl+niPeIbiY4C9q
U1xQ5eVtR9xG6X6jVsUTBb8RnErwGwnHkXBFiffgNoK3CJ4knAPOIriKhDMK
Dip4oGbO7FGcUHBD8dqVLFnSLy9a1Kc4pGbM6Obfa1e8Rjifz6eeX3iZtL4o
1dGkup7gKYL3Cm4keJ1wzbq6DsVbJdxOqBnf0Qbfh7sJn8PNBF/UUPdSuzIO
4YrC+dEb1Kb6p9TzoD70CM4p1IJrIjgP/Ek4Hp9hPKKXwhWl+qJUT5TWgYW6
MDbUlh6ca7DeQb+VcFTBDyUC5xWfG7we1RVlhC9K667SZtAlhXGv5te6ltf1
aZ55/PqVw7qihnPNmOmKgpumsrLyKFeU11tyOBQ6Yd+kSd98Y+HCv+046aT+
1975ztu2rVix9pWlS9c+t3Bh32aeh5YuXXPHO9+5rv2005J/P/PMO39z/vn3
XnbxxQ9+/Yc/fPQz11yz+f/deONzH/jHP549JRZ7YWlv79Y5d9+9bdo99+yY
+OCDuyueeipVJMuyj8fN44QfihxRhE0EXC7XimAw+BO+JjbytbeHP0/5fD4Z
zqj09ZipKwrnQISfTTjhtHuA1hUHRxVcUQUFBXw/dJAriiCIfOFMZs/fBg9a
MTiC0EELM3++r0q7ZjXPqxZcN9N8b3QtJAwgyay7z5KOeuyei1aMkSAI4niE
mTV7lh7s3ldpTybsQmL2z2Ga1wQxfkiy3Nk/JAtqMTMEYRRhZv98Tk/Y1BET
BGEXEjN//0hmUE/SgnponyTyCYlZM3/1rtN8XqOZ7EUEYSa59nMpbGFNtOaJ
sQbmWa7MZ8miWsyOpGOsBEEQpzH796t8yiWja/OY4Cxmf/+NyHSjG0PkHVcz
++dhtnnZ8K4Q+UiS2T8Xs80thndlfPFlZv89NCLzjG4MQRAEQRBmofVDyTxh
F2NRD//V1MdYWyFjfy/nj7Veb3yq2x2b43IlTvD5Wk4NBOL/4/e3nBMItH46
GEx8pago/qOKipZf1tZ2/qmhoSs2e3Zv35Ila+9dsaJ/0/Ll/f9ZsGDNlhkz
erZPmtSxq6am/a3S0sS+YDB+0OeLHVZdQ/AUtcjBINxPrXJhYetRzh/V7yMc
QokjbqOE4oDSeqIGo7qi4FpC8B6uJTxL8BbBqQR3UXU1HE7tiruJ1y9Pm9Yl
Nzb2yE1NvUpmzeqV+Zj4Y488fbrqiiovb1UcSIOeqkGnknBFCa8SPlc9VW2K
GwlOJ7iiELiq4L7CGFGf8DMJv9PIrqgWpQacTziv4IvCc4wHfcL5hMNK9U5F
lXPB44TaRXBOnB/H4/NBV1RsSD3CFYUxqrUN9XEh+C6C+yJqxtgxPvQdfirh
/hKBJwpjMcsVNfxnmGOreH7Jr/cpxRVVVlatOGKCwaDyaJYXKt0NpQ2uCVdU
RUWF8ly4ohwOJ78/JQdrapa9ftJJ33/+Yx+Lbb7wwnsfO//8+x4766y7Hz79
9DvXn3baHb3vf//tzWecceeN559/zy8uvvih7/3gBxu/eNVVm85fufLpM1av
fv49HR0vr1izZtuCO+98rfHBB3dOvvfeN6tfeGFX6aZN20KyLHt4XDwO8kMR
OYCfZz5fj1/na+NOvl52+v3+w16vd8AVJTxOmbqi0o/XHidcUSLiOrim2+2G
J4pcUQRB5BPvZvb9ffD9FoyPII4F3EhWzPU5adeNWHTdTPLM6FpIGISV91rK
sXrsGiNBEMTxCDNr9iw92L2vZpOwzjESxHBYtQ7NWLcEQeQfEjN//0hmUE/S
gnro5z+R69g9l2l+E8T4woqfvZLOWiQLajEzBGE0ErNm7iZ11mPFfmH3GAnC
bCRm3bwP66wpn9e2EeMniNGSSz/DJAvrMTOSjrESBEFsYPbtU/ttvPZos5ON
3/9fjp8y+/ufbf5reFeIfGQts38uZpsOw7tC5CO7mP1zMdt8w/CujC/+zOy/
h9lmj+FdIQiCIAjCaI74oYQjKupkbKWbsR4vYzcHGWstYWxVNX9/sscTmel2
Rxe6XLF3eL2R0zye+Ed8vsT5fn/iC4WFLd8pLGy9guf64uKWf5SVtXXW1nbc
0dDQ+ciMGV1Pzp/f8+LSpf2vnnhi/87Fi/t2z5nTu2fGjO79U6Z0HaytbUvB
GQQvFPxQwhEVCqlun3SPEXxD8A6N5DMa6iiKDXw+eMzw3qVBh1HLEXeU8Ee1
Kv6mCRNUDxMcTHBI8doVv1N1dZvyHdVXNbQmXAs+JeGLgmMJNeCacCVVVann
xHnq67uU4DWui/Gmjw+PeA/XQS8QUTd6iDp53wdcUfBQTZjQobiXMEZRj/A7
we002ANtT+NDepbuihIeLK0vSpwzPfiOqBseMOG3gv9JeLrSg7EY7Yk6dlRX
VHHxL3k+xa8/l1+7UvHBBAKBIa6okbxOZriiEHhpysvL01xRrsOBQOmemTNP
fv6Tn7zy/p/+dN3aq6/e1HXppY+1f+UrD0W/8IUH/vL5z2/41cUXP/zj733v
X1/72c82fWblyv+cvWrVix9obd1y8j//uX3JffftmL1hw6tTH3poe+0TT6TK
+esiWZZ9PG4eJ/xQ5IgicggXT43f7/8IXxd/DwaDT3m93r1YE8dzRaX714Zz
RYnvCCeUOBaPeI1rIGJN4r3hXFE85IoiCCKXOYHZ9zfCGywYH0GMxLuYNfP8
12nXzdX/FsRnRtVFwiisvNdSjtVj1xgJgiCOR5hZs2fpwe59NZuEdY6RIIbD
7vlLc5ogxh9W7COSzloki+oxKwSRLfiZa/c8prlNEOOLJDN/D0lmUI/d+102
CWcwToLQg8Ssmbt616gV+4WZIYhcAT8vrJr3ks6a7F6fdo+fIEaDVfM4qaMW
ycJ6aM0SBGEn32b27E/383yQKf+/hrbvlaPJ70bT7DFAD7O/99lmneFdIfKR
Hcz+uZhtLjO6KUTeMYvZPw+NyClGN2ac8TCz/x5mm/WGd4UgCIIgCINI90Ml
XfzRw1jEz9jdhYz9vZyxVbVeb3yq29081+VqPsHrjUkeT/x/PJ6Wc7zexGf8
/sRXA4HE/4VCLb8sLGz5M0+ssLC1v6Sk5b7y8pZNVVWtz06c2LGloaFre2Nj
9665c3vfXrSob9/ChX0H5s3rPTxnTq88c2av3NDQLVdXd8qlpe1ycXHbEW/P
0Z4o4WKC2wiOIziI0qP1KQn/0VAHkuo9gsOooCCquJuEN2q474nv4D1cHw4j
eJcqK9sULxN8UvAZifpE4EPCd/BdnF+4ouBVwmu4mDA+OKHgctL6p+rrOxUv
Fa4jPEnq2IUjKzHEE4XgXKhDPZ/qn4InCufFczipcB6MEWPW+qKEy2k4r1Z6
0KdBV1R0wBV1rKhOqpgyZtSv9VsVF7cqviiRdEeUNZ4o1RVVXLyKXxeuqAv4
69m8p2W83gCPX/HCwA9zLAeNEa6o4fw1eF1WVqY8d7tdyu/ZbrfnQElJ5Y5l
y0574Ic//N3q5uYNN8Riz1/7hz88/Ytrrtl82dVXP/nta6/d/IUbbnjm47fc
8sIZ7e1b393fv2P5XXdtW3D//a81Pv30nrpnnklVvf66XLJxYyooy7LniB/K
QY4oIodx8HUwla+JS4LBYIfb7X7F6/UegsMJ61Priso06V4o7fpOd0iN5Ioq
KCj4Pa+RXFEEQeQyTcy+vxFutWB8BDEcQZ4nmflz/C2eSs115/AcsuC6maZv
tI0kDMPK+y3lWD12jZEgCOJ4JJk1e5Ye7N5Xs0lS5xgJIp0ws3/+0u8ZBDH+
sOLnfyY/G+3e87JJOINxEsRw2D2HaV4TxPhDYtbsJZLOepIW1WNWCMJI8DPY
inmb1FkPrU+CMA6r1pPe9S1ZVI/V0Tt+ghgNuTSPJQvrMTOSjrESBDF+KefZ
z6zfm67S1JCvrihkeSbNHiNsY/b3PdtcbXhXiHxjOrN/HhqRM4xuDJF3fJzZ
Pw+NSMjoxowjPMz++2dErje6MQRBEARBZMURP5TWEbXSzdhffYz1BRm7tZSx
VdWM/aOeP29yu1ctcrli7/B6E6d5PPGP+HyJ8/3+li/6fPHv+v3xKwOB+O9D
oditoVC8q6io5c6iosQjxcWJJ/njiyUlLa+Wl7furKpq311T076nrq5j//Tp
XYdmz+5OzZvXJ8+d2yfPnt0nNzWtkadN65EnTepSfEZlZW1HfEGtAx4frSsK
riF4jOA3Es4i4YlSXU8xxfGk+pMSimtIeIfwGp/hONUVpfqbVIfToDcq3YWE
z/EcviO4o3AO4WoKBuMD10OtuJbwHQnHE/xL+L64FhxNOBe+j2Orq1W3ExxR
U6Z0y1OndivP8V51teqjKi0dPJ/WD6UNxlhWpp6vthauKNVBBWdUTU2Hci30
T4xd+KK0zqjBqF6o4VxRovdaV5QY23DB+cX9OdoVNXKscUQNuqJKSlbzHl3L
Hy/g/ZzJ72sxv3deJcIVBZ+M1hVllC/qWK4orZvG5VJdUR6PZ19ZWeULK1ZI
7Vdeef3la9c+8NX77tt64W23bf9kT8/Wj3V2bvlof/+W999++2sn33XXriX3
3bdj9r//vXfK5s1v17788hvlTz21o0iWZR+PW/ihsEGQI4rIA4J8rZzm8/l+
xdfDE3x97g2FQimtK2o0viitKwoRazt9neM4XAc+KazHgoICckURBJFPTGT2
/p1wqflDJIijuIVZM7+/nnbd2yy6bqaZN6ouEkYhMWvvt6SjJrvnZLYJ6xgj
QRDE8Ugya/YsPdi9r2aTpM4xEkQ6ds/dbNYsQRD5i8Ryay9JWlSP3eMkiHTC
zP75O1zCZg6aIIicwIq9JKmzFsmiemjPJPIBq3430Ls+kxbVY1YkneMkCCuQ
mHVzX+8at2rPsTphneMniEzJpTUsWVgPrVeCIOzix8z6fenTaTXksyvqVr2N
HiNMYfb33IicZ3RjiLzjHGb/PDQik4xuDJF3/JLZPw+zzeOGd2V8AW+l3ffQ
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
8/9+7IQJp3y9uLjyt7m5uU94PJ5PeSLwNyXbFYXrBgIBVbwXgvs4Ltw3breb
1zIHfpr9DofjY6fTGeL3z+MbSjWPXfauRhApQHNF8Xn/c74eVvH1udNutyfs
ijrY2jQG1y4pKdGew3rk61BzRfFs5O0gVxRBEFYg2f/toaHktST3lcgMvs7z
PpMzR/8p6X2HkuU8nuEWl0gpQZb6+aHE0S7Zc9iMhOPoJ0EQxECkem+OB9l7
aqo+f4jsItVrLVnrkyCIzEZh6fl5mep20T5LJAPZ8+9QCSav6wRBWIgwS92+
E07TdtE+S8gmHddhJqzBoew5BJFOyFh/h/rMCkpoE+0RRDqQ6rkfz7xUUtwm
2f0lCCI7WM2St9c8N8w2ZZIrCsm0f2c5gcmvqRn5gdmFISwH/p247HloRkaZ
XRjCcvyByZ+HieZl06uSXRzJ5I+hGfmx2YUhCIIgiMxEOKLCDsYWuhn7Ry5j
daU8YxlrmMVvv26z1f3Mbg/d5nA0NDidDU+4XHUveTwNbwUCoc2lpc1bRo5s
3zZ2bMfOCRM69kya1Ll/ypSunokTF0aqqzvV8vI2taioVXPpeDyNmstIOJR0
r1GD5j+Cmyg3t7Gffweuolj3knBGicT6ooT/B9eE+yeZrihxbQQ+JtwKxxXa
De+SCB77fLqDSTii4E0qKWnhNWpRR43SXVGTJun+o+nT4UDSfVFwKFVVtaqF
hc1ajYw1GdwV1djnPxLtE22E18rvD/VdB69BcD+2rfq49Pc9JeKKEm6syspW
zQUFB1RtLfqt+6LggkJ/YxM9DmdUR9+x2lrdrTV9erc6a1a3OnNmt1Y7uKTg
ioKTCnXDfED/UKdYV5TRj2UcW+PtwGnW5rXwROnpc2IdGDmybT/v196jjlqy
+z/+Y9mu73zn2d0//elzu6+//sVdv/71SztvueXVz+bPf33jX/7yxrN//esb
D9911/rg3/++/rt///ubx/7pT6+NmT79tNq8vLzzA4HA/YGA/+3c3Nx9RteM
8DeZ4YgyRriicFtYWKhFeG3gp8Fjj8cDTxSvof2Aw+H4zOl0tvFcwDcUvm9o
7lmCyHQ0VxTPz/laWMXXws6cnJwIHGpmuKJinx/IFVVcXKw9h/XI1x/fz1w9
fD2SK4ogCKtwA5P/26ExtcntLmFh8O8Mbmfy52g651U2vP/eFyGHIEv9HFHi
aJfseWxWCIIghkOYpd9eJXs/NSPBOPtKZA+y5yTNWYIg4iWV3w3CQ2iX7H2S
9loiETD2suffoUIQBAEUltq9R4mzXVbYR2mvJcwilXMyHGebwilul8y+EkQ6
ImMNBtOwTbRPELLBuki3OamkuE2y+0sQRHbwDkveXtMyzDZlmiuqeph1SFfO
Y/JrakZmm10YwnL8PyZ/HiaaTaZXhbAiS5n8uZhoHjC9KtnFfzH5Y2hGjjC7
MARBEASRgeTojqiwhyfAv0YVM/bQSH47mbEFRzPWMM9mq780J6fhFru9bgHP
coejfh3PJqcz9KnPF9pRWNi0u7Kydd+YMe09tbWdB+A5mjlzsTpjxhJ10qRu
Fb6oioo2zYsEH4/w9SBwHcFR5PFEfVHwGOluo2Yt8O7gdfD5CK+R8EYhsb4o
XFe/ZqjP/ZNMV5RwMOneJ939hPtoe+z7Rs9rUcvKWtXy8lZem1bNmzRyZJs6
dmyH5j6C52jqVN0XNW3aIs2jNHp0O39Ni8rrrfVL1MPhiLq3hCsKz8H1JFxR
xhrANaV7ohr6ObgQXAvHdNeUfg1xnVhv1HB9UWhHcXGz1vcRI9r4/GjX/E/w
RKGfxuAYPFLwQsEPxeeYdj5qITJmTIfm2MK5cEahdriP1+A51NboitLnjJ5Y
V5TRVWb0gH25H8IR1dKbZvGaCBxR/D33w5t2xBGLd86dG95+3nnLt/zXf636
+PrrX/jollvWfvTnP6/b/I9/vPX+gw9ueKeu7t3XWlreD7e3v/ePzs73f97Z
uenMJUs+nrV8eaTs/PPPL/R4PMf7/f7/zcvLeyk/P39XQUFBRHhkUu2KwnOx
rigeuKK2OZ3OhTwX8T1lHCNXFJEd9LmicnJyVvHs5PdNd0UNdA6ugXWI6+N5
t9utuaL4bY/L5drI75MriiAIK/AzJv+3Q2OuTW53CYtyKs8rTP78TOds5pky
3AITUgiy1M8TJY52yZ7LZoUgCGI4hFn67VWy91MzEo6zr0R2EGTy5+ShEkxa
7wmCsBqp/m6gpGm7khUiO5E97w6VcPK6ThCExVBYeu4/qW5XshKMs79EdpOO
azCc4nYlKwRhZWSsw0N9bmXK3jCUPhPZDeZHKudjOI42KSluk+z+EgSRHXzC
krfX/GOYbco0V1Sm/XvL3zP5NU00+02vCmFFmpj8uZho2k2vCmFFPmXy52Ki
udL0qmQX9zD5Y2hG6G/UCYIgCOKQ1NsZe8YLR5TX+9BIl+vRWsYWzLbbH1Xs
9gVn22x1/5WTU/frnJwF9/IstdkWvGa3139ot9d97nDU7fF46vfn5TUegMNo
9OgOdfx4+Hq61VmzlqqHH75UnTFjsebt0T1HrZp3B14e4XgSviiXq15zFwUC
Ic0VBR8SfEKlpS197iW8Fi4f+Irg/RGupFhfFO7jmNvd0OdKGsj5Y0bgfkJb
0T60Fd6nqqo2LbiPPutp0SKehyNp1Kh2zQ8lzoXTCMfgi4LnCHU77LAuzRUF
B1JNTaf2Ot0X1az1y+tt1LxOwqGFGD1PRldU1BPVqD2P+qD2fIz7xkL4onAd
4YxCnY3X031RjUOuldExhfZjXNFv1AAOqAkT0Ge93yLwRAlHFOYQzkWd8DpR
s6oq3TmF51E7BI4oOKVwvLy8RRt79MHp1PuIvuquKL2feE54sIyuKGO7AwGk
uS/CF8XPifBzD/A5sJ+P9d7q6o5dU6d27Tj22CVbv/71Jz688MKVG6644vlX
g8GXn7/ttvWr7r//7dWNje+t6e7evGbZso9WP/XUJ8tXrPi0bdWqT/68evUn
P3n++W1zX3jh08Nef10tueCCC/J8Pt9snl/6/f7nAoHArtzc3AgcUcITZbYr
KtZPI1xR4nnhvoGbRrii7Hb7VofD0cnvX8g3lRpG38OJ7KCfK4rP/6S5omIj
roPA6+ZyuTRXFH/fHp6N/PGdvC3kiiIIIt35HpP/26Ex23m+ndQeE1Yin+cv
TP68TPfs4Tl2mDUm5BFmqZ8rShztkj2fU9lXgiCIWFK9V6Vjm5KRcJx9JbID
2fPRrLVJEER2oLD0/MxMdbtk95fIHIJM/rw7VIJJ6z1BEFYEn1Wp3IPStV3J
ijKEPhPZSSrnYzjONmXK+iMIK6MwOesmmIZtSnaUg/SZyG7CLLVzMRxHm5QU
tynZIQiCALtY8vaZW4fZpkxzRR0xzDqkK0uY/JommlWmV4WwIhuY/LmYaG4y
vSqE1ahl8uehGTne7MJkGWuY/DFMNM+ZXhWCIAiCyCxydE9U2MNYXZHbXTfW
6ayf6fEsOMHlenQev3+Bw9FwRU5Ow29ychbck5NT185vn+e3m/jtTp4em60+
AqcQHEKFhfD+tGm+qNraLs0RdcQRS9Q5c5aoU6cuUseN69Q8SPApwTcEH5Fw
O8HbA4ePxwO3U0hz9MC9BCeS7gLS/UDl5XpwvKSkWfM0we8DnxH8P+J6CB6j
bXAACa9R8lxRzZrXCm2DywiOIuE2EsExEXiMRPCccEXh9cKdhPPgSBK+KATe
JOE/gn+quBgOpOZej1GjNg7GoM5Rt1OT4byQVmvUJ9azBW9U1BkV9UbBKxV1
Rn3ZqzRUX5QYY+HXGjVK90WNH9+hBX2vqRGOKN2tJRxR+vi39HrEmrWUlhrn
S2u/c4uKdEeW3ueoK0p4sdA30Sd4yoxthR/K72/iz8M1pQf3cYxfM8LP6+Fz
YB8fi938Pb/g47N96tTOLcccs+T9r3/9iXXnn7/8ucsuW/X4jTe+2PSnP73+
8EMPvXP/okWbH1q58tP6F1/c1vTaa9ua163b3rBu3Y5/vP7658H163dc8Oab
nx/77ru7x2/bphZeeuml+X6/fxrPzz0ez2qv17uTJwIPDT9muicq1l8DDw08
UcJtI9xReB5uGjhxeA7YbLat/FZzRbnd7rGMXFFEdgBX1HSen/O5v8put5vq
ijqYL8p4DvYCrEfE5/P18Gzk+8WdvD3kiiIIIt35JpP/++FAeY/nVzwVyes6
keb8gOdDJn8uWiHzhlljQi5hlvq5osTRLtnzOZV9JQiCiCXVe1U6tklmX4nM
J8jkz8VDJZi03hMEYUUUlr6fmWEJbUtGlCH0mbA+sucbzUmCIIZKqj9vg3G2
S0lxu5KVcJz9JbIThaXnfEz1vpCsKHH2lyDSFYXJWTvBNGwT7ReEDFI9D8Nx
tEmR0K5khiAIwsaSu8/8fJjtyjRXlDLMOqQrnzH5NU00d5leFcJqlDP589CM
nGF2YQjLcR6TPw/NiN/swmQR+LvuCJM/honm72YXhiAIgiAyh6BN90T92c3Y
wjyv96GRPl/9TLc79FWPJ3Se19v4Y357A398m8NR/5DNVteVk7NgNWML3uHZ
znOAsZCakxNSbbaQ6nKFNKcOfFHwHVVXd6iTJnWpM2d2q7NmdWuuKDiPxo7t
0Jw/8Cu5XFFXFFxF8PbgGJw98PTAvWT0JuG1cAfBOYXgGJ6HLwlOH7xWdx4t
6LsmXEfwSMGXJFxRZvuioq6olj5XFNqKNo4fr2fChE7N84T7woGEc9AH+LPg
ioL7SfiPcB3UCR4pnDtp0kJ18uSFWg3xerxu5Ej9dTi3tFSvA9oRdRw19gWe
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
gwdXLExLK92cmlrSkJpafCwlpUwkJmq9KG4jcSOJm0rcXeIuU2Zmudpb4m4U
r+OuEjeH9Pr2PpRUdqLa+0TtvSjZLtKaUcd3pni90egTVqvWXurYf6KxqmNh
+Tk3jbhtFR5eoMrbys5TSkpJa+eqXAwaVC6yssrV57wPbkDxOXIXit/Hx2G5
B8X74/cnJ7cfh7fnZhVvHxLS3nzSWk+BvadTd6J4ez4viyW3rdOktZra9xPY
jPq6bpTcr91+onwM/lyOv9bHN7zkZ8LytlarL+B6y1ZWUet5c4+rkI5ZQNvl
03vyaD++1s8tp4U8Rv9pdpiWB2i5T6ebsttg8Gyl/W4IDc1bQZ/dgrS0khnD
h1cVjB07Y/LNN8955b77Pn32l79c9PPnn6+971//Wn3LlCmbJhQXb7lk/vwd
IxYt2jVo5cpDqStW7IhfsWJ/5MqVfhfdwxa6h419oBElsZlMpnOtVutTpNqK
MhqNfr1eT/eLra0p01mdKNml4SXvV+77ZK0o7lTxksbRQmPca7FYSun1H9Dr
aEWBvo6e5kYKzYe7nU5nsd1u38PzxGw209d3x3GNN55TsvsU2IkKnHuBbanA
LpzclhtUvG/6GsHrm2n/m2j5L4PBcIWCVhQAoGcQ7J8tQtgdzCEvV8DZINif
NYTw9AXdE7cS/HsDQghh3xZ0b9xK8O8RCCGEvVe3Aro7wb5HIIQQwt5mjQLA
yXErwb8/4XcTnx2EvUe3AkDf5SLyoBL8eRhMp5F94d+2Mb2hFfXLTr8qoKdh
U4J/H3aGCZ19YUCPoze0ohZ2+lXpe/SGVtTPO/2qAAAAAL0Q7ur4/X4bGdvQ
cDh73ry9lz/7bO2D1103c9KwYVUzMjLK1vbvX7q7f/+SQ6mppf6kpDIRH1+i
dpRY7iOxsp2Unl6m9paSkkrUrhJ3iWSTqKOyDWUy+drkDhQrG0ayM9WxFcU9
Je4rcReJj8Nj4XaRbFdJeRzx8VovijtO3IribWUvireh81NNSSlVt+f+Eben
AltRUu1YfBx+X5l6vmlpZa3vL6H1/D6tLcXNKK3rFGjHplNeW9NJNpzkdQhs
NclmVHs3Ku+4btTJGlGyO2U2a8rH2v7bG1GyxSWvsXadPcd9VjyOwF4Ut6Gi
o/lc+doW07Upotf4887jbf16fU6zokw5Qh4kGxTlo73kDnr8lU6Xs9Zs9i6h
6zOPPrPyIUPKPxozZvrrN98858UHH/zsqWeeWfrTv/99xZ3/+c/66wsKto6d
MeOrC+fP33ZObe2+jC++2J20bl1jzIYNe8O2bNliF6LWzL0zvo/7SCNKorai
zGazbEUdpOd+o9GotqJkLyaYrSgaV4ter99H4yqn134UExOTRuM2BPvCARBE
9BaLJZVbUTQnSmi5x263t/C8pSV9f4qir6fR6lziTlTHVpRUdqTkfAx8TXai
eMn7NBgMgvfvcDiO0vu+dDqdr9E67k2gFQUA6AkE+2eLEAZL+v8n5WVF+/1a
4OwR7M8dQnj6gu6JWwn+vQEhhLBvC7o3biX49wiEEMLeq1sB3Z1g3yMQQghh
b7NGAeDrcSvBv0/h6c/rYI8BQtg5AtDXuY48ogR/LgbDStJ15pewxzBFCf41
PxObybBOvyqgJ7JTCf79eCb+t/MvCeiB8PefYN+LZ+pLnX5V+h65SvA/xzOR
m6OOTr8qAAAAQC9FCGHat88fceiQSFu9uunCSZPW3n7nnfP+eN55U/MzMsqW
JCcXb01JKT6QnFzSnJgoW1FFan9Jyl0l7itxQ4nlflRYWIHaNmpvQHkDlD2k
E5Xbyk6R7EWxWrfIp3aQuJfErSStXVQgYmOP70Vx+yk1tbS1F6W1nzqOmZtR
snfF8nNWa0sVqn0o3r+m1oriRlK/flpjKjOzvNUy1bS0UvX40dHclsoXoaHH
d5wCO1HHt6K0lhOfm+xkBTa1tG6U77hu1PHNqMBOlOxCndjgktf1ZJ2okzWj
2q+7R92PzaYdi69FeHghXY8idcnnScdtoWMeMxhyDtM+DijKlP2K8tEusl5R
cr4kl9NxP6Ptqun65NP1enf06Gkv33LLnN898siin7ndX9z7xhvrvvfRR1uu
LCvbcvG8eTuGL1y4c+DKlXtTV6zYEV9Xty9i5cqdLr/fb6F71kjq+1gfKhDu
VautKIvFstBqtR6kx35S7cPIvkxnKzs0X9eKioyMVF+nMflpjPuNRuN0Wv9o
XFwcd4nRigJ9GT2Z6nA47o6IiCiOiora43K5WkwmU1sriuX55HQ6TzmP+TVW
tqI6ttxkr433qdfr6Wu4zk9fJw7T85U2m+1vNDfH0DjCg30xAADgW8D/LRHs
nzFCeDatIn9KWhUQDIL9+UMIT1/QPXErwb83IIQQ9m1B98atBP8egRBC2Ht1
K6C7E+x7BEIIIext1igAfDvcCn4uAyGEZ1O3AgBg+N8t7FCCPyfPph90ypXr
WfDvRg32dT8T3+r8SwJ6KCVK8O/HM3Fc518S0EOpV4J/P56JF3b+Jelz/FMJ
/ud4Jv6/zr8kAAAAQO+FmzvbtwtnU1NTv/XrG8/96KO6q3/604WPjRo17d9p
aSXzkpKKNiYkFO0lj8bHF4vY2BIRFVWktpSkUVFaf6m9s1SgtpC4W8TNovZW
0cn7UCfqDegaedrkdbw/biXJVhR3irjLxH0mrVdVLFJStJYTy72ofv2K28YW
FVWgjo+7TydTvsadqMDWk9ZHKlDPla8Dt6jS08vEgAHlIitLMyOjVD12XJx2
Dfg9gfv4+laUdn20jpPWcmo/98Bu1Ml7USw/5o6W7EQFtqHkfqSyA3WqXlSg
ej3vi8fIYy2gcRe0nkOen2x2OnOPWq2+g3S8Bp1uyl5FydlO1pFr6LiLaSxz
absyuoc+HDSofNLo0dOfv+mmOU8++ujnD/zhD8vvePPNddf5fF+NnTlz5/kz
Z247Z9Gi7RlLlzYlrlnTEL1njwjdsmWLnZtmpIH7UH24ESXhfz9+jtls/j+L
xfIZ2WQymfyyOcPdGG7FdFUrSu47sBUlj8mtKG7VcCtKp9MdNBgMi2j9X2Jj
Y/lnDtwm7uufHei7cCsqhVtRUfSNJCYmZjfNjRaaK/S126HOG9blcqktKDnf
AltQLL/Oyjkp21L8nN8ve228T6PRyL0o/trQSMdZRF8znqHHw5W+9XsqAAA9
l/1K8H/GCGFXO4d8jOyngGAT7HsBQnj6gu6JWwn+vQEhhLBvC7o3biX49wiE
EMLeq1sB3Z1g3yMQQghhb7NGAeD0GKvg5zMQQng2BAC0cy65Rgn+vDwbvtxJ
16yncbUS/Gt/Jg7t/EsCeiiPK8G/H7+rFV1wPUDPJUcJ/j35XS3vguvRF7lR
Cf5neSYO6vxLAgAAAPReuLuzZo3f8vnnDdHLlx/O9Hq3XPLww5/fe8klM/6W
nl5aHh9ftCI6umBHdHThQVr6IyOLRUREkdpNkspeFKs1krQOkmxFad2i02lF
tXeOZC9KtpK4k2S3a20k7hVxi4mPxw2ouLgitQuVnFwiUlNL1E4Ut5u4H8Wv
8fhO1oGS8rpAtZ6TpnYcrSUVE1OoHof3z72ojAzNtLRSkZSkHYuvidaKOnUv
ivd7fCtK6zgFdppk00lrR2nXQ/aiuAsV2IviJTek+DXe5vhOlKetNRV4fU/d
jPK26qPXuWGVS+/jfavHbHE4fMccjtzD9PiAxeJpMJm8uwwGT71en/MlLWvp
c/+UXqum65VH1+nd4cOrXho/fuYzd9/9yaOPP77ohy++uPzmd95Zf6XPt3n0
tGk7hs+bt3Pg8uUHU2prD8Tt2yfCa2uFk+9Luj+N3DNDH+o4uBU1xGw2P26x
WObRspF7MCQ3mtoaM4Fdp87sRck+TaCyXRMVFaW2angcOp2umca2mdYX0Vgm
0lgzaNw2Bb0o0DfhVlSy0+m8leaINzo6ehvNpWbuu8k2FM8hfszK7pPsQ8le
VGCbjeVtZSNOvoeX/JznIc1Bnoe76XENzcGHaAyZpD3I1wIAAL4Nm5Xg/4wR
wq7wc/K35AAFdCeCfV9ACE9f0D1xK8G/NyCEEPZtQffGrQT/HoEQQth7dSug
uxPsewRCCCHsbdYoAHx33Ap+VgMhhF2hWwEAdCSZnK4Ef352pY912tXqefC/
k9mrBP8z+C7+uQuuB+i5pCnBvye/q+d3wfUAPZeJSvDvye/qZV1wPfoiFrJJ
Cf7n+V18rguuBwAAANDrqampMU6btieUTH7nnXUjJ078/KYxY6qf7t+/5KOY
mKIF4eH5m8PC8hrIYyEhBSIkpFDwkhtIshUVHa3JzSbavq0VZbW2t6K+fSeq
vWWktY5kI6m9FcWdpcBWFDeg+Pjx8UUiIaFY7UNxtykpqUR9Hhtb1Do2bdw8
Pm4rBcq9JZZfk/s/2XF4P7GxheoxuEuVklKqLuWx6JqpTSk+ltaL+u6tqI7d
KH6dt+MGF7eiuA3FY9fGrI2f18lGF18zfqxtl9t2rvy8/bNpv9Y6nVdtQ3Ej
ql21N+U3GHKaTSbPERrrQbLBYvHuoX1vp33UkastltzFdIw5dI1K6dr/b/Dg
8kmXXDL1+RtvnPvLiRMX/OSZZ5bc8Y9/rLv23XfrLsvLqzu/qmrrkLlzt6ev
Xt3Ub8sWEbVrlz+krq7OJoQwkQb0oU6JmUy3WCz3W63WcrPZvEOv1zfTOrUN
w40o7sV0VSsqsFcj18uWTYdWFN3XlkZ6fQm97yWj0TiaxhihaD8LBKCvwfd9
tMPhuDIiIuJNcp3T6TxMc4S+Htva5hK3n3g+8fzl5pOcX6fqtvH2/H7eRrai
+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
psGU1vfeQw47y2MHAAAAAAAAAAAA6Gp0l1022XrJJeXRo0dXZw0fXnVpSkrR
jyIj8/7ucPgqLRbfSpPJt9No9B00Gr1+gyFXaHrb7NiL+jatKO4bcSOpX79i
kZKidaLS08tEamqpuk42nsLDtUYUd5N4yetkW6m9J1XQ1nUKCclTt+NtEhKK
RWJisbrk57wvbjXROak9p29qRfF+pLxf7jXxdnzOJ2tFHd+M8rQ1o/g9fEx+
P++be1c8Hu5kxcdr4+NzZhMSikRcXFHbuWk9rHx6bz5dN01+zNJY/XQ+zS5X
7lHa7iCNuSE8PG8vXaMdcXGFm1NTi9cNGlSx9Pzzp8674oqayttvn5MzceJn
bzz11OI//fGPX/zq739fOfGNN9bd9cEHm27Izd06rqjoq4umT9927syZOzI/
+2x30pIljTGLF+8N27JF2Fv7UAb0oYLKca2o8PDwtlYUd2Zkt6mz21C87NiG
6vicOzVoRQFwUnQ0V0Npjox0Op2/pfk6m+bIdr1e38xzRs5dOafk3OPH/Bor
1/N2sgnH63jecT+KX6NlM82/RqPRuJyWb1ut1h/QcdIVbf7h6zYAAICuhr/X
cLfJSjrIEDKCjFa0bmEYaSeNwRogAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AOg18N9XjSHjFe3vrRqCOxwAAAAAAAAAAACAs8tll9UYR45cGDpuXHXKuHFz
Rg4dWv69pKTCZ8LC8jxWa+4ik8m3xWj0NBoMnub2VpTvuE6UySQ9dSeqYyuK
e0jcSUpOLlEbUf37l6rdqFO1ovhxVFSBiI0tFPHxRWpriffB7SWtGaVty895
m6SkYnWfsj/FfSZ+3eHIVccqe09f14rifbHco3K58tRt+L3f1IsKbEbx9eFW
FB+X98tj5vFzxyopqUQ9f5bHy+OUraiwsEI6ZgG9r6C1FZWnXjuyxW73HbPb
cw/TeA84nfn7QkPzdtP12RoVVbQhNrZ4Be1vwcCB5TMuvHBawYQJMyffddfH
rzz++OfP/vnPtT9/881193k8dd8rL98+oaZm+yXz5+8dsWjRrkFLluztv2LF
gfi6On/EypU7XX6/sAghjNyHQiOqW8DNl0EOh+PRsLCwOeRxrajObER1bEXJ
Xg0/l52ajq0os9mMVhQAJyExMdFG8ySF5sxdTqfzPavVuthoNDbynOH5G9iI
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
IVcYjbmt3ShNi8XX1o6S3SjZjJJyR4pfk9vxNtyQ4iZUREShiIkpEvHxxSI5
uVSkppaKxMRiERlZQNto++SeVFxcoRgypFJcffUsMXHiQvHiiyvFBx9sEpWV
28WsWTv806dvPVZYuHn/++9/Wf/Pf65e+6c/LV/+3HO1X7zwArt86bPPfrHw
5z//fO4998yvuuaamd5Ro6a9ecEFVX++/PIZv7r77nkP/upXC29/+eU1V77x
xuoL/v3vL7M++mhngte7PrS2Vpjdbu5xAXAC3IqKsVgsV7lcrjdDQkJWWa3W
g53VipIGdqHk63Kd7NTI49DxaZ4aTmhF0TjRigLg22NKTk6Oj4mJuZLm1z9o
Pi+mebSPVPtQPN9YOQdb52EjrVsRFRX1Js3F6+g9iQrmHAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4JQtNivLfELu9NM5i8fR3
Oj3ZdnvOiOho3+iMjPIJI0ZU3XfFFTXPXnvt7HevumrW1DFjqpePHDl1R3Z2
xdGUlFIRFpYv9HpvWytKUfixT11yN0qv9/hZg8HjNxq9J+1Gac2o4xtRga9x
JyosrEBERxeKhIRiwccdMKBcDBlSJYYNqxKDB1eK9PQykZRULNLSSsXQoZWC
xioeeGCBeOGF5eKDDzaKadO2iQUL9vhXrdp/bO3ahgO03Lp48Z5Vc+fu/GTq
1K1TKyvri8vK6otLSraU5uVtLpw8eb3nH/9Y9e4f/7j8lSef/Nz92GOf/+LJ
J5fc++KLq25+4431V06ZsnF0UdFX586Zsy2ttHR73LRpe0JraoTV7a4xBvsT
Bd0ao9VqTXY6nRNdLleBxWLZZDabj3VsRXXsP31bA7tQbMd+lGxIyePwcQNb
UTqdrprGiFYUAKfBgw8+aLrnnntiBg8ePJbm1os0r2cbjcZd3IGz2+3qHIyI
iBCRkZHqY553ZCPNx+XkG+S19Ho/BXMOAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAJwanaKUWxTF61SUD8OdzvLoiIiSftnZlRnj
xs0Yeeut86776U8XPvboo4v+9dBDC8vuueeTpTfdNHfb+PEzjl54YbVISysX
dnt+ayPKE2COX1GmNNPyKC3ZYzqdp8Vg8AnWaPS1daNkF8pi0RpRsiVltfqE
w5EnQkO1TlS/fiWif/8yMXBgpRg2bKq44ILpYtSoanU5YsRUMXLkVHHppdXi
9tvniSefXCJef32tKCnZIj77bI9Yt+6A2Ly5yb9jx8FDe/Ycqd+58/DS+vqm
6rq6A54NGxrfXL163ysrVjT8benSPS999tmuP9fUbHu2uHjzL32+jT/1euvu
nDJl8/U+39ax+fl1F9TUbB0yd+729EWLmhLq6vZF1NTUOmtrhdnrFYZgf5ig
R2B0uVyjbDbb8xaL5VOz2dxot9v93G7insyZtqJ4GdiFkq0oqWxS8dJqtXIn
Cq0oAM4Ar9drePXVV8MuvfTS4fHx8T+nuTeF5vZqk8l0lOeY0+lU51x0dLQ6
7+g1ttHhcKygOfkOzdubaLsUBXMOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAHwttxkU5S2TonjNtLSnpXlDb7vt07innlqZ9eKL
q654+eU1D//jH2tee/nl1eXPP7/8i1//eumOhx9ecOwHP/hMXHbZbJGYWCZM
ply1D6XTTWk2GDxH6fFhRZnSRDaSDeQBRfEc1uk8Qqfzqer1XmE0etVmVEdl
K8rlyvVHRhaI+PhikZpaJrKyKsQ551SJ4cOnivPPnyYuumi6GD26WlxyyQxx
1VWzxN13zxdPPbVEvPHGOlFZuU0sW9Yotm49Jhoa/KKx8ZhoajracOTIsVVH
jvinHT587IMjR1r+euBA85O7dx95oL7+4A/Je+rqDv5g06aDt61Z03TDunWN
V6xdu3/00qV7Ryxb1jBw8eK9qbW1B+Jqa/dF1NZudwohzKSB1AX7UwQ9Bp3L
5Rpgs9kmmkymKnKv3W5v6diK+q69qI5tqMBGlDwGd2u4JWU2m2ku6li/wWBo
0Ov11SRaUQCcJtyLuuGGG2IvvvjiK7Oysn5H863CaDRuIY9YLBY/z0Geezzv
uBVFc/4APV8dFRX1X5qX99BcHEi7sQT7PAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAABAt0YXoP6yy2qsb721Kmrq1F2Dpk3bfvW0
aduemDp1278rK+tr8vK+Wvff/27c+9prq5ufe26FuP/+BeKii6b54+OLjrlc
eYcdjtwmmy13v8nk2avT5ezU6aZspeUWvd5Tr9d79yjKlKOK4hGK4iO9ai+K
NRh8wmjMJfNUzeZcQfsRISG5/qioApGYWCz69y8VmZnlYuDACpGdzc2oSjFi
xFQxalS1mDBhlrjrrvniySeXiEmT1ovy8h1ixYpDYtcuIY4cEaK5WYhjx1qO
tLT4N/v9/jlCiPdbWlqeo+WD9Pymgwf9Y5qajp539Kj/fPIiWnfhkSP+EY2N
Rwbv2+dP/+qrpsT6+obo9ev3hC5cuNBO7zOR+iB/bqBnYrBYLKlWq/Uuk8lU
RO52OBxqK4obToGtqDPpRXVsRvG+IiMjRVRUlHocp9NJc81I81BRW1H0uIHG
Uk2iFQXAd8Dtdpsfe+yxrAkTJtydlpb2Ls255TTP95vNZr/dbm+bzzTfuRl1
iObj5oiIiFJ6/CRtdxntIkLRvg8DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAPCNlJevsaxevavfhg0HR9XVHbh/9eoDf1+5cl/5
8uX7vli6dO/WOXO2N5WV1R+dPPnL5ueeW37sBz/4+PDo0dMbBw4s35ecXLwj
JqZoc0hI/nqbLXeFw5G7xOXKXRgWlreYnq/V63P2KkqOX1HyhF6fJwyGXHWp
0xXQsoieswXCZMoVVmuucLnyRWRkoYiLKxZJScUiJaXYn5paItLTS8WgQRXi
vPOmivHja8Tdd38sfv3rZeKNNzaKysrdYvnyI2L3biEOH1YbUS3Nzc0Nfr9/
PTmbO1G0/B15HzmBng+jZX8ygUyk56mtz5PIWHoevn27cNJjCz02ohEFzhCD
1WpNJm+3WCz5tNztcrlO2YrqrF7U17Wi9Ho9WlEAnCFer9cwceLEfjfffPM1
48aN++eIESMWJyQk7LXZbH5SnY8RERHqPKTHvO6g2Wyupa8Bk+lrwUS73T6U
duMiDcE+FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AADQfRFC6ISoMe7dK8J27TqcXV/fdOvWrYderK8/VEKPa7duPVi/efPBPWvX
NjQuWLC7qbJyW9PkyV82/v73X+y+997Ptl511ayNF144fWV2dsWC/v1LZyYl
lZTTMj87u9JL6wr69y+ZGR6e96XLlXckKqpcxMRUibCwCmE0lghFKVbV67kZ
5aN1nmNms8/vcBSJ0NAyERlZImJjC0V8fKGfm1GZmWVqJ2rChJni3ns/Ec88
84V4550NYtq0XWL58oOivv6I2L//6NFDh47tbWlpWUfO9/v9+eT/I58i7yLH
kefSeSfTMoKWzlZDyTBa56qr89vosYn7UHx9gv0ZgV6B2opyOBx3koXknpCQ
kJaTNaI6uxfFjShu1fD+uBVlNpu5E4VWFACdwGWXXWa84YYbYm+88cZx3//+
91++6qqrFmZkZOzhVhTNeXUucqstNjZWfWwwGIROp9tNc262xWL5C3kl7SZB
wdwDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF+D
EMLg9/sdTU3+xN27j47eufPQw7ScvGvXoc937z68ff/+w/v37Dm0v77+4J7V
q/fvXrBg9/aKiq2bJ0/esPYPf6hd+sADn83//vfnVl599cycsWOr3xo3rubv
EybM/tNNN83+8y23zH11/PiZ/xs9etqnl1xS3XD11QvF+PFLxODB80RISIVQ
lHzSc0Sny9mr1+d8ZTB4NptM3iartUQ4nZUiLIx7UYUiIaFYpKdXiPPPny6u
u262ePDBz8Rzz9WK9977UlRWbheLF+9t2bjxwKFduw5vO3jwWO3Roy01fn/L
lJYW/6t0fk/T+T1Ay5uPHhWXHDniH9LaiYqkpb21CRWogRtRwf5cQK+jrRXl
+v/s3HmYnXV9+P05+332mXNmEoJsYgRZBYJYDBJEdlAIySQsiUHZBExELS21
auzTR6X111YqjxW3Cq6grdi6YasUtCJ1wSq4UNlUKGuA7JnMnPv3/Z7OyTPG
YBWCJ8jrdV2f63tv577vM1cO/Peu17utqLBOTG07PdFWVO+6Xhtq6md7x3rX
xe1SqdTt1eTz+U6hUNCKgidh+fLl+WXLlk2fN2/eYccff/wlBx988E0jIyMP
h1OxxdZttcVWVOy1xVZb+K3F397qYrH4/TCXhzkpXLtzmFKfvwoAAAAAAAAA
AAAAAAAAAAAA27DYR7r77nToscfW7/bQQxuPfOSRsTc8+ujY1Y88suH2lSs3
bFi9emx81aoNj61YseGeX/xize0/+cnKW775zYe/9bnP3XPd+99/+2fe/vZb
//6ii773N8uWfXf5a17zrdctW3bzORde+N2z/uiPbj73TW/6z9f94R9+75IL
L7z5s+GaX7zlLbelF110Z3r88TelO+zwz2uy2avuHhj4+HcGBq76UibziU+H
/S/k85/8UbH46XXl8mfTev0zneHha9KddvpS+vzn/1t6zDHfSM8999vp2952
a3rFFbETdW/67W8/PP7Tn65cdd9963+6cuXYV9at23jFxMTEO8bHO68Ps6TT
6Zy4cWPnJWE9MMzuYZ4VpjWlE6ULxe9CbmhoaKdGo3FKtVq9plKprKjVahO9
jtPj9aJ+01ZUvE/s0MQ1tmlilyaeq9fraXhW91y8Lp4rl8u9Xo1WFDxJsRX1
rne9a/qiRYsOnzNnzl/ts88+3xseHn40/KY68bfWbrc3daLifmy1FYvFNWG9
LcwVYXt+uM0uYZI+fxUAAAAAAAAAAAAAAAAAAAAAtmG33JIW7723M7JqVWef
NWs6L1+7dvyNYa5Zu3bjz9etm0jjrF079tDKlRtvefDB9V//2c/Wfv5HP3rs
EzfeuOLvvvCF+97+iU/c8ccf/OBPz3v/+29f9L733XHie95zx9HvfvdtR77/
/T857mMfu3v0ox+964Irr7z9bz/ykbu//uEP3/ngX//1j1eeddZ/3Ln//l/+
arX66SsGBj55ycDAx/8om/34smz2qrfkcp/8WKFw1beKxatvr9f/8ecjI59Z
+exnX5sedNCN6YIFN6dvfvOt6ZVX3p1ed93D6fe/vzK9/fZVG++/f919jz22
8Wvhnf9ubGz8DZ1O5/QwJ4Q5NMz+sRGVpulOYR0J0whTCvu5MJl+//15xsgl
SfIrrajYcop9p14z6qloRcU+TXjmpuOxHZXP57WiYCu4+uqrc29729tGFi9e
fMTRRx/9oTlz5tw3e/bs8QMPPDCdOXNmOjw83P0dxt9g7ERN/vbWFovF28Nv
86NhHQ23eXaYcr+/CwAAAAAAAAAAAAAAAAAAAADbpthKuvPONFm9ujNjbKzz
gvHxzsKwLh8bm/jHsbHx2zZsGF+1fv3GR8P6w7Vrx764cuXGDz344Lq/+tnP
Vr/lRz9a9drvfOehV33rWw/Nv/HGh4+94YYH5lx33YMHXnvtf+99zTV37Xnt
tXfu94MfPPyiH/zgsRNuuunh866//v5Lv/Sl//6Hj3/8zmv+7M9ufe9xx33t
4u22+6fFAwNXHT8w8JHDBgY+eWgu94kTstmrzisUrnpHklz9vsHBf/zU9Omf
+dauu35+xUEHfXV80aL/mHjXu37Suf76R9O7755IH344TR96aMPGxx4bu3vD
hol/Gh8ff0un05kfvtchYd03zHPDPCtNO+2HHvr/G1H9/rvzjNRtRVWr1VPq
9fo1YV0R1l9pRT3RiZ/v3WvzVlRsQ8WOVDzWa0Xlcrk4WlHwJMVW1Nvf/vb2
4sWLjz7uuOM++/KXv3zjK1/5yvRVr3pV59BDD+22omKvLf4GYysqm83G396a
8Ju7LRy/slgszg+32WVAKwoAAAAAAAAAAAAAAAAAAACALYidqDD5MLW1a9Od
Op3OH4yPd04L659OTEx8aHx8/CsbN45/Z3x84htjYxOf3rhx4q/Xrh3740cf
HTv34Yc3nHrffetffvfdq4648861B99xx+rn/+hHD+5+yy0rdrrxxvumf/vb
9ww/8MDqGevWrXvO6tUb9rvrrnWH33rrqgXf+MaD5375y/ed/cEP/njB0qXf
nbP33l/Yt1j89HMHBj6xy8DAR3ceGPhY2L7qoLB/bJJ86tRW6x9f+6xnfeay
3Xb74rWHHvrV71xwwbd//IlP3P3AD3+4urNuXZqOjaXp2rXjj4yNbfxOeO8P
hO9yzmQn6jlhpoftobBWw1oIk+3335xntNgo29SKCrOpFbU1elG9zw8ODnZb
UXF6rag4cbvdbndbUbFbk8lkYrOmk8/ntaLgSYitqHe/+93thQsXHjtnzpwv
H3nkkZ0zzjgjPf/889e95CUv2djrs8XfZvj9p+G3FltRq8Jv7/vFYvHyMCeG
24T//w0k/f4uAAAAAAAAAAAAAAAAAAAAAGx7rr46zXU6nVKapoNh3TGss8Kc
FLbPn5iYeGuYvw1zeZhLx8c7bwnz6rVrNyxcvXrjMStXjh366KNjBz788Ia9
7rtv3a4PPrhm+8ce67QfeqjTCPdIwhRjoylMK8z269alu9511/o977xz9X63
3LJ6vxtuuHfPD3zgjp3nz//uSLP5saGBgY80BgbeWR0YuDbMv7QHBv5+l4GB
j+4zOPjJQ3fe+XOnHnDAtRedcMLXLnn722+9/N/+7f6v/Pznq3+xZs3GlWNj
4/eMj0/cGN7xyvCcPwlzQpjdJxtR8bvlYhOr339rGJjSimo0GtcMDg6uaDab
m1pRvV7Ub9OHiu2ZOFs6Fqd337gdezXDw8PdhlSpVErDu8RelFYUPEmxFXXF
FVe0FyxYcPQBBxzw+QMPPLBz0kknrTvrrLPuOeSQQx4Jv71O/G3HVlv8jSZJ
EntRD4e5PvwW3xHmyHCbGQN+ewAAAAAAAAAAAAAAAAAAAABsQZqm2dhTChP7
TtvFxlKY2WFODLMkzLlhzgtzVphTwxwb5kWrV294/vr1nd1iX2rVqlXTY2vq
/vvTWuxDhcnH+8Y+0+R27EbV4jMefTQduvfezsiqVZ1p99yzcvgLX3iosXz5
ncmsWZcXBgaujh2dyaZTGrYvrwwMvL9VLn9khz33vGbPo466/kWvfe13j73y
yjteceutj731kUfGPrJhw/hnYyMqzCXj452lsXM12bvaLr5LX/+48Ku6ragk
SbqtqHq9viLMRLlcTiuVSrfp1Gs9PZFW1NRGVO9Yrz8V92MjKrZq4losFrWi
YCuJrahLL7105JRTTjn8kEMOee/s2bN/ePLJJ3/3Va961XUvfelL/3PXXXd9
YNq0aevjby/+1sNvbW343d+y3XbbfWiXXXY5O/w+9wm3qYXJ9vu7AAAAAAAA
AAAAAAAAAAAAALDtmew5FTqdTjmszbDOCLNbmnZeEObwsH3M5Lw0zMFh9g3z
nDDbh2mHqU+2oAphcpP3686U++cmm1HxmmJsU8XP3HZbp3Tdddfle9f+quXZ
MPmBgUtLL3rR1+vLlt04/S//8gfP+ad/uuuAu+9ed9SKFeOLN2wYPzM2rDZu
7Bwf1jlhDgjz7Niuis/9Xf4t4TeQS5Jkp2q1ekq9Xr8mrCvC/kQ+n09LpVK3
6RRbMnE270X19uM1U4/39nstqKmdqKnX9CZeE4/1WlHZbLZTKBS0ouBJWL58
eX7p0qUjZ5555kFLliy5YPHixZeec845f3322Wf/1dy5c/9h9uzZP9h1110f
Cb/BTi6XG8tkMr+o1WqfO+igg/5wwYIFhx511FGtfn8HAAAAAAAAAAAAAAAA
AAAAALZtaZpmJztOSWw/hZk+2YPaOxzbL6z7hNk9bO8SZrswQ2G/Otl8yk9+
Pvv4zadNzajs1Pkt3zFz6aW3la655sH6DTfcO3L77Wt3Wr++s1t4hz3iu4WZ
GRtRYXYMMxKur2hFsQ2K/yZ3SpJkUyuqWCxOZDKZbrspNpxardam5lOv7zS1
/9Q7tvn21MbU5q2oOOF53emd67WicrlcJ2xrRcGTMDo6mlu6dGnj3HPP3eX1
r3/9i8KccNFFF730nHPOedm8efPedfjhh9/23Oc+d0P47cff3Zrwu7sl/F4/
ePDBB59y8cUX73bppZeW+v0dAAAAAAAAAAAAAAAAAAAAANj2Tfab8pP9p1pY
27ELFdZnTbaj2pMdqdJkVyrX60P15nfwjpnrrkvzt9ySFiffI/agmmEGp0wz
nCtPvuNT/k7wW+q2orLZ7CmVSqXbiiqVShNh/wm1oqZO75rNO1FTPzf1/rFZ
ExtVWlGwVWSWL1+eHR0dLZ5//vm1v/iLv6h/+9vfLpx55pmtY4899s0veclL
Ht59993TfD4fW1Erwu//a8PDw+/YcccdjwzHt581a1ah318AAAAAAAAAAAAA
AAAAAAAAgG3fZO8pO9mAKsQWU5jq5MT2UrEffajf4J3zk+9WmNzO9fu94Nfo
tqLCnFIqla6pVCorisXir7SiNu9C/TatqF93PK7tdrvbiiqXy7ETFds1nUKh
oBUFT4FjjjmmccIJJ7zt6KOPXnPQQQel06dPXxN+f9/bYYcd/n6nnXY6p1qt
7h0uq4XJ9vtdAQAAAAAAAAAAAAAAAAAAAHj6mNKB6nWjcps3ovr9jlNti+8E
v8amVlQ+n78mzIpsNjuRyWSedCuqN5uf7302TmxExVZUfEa1Wk0LhUIcrSjY
+jJLly4tnXHGGfvMnz//A3Pnzh074YQTxg8//PBbDj300CvDLJs9e/Yhe+65
Z6vfLwoAAAAAAAAAAAAAAAAAAADA09+UdpQmEzx5m1pRmUzmmjArwvZEmN9J
KypObEXFZlRsRcVnxlZUWLWiYCtavnx59nWve11ryZIlsxcsWHDZ6OjoXQsX
LvzxokWLPnbGGWe8/pWvfOWcCy64YPtwXb7f7woAAAAAAAAAAAAAAAAAAAAA
wC/5lVZUmIkwW70VtaVr4j1iJypul8vl2IlKS6VSJ2yvTJJEKwq2ktHR0dyZ
Z57ZOu2002bNnz//tWE+vGDBgveccsopS1/xile8JJybrhMFAAAAAAAAAAAA
AAAAAAAAALBN+qVWVDabfUpbUVvqRsX71Ov1NEmSbisqrJ1qtbqyUqloRcHW
kznmmGMa8+fPnzlv3rxj586de25YF42Ojh6ycOHCHQf+578FAAAAAAAAAAAA
AAAAAAAAAPCMkKZppjf9fhf4DWTD7Bzm1Gw2+9lcLtdtRYX9J92K6p3fvBcV
u1Bxpn6mVqttsRUVRisKtpLR0dFcmFrsRYU5aO7cuXuHdeSYY44p9fvdAAAA
AAAAAAAAAAAAAAAAAOCpNtmGqnQ6nVZYm2EthzWvF8XTQG7gf1pRp+Tz+WvC
bNVW1JZ6UZu3ouLaa0XFZ5bL5V9qRYVjWlGwFR155JHVuXPnTovdqH6/CwAA
AAAAAAAAAAAAAAAAAAA81dI0zXY6nXqYmWH7kDBHhO0DwsyI7Si9KJ4Geq2o
hfl8/h/CPPhUtaJ6107tRMXzvVZUpVKJnai43QnXrAyrVhQ8BZYvX54dHR0t
xrXf7wIAAAAAAAAAAAAAAAAAAAAAT5XYf5rsQDU7nc5eYRZOTEy8Nczbw/ZZ
4fisMMNhuxTWXL/fF36N+O/zWWFOyufzH8vlcvdkMpmNA1uhFfV4M/UeQ0ND
m/pRsRcVJ+x3wnUrw9ptRYV30YoCAAAAAAAAAAAAAAAAAAAAAOA3NtmJynU6
nXKY7cPMGR8ff+PExMRnwlwb5l3h2NwwzwnTCNcWwmT7/d7wOOK/zXaYw3K5
3GVhfprJZNYP9KEV1btHOK4VBQAAAAAAAAAAAAAAAAAAAADAk5Kmab7T6dTD
7Bi2DwvrmyY7Uf8Z5rPj4+MXhmMvCDMtNqViW6rf7wyPI7aimoVCYVYul/vz
MN/LZDKrwrHOb9OKmmw8bTq2pYZU7/zjtaLiNXE/jFYUAAAAAAAAAAAAAAAA
AAAAAABPSmw/hal1Op0Zk02oCyYmJj4V5gdhvhHmr8KxE8I1u4ZphimGyfT7
vWELeq2o/ZMkeVOpVPpWLpd7LJPJPKlWVO+6/60VFSd2omq1mlYUAAAAAAAA
AAAAAAAAAAAAAABbTZqm2TBJp9MZCbNHmHkTExOXhblpshd1VTh/Tpj9Jq8p
x8/0+71hCza1ohqNxhvr9fpNpVLp0diKCse2WisqHo8dqKnne9uxE1WtVrvH
tKIAAAAAAAAAAAAAAAAAAAAAANha0jQthGl2Op2dw8wJ88aJiYlrw/w4zL+F
/T8Lc3i4ZqcwtTD5fr8zbMGmVtTg4OAbm83mN8vl8qPZbLbbiqrX65saT722
09SZ2oTavBk19djmLampE58Re1Fxe/JZnbC/MsxXwpwVzj83vGOh338oAAAA
AAAAAAAAAAAAAAAAAACeXtI0zXU6nWpYtwuzX9h+5cTExEfCfD/MzWHeH46d
Es49L8xQmGKYbL/fGzazqRXVaDS6rahKpfJoPp/vtqJ6DafYeIodp143qtd3
6vWg4vbU3lOcLXWlpnajNm9N9Z4R7tNJkuSxcrn8r61W68wdd9zxOQNaUQAA
AAAAAAAAAAAAAAAAAAAA/JbSNM10Op1SmFaYmWGOm5iYuCTMDWF+GObz4dgb
whwUZlq4PtGKYhsU/00OFgqFA2q12p9Wq9WbSqXSY9lsthPWbr+p1Wr9SuMp
tqLi9I71elFx7fWkttSK6jWhttSK6n0uvEOnWCyuCnNDeMaycHyv8I75fv+h
AAAAAAAAAAAAAAAAAAAAAAB4+knTNN/pdOphdgjzwvHx8ddOTEx8Nsx/hf2b
w/q3YT0+zI5hyuH6XL/fGTazqRWVJMmflkqlm3K53GPhWKdcLqfTpk1Lp0+f
3u06VavVbh8qdp16a+w7tdvt7rp5++mJtqJqtVpsRa3J5/PfCe/z/4b3mh3e
p9DnvxMAAAAAAAAAAAAAAAAAAAAAAE9DaZpmYwMqzEjY3jOsp4b50MTExI/C
3BGOXR32XxFmZtiuxVZUmEy/3xumiK2oZqFQ2C9JkovD+vVMJrNiYLIVtd12
26UzZszYYisqTmw7tVqt7vR6Ub1zv20rqne8VqulpVJpLJ/P/yzMp8M7nR3e
Z6fJdwUAAAAAAAAAAAAAAAAAAAAAgN9KmqbFMINhdu10OkeG+X/Gx8e/OjEx
cXPY/liYJWGeG6Ya21L9fl/YTPw3WS8UCvuUy+XXhvXaTCbzQDjWKZVK6cjI
SDp9+vRu1yk2nOIae069XlRc47HYiYq9qN653vEn0oqKTar47GKxuCa8zw/z
+fzlYfvY8E7bhcn3988FAAAAAAAAAAAAAAAAAAAAAMDTTZqmuTC1TqezfZgD
wiyamJi4JMx7xsfH/zjsvzSei02pfr8rbEEmTDlJkp3DnFYqla7I5/P/FWas
XC5vakD1ek9xP06vFdWb2HjqtaI2b0Q90VZUeJ/xMA+F9/hi2D8zvOdzw5T6
/PcCAAAAAAAAAAAAAAAAAAAAAOBpJk3TTKfTKYV1MKw7htk/zNFhjg9z0GRD
St+GbVnsRVXK5fIfVCqVP202m9e32+1HBgcHO7HbFCd2nWILKk5sRfU6T7Va
rTtxP3ae4rmpLagn04oK79Kp1+urwtwQ9i8I77hnmKTPfysAAAAAAAAAAAAA
AAAAAAAAAJ6G0jTNhUnC1DqdTivMSNgemmxIZfr9fvAbyCRJsmOj0Vgwffr0
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
IyMj14T5crlcvjWbzT5arVbHJ1tQ3W5UnF4vqteKiucGBwdjK+oXmUzmS6VS
aekOO+ywz8yZMxv9/q4AAAAAAAAAAAAAAAAAAAAAAABPQ5mZM2eWRkZGtqvX
6y8M87JqtbqgUqksHhoaOndwcPCNYf/DpVLpW+Vy+cFwvhP20yRJ0nBNtw8V
ruk2o6Z0ozaEc/eEa74UPvOacH7fcK9mv78oAAAAAAAAAAAAAAAAAAAAAADA
01im2WwOJUmyU6lUenaxWHxutVrdJ2y/JKyvqdVqfx/OfTfsrwrTia2ocCwd
GhpKW61WtxEVW1H1ej0e3xA+c0+Ya8Msq1Qqzw/314oCAAAAAAAAAAAAAAAA
AAAAAAB4cnJhSmGSMJXJGanVarOr1erSUqn0sUKhcFu5XF7daDQ6sRE1PDyc
ttvtbisqdqK0ogAAAAAAAAAAAAAAAAAAAAAAAH6nMuVyeftKpXJsqVS6JMw3
w/6DzWZzPDaipk2b1u1FNRqN2IjqrvV6fUNY7wn7WlEAAAAAAAAAAAAAAAAA
AAAAAABPvaF8Pn9wpVJ5U5gbyuXyA2HG6/V6txMVm1Fxu1qtdtdms7lhcHDw
nqGhoWvDqhUFAAAAAAAAAAAAAAAAAAAAAADw1MkODQ01g/3CvKFWq/1rkiT3
FgqF8XK5nIZz3YmNqHCuO41Go9uKGh4evrbVamlFAQAAAAAAAAAAAAAAAAAA
AAAAPHWyp59+emP//fffd2Rk5IJqtfrZQqFwVz6f35gkSexCbepFNZvNNJxP
K5XKhlqt9ouw/8XBwcHXhNmn1Wo1+v1FAAAAAAAAAAAAAAAAAAAAAAAAfg9l
li9fXjvppJN222mnnRY1Go33l0qlmwuFwtqwdttQg4OD6fDwcNput2MnKg3H
N4T1nnq9fm2YZeH884eGhpr9/iIAAAAAAAAAAAAAAAAAAAAAAAC/j66++urc
/PnzW7NmzZq92267vb7dbl9dKBRuz+fz60ulUqdWq3U7UUNDQ2m5XI6tqLFG
o3Hv8PDwV8LxP67X638Q9lv9/h4AAAAAAAAAAAAAAAAAAAAAAAC/r5YvX549
77zzdpw7d+7xu++++zsajcY3isXiA/l8fjxJkrTZbKaDg4NppVKJs3FoaOih
6dOn39hqtS4J+yeEa3YKt8n2+3sAAAAAAAAAAAAAAAAAAAAAAAD8vrr44ouH
Tj/99D+YM2fORfvuu++/7LDDDvdWq9WxUqmU1uv1bitqaGgorp1arbYunLuj
Uql8OkmSPwxzSLjFUJhcv78HAAAAAAAAAAAAAAAAAAAAAADA76HM6aef3njZ
y16278knn/yaE0444YsHHHDAL1qtVrcVVavVup2oadOmpcPDw2mSJGkmk1mT
y+W+VywWPxD2F4d1t3CfWrxXv78MAAAAAAAAAAAAAAAAAAAAAADA75nMRRdd
VJ83b95eJ5100nnHHHPM5/bYY4+7kyRZn81mu62odrvd7UTFZlRsRYXjG3O5
3N2lUumfi8XiskKh8Pxwn8EBrSgAAAAAAAAAAAAAAAAAAAAAAICtLXPppZc2
zj777H2OO+648w888MDP77DDDj/L5/MbMplM2mg0up2owcHBtFqtdltRxWJx
Y6FQ+O+wfjXMRWF7VrjP0IBWFAAAAAAAAAAAAAAAAAAAAAAAwNaW+cAHPlB/
9atfvfdxxx33h7Nnz77pgAMOWLX77rt3dt5553TatGndTlS9Xk/L5XJaKpXS
QqGwsVgsPhjma2EuzufzLwj3aQ1oRQEAAAAAAAAAAAAAAAAAAAAAAGxtmXe+
853V888/f6+TTz55+XHHHfez0dHRzuLFi9OwnT772c9Oq9Vqd2IrKpfLpZlM
ZmOhULi/VCpdnyRJbEUdOKAVBQAAAAAAAAAAAAAAAAAAAAAA8FTIXH755ZXY
ijrmmGPefvjhh6845ZRT0qVLl44vXLhw7DnPeU4nNqLq9Xp3isVims1mN+bz
+XvC9pfDvKFQKBwQ7jM0oBUFAAAAAAAAAAAAAAAAAAAAAACwtWWuvPLK6oUX
XrjXIYcccsn++++/4uijj07PPPPMx+bNm7dil112Ga9Wq+nQ0FDaarXSuF0s
FmMr6r/CfCrMqwuFwj7hPs0BrSgAAAAAAAAAAAAAAAAAAAAAAICtLXPZZZfV
Yitqzpw5fzJr1qxbjjjiiPvOOOOMm+fNm/f95z3vefcPDw+vb7fbncHBwbRc
LsdW1IpqtXpDOP7OZrN5UpIkO4X7JANaUQAAAAAAAAAAAAAAAAAAAAAAAFtb
5qKLLqqfd955eyxcuHDxvHnz3nvaaad9/Nxzz33/qaee+snDDjvsP/bYY497
2+32WOxEZbPZVcVi8Qc77LDD+8K5JS996Uv3GfifThQAAAAAAAAAAAAAAAAA
AAAAAABbX2bRokXV8847b8elS5e+aNmyZaddeOGFS8J6ymmnnfam448//quz
Zs16oN1uT2Sz2Ylw/f1Jknx15syZb16yZMlh73znO6f1+wsAAAAAAAAAAAAA
AAAAAAAAAAD8PhsdHc3Nnz+//LrXva61fPny7cNMCzM4d+7clx911FFfnzVr
1sTg4GAaLh3P5/M/bTQan9p+++1f/cIXvnDfI444otnv9wcAAAAAAAAAAAAA
AAAAAAAAAHgmOvbYYw8/+uijb37xi1/cedaznpWWy+UHm83m9TNmzPg/7Xb7
ZUmS7BguS/r9ngAAAAAAAAAAAAAAAAAAAAAAAM8kaZpmli5d2liwYMErTjrp
pNtPPPHE9MUvfvGjBx544NfDXBpm8fOe97y9B/6nE5Xp9/sCAAAAAAAAAAAA
AAAAAAAAAAA8kyxfvjw5++yzn3PaaaddMH/+/FtGR0cfW7hw4U1h/z2LFi06
Y8mSJbPC9lC/3xMAAAAAAAAAAAAAAAAAAAAAAOCZ6JxzzqmceeaZMxcuXHja
6OjoFWE+f9ppp/3N4sWLXxU7URdffPHQ8uXLs/1+TwAAAAAAAAAAAAAAAAAA
AAAAgGeiJUuWJKeffvoO8+bNO+zkk09+zfz5898Q5pQFCxa8IKytcEmm3+8I
AAAAAAAAAAAAAAAAAAAAAADwTDU6OppbtGhRdf78+c8+8cQTXxybUaeeeurz
jjrqqNacOXPy/X4/AAAAAAAAAAAAAAAAAAAAAAAABgaWLFmSvPzlL99+7ty5
M+bMmZOEQ5l+vxMAAAAAAAAAAAAAAAAAAAAAAACbZGIjarITBQAAAAAAAAAA
AAAAAAAAAAAAwLYp0+8XAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgP/L
HhwIAAAAAAD5vzaCqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqSntwSAAAAAAg6P9rqyMAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA4AKMxqkZ
                    "], {{0, 291.7090909090909}, {1035.709090909091, 0}}, {0, 
                    255}, ColorFunction -> RGBColor, 
                    ImageResolution -> {330, 330}], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {1035.709090909091, 291.7090909090909}, 
                    PlotRange -> {{0, 1035.709090909091}, {
                    0, 291.7090909090909}}, ImageSize -> 550]}, {"\"\""}, {
                    TemplateBox[{
                    StyleBox[
                    "\"S\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"econd \"", FontFamily -> "Centaur", 30, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"H\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"armonic \"", FontFamily -> "Centaur", 30, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"A\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"nalysis of\"", FontFamily -> "Centaur", 30, 
                    StripOnInput -> False]}, "RowDefault"]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"A\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"nisotropic \"", FontFamily -> "Centaur", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"R\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"otational \"", FontFamily -> "Centaur", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"P\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"olarimetry\"", FontFamily -> "Centaur", 30, 
                    StripOnInput -> False]}, "RowDefault"]}, {
                    StyleBox["\" \"", 20, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    StyleBox["\"   \"", 60, StripOnInput -> False], 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Version 1.00\"", FontFamily -> "Franklin Gothic", 25, 
                    StripOnInput -> False]}, {
                    StyleBox["\"\"", 8, StripOnInput -> False]}, {
                    StyleBox[
                    "\"Copyright (C) 2023\"", FontFamily -> "Arial", 16, 
                    StripOnInput -> False]}, {
                    StyleBox["\"\"", 8, StripOnInput -> False]}, {
                    StyleBox[
                    "\"          Bo Wang, Rui Zu, Lincoln Weber, Akash \
Saha,\\n           Long-Qing Chen, and Venkatraman Gopalan\"", FontFamily -> 
                    "Franklin Gothic", 16, StripOnInput -> False]}, {
                    StyleBox["\"\"", 15, StripOnInput -> False]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"Tutorial video:\"", FontFamily -> "Franklin Gothic", 
                    18, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    "\" Youtube\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False], 
                    "https://www.youtube.com/watch?v=YiKRm6i7kNs"}, 
                    "HyperlinkURL"]}, "RowDefault"]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"This program comes with ABSOLUTELY NO WARRANTY; for \
details, \"", FontFamily -> "Franklin Gothic", 18, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    "\"click here\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False], 
                    "https://www.gnu.org/licenses/gpl-3.0.en.html"}, 
                    "HyperlinkURL"], 
                    StyleBox[
                    "\".\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False]}, "RowDefault"]}, {
                    StyleBox[
                    "\"This is free software, and you are welcome to \
redistribute it\"", FontFamily -> "Franklin Gothic", 14, StripOnInput -> 
                    False]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"under certain conditions; \"", FontFamily -> 
                    "Franklin Gothic", 14, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    "\"click here\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False], 
                    "https://www.gnu.org/licenses/gpl-3.0.en.html"}, 
                    "HyperlinkURL"], 
                    StyleBox[
                    "\" for details.\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False]}, "RowDefault"]}, {
                    StyleBox["\"    \"", 20, StripOnInput -> False]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"If you used \[Sharp]SHAARP for your publications, \
please kindly cite us:  \\n\"", StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    "\"\[Sharp]SHAARP.\\!\\(\\*StyleBox[\\\"ml\\\",FontSlant->\
\\\"Italic\\\"]\\)\"", StripOnInput -> False], 
                    "https://www.nature.com/articles/s41524-024-01229-2"}, 
                    "HyperlinkURL"], 
                    StyleBox["\", \"", StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    "\"\[Sharp]SHAARP.\\!\\(\\*StyleBox[\\\"si\\\",FontSlant->\
\\\"Italic\\\"]\\)\"", StripOnInput -> False], 
                    "https://www.nature.com/articles/s41524-022-00930-4"}, 
                    "HyperlinkURL"], "\".\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontSize", "\[Rule]", "16"}], ",", "Bold"}], 
                    "}"}]}]}], "]"}]& ), 
                    BaseStyle -> {FontSize -> 16, Bold}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"]}, {
                    TagBox[
                    GridBox[{{
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    StyleBox[
                    "\"Functionality\"", 18, Bold, FontFamily -> 
                    "Franklin Gothic", StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    StyleBox[
                    "\"Functionality\"", 18, Bold, FontFamily -> 
                    "Franklin Gothic", StripOnInput -> False]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    GridBox[{{"\"\"", 
                    InterpretationBox[
                    StyleBox[
                    RowBox[{
                    SetterBox[
                    Dynamic[$CellContext`Functionality$$], {"User Guide"}, 
                    "\"User Guide\"", AutoAction -> False, Appearance -> 
                    Inherited], 
                    SetterBox[
                    Dynamic[$CellContext`Functionality$$], {
                    "Set Material Properties"}, "\"Set Material Properties\"",
                     AutoAction -> False, Appearance -> Inherited], 
                    SetterBox[
                    Dynamic[$CellContext`Functionality$$], {"SHG Simulation"},
                     "\"SHG Simulation\"", AutoAction -> False, Appearance -> 
                    Inherited], 
                    SetterBox[
                    Dynamic[$CellContext`Functionality$$], {
                    "Partial Analytical Expressions"}, 
                    "\"Partial Analytical Expressions\"", AutoAction -> False,
                     Appearance -> Inherited]}], Deployed -> True], 
                    SetterBar[
                    Dynamic[$CellContext`Functionality$$], {
                    "User Guide", "Set Material Properties", "SHG Simulation",
                     "Partial Analytical Expressions"}, AutoAction -> False, 
                    Appearance -> "Row"]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, ColumnAlignments -> {
                    Right, Left}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, BaseStyle -> {FontSize -> 16}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    DynamicBox[
                    ToBoxes[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Set Material Properties"], 
                    Column[{"", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`schematictype$$], {
                    1 -> Style["2D Schematics", Bold], 2 -> Style[
                    "3D Schematics", Bold]}, AutoAction -> False, Appearance -> 
                    "Row"]}}, ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Left, BaseStyle -> {FontSize -> 14}], ""], 
                    StandardForm]]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Style[
                    "Functionality", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Column[{
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`Functionality$$], {
                    "User Guide", "Set Material Properties", "SHG Simulation",
                     "Partial Analytical Expressions"}, AutoAction -> False, 
                    Appearance -> "Row"]}}, ColumnAlignments -> {Right, Left},
                     ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Left, BaseStyle -> {FontSize -> 16}], 
                    Dynamic[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Set Material Properties"], 
                    Column[{"", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`schematictype$$], {
                    1 -> Style["2D Schematics", Bold], 2 -> 
                    Style["3D Schematics", Bold]}, AutoAction -> False, 
                    Appearance -> "Row"]}}, ColumnAlignments -> {Right, Left},
                     ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Left, BaseStyle -> {FontSize -> 14}], ""]]}]}, 
                    True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Wavelength Setting", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Incident fundamental wavelength (\[Mu]m):\"", 
                    StripOnInput -> False]], 
                    InputField[
                    Dynamic[$CellContext`\[Lambda]$$], AutoAction -> False, 
                    FieldSize -> 6]}}, ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Left, BaseStyle -> {FontSize -> 15}]}, True], ""],
                     StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer Selection:", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Number of Layers: \"", Bold, StripOnInput -> False]], 
                    InputField[
                    Dynamic[$CellContext`materialnumber$$], AutoAction -> 
                    False, FieldSize -> 5]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    If[
                    Not[
                    IntegerQ[$CellContext`materialnumber$$]], 
                    Style[
                    "ERROR: The number of materials must be an integer.", Red,
                     Bold], 
                    If[$CellContext`materialnumber$$ < 1, 
                    Style[
                    "ERROR: You need to use at least one material.", Red, 
                    Bold], 
                    
                    If[$CellContext`materialnumber$$ > \
$CellContext`maxmaterialnumber - 2, 
                    Style[
                    "ERROR: The maximum number of materials is set at " <> 
                    ToString[$CellContext`maxmaterialnumber - 2] <> ".", Red, 
                    Bold], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Select the layer to Edit : \"", Bold, StripOnInput -> 
                    False]], 
                    Dynamic[
                    SetterBar[
                    Dynamic[$CellContext`matindex$$], 
                    Thread[
                    Range[2, $CellContext`materialnumber$$ + 1] -> 
                    Map[ToString, 
                    Range[$CellContext`materialnumber$$]]], AutoAction -> 
                    False, Appearance -> "Row"]]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     ""]]], 
                    Row[{
                    TextCell[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Name: "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`name]]], String, FieldSize -> 20, 
                    FieldHint -> "Enter name here"]}]}, Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Case Studies and Examples", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    Button[
                    "Blank linear", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`blankMaterL[$CellContext`\[Lambda]$$]]; 
                    
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Blank nonlinear", $CellContext`mtemp = \
$CellContext`setMater[
                    $CellContext`blankMaterNL[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "BaTiO3", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`BTO[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button["Air", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Air[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "LiNbO3(11\!\(\*OverscriptBox[\(2\), \(_\)]\)0)", \
$CellContext`mtemp = $CellContext`setMater[
                    $CellContext`LiNbO3xCut\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "LiNbO3(0001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`LiNbO3zCut\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "KTP(100)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`KTPxCut[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "KTP(010)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`KTPyCut[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button[
                    "ZnO(0001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`ZnO001[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Pt(111)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Pt111\[Lambda]1550[$CellContext`\[Lambda]$$]]\
; Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "\!\(\*SubscriptBox[\(Al\), \
\(2\)]\)\!\(\*SubscriptBox[\(O\), \(3\)]\)(0001)", $CellContext`mtemp = \
$CellContext`setMater[
                    $CellContext`Al2O3$0001\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "GaAs(111)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`GaAs111\[Lambda]800[$CellContext`\[Lambda]$$]\
]; Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button[
                    "X-cut Quartz", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Quartz$xCut\[Lambda]1064[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Quartz(001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Quartz$zCut\[Lambda]800[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Au Coating", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Au\[Lambda]800[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button["MoS2", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`MoS2[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}]}, Left, 
                    BaseStyle -> {FontSize -> 12, FontFamily -> 
                    "Times New Roman"}]}, True], ""], StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[$CellContext`Functionality$$ == "SHG Simulation", 
                    OpenerView[{
                    Style[
                    "Calculation Controls", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Generate Fresnel Coefficients Plot:\"", StripOnInput -> 
                    False]], 
                    Checkbox[
                    Dynamic[$CellContext`fresnelcontrol$$], AutoAction -> 
                    False]}}, ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Generate Maker Fringes Plot:\"", StripOnInput -> 
                    False]], 
                    Checkbox[
                    Dynamic[$CellContext`makerfringescontrol$$], AutoAction -> 
                    False]}}, ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], 
                    OpenerView[{
                    Style[
                    "Assumptions", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Style["Assumptions for Multiple Reflection: ", Bold, 14], 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`mrassumption$$], {
                    0 -> "Full Multiple Reflections (FMR)", 1 -> 
                    "Jerphagnon & Kurtz Assumption (No MR)", 2 -> 
                    "Herman & Hayden Assumption \n (MR only for 2\[Omega] \
Homo Waves)"}, AutoAction -> False, Appearance -> "Vertical"]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    If[$CellContext`mrassumption$$ == 0, 
                    Apply[Sequence, {
                    Style[
                    "Assumptions for 2\[Omega] Inhomogeneous Waves (for FMR \
only): ", Bold, 14], 
                    Grid[{{
                    RawBoxes["\" \""], 
                    SetterBar[
                    Dynamic[$CellContext`winhAssumption$$], {
                    0 -> "Forward waves only", 1 -> 
                    "Forward + Backward waves", 2 -> 
                    "Forward + Backward + Standing waves"}, AutoAction -> 
                    False, Appearance -> "Vertical"]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Apply[Sequence, {}]]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], 
                    OpenerView[{
                    Style["Polarimetry Settings", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Incident Angle \!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\
\) (\[Degree])", Bold, 14], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"\\!\\(\\*SuperscriptBox[\\(\[Theta]\\), \\(i\\)]\\) (\
\[Degree])\"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`theta$$], {0., 89.}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 340]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`theta$$], {0, 15, 30, 45, 60, 75}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`theta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left], 
                    Style[
                    "Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\" \", RowBox[{\"(\", \"\[NoBreak]\", \
TagBox[GridBox[{{RowBox[{\"Cos\", \"[\", \"\[CurlyPhi]\", \
\"]\"}]},{RowBox[{RowBox[{\"Sin\", \"[\", \"\[CurlyPhi]\", \"]\"}], \"\
\[Application]\", SuperscriptBox[\"e\", RowBox[{\"i\", RowBox[{\"\
\[DifferenceDelta]\", \
\"\[Delta]\"}]}]]}]},{\"0\"}},GridBoxAlignment->{\"Columns\" -> {{Center}}, \
\"Rows\" -> {{Baseline}}},GridBoxSpacings->{\"Columns\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \"Rows\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \"\[NoBreak]\", \")\"}]}],Function[BoxForm`e$, \
MatrixForm[BoxForm`e$]]]\)", Bold, 14], 
                    Column[{
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Incident Ellipticity \[CapitalDelta]\[Delta] \
\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", Bold, StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`delta$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 222]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Row[{"                                               ", 
                    InputField[
                    Dynamic[$CellContext`delta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}], 
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Incident Polarization \
\[CurlyPhi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", Bold, 
                    StripOnInput -> False]], 
                    SetterBar[
                    Dynamic[$CellContext`RotatePolarizer$$], {
                    True -> Style["Rotate Polarizer", Bold], False -> 
                    Style["Fix Polarizer", Bold]}, AutoAction -> False]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Dynamic[
                    If[$CellContext`RotatePolarizer$$, " ", 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Fixed Incident Polarization \
\[CurlyPhi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`phi$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 163]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`phi$$], {0, 45, 90, 135, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`phi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]], 
                    
                    Row[{"For \[CurlyPhi] and \[Psi], 0\[Degree] refers to p- \
polarized, 90\[Degree] refers to s- polarized"}, 
                    BaseStyle -> (FontSize -> 14)], 
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"SHG Polarization \
\[Psi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", Bold, StripOnInput -> 
                    False]], 
                    SetterBar[
                    Dynamic[$CellContext`RotateAnalyzer$$], {
                    True -> Style["Rotate Analyzer", Bold], False -> 
                    Style["Fix Analyzer", Bold]}, AutoAction -> False]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Dynamic[
                    If[$CellContext`RotateAnalyzer$$, 
                    If[$CellContext`RotatePolarizer$$, 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Analyzer-Polarizer Angle Offset \
\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`analyzeroffset$$], {0, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12)]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     ""], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Fixed SHG Polarization \
\[Psi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`psi$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 235]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`psi$$], {0, 45, 90, 135, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`psi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]], 
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Sample Rotation \
\[CurlyPhi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", Bold, 
                    StripOnInput -> False]], 
                    SetterBar[
                    Dynamic[$CellContext`samplerotationcontrol$$], {
                    True -> Style["Rotate Sample", Bold], False -> 
                    Style["Fix Sample", Bold]}, AutoAction -> False]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Dynamic[
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`RotatePolarizer$$ = False; $CellContext`RotateAnalyzer$$ = False; 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Step Size\\!\\(\\*SuperscriptBox[\\((\\), \
\\(o\\)]\\)): \"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`samplerotatestep$$], {0, 360}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 235]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`samplerotatestep$$], {10, 20, 30}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`samplerotatestep$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, 
                    If[
                    Or[
                    
                    And[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`makerfringescontrol$$ == 
                    False], $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], True, False]], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[
                    
                    And[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`fresnelcontrol$$ == True], 
                    OpenerView[{
                    Style[
                    "Fresnel Coefficients Collection Settings", 18, Bold, 
                    FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Step Size \!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\)(\
\[Degree])", Bold, 14], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`thetastep1$$], {1, 2, 3, 4, 5}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`thetastep1$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}, 
                    Alignment -> Left, BaseStyle -> {FontSize -> 12}]}, 
                    If[$CellContext`fresnelcontrol$$, True, False]], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[$CellContext`Functionality$$ == "SHG Simulation", 
                    OpenerView[{
                    Style[
                    "Maker Fringes Collection Settings", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Minimum Incident Angle \
\!\(\*SuperscriptBox[\(\[Theta]\), \(min\)]\) (\[Degree])", Bold, 14], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"\\!\\(\\*SuperscriptBox[\\(\[Theta]\\), \\(min\\)]\\) \
(\[Degree])\"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`mintheta2$$], {-90, 0}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 340]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    
                    Dynamic[$CellContext`mintheta2$$], {-90, -75, -60, -45, \
-30, -15, 0}, AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`mintheta2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style[
                    "Maximum Incident Angle \
\!\(\*SuperscriptBox[\(\[Theta]\), \(max\)]\) (\[Degree])", Bold, 14], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"\\!\\(\\*SuperscriptBox[\\(\[Theta]\\), \\(max\\)]\\) \
(\[Degree])\"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`maxtheta2$$], {0, 90}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 340]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`maxtheta2$$], {0, 15, 30, 45, 60, 75,
                     90}, AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`maxtheta2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style["Scan Step Size (\[Degree])", Bold, 14], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`thetastep2$$], {1, 2, 5, 10, 15}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`thetastep2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style[
                    "Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\" \", RowBox[{\"(\", \"\[NoBreak]\", \
TagBox[GridBox[{{RowBox[{\"Cos\", \"[\", \"\[CurlyPhi]\", \
\"]\"}]},{RowBox[{RowBox[{\"Sin\", \"[\", \"\[CurlyPhi]\", \"]\"}], \"\
\[Application]\", SuperscriptBox[\"e\", RowBox[{\"i\", RowBox[{\"\
\[DifferenceDelta]\", \
\"\[Delta]\"}]}]]}]},{\"0\"}},GridBoxAlignment->{\"Columns\" -> {{Center}}, \
\"Rows\" -> {{Baseline}}},GridBoxSpacings->{\"Columns\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \"Rows\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \"\[NoBreak]\", \")\"}]}],Function[BoxForm`e$, \
MatrixForm[BoxForm`e$]]]\)", Bold, 14], Null, 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Fixed Incident Polarization \
\[CurlyPhi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`phi$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 163]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`phi$$], {0, 45, 90, 135, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`phi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Fixed SHG Polarization \
\[Psi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`psi$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 235]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`psi$$], {0, 45, 90, 135, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`psi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}], 
                    
                    Row[{"For \[CurlyPhi] and \[Psi], 0\[Degree] refers to p- \
polarized, 90\[Degree] refers to s- polarized"}, 
                    BaseStyle -> (FontSize -> 14)], 
                    Column[{
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Incident Ellipticity \[CapitalDelta]\[Delta] \
\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`delta$$], {-90, 90}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 222]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Row[{
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`delta$$], {-90, -60, -30, 0, 30, 60, 
                    90}, AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`delta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}]}, 
                    Alignment -> Left, BaseStyle -> {FontSize -> 12}]}, 
                    If[$CellContext`makerfringescontrol$$, True, False]], ""],
                     StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Thickness", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Dynamic[
                    If[
                    
                    Or[$CellContext`matindex$$ == 
                    1, $CellContext`matindex$$ == \
$CellContext`materialnumber$$ + 2], 
                    Style[
                    "(No input: thickness of first and last material is \
infinite)", 14], 
                    Row[{
                    Style["Slab Thickness (\[Mu]m)   "], 
                    Slider[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]]], {0, 1000}, ImageSize -> 150], 
                    "   ", 
                    InputField[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]]], BaseStyle -> (FontSize -> 12), 
                    FieldSize -> 4], "    ", 
                    Button["analytical h", Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]] = 
                    ToExpression["h" <> ToString[$CellContext`matindex$$ - 
                    1]]]}]]]}, Left, BaseStyle -> {FontSize -> 12}]}, True], 
                    ""], StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Crystal Structure", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    Style["Point Group:    ", Bold, 14], 
                    Style["Noncentrosymmetric -> ", 14], 
                    PopupMenu[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]]], {{
                    "1", {{11, 12, 13, 14, 15, 16}, {21, 22, 23, 24, 25, 
                    26}, {31, 32, 33, 34, 35, 36}}, 1} -> 
                    "1", {"2", {{0, 0, 0, 14, 0, 16}, {21, 22, 23, 0, 25, 
                    0}, {0, 0, 0, 34, 0, 36}}, 1} -> 
                    "2", {"m", {{11, 12, 13, 0, 15, 0}, {0, 0, 0, 24, 0, 
                    26}, {31, 32, 33, 0, 35, 0}}, 1} -> 
                    "m", {"mm2", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 24, 0, 0}, {
                    31, 32, 33, 0, 0, 0}}, 1} -> "mm2", {
                    "222", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, 25, 0}, {0, 0, 
                    0, 0, 0, 36}}, 1} -> "222", {
                    "3", {{11, -11, 0, 14, 15, -22}, {-22, 22, 0, 
                    15, -14, -11}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "3", {"32", {{11, -11, 0, 14, 0, 0}, {0, 0, 0, 
                    0, -14, -11}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "32", {"3m", {{0, 0, 0, 0, 15, -22}, {-22, 22, 0, 15, 0, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "3m", {"4", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 15, -14, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "4", {"6", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 15, -14, 0}, {
                    31, 31, 33, 0, 0, 0}}, 1} -> "6", {
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)", {{0, 0, 0, 14, 15, 
                    0}, {0, 0, 0, -15, 14, 0}, {31, -31, 0, 0, 0, 36}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)", {
                    "4mm", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 0}, {31, 31,
                     33, 0, 0, 0}}, 1} -> "4mm", {
                    "6mm", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 0}, {31, 31,
                     33, 0, 0, 0}}, 1} -> "6mm", {
                    "422", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, -14, 0}, {0, 0, 
                    0, 0, 0, 0}}, 1} -> "422", {"622", {{0, 0, 0, 14, 0, 0}, {
                    0, 0, 0, 0, -14, 0}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "622", {"\!\(\*OverscriptBox[\(4\), \(_\)]\)2m", {{0, 0, 
                    0, 14, 0, 0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0, 0, 0, 36}}, 
                    1} -> "\!\(\*OverscriptBox[\(4\), \(_\)]\)2m", {
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)", {{11, -11, 0, 0, 
                    0, -22}, {-22, 22, 0, 0, 0, -11}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)", {
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)m2", {{0, 0, 0, 0, 
                    0, -22}, {-22, 22, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)m2", {
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)3m", {{0, 0, 0, 14, 0,
                     0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0, 0, 0, 14}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)3m", {
                    "23", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0,
                     0, 0, 14}}, 1} -> "23", {"\[Infinity]", {{0, 0, 0, 14, 
                    15, 0}, {0, 0, 0, 15, -14, 0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "\[Infinity]", {"\[Infinity]m", {{0, 0, 0, 0, 15, 0}, {0, 
                    0, 0, 15, 0, 0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "\[Infinity]m", {"\[Infinity]2", {{0, 0, 0, 14, 0, 0}, {0,
                     0, 0, 0, -14, 0}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\[Infinity]2"}, "--"]}], 
                    Row[{
                    Style["                                     "], 
                    Style["Centrosymmetric -> ", 14], 
                    PopupMenu[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]]], {{
                    "\!\(\*OverscriptBox[\(1\), \(_\)]\)", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(1\), \(_\)]\)", {
                    "2/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> "2/m", {"mmm", {{0, 0, 0, 0, 0, 0}, {0, 
                    0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "mmm", {"4/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {
                    0, 0, 0, 0, 0, 0}}, 0} -> "4/m", {
                    "4/mmm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 
                    0, 0, 0, 0}}, 0} -> "4/mmm", {
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)", {
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)m", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)m", {
                    "6/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> "6/m", {"6/mmm", {{0, 0, 0, 0, 0, 0}, {0,
                     0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "6/mmm", {"m3", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {
                    0, 0, 0, 0, 0, 0}}, 0} -> "m3", {
                    "m3m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> "m3m", {"432", {{0, 0, 0, 0, 0, 0}, {0, 
                    0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "432", {"\[Infinity]/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0,
                     0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]/m", {"\[Infinity]/mm", {{0, 0, 0, 0, 0, 0}, {
                    0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]/mm", {"\[Infinity]\[Infinity]", {{0, 0, 0, 0,
                     0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]\[Infinity]", {"\[Infinity]\[Infinity]m", {{0,
                     0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 
                    0} -> "\[Infinity]\[Infinity]m"}, "--"]}], 
                    Row[{
                    Style["a = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 1]], FieldSize -> 5], 
                    Style["    b = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 2]], FieldSize -> 5], 
                    Style["    c = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 3]], FieldSize -> 5]}], 
                    Row[{
                    Style["\[Alpha] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 4]], FieldSize -> 5], 
                    Style["    \[Beta] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 5]], FieldSize -> 5], 
                    Style["    \[Gamma] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 6]], FieldSize -> 5]}]}, Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Crystal Orientation", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    SetterBar[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1]], {
                    1 -> Style["Use Miller Indices (hkl)", Bold], 2 -> 
                    Style["Use Crystal Physics Direction", Bold]}]}], 
                    Row[{
                    Tooltip[
                    Style[
                    "?(hkl)", Black, Bold, 11], $CellContext`hklExplain], 
                    Spacer[3], 
                    Tooltip[
                    Style["?Crystal Physics", Black, Bold, 11], 
                    Dynamic[
                    Style[Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1] <> 
                    ": " <> $CellContext`ZSysExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]], "Times New Roman", 20]]]}], 
                    Dynamic[
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1] == 2, 
                    Column[{
                    Row[{
                    Style["Rotation Angle =  "], 
                    InputField[
                    Dynamic[$CellContext`rotationAngle], FieldSize -> 5], 
                    Style[" degree(\[Degree]) "], "    ", 
                    Button["Apply Rotation Angle", Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1]]]]; Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]]]; Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 
                    3]]]]; $CellContext`rotationAngle = 0]}], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(1\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(2\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(3\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}], 
                    Column[{
                    Grid[{{
                    TextCell[
                    Style["(hkl) \[Rule] Crystal Surface Plane: ", Bold]]}, {
                    Row[{
                    Style["h = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 1]], FieldSize -> 
                    5], 
                    Style[",  k = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 2]], FieldSize -> 
                    5], 
                    Style[",  l = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 3]], FieldSize -> 
                    5]}]}, {
                    TextCell[
                    Style[
                    "[hkl] \[Rule] Direction Perpendicular to Plane of \
Incidence", Bold]]}, {
                    Row[{
                    Style["h = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 1]], FieldSize -> 
                    5], 
                    Style[",  k = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 2]], FieldSize -> 
                    5], 
                    Style[",  l = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 3]], FieldSize -> 
                    5]}]}}, Alignment -> Left]}]]], 
                    Column[{
                    Dynamic[
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1] == 0, 
                    Row[{""}], 
                    Row[{
                    If[
                    And[Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]] == 0, Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] == 0, Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] == 0], "", 
                    Style[
                    "ERROR: The crystal physics basis vectors are not \
orthogonal.", Red, Bold]], 
                    If[Dot[
                    SetPrecision[
                    Chop[
                    Cross[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]], 5], 
                    SetPrecision[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]], 5]] > 0, "", 
                    Style[
                    "ERROR: The crystal physics basis vectors are not \
right-handed.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(1\)]\) is not a unit \
vector.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(2\)]\) is not a unit \
vector.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(3\)]\) is not a unit \
vector.", Red, Bold]]}]]]}]}, Left, BaseStyle -> {FontSize -> 12}]}, True], 
                    ""], StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Dielectric Tensors \
(\!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(\[Omega]\)], \
\(ij\)]\) and \!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(2  \
\[Omega]\)], \(ij\)]\))", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    
                    Row[{" \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \
\(ij\), \(\[Omega]\)]\) = ", 
                    MatrixForm[{{"", 
                    Grid[
                    Map[InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`\[CurlyEpsilon]\[Omega]C]], 
                    Apply[Sequence, 
                    SlotSequence[1]]]], FieldSize -> 9]& , 
                    
                    Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 
                    3}, {$CellContext`j, 3}], {2}], Spacings -> {0, 0}, 
                    ItemSize -> All], ""}}]}], 
                    
                    Row[{"  \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \(ij\
\), \(2  \[Omega]\)]\) = ", 
                    MatrixForm[{{"", 
                    Grid[
                    Map[InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`\[CurlyEpsilon]2\[Omega]C]], 
                    Apply[Sequence, 
                    SlotSequence[1]]]], FieldSize -> 9]& , 
                    
                    Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 
                    3}, {$CellContext`j, 3}], {2}], Spacings -> {0, 0}, 
                    ItemSize -> All], ""}}]}]}, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " SHG Tensor \
(\!\(\*SubscriptBox[StyleBox[\"d\",FontSlant->\"Italic\"], \"ijk\"]\))" <> 
                    " pm/V", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Row[{"\!\(\*SubscriptBox[\(d\), \(ij\)]\)=   ", 
                    MatrixForm[{{"", $CellContext`dgrid, ""}}], "    ", 
                    Button["analytical dij", Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`dC]] = 
                    Map[ToExpression[ToString[#] <> "m" <> 
                    ToString[$CellContext`matindex$$ - 
                    1]]& , {{$CellContext`d11, $CellContext`d12, \
$CellContext`d13, $CellContext`d14, $CellContext`d15, $CellContext`d16}, \
{$CellContext`d21, $CellContext`d22, $CellContext`d23, $CellContext`d24, \
$CellContext`d25, $CellContext`d26}, {$CellContext`d31, $CellContext`d32, \
$CellContext`d33, $CellContext`d34, $CellContext`d35, $CellContext`d36}}, {
                    2}]; Map[$CellContext`indexfun1, 
                    Range[$CellContext`materialnumber$$ + 2]]; Null]}, 
                    BaseStyle -> {FontSize -> 12}]}, 
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]], 3] == 1, True, False]], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer Properties Preset Values", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Press update before setting any preset.", Blue, 14], 
                    Row[{
                    Button[
                    Style["Preset 1", Bold, Black], $CellContext`ptest1 = 1; 
                    If[
                    ValueQ[$CellContext`presetval1], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval1, $CellContext`presetval1 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap1], 
                    Spacer[5], 
                    Button[
                    Style["Preset 2", Bold, Black], $CellContext`ptest2 = 1; 
                    If[
                    ValueQ[$CellContext`presetval2], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval2, $CellContext`presetval2 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap2], 
                    Spacer[5], 
                    Button[
                    Style["Preset 3", Bold, Black], $CellContext`ptest3 = 1; 
                    If[
                    ValueQ[$CellContext`presetval3], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval3, $CellContext`presetval3 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap3], 
                    Spacer[5], 
                    Button[
                    Style["Preset 4", Bold, Black], $CellContext`ptest4 = 1; 
                    If[
                    ValueQ[$CellContext`presetval4], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval4, $CellContext`presetval4 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap4], 
                    Spacer[5], 
                    Button[
                    Style["Preset 5", Bold, Black], $CellContext`ptest5 = 1; 
                    If[
                    ValueQ[$CellContext`presetval5], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval5, $CellContext`presetval5 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap5], 
                    Spacer[5], 
                    Button[
                    Style["Preset 6", Bold, Black], $CellContext`ptest6 = 1; 
                    If[
                    ValueQ[$CellContext`presetval6], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval6, $CellContext`presetval6 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap6], 
                    Spacer[5], 
                    Button[
                    Style["Preset 7", Bold, Black], $CellContext`ptest7 = 1; 
                    If[
                    ValueQ[$CellContext`presetval7], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval7, $CellContext`presetval7 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap7], 
                    Spacer[5], 
                    Button[
                    Style["Preset 8", Bold, Black], $CellContext`ptest8 = 1; 
                    If[
                    ValueQ[$CellContext`presetval8], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval8, $CellContext`presetval8 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap8], 
                    Spacer[5], 
                    Button[
                    Style[
                    "Clear Presets", 
                    Bold], {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = 
                    Table[0, 
                    8]; {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]; 
                    Clear[$CellContext`presetval1, $CellContext`presetval2, \
$CellContext`presetval3, $CellContext`presetval4, $CellContext`presetval5, \
$CellContext`presetval6, $CellContext`presetval7, $CellContext`presetval8], 
                    Appearance -> "DialogBox"], 
                    Spacer[5]}, BaseStyle -> {FontSize -> 12}], 
                    Row[{
                    Dynamic[
                    If[$CellContext`ptest1 == 1, 
                    Row[{"Preset 1 Label: " InputField[
                    Dynamic[$CellContext`plabel1], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest2 == 1, 
                    Row[{"Preset 2 Label: " InputField[
                    Dynamic[$CellContext`plabel2], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest3 == 1, 
                    Row[{"Preset 3 Label: " InputField[
                    Dynamic[$CellContext`plabel3], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest4 == 1, 
                    Row[{"Preset 4 Label: " InputField[
                    Dynamic[$CellContext`plabel4], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest5 == 1, 
                    Row[{"Preset 5 Label: " InputField[
                    Dynamic[$CellContext`plabel5], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest6 == 1, 
                    Row[{"Preset 6 Label: " InputField[
                    Dynamic[$CellContext`plabel6], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest7 == 1, 
                    Row[{"Preset 7 Label: " InputField[
                    Dynamic[$CellContext`plabel7], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest8 == 1, 
                    Row[{"Preset 8 Label: " InputField[
                    Dynamic[$CellContext`plabel8], String]}], ""]]}], 
                    Toggler[
                    Dynamic[$CellContext`presetpopuptextvar], {
                    0 -> "Show Preset Information", 1 -> "Hide"}, Background -> 
                    LightBlue, Alignment -> Center], 
                    Dynamic[
                    If[$CellContext`presetpopuptextvar == 1, 
                    Style["Presets currently set:   " <> If[
                    ValueQ[$CellContext`presetval1], "1   ", ""] <> If[
                    ValueQ[$CellContext`presetval2], "2   ", ""] <> If[
                    ValueQ[$CellContext`presetval3], "3   ", ""] <> If[
                    ValueQ[$CellContext`presetval4], "4   ", ""] <> If[
                    ValueQ[$CellContext`presetval5], "5   ", ""] <> If[
                    ValueQ[$CellContext`presetval6], "6   ", ""] <> If[
                    ValueQ[$CellContext`presetval7], "7   ", ""] <> If[
                    ValueQ[$CellContext`presetval8], "8   ", ""] <> If[
                    Or[
                    ValueQ[$CellContext`presetval1], 
                    ValueQ[$CellContext`presetval2], 
                    ValueQ[$CellContext`presetval3], 
                    ValueQ[$CellContext`presetval4], 
                    ValueQ[$CellContext`presetval5], 
                    ValueQ[$CellContext`presetval6], 
                    ValueQ[$CellContext`presetval7], 
                    ValueQ[$CellContext`presetval8]], "", "None."] <> 
                    "\nUpdate and press any of the preset buttons to save a \
material's \ninformation to that preset. \nPress the button again and update \
to apply those values.\nHide and show this message to refresh.", 
                    "Times New Roman", 12], ""]]}, 
                    BaseStyle -> {FontSize -> 12}]}, False], ""], 
                    StandardForm]]}, {
                    ButtonBox[
                    GraphicsBox[{
                    RGBColor[0, 1, 0], 
                    EdgeForm[
                    GrayLevel[0]], 
                    RectangleBox[{0, 0}, {1.8, 0.7}], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Update\"", 
                    GrayLevel[0], FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None, StripOnInput -> False], 
                    TraditionalForm]]]}, ImageSize -> 100], 
                    ButtonFunction :> (Typeset`update$$ = AbsoluteTime[]), 
                    Appearance -> None, Evaluator -> Automatic, Method -> 
                    "Preemptive"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, "Rows" -> {
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9]}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {"Columns" -> {{63}}}], "Column"], 
                    Background -> GrayLevel[1], ImageSize -> Automatic, 
                    StripOnInput -> False], 
                    FrameBox[
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "User Guide", $CellContext`userguide, 
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    Column[{
                    Style["", 30], 
                    Dynamic[
                    Grid[{{$CellContext`heterostructureschematic}, {
                    Grid[{{
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Column[{"Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " : ", 
                    Tooltip[
                    Part[$CellContext`zvecplots2d, $CellContext`matindex$$], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}], 
                    
                    Column[{"Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " : ", 
                    Tooltip[
                    Part[$CellContext`zvecplots3d, $CellContext`matindex$$], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}]]}}, 
                    BaseStyle -> {FontSize -> 24, FontFamily -> 
                    "Times New Roman"}]}}]], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
                    Alignment -> Center], 
                    If[$CellContext`Functionality$$ == "SHG Simulation", 
                    Column[{
                    Style["", 30], 
                    Grid[{{
                    OpenerView[{
                    Style[
                    "Optical Geometry and Polarization", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Grid[{{
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`fig12d, \
$CellContext`PropagationExplain], 
                    
                    Tooltip[$CellContext`fig13d, \
$CellContext`PropagationExplain]], 
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`plot2geometry2d, \
$CellContext`GeometryExplain], 
                    
                    Tooltip[$CellContext`plot2geometry3d, \
$CellContext`GeometryExplain]]}, {
                    
                    Tooltip[$CellContext`ellipticityfig, \
$CellContext`EllipticityExplain], 
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`polarizationplot2d, \
$CellContext`GeometryExplain], 
                    
                    Tooltip[$CellContext`polarizationplot3d, \
$CellContext`GeometryExplain]]}}]}, 
                    If[
                    
                    Or[$CellContext`makerfringescontrol$$, \
$CellContext`fresnelcontrol$$], False, True]]}, {
                    OpenerView[{
                    Style[
                    "Polar Plots", 30, Bold, FontFamily -> "Franklin Gothic"], 
                    Grid[{{
                    Text[
                    "Assumption Used: " <> Which[$CellContext`mrassumption$$ == 
                    0, "Full Multiple Reflection", \
$CellContext`mrassumption$$ == 1, 
                    "Jerphagnon & Kurtz Assumption", \
$CellContext`mrassumption$$ == 2, "Herman & Hayden Assumption"] <> "\n" <> 
                    "Consider Backward Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagBackward] <> "\n" <> 
                    "Consider Standing Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagStandingWave], 
                    BaseStyle -> {FontFamily -> "Times New Roman", FontSize -> 
                    22}], SpanFromLeft}, {
                    
                    Tooltip[$CellContext`figRp, \
$CellContext`PolarPlotExplain], 
                    
                    Tooltip[$CellContext`figRs, \
$CellContext`PolarPlotExplain]}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataRp]], Appearance -> "DialogBox", 
                    ImageSize -> 100], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataRs]], Appearance -> "DialogBox", 
                    ImageSize -> 100]}, {
                    
                    Tooltip[$CellContext`figTp, \
$CellContext`PolarPlotExplain], 
                    
                    Tooltip[$CellContext`figTs, \
$CellContext`PolarPlotExplain]}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataTp]], Appearance -> "DialogBox", 
                    ImageSize -> 100], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataTs]], Appearance -> "DialogBox", 
                    ImageSize -> 100]}}]}, 
                    If[
                    
                    Or[$CellContext`makerfringescontrol$$, \
$CellContext`fresnelcontrol$$], False, True]]}, {
                    OpenerView[{
                    Style[
                    "Fresnel Coefficients Figure", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    
                    Grid[{{$CellContext`figfresnel, SpanFromLeft, 
                    SpanFromLeft, SpanFromLeft}, {
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(R\), \(p\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 1]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(R\), \(s\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 2]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(T\), \(p\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 3]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(T\), \(s\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 4]], Appearance -> 
                    "DialogBox", ImageSize -> 
                    100]}}]}, $CellContext`fresnelcontrol$$]}, {
                    OpenerView[{
                    Style[
                    "Maker Fringes Figures", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Grid[{{
                    Text[
                    "Assumption Used: " <> Which[$CellContext`mrassumption$$ == 
                    0, "Full Multiple Reflection", \
$CellContext`mrassumption$$ == 1, 
                    "Jerphagnon & Kurtz Assumption", \
$CellContext`mrassumption$$ == 2, "Herman & Hayden Assumption"] <> "\n" <> 
                    "Consider Backward Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagBackward] <> "\n" <> 
                    "Consider Standing Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagStandingWave], 
                    BaseStyle -> {FontFamily -> "Times New Roman", FontSize -> 
                    22}], SpanFromLeft}, {
                    
                    GraphicsGrid[{{$CellContext`figmakerfringespar}, \
{$CellContext`figmakerfringesperp}}, ImageSize -> Large], SpanFromLeft}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \
\[Omega]\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[$CellContext`listMFpara], Appearance -> 
                    "DialogBox", ImageSize -> 200], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \
\[Omega]\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi]+90\[Degree])", Bold], 
                    CopyToClipboard[$CellContext`listMFperp], Appearance -> 
                    "DialogBox", ImageSize -> 
                    200]}}]}, $CellContext`makerfringescontrol$$]}}, 
                    Alignment -> Left], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None], 
                    If[
                    Not[$CellContext`noAnalytical], 
                    Framed[
                    Text[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 32, 
                    TextAlignment -> Center]]], 
                    Apply[Sequence, {}]]}, Alignment -> Center], 
                    
                    If[$CellContext`Functionality$$ == 
                    "Partial Analytical Expressions", 
                    Column[{
                    Style["", 30], 
                    Column[{
                    Text[
                    Style["For \[Omega] homogeneous waves:", Bold, Red, 32]], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRpL.mx"}]], $CellContext`equationRpL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRpL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "(\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRpL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRpL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRsL.mx"}]], $CellContext`equationRsL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRsL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRsL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRsL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTpL.mx"}]], $CellContext`equationTpL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTpL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTpL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTpL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTsL.mx"}]], $CellContext`equationTsL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTsL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTsL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTsL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Text[
                    Style[
                    "For 2\[Omega] homogeneous waves:", Bold, Blue, 32]], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRp.mx"}]], $CellContext`equationRp, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRp], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRp] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRp]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRs.mx"}]], $CellContext`equationRs, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRs], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRs] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRs]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTp.mx"}]], $CellContext`equationTp, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTp], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTp] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTp]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTs.mx"}]], $CellContext`equationTs, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTs], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTs] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTs]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}]}, 
                    BaseStyle -> {FontSize -> 14}], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
                    Alignment -> Center], ""]]]], StandardForm]], 
                    ImageSize -> {800, Automatic}, Alignment -> {Center, Top},
                     Background -> GrayLevel[1], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Alignment -> Left, StripOnInput -> False], 
                    "\[SpanFromLeft]"}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnAlignments -> {Right, Left}], "ManipulateLabel", 
                    StripOnInput -> False], {"ControlArea", Top}], 
                  Alignment -> {Automatic, Inherited}, StripOnInput -> False],
                  Background -> None, StripOnInput -> False]}, {
                ItemBox[
                 TagBox[
                  StyleBox[
                   PaneBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    Or[Typeset`skipInitDone$$, Typeset`initDone$$]], 
                    Refresh[
                    Typeset`update$$; 
                    Manipulate`SelectableTagBox[
                    Clear[$CellContext`wavL, $CellContext`wavNL]; \
$CellContext`userguide = Column[{"", 
                    Row[{
                    Style[
                    "Welcome to \
\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\) !"]}, BaseStyle -> 
                    "Title"], 
                    Style[
                    "\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\
\"]\) is an open-source package for deriving and simulating reflected and \
transmitted optical second harmonic generation (SHG) of slab and multilayer \
systems. Optical SHG describes the process where two photons of frequency \
interact with one or more nonlinear media (crystals) to create a photon at 2\
\[Omega], so called the SHG process."], "", 
                    Row[{
                    Style[
                    "This package builds in the most general approach to both \
analytically and numerically solving the SHG response of crystals with \
arbitrary crystal symmetry, arbitrary orientation, and a complex dielectric \
function (complex refractive indices)."]}], "", 
                    Row[{
                    Style[
                    "Open \[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"\
Italic\"]\).nb in the Mathematica\[RegisteredTrademark] software on your \
computer"]}, BaseStyle -> "Section"], "", 
                    Row[{
                    Style["1. From the menu, "], 
                    Style["Evaluate", Background -> LightGray], 
                    Style[" -> "], 
                    Style["Evaluate Notebook", Background -> LightGray]}], 
                    Row[{
                    Style[
                    "    Note: This process will clear out all the \
definitions from other notebooks and enable the Notation package for the \
analytical solutions."]}], 
                    Row[{
                    Style[
                    "2. After a few seconds waiting time for initialization, \
you will see the main panel"]}], "", 
                    Style[
                    "Use the 'Functionality' control on the control panel to \
the left to set material properties and then view the desired output in the \
display panel.\nIn order to update figures in the display panel, you must \
press any of the three 'Update' button in green to the top right.", 20], 
                    Style["", 30], 
                    Row[{
                    Style["More Resources"]}, BaseStyle -> "Section"], 
                    Row[{
                    Style[
                    "For detailed information of \
\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\), please refer \
to the "], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/bzw133/SHAARP.ml"], 
                    ", ", 
                    Hyperlink[
                    Style["manual"], 
                    "https://shaarpml.readthedocs.io/en/latest/"], ", ", 
                    Hyperlink[
                    Style["tutorial video"], 
                    "https://www.youtube.com/watch?v=YiKRm6i7kNs"], 
                    Style[", and "], 
                    Hyperlink[
                    Style["FAQ"], 
                    "https://shaarpml.readthedocs.io/en/latest/FAQ/"], "."}], 
                    "", 
                    Row[{
                    Style[
                    "\[Sharp]SHAARP for single interface, \[Sharp]SHAARP.\!\(\
\*StyleBox[\"si\",FontSlant->\"Italic\"]\) : "], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/Rui-Zu/SHAARP"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si manual"], 
                    "https://shaarp.readthedocs.io/en/latest/"], "."}], "", 
                    Row[{
                    Style[
                    "If you used \[Sharp]SHAARP for your publications, please \
kindly cite us:  "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.ml"], 
                    "https://www.nature.com/articles/s41524-024-01229-2"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si"], 
                    "https://www.nature.com/articles/s41524-022-00930-4"], 
                    "."}]}, Background -> White, Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Franklin Gothic", FontSize -> 
                    18}]; $CellContext`maxmaterialnumber = 10; 
                    Part[$CellContext`allmaterials, 
                    
                    Span[$CellContext`materialnumber$$ + 
                    2, $CellContext`maxmaterialnumber]] = 
                    Table[$CellContext`mbot, $CellContext`maxmaterialnumber - \
$CellContext`materialnumber$$ - 
                    1]; $CellContext`clearFigs[]; $CellContext`dgrid = Dynamic[
                    Grid[
                    $CellContext`generatingdfun1[$CellContext`matindex$$], 
                    Spacings -> {0, 0}, ItemSize -> All]]; 
                    Map[$CellContext`indexfun1, 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`zvecplots2d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; $CellContext`zvecplots3d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 10]; 
                    If[$CellContext`Functionality$$ != "User Guide", If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = Table[0, 8]]; 
                    If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]]; $CellContext`startupvar = 
                    1; {$CellContext`ap1, $CellContext`ap2, $CellContext`ap3, \
$CellContext`ap4, $CellContext`ap5, $CellContext`ap6, $CellContext`ap7, \
$CellContext`ap8} = {
                    If[
                    Dynamic[$CellContext`ptest1 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest2 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest3 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest4 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest5 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest6 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest7 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest8 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}]}; Null]; 
                    If[$CellContext`Functionality$$ != "User Guide", 
                    Map[$CellContext`ruihklfun, 
                    Range[$CellContext`materialnumber$$ + 2]]]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 15]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], $CellContext`\[Omega]0 = 
                    N[2 Pi ($CellContext`c0/$CellContext`\[Lambda]$$)]; 
                    If[Abs[$CellContext`theta$$] >= 89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`wInc = \
$CellContext`setwInc[$CellContext`\[Omega]0, 
                    
                    N[($CellContext`theta$$/180) 
                    Pi], $CellContext`\[CapitalDelta]\[Delta], $CellContext`\
\[CurlyPhi], $CellContext`n0]; $CellContext`extWave[$CellContext`wInc]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name = 
                    Part[$CellContext`allmaterials, #], HoldAll]]& , 
                    Range[$CellContext`materialnumber$$ + 2]]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    Function[$CellContext`name, 
                    $CellContext`extMater[$CellContext`name], HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`m1 = $CellContext`setMater[
                    $CellContext`Air[]]; \
$CellContext`extMater[$CellContext`m1]; $CellContext`mats = 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name, 
                    HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`noAnalytical = Apply[And, 
                    Map[NumberQ, 
                    Join[
                    Flatten[
                    Map[
                    Key[$CellContext`dC], $CellContext`mats]], 
                    Flatten[
                    Map[
                    Key[$CellContext`h], $CellContext`mats]]]]]; 
                    If[$CellContext`mrassumption$$ == 0, 
                    Which[$CellContext`winhAssumption$$ == 
                    0, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    1, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    2, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = True; 
                    Null]; $CellContext`flagJK = False; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    1, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = True; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    2, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = False; $CellContext`flagHH = 
                    True; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; 
                    Null]]]]; $CellContext`evaltime = 
                    0; $CellContext`StartTime = SessionTime[]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 25]; 
                    If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`FresnelList = {}; \
$CellContext`MFList = {}; If[
                    
                    And[$CellContext`fresnelcontrol$$, \
$CellContext`noAnalytical], $CellContext`FresnelList = 
                    Map[$CellContext`Fresnel[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    Range[0., 89., $CellContext`thetastep1$$]]]; If[
                    
                    And[$CellContext`makerfringescontrol$$, \
$CellContext`noAnalytical], If[
                    Abs[$CellContext`maxtheta2$$] >= 
                    89, $CellContext`maxtheta2$$ = 
                    Sign[$CellContext`maxtheta2$$] 89.]; $CellContext`MFList = 
                    Map[$CellContext`MF[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    
                    Range[$CellContext`mintheta2$$, $CellContext`maxtheta2$$, \
$CellContext`thetastep2$$]]]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported for Maker \
fringes calcaulation;  Either analytical d or h is given! Abort!"]; Abort[]; 
                    Null]]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`SampleRotationList = {}; If[
                    
                    And[$CellContext`samplerotationcontrol$$, \
$CellContext`noAnalytical], If[
                    Abs[$CellContext`theta$$] >= 89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`SampleRotateList = 
                    Map[$CellContext`SampleRotate[$CellContext`mats, \
$CellContext`theta$$ 
                    Degree, #, $CellContext`samplerotatestep$$, \
$CellContext`mrassumption$$, $CellContext`materialnumber$$, \
$CellContext`delta$$, $CellContext`phi$$ Degree, $CellContext`psi$$ Degree]& , 
                    Range[0, 360, $CellContext`samplerotatestep$$]]; Null]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported;  Either \
analytical d or h is given! Abort!"]; Abort[]; Null]]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "Set Material Properties", $CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], \
$CellContext`heterostructureschematic = Show[
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    Rectangle[{0, -1.5}, {10, -2}], 
                    Text[
                    Style["", 15, Black, Bold], {1, -1.75}], 
                    Text[
                    Style["Air", 15, Black, Bold], {8.5, -1.75}]}], 
                    Graphics[
                    Text[
                    Style[ToString[
                    DownArrow["", ""]] <> "Incident Light, " <> 
                    ToString[$CellContext`\[Lambda]$$] <> "\[Mu]m" <> ToString[
                    DownArrow["", ""]], 20, Blue, Bold], {5, -1.75}]], 
                    Map[$CellContext`schematicfun, 
                    Reverse[
                    Map[{#, $CellContext`materialnumber$$ + 2}& , 
                    Range[2, $CellContext`materialnumber$$ + 1]]]], 
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    
                    Rectangle[{0, -$CellContext`materialnumber$$ - 2 - 0.1}, {
                    10, -$CellContext`materialnumber$$ - 3}], 
                    Text[
                    Style["", 15, Black, Bold], {
                    1, -$CellContext`materialnumber$$ - 2 - 0.25}], 
                    Text[
                    Style["Air", 15, Black, Bold], {
                    8.5, -$CellContext`materialnumber$$ - 2 - 0.25}]}], 
                    ImageSize -> {600, Automatic}]; $CellContext`zvecplots2d = 
                    Map[$CellContext`fzvecplots2d, $CellContext`allmaterials]; \
$CellContext`zvecplots3d = 
                    Map[$CellContext`fzvecplots3d, $CellContext`allmaterials]; 
                    Null]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", 
                    
                    If[$CellContext`noAnalytical, $CellContext`fig13d = 
                    Graphics3D[{
                    $CellContext`pltWav[$CellContext`wInc, {-1, 0, 0} - 
                    Normalize[
                    $CellContext`wInc[$CellContext`k]], Red], 
                    
                    Map[$CellContext`pltWav[#, {-1, 
                    0, $CellContext`materialnumber$$}, Red]& , 
                    Part[$CellContext`wavL, 2]], 
                    Map[$CellContext`pltWav[#, {-1, 0, 0}, Red]& , 
                    Part[$CellContext`wavL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, Apply[Sequence, #2] - 1}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, Apply[Sequence, #2] - 1}, Red]}& , 
                    Part[$CellContext`wavL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, 
                    Apply[Sequence, #2]}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, 
                    Apply[Sequence, #2]}, Red]}& , 
                    Part[$CellContext`wavL, 3]], 1]], 
                    
                    Map[$CellContext`pltWav[#, {
                    1, 0, $CellContext`materialnumber$$}, Blue]& , 
                    Part[$CellContext`wavNL, 2]], 
                    Map[$CellContext`pltWav[#, {1, 0, 0}, Blue]& , 
                    Part[$CellContext`wavNL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, Apply[Sequence, #2] - 1}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, Apply[Sequence, #2] - 1}, Blue]}& , 
                    Part[$CellContext`wavNL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, 
                    Apply[Sequence, #2]}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, 
                    Apply[Sequence, #2]}, Blue]}& , 
                    Part[$CellContext`wavNL, 3]], 1]], 
                    If[$CellContext`mrassumption$$ == 0, 
                    If[$CellContext`flagBackward, 
                    If[$CellContext`flagStandingWave, 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 7], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 8], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 9], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 10], {0 - 0.5, 0, Apply[Sequence, #2] - 0.5}, 
                    Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Map[Hyperplane[{0, 0, 1}, {0, 0, #}]& , 
                    Range[0, $CellContext`materialnumber$$]]]}, 
                    Evaluate[$CellContext`options2d], PlotLabel -> 
                    "\[Lambda] of \[Omega] wave (\[Mu]m) = " <> 
                    ToString[$CellContext`\[Lambda]$$]]; $CellContext`fig12d = 
                    Show[$CellContext`fig13d, ViewPoint -> {0, Infinity, 0}, 
                    Method -> {"RotationControl" -> 
                    None}]; {$CellContext`rmpw1, $CellContext`rmpw2} = 
                    Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 
                    2}]]; $CellContext`rules = {$CellContext`\[CapitalDelta]\
\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`factorRp, \
$CellContext`factorRs, $CellContext`factorTp, $CellContext`factorTs} = {1, 1, 
                    1, 1}; $CellContext`Imax = 1; 
                    If[$CellContext`samplerotationcontrol$$, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 2]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 3]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 4]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 5]]}]; Null, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    NMaxValue[
                    Re[$CellContext`dataRp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataRs], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTs], $CellContext`\[CurlyPhi]]}]; 
                    Null]; $CellContext`Imax = 
                    1.1 Max[$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs]; 
                    If[Abs[$CellContext`Imax] < 10^(-10), $CellContext`Imax = 
                    1]; $CellContext`factorRp = Max[1, 
                    If[Chop[$CellContext`MaxRp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRp], 
                    0]]; $CellContext`factorRs = Max[1, 
                    If[Chop[$CellContext`MaxRs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRs], 
                    0]]; $CellContext`factorTp = Max[1, 
                    If[Chop[$CellContext`MaxTp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTp], 
                    0]]; $CellContext`factorTs = Max[1, 
                    If[Chop[$CellContext`MaxTs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTs], 
                    0]]; $CellContext`polarRp = (
                    1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]; $CellContext`polarRs = (
                    1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]; $CellContext`polarTp = (
                    1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]; $CellContext`polarTs = (
                    1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]; $CellContext`polarRtot = (
                    1/$CellContext`Imax) $CellContext`factorRtot (
                    Re[$CellContext`dataRs] + 
                    Re[$CellContext`dataRp]); $CellContext`polarTtot = (
                    1/$CellContext`Imax) $CellContext`factorTtot (
                    Re[$CellContext`dataTs] + Re[$CellContext`dataTp]); If[
                    And[
                    Not[$CellContext`RotateAnalyzer$$], 
                    Not[$CellContext`RotatePolarizer$$]], 
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`figRp = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    2]/$CellContext`Imax) $CellContext`factorRp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    3]/$CellContext`Imax) $CellContext`factorRs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    4]/$CellContext`Imax) $CellContext`factorTp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    5]/$CellContext`Imax) $CellContext`factorTs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null, $CellContext`figRp = 
                    PolarPlot[$CellContext`polarRp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = 
                    PolarPlot[$CellContext`polarRs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[$CellContext`polarTp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = 
                    PolarPlot[$CellContext`polarTs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null], $CellContext`figRp = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style["Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; Null]; 
                    If[$CellContext`makerfringescontrol$$, \
$CellContext`listMFpara = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    2}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringespar = 
                    ListLinePlot[$CellContext`listMFpara, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]) \
(a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> "Times New Roman"}}, 
                    ImageSize -> Large]; $CellContext`listMFperp = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    3}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringesperp = 
                    ListLinePlot[$CellContext`listMFperp, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]+90\
\[Degree]) (a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> 
                    "Times New Roman"}}, ImageSize -> Large]; Null]; 
                    If[$CellContext`fresnelcontrol$$, \
$CellContext`listFresnel = Evaluate[
                    Re[
                    ReplaceAll[{
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    2}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    3}], $CellContext`\[CurlyPhi] -> 90 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    4}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    5}], $CellContext`\[CurlyPhi] -> 
                    90 Degree]}, $CellContext`\[CapitalDelta]\[Delta] -> 
                    0]]]; $CellContext`figfresnel = 
                    ListLinePlot[$CellContext`listFresnel, 
                    PlotRange -> {{0, 90}, Automatic}, PlotStyle -> Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"]}, PlotLabel -> Style["Fresnel Transmittance/Reflectance", Black, 
                    20], ImageSize -> {400, 400}, PlotLegends -> {
                    Style["\!\(\*SubscriptBox[\(R\), \(p\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(R\), \(s\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(T\), \(p\)]\)", 20], 
                    Style[
                    "\!\(\*SubscriptBox[\(T\), \(s\)]\)", 
                    20]}]]; $CellContext`plot2geometry2d = \
$CellContext`fplot2geometry2d[$CellContext`theta$$]; \
$CellContext`plot2geometry3d = \
$CellContext`fplot2geometry3d[$CellContext`theta$$]; \
$CellContext`polarizationplot2d = \
$CellContext`fpolarizationplot2d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`polarizationplot3d = \
$CellContext`fpolarizationplot3d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`rwave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`rmpw2[$CellContext`A], 1] + Part[
                    $CellContext`rmpw1[$CellContext`A], 1], Part[
                    $CellContext`rmpw1[$CellContext`A], 2] + Part[
                    $CellContext`rmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`twave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`tmpw2[$CellContext`A], 1] + Part[
                    $CellContext`tmpw1[$CellContext`A], 1], Part[
                    $CellContext`tmpw1[$CellContext`A], 2] + Part[
                    $CellContext`tmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`iwave = Normalize[
                    ReplaceAll[{
                    Part[
                    $CellContext`wInc[$CellContext`A], 1], 
                    Part[
                    $CellContext`wInc[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`ellipticityfig = 
                    If[$CellContext`RotatePolarizer$$, 
                    ParametricPlot[{
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    
                    Part[$CellContext`iwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    
                    Part[$CellContext`rwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    
                    Part[$CellContext`twave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]], 
                    ParametricPlot[{
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    Part[$CellContext`iwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    Part[$CellContext`rwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    Part[$CellContext`twave, 2]}]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]]]; 
                    Null, $CellContext`clearFigs[]; Print[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 
                    32]]]]; If[$CellContext`Functionality$$ == 
                    "Partial Analytical Expressions", $CellContext`rules = \
{$CellContext`\[CapitalDelta]\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; {$CellContext`rmpw1L, $CellContext`rmpw2L} = 
                    Part[$CellContext`wavL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1L]; \
$CellContext`extWave[$CellContext`rmpw2L]; $CellContext`rSignalL = 
                    Part[$CellContext`rmpw1L[$CellContext`A] + \
$CellContext`rmpw2L[$CellContext`A], 
                    Span[1, 2]]; {$CellContext`tmpw1L, $CellContext`tmpw2L} = 
                    Part[$CellContext`wavL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1L]; \
$CellContext`extWave[$CellContext`tmpw2L]; $CellContext`tSignalL = 
                    Part[$CellContext`tmpw1L[$CellContext`A] + \
$CellContext`tmpw2L[$CellContext`A], 
                    Span[1, 2]]; $CellContext`dataRpL = 
                    Part[$CellContext`rSignalL, 1] Conjugate[
                    Part[$CellContext`rSignalL, 1]]; $CellContext`dataRsL = 
                    Part[$CellContext`rSignalL, 2] Conjugate[
                    Part[$CellContext`rSignalL, 2]]; $CellContext`dataTpL = 
                    Part[$CellContext`tSignalL, 1] Conjugate[
                    Part[$CellContext`tSignalL, 1]]; $CellContext`dataTsL = 
                    Part[$CellContext`tSignalL, 2] Conjugate[
                    
                    Part[$CellContext`tSignalL, 
                    2]]; {$CellContext`equationRpL, $CellContext`equationRsL, \
$CellContext`equationTpL, $CellContext`equationTsL} = 
                    Re[{$CellContext`dataRpL, $CellContext`dataRsL, \
$CellContext`dataTpL, $CellContext`dataTsL}]; {$CellContext`rmpw1, \
$CellContext`rmpw2} = Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 2}]]; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`equationRp, \
$CellContext`equationRs, $CellContext`equationTp, $CellContext`equationTs} = 
                    Re[{$CellContext`dataRp, $CellContext`dataRs, \
$CellContext`dataTp, $CellContext`dataTs}]; 
                    Null, {$CellContext`equationRpL, \
$CellContext`equationRsL, $CellContext`equationTpL, $CellContext`equationTsL} = 
                    ConstantArray[$CellContext`placeHolderEqus, 
                    4]; {$CellContext`equationRp, $CellContext`equationRs, \
$CellContext`equationTp, $CellContext`equationTs} = 
                    ConstantArray[$CellContext`placeHolderEqus, 4]; 
                    Null]; $CellContext`progress = 100; $CellContext`EndTime = 
                    SessionTime[]; $CellContext`evaltime = \
$CellContext`EndTime - $CellContext`StartTime; ""], 
                    TrackedSymbols :> {Typeset`update$$}], 
                    Manipulate`Dump`initDisplay[True]], StandardForm], 
                    SynchronousUpdating -> Automatic, ImageSizeCache -> 
                    Dynamic[Typeset`size$$]], ImageMargins -> 10], Deployed -> 
                   False, ScriptLevel -> 0, 
                   GraphicsBoxOptions -> {PreserveImageOptions -> True}, 
                   Graphics3DBoxOptions -> {PreserveImageOptions -> True}, 
                   StripOnInput -> False], Identity, Selectable -> False, 
                  Editable -> False], Alignment -> {Left, Center}, ItemSize -> 
                 Automatic, StripOnInput -> False]}}, AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              ColumnAlignments -> Left, GridFrame -> False, GridFrameMargins -> 
              1, RowSpacings -> 2, RowAlignments -> Top], "\[SpanFromLeft]"}},
            AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           ColumnAlignments -> {Left, Right}, RowSpacings -> Dynamic[
             FEPrivate`If[
              FEPrivate`SameQ[Typeset`bookmarkMode$$, "Menu"], 0, 1.]]], 
         False -> TagBox[
           TooltipBox[
            ButtonBox[
             GridBox[{{
                ItemBox[
                 TagBox[
                  StyleBox[
                   PaneBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    Or[Typeset`skipInitDone$$, Typeset`initDone$$]], 
                    Refresh[
                    Typeset`update$$; 
                    Manipulate`SelectableTagBox[
                    Clear[$CellContext`wavL, $CellContext`wavNL]; \
$CellContext`userguide = Column[{"", 
                    Row[{
                    Style[
                    "Welcome to \
\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\) !"]}, BaseStyle -> 
                    "Title"], 
                    Style[
                    "\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\
\"]\) is an open-source package for deriving and simulating reflected and \
transmitted optical second harmonic generation (SHG) of slab and multilayer \
systems. Optical SHG describes the process where two photons of frequency \
interact with one or more nonlinear media (crystals) to create a photon at 2\
\[Omega], so called the SHG process."], "", 
                    Row[{
                    Style[
                    "This package builds in the most general approach to both \
analytically and numerically solving the SHG response of crystals with \
arbitrary crystal symmetry, arbitrary orientation, and a complex dielectric \
function (complex refractive indices)."]}], "", 
                    Row[{
                    Style[
                    "Open \[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"\
Italic\"]\).nb in the Mathematica\[RegisteredTrademark] software on your \
computer"]}, BaseStyle -> "Section"], "", 
                    Row[{
                    Style["1. From the menu, "], 
                    Style["Evaluate", Background -> LightGray], 
                    Style[" -> "], 
                    Style["Evaluate Notebook", Background -> LightGray]}], 
                    Row[{
                    Style[
                    "    Note: This process will clear out all the \
definitions from other notebooks and enable the Notation package for the \
analytical solutions."]}], 
                    Row[{
                    Style[
                    "2. After a few seconds waiting time for initialization, \
you will see the main panel"]}], "", 
                    Style[
                    "Use the 'Functionality' control on the control panel to \
the left to set material properties and then view the desired output in the \
display panel.\nIn order to update figures in the display panel, you must \
press any of the three 'Update' button in green to the top right.", 20], 
                    Style["", 30], 
                    Row[{
                    Style["More Resources"]}, BaseStyle -> "Section"], 
                    Row[{
                    Style[
                    "For detailed information of \
\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\), please refer \
to the "], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/bzw133/SHAARP.ml"], 
                    ", ", 
                    Hyperlink[
                    Style["manual"], 
                    "https://shaarpml.readthedocs.io/en/latest/"], ", ", 
                    Hyperlink[
                    Style["tutorial video"], 
                    "https://www.youtube.com/watch?v=YiKRm6i7kNs"], 
                    Style[", and "], 
                    Hyperlink[
                    Style["FAQ"], 
                    "https://shaarpml.readthedocs.io/en/latest/FAQ/"], "."}], 
                    "", 
                    Row[{
                    Style[
                    "\[Sharp]SHAARP for single interface, \[Sharp]SHAARP.\!\(\
\*StyleBox[\"si\",FontSlant->\"Italic\"]\) : "], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/Rui-Zu/SHAARP"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si manual"], 
                    "https://shaarp.readthedocs.io/en/latest/"], "."}], "", 
                    Row[{
                    Style[
                    "If you used \[Sharp]SHAARP for your publications, please \
kindly cite us:  "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.ml"], 
                    "https://www.nature.com/articles/s41524-024-01229-2"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si"], 
                    "https://www.nature.com/articles/s41524-022-00930-4"], 
                    "."}]}, Background -> White, Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Franklin Gothic", FontSize -> 
                    18}]; $CellContext`maxmaterialnumber = 10; 
                    Part[$CellContext`allmaterials, 
                    
                    Span[$CellContext`materialnumber$$ + 
                    2, $CellContext`maxmaterialnumber]] = 
                    Table[$CellContext`mbot, $CellContext`maxmaterialnumber - \
$CellContext`materialnumber$$ - 
                    1]; $CellContext`clearFigs[]; $CellContext`dgrid = Dynamic[
                    Grid[
                    $CellContext`generatingdfun1[$CellContext`matindex$$], 
                    Spacings -> {0, 0}, ItemSize -> All]]; 
                    Map[$CellContext`indexfun1, 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`zvecplots2d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; $CellContext`zvecplots3d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 10]; 
                    If[$CellContext`Functionality$$ != "User Guide", If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = Table[0, 8]]; 
                    If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]]; $CellContext`startupvar = 
                    1; {$CellContext`ap1, $CellContext`ap2, $CellContext`ap3, \
$CellContext`ap4, $CellContext`ap5, $CellContext`ap6, $CellContext`ap7, \
$CellContext`ap8} = {
                    If[
                    Dynamic[$CellContext`ptest1 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest2 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest3 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest4 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest5 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest6 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest7 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest8 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}]}; Null]; 
                    If[$CellContext`Functionality$$ != "User Guide", 
                    Map[$CellContext`ruihklfun, 
                    Range[$CellContext`materialnumber$$ + 2]]]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 15]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], $CellContext`\[Omega]0 = 
                    N[2 Pi ($CellContext`c0/$CellContext`\[Lambda]$$)]; 
                    If[Abs[$CellContext`theta$$] >= 89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`wInc = \
$CellContext`setwInc[$CellContext`\[Omega]0, 
                    
                    N[($CellContext`theta$$/180) 
                    Pi], $CellContext`\[CapitalDelta]\[Delta], $CellContext`\
\[CurlyPhi], $CellContext`n0]; $CellContext`extWave[$CellContext`wInc]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name = 
                    Part[$CellContext`allmaterials, #], HoldAll]]& , 
                    Range[$CellContext`materialnumber$$ + 2]]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    Function[$CellContext`name, 
                    $CellContext`extMater[$CellContext`name], HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`m1 = $CellContext`setMater[
                    $CellContext`Air[]]; \
$CellContext`extMater[$CellContext`m1]; $CellContext`mats = 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name, 
                    HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`noAnalytical = Apply[And, 
                    Map[NumberQ, 
                    Join[
                    Flatten[
                    Map[
                    Key[$CellContext`dC], $CellContext`mats]], 
                    Flatten[
                    Map[
                    Key[$CellContext`h], $CellContext`mats]]]]]; 
                    If[$CellContext`mrassumption$$ == 0, 
                    Which[$CellContext`winhAssumption$$ == 
                    0, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    1, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    2, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = True; 
                    Null]; $CellContext`flagJK = False; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    1, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = True; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    2, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = False; $CellContext`flagHH = 
                    True; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; 
                    Null]]]]; $CellContext`evaltime = 
                    0; $CellContext`StartTime = SessionTime[]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 25]; 
                    If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`FresnelList = {}; \
$CellContext`MFList = {}; If[
                    
                    And[$CellContext`fresnelcontrol$$, \
$CellContext`noAnalytical], $CellContext`FresnelList = 
                    Map[$CellContext`Fresnel[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    Range[0., 89., $CellContext`thetastep1$$]]]; If[
                    
                    And[$CellContext`makerfringescontrol$$, \
$CellContext`noAnalytical], If[
                    Abs[$CellContext`maxtheta2$$] >= 
                    89, $CellContext`maxtheta2$$ = 
                    Sign[$CellContext`maxtheta2$$] 89.]; $CellContext`MFList = 
                    Map[$CellContext`MF[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    
                    Range[$CellContext`mintheta2$$, $CellContext`maxtheta2$$, \
$CellContext`thetastep2$$]]]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported for Maker \
fringes calcaulation;  Either analytical d or h is given! Abort!"]; Abort[]; 
                    Null]]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`SampleRotationList = {}; If[
                    
                    And[$CellContext`samplerotationcontrol$$, \
$CellContext`noAnalytical], If[
                    Abs[$CellContext`theta$$] >= 89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`SampleRotateList = 
                    Map[$CellContext`SampleRotate[$CellContext`mats, \
$CellContext`theta$$ 
                    Degree, #, $CellContext`samplerotatestep$$, \
$CellContext`mrassumption$$, $CellContext`materialnumber$$, \
$CellContext`delta$$, $CellContext`phi$$ Degree, $CellContext`psi$$ Degree]& , 
                    Range[0, 360, $CellContext`samplerotatestep$$]]; Null]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported;  Either \
analytical d or h is given! Abort!"]; Abort[]; Null]]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "Set Material Properties", $CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], \
$CellContext`heterostructureschematic = Show[
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    Rectangle[{0, -1.5}, {10, -2}], 
                    Text[
                    Style["", 15, Black, Bold], {1, -1.75}], 
                    Text[
                    Style["Air", 15, Black, Bold], {8.5, -1.75}]}], 
                    Graphics[
                    Text[
                    Style[ToString[
                    DownArrow["", ""]] <> "Incident Light, " <> 
                    ToString[$CellContext`\[Lambda]$$] <> "\[Mu]m" <> ToString[
                    DownArrow["", ""]], 20, Blue, Bold], {5, -1.75}]], 
                    Map[$CellContext`schematicfun, 
                    Reverse[
                    Map[{#, $CellContext`materialnumber$$ + 2}& , 
                    Range[2, $CellContext`materialnumber$$ + 1]]]], 
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    
                    Rectangle[{0, -$CellContext`materialnumber$$ - 2 - 0.1}, {
                    10, -$CellContext`materialnumber$$ - 3}], 
                    Text[
                    Style["", 15, Black, Bold], {
                    1, -$CellContext`materialnumber$$ - 2 - 0.25}], 
                    Text[
                    Style["Air", 15, Black, Bold], {
                    8.5, -$CellContext`materialnumber$$ - 2 - 0.25}]}], 
                    ImageSize -> {600, Automatic}]; $CellContext`zvecplots2d = 
                    Map[$CellContext`fzvecplots2d, $CellContext`allmaterials]; \
$CellContext`zvecplots3d = 
                    Map[$CellContext`fzvecplots3d, $CellContext`allmaterials]; 
                    Null]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", 
                    
                    If[$CellContext`noAnalytical, $CellContext`fig13d = 
                    Graphics3D[{
                    $CellContext`pltWav[$CellContext`wInc, {-1, 0, 0} - 
                    Normalize[
                    $CellContext`wInc[$CellContext`k]], Red], 
                    
                    Map[$CellContext`pltWav[#, {-1, 
                    0, $CellContext`materialnumber$$}, Red]& , 
                    Part[$CellContext`wavL, 2]], 
                    Map[$CellContext`pltWav[#, {-1, 0, 0}, Red]& , 
                    Part[$CellContext`wavL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, Apply[Sequence, #2] - 1}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, Apply[Sequence, #2] - 1}, Red]}& , 
                    Part[$CellContext`wavL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, 
                    Apply[Sequence, #2]}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, 
                    Apply[Sequence, #2]}, Red]}& , 
                    Part[$CellContext`wavL, 3]], 1]], 
                    
                    Map[$CellContext`pltWav[#, {
                    1, 0, $CellContext`materialnumber$$}, Blue]& , 
                    Part[$CellContext`wavNL, 2]], 
                    Map[$CellContext`pltWav[#, {1, 0, 0}, Blue]& , 
                    Part[$CellContext`wavNL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, Apply[Sequence, #2] - 1}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, Apply[Sequence, #2] - 1}, Blue]}& , 
                    Part[$CellContext`wavNL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, 
                    Apply[Sequence, #2]}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, 
                    Apply[Sequence, #2]}, Blue]}& , 
                    Part[$CellContext`wavNL, 3]], 1]], 
                    If[$CellContext`mrassumption$$ == 0, 
                    If[$CellContext`flagBackward, 
                    If[$CellContext`flagStandingWave, 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 7], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 8], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 9], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 10], {0 - 0.5, 0, Apply[Sequence, #2] - 0.5}, 
                    Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Map[Hyperplane[{0, 0, 1}, {0, 0, #}]& , 
                    Range[0, $CellContext`materialnumber$$]]]}, 
                    Evaluate[$CellContext`options2d], PlotLabel -> 
                    "\[Lambda] of \[Omega] wave (\[Mu]m) = " <> 
                    ToString[$CellContext`\[Lambda]$$]]; $CellContext`fig12d = 
                    Show[$CellContext`fig13d, ViewPoint -> {0, Infinity, 0}, 
                    Method -> {"RotationControl" -> 
                    None}]; {$CellContext`rmpw1, $CellContext`rmpw2} = 
                    Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 
                    2}]]; $CellContext`rules = {$CellContext`\[CapitalDelta]\
\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`factorRp, \
$CellContext`factorRs, $CellContext`factorTp, $CellContext`factorTs} = {1, 1, 
                    1, 1}; $CellContext`Imax = 1; 
                    If[$CellContext`samplerotationcontrol$$, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 2]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 3]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 4]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 5]]}]; Null, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    NMaxValue[
                    Re[$CellContext`dataRp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataRs], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTs], $CellContext`\[CurlyPhi]]}]; 
                    Null]; $CellContext`Imax = 
                    1.1 Max[$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs]; 
                    If[Abs[$CellContext`Imax] < 10^(-10), $CellContext`Imax = 
                    1]; $CellContext`factorRp = Max[1, 
                    If[Chop[$CellContext`MaxRp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRp], 
                    0]]; $CellContext`factorRs = Max[1, 
                    If[Chop[$CellContext`MaxRs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRs], 
                    0]]; $CellContext`factorTp = Max[1, 
                    If[Chop[$CellContext`MaxTp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTp], 
                    0]]; $CellContext`factorTs = Max[1, 
                    If[Chop[$CellContext`MaxTs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTs], 
                    0]]; $CellContext`polarRp = (
                    1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]; $CellContext`polarRs = (
                    1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]; $CellContext`polarTp = (
                    1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]; $CellContext`polarTs = (
                    1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]; $CellContext`polarRtot = (
                    1/$CellContext`Imax) $CellContext`factorRtot (
                    Re[$CellContext`dataRs] + 
                    Re[$CellContext`dataRp]); $CellContext`polarTtot = (
                    1/$CellContext`Imax) $CellContext`factorTtot (
                    Re[$CellContext`dataTs] + Re[$CellContext`dataTp]); If[
                    And[
                    Not[$CellContext`RotateAnalyzer$$], 
                    Not[$CellContext`RotatePolarizer$$]], 
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`figRp = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    2]/$CellContext`Imax) $CellContext`factorRp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    3]/$CellContext`Imax) $CellContext`factorRs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    4]/$CellContext`Imax) $CellContext`factorTp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    5]/$CellContext`Imax) $CellContext`factorTs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null, $CellContext`figRp = 
                    PolarPlot[$CellContext`polarRp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = 
                    PolarPlot[$CellContext`polarRs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[$CellContext`polarTp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = 
                    PolarPlot[$CellContext`polarTs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null], $CellContext`figRp = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; Null]; 
                    If[$CellContext`makerfringescontrol$$, \
$CellContext`listMFpara = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    2}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringespar = 
                    ListLinePlot[$CellContext`listMFpara, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]) \
(a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> "Times New Roman"}}, 
                    ImageSize -> Large]; $CellContext`listMFperp = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    3}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringesperp = 
                    ListLinePlot[$CellContext`listMFperp, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]+90\
\[Degree]) (a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> 
                    "Times New Roman"}}, ImageSize -> Large]; Null]; 
                    If[$CellContext`fresnelcontrol$$, \
$CellContext`listFresnel = Evaluate[
                    Re[
                    ReplaceAll[{
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    2}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    3}], $CellContext`\[CurlyPhi] -> 90 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    4}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    5}], $CellContext`\[CurlyPhi] -> 
                    90 Degree]}, $CellContext`\[CapitalDelta]\[Delta] -> 
                    0]]]; $CellContext`figfresnel = 
                    ListLinePlot[$CellContext`listFresnel, 
                    PlotRange -> {{0, 90}, Automatic}, PlotStyle -> Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"]}, PlotLabel -> Style["Fresnel Transmittance/Reflectance", Black, 
                    20], ImageSize -> {400, 400}, PlotLegends -> {
                    Style["\!\(\*SubscriptBox[\(R\), \(p\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(R\), \(s\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(T\), \(p\)]\)", 20], 
                    Style[
                    "\!\(\*SubscriptBox[\(T\), \(s\)]\)", 
                    20]}]]; $CellContext`plot2geometry2d = \
$CellContext`fplot2geometry2d[$CellContext`theta$$]; \
$CellContext`plot2geometry3d = \
$CellContext`fplot2geometry3d[$CellContext`theta$$]; \
$CellContext`polarizationplot2d = \
$CellContext`fpolarizationplot2d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`polarizationplot3d = \
$CellContext`fpolarizationplot3d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`rwave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`rmpw2[$CellContext`A], 1] + Part[
                    $CellContext`rmpw1[$CellContext`A], 1], Part[
                    $CellContext`rmpw1[$CellContext`A], 2] + Part[
                    $CellContext`rmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`twave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`tmpw2[$CellContext`A], 1] + Part[
                    $CellContext`tmpw1[$CellContext`A], 1], Part[
                    $CellContext`tmpw1[$CellContext`A], 2] + Part[
                    $CellContext`tmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`iwave = Normalize[
                    ReplaceAll[{
                    Part[
                    $CellContext`wInc[$CellContext`A], 1], 
                    Part[
                    $CellContext`wInc[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`ellipticityfig = 
                    If[$CellContext`RotatePolarizer$$, 
                    ParametricPlot[{
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    
                    Part[$CellContext`iwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    
                    Part[$CellContext`rwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    
                    Part[$CellContext`twave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]], 
                    ParametricPlot[{
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    Part[$CellContext`iwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    Part[$CellContext`rwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    Part[$CellContext`twave, 2]}]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]]]; 
                    Null, $CellContext`clearFigs[]; Print[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 
                    32]]]]; If[$CellContext`Functionality$$ == 
                    "Partial Analytical Expressions", $CellContext`rules = \
{$CellContext`\[CapitalDelta]\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; {$CellContext`rmpw1L, $CellContext`rmpw2L} = 
                    Part[$CellContext`wavL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1L]; \
$CellContext`extWave[$CellContext`rmpw2L]; $CellContext`rSignalL = 
                    Part[$CellContext`rmpw1L[$CellContext`A] + \
$CellContext`rmpw2L[$CellContext`A], 
                    Span[1, 2]]; {$CellContext`tmpw1L, $CellContext`tmpw2L} = 
                    Part[$CellContext`wavL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1L]; \
$CellContext`extWave[$CellContext`tmpw2L]; $CellContext`tSignalL = 
                    Part[$CellContext`tmpw1L[$CellContext`A] + \
$CellContext`tmpw2L[$CellContext`A], 
                    Span[1, 2]]; $CellContext`dataRpL = 
                    Part[$CellContext`rSignalL, 1] Conjugate[
                    Part[$CellContext`rSignalL, 1]]; $CellContext`dataRsL = 
                    Part[$CellContext`rSignalL, 2] Conjugate[
                    Part[$CellContext`rSignalL, 2]]; $CellContext`dataTpL = 
                    Part[$CellContext`tSignalL, 1] Conjugate[
                    Part[$CellContext`tSignalL, 1]]; $CellContext`dataTsL = 
                    Part[$CellContext`tSignalL, 2] Conjugate[
                    
                    Part[$CellContext`tSignalL, 
                    2]]; {$CellContext`equationRpL, $CellContext`equationRsL, \
$CellContext`equationTpL, $CellContext`equationTsL} = 
                    Re[{$CellContext`dataRpL, $CellContext`dataRsL, \
$CellContext`dataTpL, $CellContext`dataTsL}]; {$CellContext`rmpw1, \
$CellContext`rmpw2} = Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 2}]]; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`equationRp, \
$CellContext`equationRs, $CellContext`equationTp, $CellContext`equationTs} = 
                    Re[{$CellContext`dataRp, $CellContext`dataRs, \
$CellContext`dataTp, $CellContext`dataTs}]; 
                    Null, {$CellContext`equationRpL, \
$CellContext`equationRsL, $CellContext`equationTpL, $CellContext`equationTsL} = 
                    ConstantArray[$CellContext`placeHolderEqus, 
                    4]; {$CellContext`equationRp, $CellContext`equationRs, \
$CellContext`equationTp, $CellContext`equationTs} = 
                    ConstantArray[$CellContext`placeHolderEqus, 4]; 
                    Null]; $CellContext`progress = 100; $CellContext`EndTime = 
                    SessionTime[]; $CellContext`evaltime = \
$CellContext`EndTime - $CellContext`StartTime; ""], 
                    TrackedSymbols :> {Typeset`update$$}], 
                    Manipulate`Dump`initDisplay[True]], StandardForm], 
                    SynchronousUpdating -> Automatic, ImageSizeCache -> 
                    Dynamic[Typeset`size$$]], ImageMargins -> 10], Deployed -> 
                   False, ScriptLevel -> 0, 
                   GraphicsBoxOptions -> {PreserveImageOptions -> True}, 
                   Graphics3DBoxOptions -> {PreserveImageOptions -> True}, 
                   StripOnInput -> False], Identity, Selectable -> False, 
                  Editable -> False], Alignment -> {Left, Center}, ItemSize -> 
                 Manipulate`Dump`$AutomaticContentSize, StripOnInput -> 
                 False]}}, AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             ButtonFunction :> (Typeset`show$$ = True), Appearance -> None, 
             DefaultBaseStyle -> {}, BaseStyle -> {}, Evaluator -> Automatic, 
             Method -> "Preemptive"], 
            DynamicBox[
             ToBoxes[
              FEPrivate`FrontEndResource["FEStrings", "ManipulateShow"], 
              StandardForm]]], Annotation[#, 
            Dynamic[
             FEPrivate`FrontEndResource["FEStrings", "ManipulateShow"]], 
            "Tooltip"]& ]}, 
        Dynamic[Typeset`show$$], ImageSize -> Automatic], ImageMargins -> 0, 
       BaselinePosition -> Automatic],
      ImageSizeCache->{1082., {495.56392818060704`, 500.43607181939296`}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  Alignment->{Left, Top},
  Background->GrayLevel[0.9],
  ImageSize->Automatic,
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.915408361224081*^9, 3.915409172165191*^9, 3.9154120815611315`*^9, 
   3.915412366115756*^9, 3.915922960830022*^9, 3.9159331628850975`*^9, 
   3.915933362177228*^9, 3.915933564786705*^9, 3.915934249059012*^9, 
   3.9159347369577*^9, 3.9159349868252487`*^9, 3.9159352644250126`*^9, 
   3.915935351788329*^9, 3.91593576878671*^9, {3.915936040955332*^9, 
   3.915936055929164*^9}, 3.9159361202400427`*^9, 3.915936338273993*^9, 
   3.915936848167307*^9, 3.915936921346233*^9, {3.91593743576996*^9, 
   3.915937455070897*^9}, 3.9159382038125935`*^9, 3.915938747645837*^9, 
   3.915939014077612*^9, 3.915939131253092*^9, 3.91593931347865*^9, 
   3.915940075304644*^9, 3.9159403185818787`*^9, 3.9159406052139893`*^9, 
   3.9159415776650276`*^9, 3.9159417772673645`*^9, 3.9159418271873884`*^9, 
   3.9159418842402463`*^9, 3.915941944904996*^9, 3.915942017461341*^9, 
   3.915966564958581*^9, 3.917039694103129*^9, 3.9170399948115644`*^9, 
   3.9170400639478426`*^9, 3.917040109120571*^9, 3.9170402029180365`*^9, 
   3.917041871852186*^9, 3.9170420132408648`*^9, 3.917042343934395*^9, 
   3.9170431147120113`*^9, 3.917043790658436*^9, 3.9170442324664865`*^9, 
   3.9170449126819305`*^9, {3.9170457499369316`*^9, 3.91704576351503*^9}, 
   3.9170490431040287`*^9, 3.917049166594001*^9, 3.917049382867156*^9, 
   3.9170504827827015`*^9, {3.9172186791006145`*^9, 3.9172186981397476`*^9}, {
   3.9172199455527105`*^9, 3.917219975916537*^9}, 3.9172208612621775`*^9, 
   3.9172212809269047`*^9, 3.9172215002718887`*^9, 3.9172216137242937`*^9, 
   3.9172218113650284`*^9, 3.91722216122723*^9, 3.917222297833967*^9, 
   3.9173844523245173`*^9, 3.917384624351777*^9, 3.91738635337821*^9, 
   3.917387965792042*^9, 3.94197578916613*^9, 3.9419763982745676`*^9, 
   3.9419764938015776`*^9, 3.9419765257375803`*^9, 3.941976660496438*^9, 
   3.9419766947399387`*^9, {3.9419767385209928`*^9, 3.9419767652287893`*^9}},
 CellLabel->
  "Out[339]=",ExpressionUUID->"8bf0365b-8981-4f52-983a-76e8873a1cc2"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.9154083179401665`*^9, 3.9154083908653393`*^9},
 CellLabel->
  "In[340]:=",ExpressionUUID->"680d5709-58da-41c6-8bad-d8bbeda8c232"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9147266134784408`*^9, 3.914726613483427*^9}},
 CellLabel->
  "In[341]:=",ExpressionUUID->"05bc0c31-2837-4f08-b280-8a13c19d9516"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.914726528226497*^9, 3.914726528231193*^9}},
 CellLabel->
  "In[342]:=",ExpressionUUID->"6d75d6a7-b2dd-496d-ba1d-3b24ba9df720"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.9147215871847806`*^9, 3.9147265301464343`*^9},
 CellLabel->
  "In[343]:=",ExpressionUUID->"e6f666d8-58c4-49d4-8f64-660b787dd5c4"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.9147215872681894`*^9, 3.914726537654142*^9},
 CellLabel->
  "In[344]:=",ExpressionUUID->"2cee032e-fb83-4e9e-b878-4b158f412982"]
}, Open  ]]
},
WindowSize->{1908, 1005.75},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->{},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>0.85 Inherited,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (June 3, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"69a610e1-3d00-4b53-a163-6fa5ef21be47"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 200, 4, 83, "Title",ExpressionUUID->"441924d6-3b8e-4bd4-8fa6-0941648c2c7b"],
Cell[783, 28, 2788, 46, 70, "Input",ExpressionUUID->"0937ff5c-ef37-4c7e-9f0b-71353001cec0",
 InitializationCell->True],
Cell[3574, 76, 431619, 9008, 16558, "Input",ExpressionUUID->"a98b854b-c774-4627-bdc0-c461ecf5096d",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[435230, 9089, 189, 4, 83, "Title",ExpressionUUID->"55cc25b1-6118-4568-90fc-f6cca0bb059f"],
Cell[CellGroupData[{
Cell[435444, 9097, 256, 4, 23, "Input",ExpressionUUID->"54c5d0bf-aa90-4ef5-b95d-14bc7b0597e7"],
Cell[435703, 9103, 1176, 25, 34, "Print",ExpressionUUID->"44051497-b037-4f09-b7d7-9f0d33997c06"],
Cell[436882, 9130, 1611291, 27694, 1022, "Output",ExpressionUUID->"8bf0365b-8981-4f52-983a-76e8873a1cc2"]
}, Open  ]],
Cell[2048188, 36827, 177, 3, 23, "Input",ExpressionUUID->"680d5709-58da-41c6-8bad-d8bbeda8c232"],
Cell[2048368, 36832, 177, 3, 23, "Input",ExpressionUUID->"05bc0c31-2837-4f08-b280-8a13c19d9516"],
Cell[2048548, 36837, 175, 3, 23, "Input",ExpressionUUID->"6d75d6a7-b2dd-496d-ba1d-3b24ba9df720"],
Cell[2048726, 36842, 177, 3, 23, "Input",ExpressionUUID->"e6f666d8-58c4-49d4-8f64-660b787dd5c4"],
Cell[2048906, 36847, 175, 3, 23, "Input",ExpressionUUID->"2cee032e-fb83-4e9e-b878-4b158f412982"]
}, Open  ]]
}
]
*)

