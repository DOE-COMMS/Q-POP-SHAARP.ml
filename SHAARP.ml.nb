(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    823726,      16767]
NotebookOptionsPosition[    822061,      16731]
NotebookOutlinePosition[    822548,      16750]
CellTagsIndexPosition[    822505,      16747]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["Initialization",
 FontWeight->"Bold"]], "Title",
 CellChangeTimes->{{3.8959329631164618`*^9, 
  3.895932965909975*^9}},ExpressionUUID->"441924d6-3b8e-4bd4-8fa6-\
0941648c2c7b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NotebookEvaluate", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<setup.nb\>\""}], 
    "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setupvar", "=", "1"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8863764175259113`*^9, 3.8863764216510215`*^9}, 
   3.8863766499202127`*^9, 3.8864455607318544`*^9, 3.887895488853596*^9, {
   3.887896034438848*^9, 3.8878960439160757`*^9}, {3.889436106460884*^9, 
   3.8894361315889654`*^9}, {3.8894361873976126`*^9, 3.88943619269838*^9}, {
   3.89102444959268*^9, 3.891024450746577*^9}, {3.89305939105934*^9, 
   3.8930593986154356`*^9}, 3.893059461698475*^9, {3.8930644547510796`*^9, 
   3.893064472349676*^9}, {3.893064510080668*^9, 3.893064522229964*^9}, {
   3.893191509709758*^9, 3.893191517223592*^9}, {3.893192189074219*^9, 
   3.893192204514889*^9}, 3.893193179948883*^9, {3.8931939064949512`*^9, 
   3.8931939312531705`*^9}, 3.8933405442081523`*^9, 3.8933481622867684`*^9, {
   3.8933507093480396`*^9, 3.893350715957938*^9}, {3.894586300088585*^9, 
   3.8945863019774375`*^9}, {3.8945882385294175`*^9, 3.8945882396429615`*^9}, 
   3.895364685360523*^9, 3.895837732757901*^9, {3.8958382367167573`*^9, 
   3.8958382509804587`*^9}, {3.895862888181453*^9, 3.895862899403054*^9}, {
   3.8958714652797155`*^9, 3.8958714808134613`*^9}, {3.895871577983863*^9, 
   3.8958716149822598`*^9}, {3.895881111608961*^9, 3.8958811205978346`*^9}, {
   3.8959239658297596`*^9, 3.895923966325376*^9}, 3.8959423773480606`*^9, {
   3.896314653348934*^9, 3.896314657267294*^9}, 3.8963154455605087`*^9, {
   3.896321435583887*^9, 3.8963214612888904`*^9}, {3.897014237722165*^9, 
   3.897014241214029*^9}, {3.8970165009005947`*^9, 3.897016502144909*^9}, {
   3.8970969729877863`*^9, 3.8970969747356415`*^9}, {3.8971742747549467`*^9, 
   3.8971742987739334`*^9}, {3.8971743546206465`*^9, 
   3.8971743601042366`*^9}, {3.8972624999508963`*^9, 3.89726250567898*^9}, {
   3.897262744722416*^9, 3.8972627684770613`*^9}, {3.8972632772311325`*^9, 
   3.8972632852568636`*^9}, {3.8972633516738973`*^9, 
   3.8972633541172123`*^9}, {3.897263634613264*^9, 3.897263650408495*^9}, {
   3.8972639453176775`*^9, 3.8972639464912057`*^9}, {3.897264054835474*^9, 
   3.897264063685416*^9}, {3.8972641236852856`*^9, 3.8972641640741763`*^9}, {
   3.897264334170711*^9, 3.897264375822837*^9}, {3.897264409445538*^9, 
   3.897264410986657*^9}, 3.8972647577955017`*^9, 3.897265056538562*^9, {
   3.8972657392507453`*^9, 3.897265739430617*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"0937ff5c-ef37-4c7e-9f0b-71353001cec0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "run", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"setupvar", "\[NotEqual]", "1"}], "||", 
     RowBox[{"!", 
      RowBox[{"ValueQ", "[", "setupvar", "]"}]}]}], ",", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"Style", "[", 
       RowBox[{
       "\"\<Please Evaluate the setup.nb first!\>\"", ",", "Bold", ",", "Red",
         ",", "32"}], "]"}], "]"}], ";", 
     RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LogoExists", " ", "=", " ", 
   RowBox[{"FileExistsQ", "[", "\"\<Logo.png\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"LogoExists", " ", ",", 
    RowBox[{
     RowBox[{"Logo", "=", 
      RowBox[{"Image", "[", 
       RowBox[{
        RowBox[{"Import", "[", "\"\<Logo.png\>\"", "]"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "550"}]}], "]"}]}], ";"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"progress", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"equByteLimit", "=", 
    SuperscriptBox["10", "5"]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "if", " ", "analytical", " ", "expression", " ", "exceeds", " ", "this", 
     " ", "size"}], ",", " ", 
    RowBox[{
    "it", " ", "will", " ", "hide", " ", "in", " ", "case", " ", "of", " ", 
     "crash"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"mtop", ",", "mlayer", ",", "mbot"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mtop", "=", 
   RowBox[{"setMater", "@", 
    RowBox[{"Air", "[", "]"}]}]}], ";", 
  RowBox[{"extMater", "@", "mtop"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mlayer", "=", 
   RowBox[{"setMater", "@", 
    RowBox[{"LiNbO3", "[", "]"}]}]}], ";", 
  RowBox[{"extMater", "@", "mlayer"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mbot", "=", 
    RowBox[{"setMater", "@", 
     RowBox[{"Air", "[", "]"}]}]}], ";", 
   RowBox[{"extMater", "@", "mbot"}], ";"}], "\[IndentingNewLine]", " ", 
  RowBox[{"(*", 
   RowBox[{
   "max", " ", "number", " ", "of", " ", "layers", " ", "in", " ", "the", " ",
     "system"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"maxmaterialnumber", "=", "10"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "a", " ", "default", " ", "list", " ", "to", " ", "store", " ", "all", 
     " ", "materials", " ", "for", " ", "the", " ", "current", " ", 
     "system"}], ";", " ", 
    RowBox[{
    "set", " ", "top", " ", "and", " ", "bottom", " ", "to", " ", "be", " ", 
     "air", " ", "by", " ", "default"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allmaterials", "=", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"mbot", ",", "mlayer"}], "}"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{"mtop", ",", 
        RowBox[{"maxmaterialnumber", "-", "2"}]}], "]"}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{"run", ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ProgressIndicator", "[", 
         RowBox[{
          RowBox[{"Dynamic", "[", "progress", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "100"}], "}"}], ",", 
          RowBox[{"ImageSize", "->", 
           RowBox[{"{", 
            RowBox[{"1000", ",", "30"}], "}"}]}]}], "]"}], ",", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<     \>\"", ",", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "progress", "]"}], ",", "22", ",", 
             RowBox[{"FontFamily", "->", "\"\<Helvetica\>\""}]}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<% Completed\>\"", ",", "22", ",", 
             RowBox[{"FontFamily", "->", "\"\<Helvetica\>\""}]}], "]"}]}], 
          "}"}], "]"}]}], "}"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"Framed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"RawBoxes", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToBoxes", "[", "#", "]"}], "/.", 
           RowBox[{"MapAt", "[", 
            RowBox[{"RuleCondition", ",", 
             RowBox[{"DownValues", "[", "Manipulate`ManipulateBoxes", "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}], "/.", 
          RowBox[{
           RowBox[{"FEPrivate`FrontEndResource", "[", 
            RowBox[{"\"\<FEBitmaps\>\"", ",", "\"\<UpdateIcon\>\""}], "]"}], 
           "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ToBoxes", "@", 
            RowBox[{"Graphics", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Green", ",", 
                RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                RowBox[{"Rectangle", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Inset", "[", 
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                   RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                   RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                   RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]}]}]}], "]"}], 
        "&"}], "@", "\[IndentingNewLine]", 
       RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Clear", "[", 
           RowBox[{"wavL", ",", "wavNL"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"userguide", "=", 
           RowBox[{"Column", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "Style", "[", 
                   "\"\<Welcome to \
\[Sharp]SHAARP.\!\(\*StyleBox[\\\"ml\\\",FontSlant->\\\"Italic\\\"]\) !\>\"", 
                   "]"}], "}"}], ",", 
                 RowBox[{"BaseStyle", "->", "\"\<Title\>\""}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
               "Style", "[", 
                "\"\<\[Sharp]SHAARP.\!\(\*StyleBox[\\\"ml\\\",FontSlant->\\\"\
Italic\\\"]\) is an open-source package for deriving and simulating reflected \
and transmitted optical second harmonic generation (SHG) of slab and \
multilayer systems. Optical SHG describes the process where two photons of \
frequency interact with one or more nonlinear media (crystals) to create a \
photon at 2\[Omega], so called the SHG process.\>\"", "]"}], ",", 
               "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "Style", "[", 
                  "\"\<This package builds in the most general approach to \
both analytically and numerically solving the SHG response of crystals with \
arbitrary crystal symmetry, arbitrary orientation, and a complex dielectric \
function (complex refractive indices).\>\"", "]"}], "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "Style", "[", 
                   "\"\<Open \[Sharp]SHAARP.ml.nb in the Mathematica\
\[RegisteredTrademark] software on your computer\>\"", "]"}], "}"}], ",", 
                 RowBox[{"BaseStyle", "\[Rule]", "\"\<Section\>\""}]}], "]"}],
                ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Style", "[", "\"\<1. From the menu, \>\"", "]"}], 
                  ",", 
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Evaluate\>\"", ",", 
                    RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], 
                  ",", 
                  RowBox[{"Style", "[", "\"\< -> \>\"", "]"}], ",", 
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Evaluate Notebook\>\"", ",", 
                    RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}]}],
                  "}"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "Style", "[", 
                  "\"\<    Note: This process will clear out all the \
definitions from other notebooks and enable the Notation package for the \
analytical solutions.\>\"", "]"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "Style", "[", 
                  "\"\<2. After a few seconds waiting time for \
initialization, you will see the main panel\>\"", "]"}], "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Style", "[", 
                RowBox[{
                "\"\<Use the 'Functionality' control on the control panel to \
the left to set material properties and then view the desired output in the \
display panel.\\nIn order to update figures in the display panel, you must \
press any of the three 'Update' button in green to the top right.\>\"", ",", 
                 "20"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Style", "[", 
                RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Style", "[", "\"\<More Resources\>\"", "]"}], 
                  "}"}], ",", 
                 RowBox[{"BaseStyle", "\[Rule]", "\"\<Section\>\""}]}], "]"}],
                ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "Style", "[", 
                   "\"\<For detailed information of \[Sharp]SHAARP.ml, please \
refer to the \>\"", "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<GitHub\>\"", "]"}], ",", 
                    "\"\<https://github.com/bzw133/SHAARP.ml\>\""}], "]"}], 
                  ",", "\"\<, \>\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<manual\>\"", "]"}], ",", 
                    "\"\<https://shaarpml.readthedocs.io/en/latest/\>\""}], 
                   "]"}], ",", "\"\<, \>\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<tutorial video\>\"", "]"}], 
                    ",", "\"\<https://www.youtube.com/watch?v=YiKRm6i7kNs\>\"\
"}], "]"}], ",", 
                  RowBox[{"Style", "[", "\"\<, and \>\"", "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<FAQ\>\"", "]"}], ",", 
                    "\"\<https://shaarpml.readthedocs.io/en/latest/FAQ/\>\""}]\
, "]"}], ",", "\"\<.\>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
               "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "Style", "[", 
                   "\"\<\[Sharp]SHAARP for single interface, \
\[Sharp]SHAARP.si : \>\"", "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<GitHub\>\"", "]"}], ",", 
                    "\"\<https://github.com/Rui-Zu/SHAARP\>\""}], "]"}], ",", 
                  RowBox[{"Style", "[", "\"\<, \>\"", "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{
                    "Style", "[", "\"\<\[Sharp]SHAARP.si manual\>\"", "]"}], 
                    ",", "\"\<https://shaarp.readthedocs.io/en/latest/\>\""}],
                    "]"}], ",", "\"\<.\>\""}], "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "Style", "[", 
                   "\"\<If you used \[Sharp]SHAARP for your publications, \
please kindly cite us:  \>\"", "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<\[Sharp]SHAARP.ml\>\"", "]"}], 
                    ",", "\"\<https://arxiv.org/abs/2307.01368\>\""}], "]"}], 
                  ",", 
                  RowBox[{"Style", "[", "\"\<, \>\"", "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Hyperlink", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", "\"\<\[Sharp]SHAARP.si\>\"", "]"}], 
                    ",", "\"\<https://www.nature.com/articles/s41524-022-\
00930-4\>\""}], "]"}], ",", "\"\<.\>\""}], "}"}], "]"}]}], 
              "\[IndentingNewLine]", "}"}], ",", 
             RowBox[{"Background", "->", "White"}], ",", 
             RowBox[{"Alignment", "->", "Left"}], ",", 
             RowBox[{"BaseStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"FontFamily", "->", "\"\<Franklin Gothic\>\""}], ",", 
                RowBox[{"FontSize", "->", "18"}]}], "}"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", "Preprocessing", "*)"}], "Chapter"], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"INITIAL", " ", "SETUPS"}], "*)"}], "Section"], 
          StyleBox["\[IndentingNewLine]", "Section"], " ", 
          RowBox[{"(*", 
           RowBox[{
           "max", " ", "number", " ", "of", " ", "layers", " ", "in", " ", 
            "the", " ", "system"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"maxmaterialnumber", "=", "10"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "reset", " ", "materials", " ", "to", " ", "air", " ", "if", " ", 
            "not", " ", "used", " ", "in", " ", "materialnumber"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allmaterials", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"materialnumber", "+", "2"}], ";;", 
              "maxmaterialnumber"}], "]"}], "]"}], "=", 
           RowBox[{"Table", "[", 
            RowBox[{"mbot", ",", 
             RowBox[{"maxmaterialnumber", "-", "materialnumber", "-", "1"}]}],
             "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "create", " ", "dgrid", " ", "for", " ", "display", " ", "and", 
            " ", "input"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"clearFigs", "[", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"dgrid", "=", 
           RowBox[{"Dynamic", "[", 
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"generatingdfun1", "[", "matindex", "]"}], ",", 
              RowBox[{"Spacings", "->", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], ",", 
              RowBox[{"ItemSize", "->", "All"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "assign", " ", "values", " ", "to", " ", "dependnet", " ", "d", 
            " ", "components"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"indexfun1", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"materialnumber", "+", "2"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"zvecplots2d", "=", 
           RowBox[{"ConstantArray", "[", 
            RowBox[{"placeHolderFigs", ",", "maxmaterialnumber"}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"zvecplots3d", "=", 
           RowBox[{"ConstantArray", "[", 
            RowBox[{"placeHolderFigs", ",", "maxmaterialnumber"}], "]"}]}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", 
            RowBox[{"progress", "=", "10"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"INITIALIZE", " ", "PRESETS"}], "*)"}], "Section"], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"ValueQ", "[", "startupvar", "]"}], ",", ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "ptest1", ",", "ptest2", ",", "ptest3", ",", "ptest4", ",", 
                  "ptest5", ",", "ptest6", ",", "ptest7", ",", "ptest8"}], 
                 "}"}], "=", 
                RowBox[{"Table", "[", 
                 RowBox[{"0", ",", "8"}], "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"ValueQ", "[", "startupvar", "]"}], ",", ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "plabel1", ",", "plabel2", ",", "plabel3", ",", "plabel4", 
                  ",", "plabel5", ",", "plabel6", ",", "plabel7", ",", 
                  "plabel8"}], "}"}], "=", 
                RowBox[{"Table", "[", 
                 RowBox[{"\"\<Type Label Here\>\"", ",", "8"}], "]"}]}]}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"startupvar", "=", "1"}], ";", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "ap1", ",", "ap2", ",", "ap3", ",", "ap4", ",", "ap5", ",", 
                "ap6", ",", "ap7", ",", "ap8"}], "}"}], "=", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest1", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest2", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest3", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest4", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest5", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest6", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest7", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"ptest8", "==", "0"}], "]"}], ",", 
                  RowBox[{"{", "\"\<DialogBox\>\"", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<DialogBox\>\"", ",", "\"\<Pressed\>\""}], 
                   "}"}]}], "]"}]}], "}"}]}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "All", " ", "setup", " ", "depending", " ", "on", " ", "anything", 
            " ", "in", " ", "the", " ", "TrackedSymbols", " ", "go", " ", 
            "here"}], "*)"}], "\[IndentingNewLine]", 
          StyleBox["\[IndentingNewLine]", "Subsubsection"], 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"hkl", " ", "CONVERSION"}], "*)"}], "Section"], 
          StyleBox["\[IndentingNewLine]", "Subsubsection"], 
          RowBox[{"(*", 
           RowBox[{"convert", " ", "between", " ", 
            RowBox[{"orientation", "[", 
             RowBox[{"[", "2", "]"}], "]"}], " ", "and", " ", 
            RowBox[{"orientation", "[", 
             RowBox[{"[", "3", "]"}], "]"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", 
            RowBox[{"ruihklfun", "/@", 
             RowBox[{"Range", "[", 
              RowBox[{"materialnumber", "+", "2"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", 
            RowBox[{"progress", "=", "15"}]}], "]"}], ";", 
          StyleBox["\[IndentingNewLine]", "Section"], "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            StyleBox["CALCULATIONS",
             FontWeight->"Bold"], 
            StyleBox[" ",
             FontWeight->"Bold"], "*)"}], "Chapter"], "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"single", " ", "run"}], "*)"}], "Section"], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], 
             "\[Or]", 
             RowBox[{
             "Functionality", "==", 
              "\"\<Partial Analytical Expressions\>\""}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\[Omega]0", "=", 
              RowBox[{"N", "@", 
               RowBox[{"(", 
                RowBox[{"2", " ", "Pi", " ", 
                 RowBox[{"c0", "/", "\[Lambda]"}]}], ")"}]}]}], ";", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Abs", "@", "theta"}], ">=", "89"}], ",", 
               RowBox[{"theta", "=", 
                RowBox[{
                 RowBox[{"Sign", "[", "theta", "]"}], "89.0"}]}]}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"wInc", "=", 
              RowBox[{"setwInc", "[", 
               RowBox[{"\[Omega]0", ",", 
                RowBox[{"N", "@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"theta", "/", "180"}], " ", "Pi"}], ")"}]}], ",", 
                "\[CapitalDelta]\[Delta]", ",", "\[CurlyPhi]", ",", "n0"}], 
               "]"}]}], ";", 
             RowBox[{"extWave", "@", "wInc"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
               "setup", " ", "all", " ", "materials", " ", "into", " ", 
                "mats"}], "=", 
               RowBox[{"{", 
                RowBox[{"m1", ",", "m2", ",", "m3", ",", "..."}], "}"}]}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"ToExpression", "[", 
                RowBox[{
                 RowBox[{"\"\<m\>\"", "<>", 
                  RowBox[{"ToString", "[", "#", "]"}]}], ",", "InputForm", 
                 ",", 
                 RowBox[{"Function", "[", 
                  RowBox[{"name", ",", 
                   RowBox[{"name", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], ",", "HoldAll"}], 
                  "]"}]}], "]"}], "&"}], "/@", 
              RowBox[{"Range", "[", 
               RowBox[{"materialnumber", "+", "2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"ToExpression", "[", 
                RowBox[{
                 RowBox[{"\"\<m\>\"", "<>", 
                  RowBox[{"ToString", "[", "#", "]"}]}], ",", "InputForm", 
                 ",", 
                 RowBox[{"Function", "[", 
                  RowBox[{"name", ",", 
                   RowBox[{"extMater", "@", "name"}], ",", "HoldAll"}], 
                  "]"}]}], "]"}], "&"}], "/@", 
              RowBox[{"Range", "[", 
               RowBox[{"materialnumber", "+", "2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "always", " ", "set", " ", "1", "st", " ", "material", " ", 
               "to", " ", "be", " ", "air"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"m1", "=", 
              RowBox[{"setMater", "@", 
               RowBox[{"Air", "[", "]"}]}]}], ";", 
             RowBox[{"extMater", "@", "m1"}], ";", "\[IndentingNewLine]", 
             RowBox[{"mats", "=", 
              RowBox[{
               RowBox[{
                RowBox[{"ToExpression", "[", 
                 RowBox[{
                  RowBox[{"\"\<m\>\"", "<>", 
                   RowBox[{"ToString", "[", "#", "]"}]}], ",", "InputForm", 
                  ",", 
                  RowBox[{"Function", "[", 
                   RowBox[{"name", ",", "name", ",", "HoldAll"}], "]"}]}], 
                 "]"}], "&"}], "/@", 
               RowBox[{"Range", "[", 
                RowBox[{"materialnumber", "+", "2"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "detect", " ", "if", " ", "analytical", " ", "d", " ", "or", 
               " ", "h", " ", "is", " ", "used"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"noAnalytical", "=", 
              RowBox[{"And", "@@", 
               RowBox[{"NumberQ", "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"Flatten", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Key", "[", "dC", "]"}], "/@", "mats"}], ")"}]}], 
                   ")"}], "~", "Join", "~", 
                  RowBox[{"(", 
                   RowBox[{"Flatten", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Key", "[", "h", "]"}], "/@", "mats"}], ")"}]}], 
                   ")"}]}], ")"}]}]}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"mrassumption", "==", "0"}], ",", 
               RowBox[{"(*", "FMR", "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Which", "[", 
                 RowBox[{
                  RowBox[{"winhAssumption", "==", "0"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"flagBackward", "=", "False"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"flagStandingWave", "=", "False"}], ";"}], 
                  "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                  RowBox[{"winhAssumption", "==", "1"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"flagBackward", "=", "True"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"flagStandingWave", "=", "False"}], ";"}], 
                  "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                  RowBox[{"winhAssumption", "==", "2"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"flagBackward", "=", "True"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"flagStandingWave", "=", "True"}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"flagJK", "=", "False"}], ";", 
                RowBox[{"flagHH", "=", "False"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"wavL", ",", "wavNL"}], "}"}], "=", 
                 RowBox[{"f4NL", "[", 
                  RowBox[{"mats", ",", "wInc"}], "]"}]}], ";"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"mrassumption", "==", "1"}], ",", 
                 RowBox[{"(*", "JK", "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"flagBackward", "=", "False"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"flagStandingWave", "=", "False"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"flagJK", "=", "True"}], ";", 
                  RowBox[{"flagHH", "=", "False"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"wavL", ",", "wavNL"}], "}"}], "=", 
                   RowBox[{"f4NL", "[", 
                    RowBox[{"mats", ",", "wInc", ",", "True"}], "]"}]}], 
                  ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"mrassumption", "==", "2"}], ",", 
                   RowBox[{"(*", "HH", "*)"}], "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"flagBackward", "=", "False"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"flagStandingWave", "=", "False"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"flagJK", "=", "False"}], ";", 
                    RowBox[{"flagHH", "=", "True"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"wavL", ",", "wavNL"}], "}"}], "=", 
                    RowBox[{"f4NL", "[", 
                    RowBox[{"mats", ",", "wInc", ",", "True"}], "]"}]}], 
                    ";"}]}], "\[IndentingNewLine]", "]"}]}], 
                "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"evaltime", "=", "0"}], ";", "\[IndentingNewLine]", 
          RowBox[{"StartTime", "=", 
           RowBox[{"SessionTime", "[", "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "\[NotEqual]", "\"\<User Guide\>\""}], 
            ",", 
            RowBox[{"progress", "=", "25"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{
            "batch", " ", "run", " ", "for", " ", "Fresnel", " ", "and", " ", 
             "Maker", " ", "fringes"}], "*)"}], "Section"], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"FresnelList", "=", 
              RowBox[{"{", "}"}]}], ";", 
             RowBox[{"MFList", "=", 
              RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"fresnelcontrol", 
                RowBox[{"(*", 
                 RowBox[{"&&", 
                  RowBox[{"(", 
                   RowBox[{"!", "makerfringescontrol"}], ")"}]}], "*)"}], "&&",
                 "noAnalytical"}], ",", "\[IndentingNewLine]", 
               RowBox[{"FresnelList", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Fresnel", "[", 
                   RowBox[{"mats", ",", "#", ",", "mrassumption"}], "]"}], 
                  "&"}], "/@", 
                 RowBox[{"Range", "[", 
                  RowBox[{"0.0", ",", "89.0", ",", "thetastep1"}], 
                  "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"makerfringescontrol", 
                RowBox[{"(*", 
                 RowBox[{"&&", 
                  RowBox[{"(", 
                   RowBox[{"!", "fresnelcontrol"}], ")"}]}], "*)"}], "&&", 
                "noAnalytical"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Abs", "@", "maxtheta2"}], ">=", "89"}], ",", 
                  RowBox[{"maxtheta2", "=", 
                   RowBox[{
                    RowBox[{"Sign", "[", "maxtheta2", "]"}], "89.0"}]}]}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"MFList", "=", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"MF", "[", 
                    RowBox[{"mats", ",", "#", ",", "mrassumption"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"Range", "[", 
                   RowBox[{"mintheta2", ",", "maxtheta2", ",", "thetastep2"}],
                    "]"}]}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"!", "noAnalytical"}], ")"}], ",", 
               RowBox[{
                RowBox[{
                "Print", "[", 
                 "\"\<Only numerical simulation is supported for Maker \
fringes calcaulation;  Either analytical d or h is given! Abort!\>\"", " ", 
                 "]"}], ";", 
                RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{
            "batch", " ", "run", " ", "for", " ", "Sample", " ", "Rotation"}],
             "*)"}], "Section"], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"SampleRotationList", "=", 
              RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"samplerotationcontrol", 
                RowBox[{"(*", 
                 RowBox[{"&&", 
                  RowBox[{"(", 
                   RowBox[{"!", "fresnelcontrol"}], ")"}]}], "*)"}], "&&", 
                "noAnalytical"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Abs", "@", "theta"}], ">=", "89"}], ",", 
                  RowBox[{"theta", "=", 
                   RowBox[{
                    RowBox[{"Sign", "[", "theta", "]"}], "89.0"}]}]}], "]"}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"SampleRotateList", "=", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"SampleRotate", "[", 
                    RowBox[{"mats", ",", 
                    RowBox[{"theta", " ", "Degree"}], ",", "#", ",", 
                    "samplerotatestep", ",", "mrassumption", ",", 
                    "materialnumber", ",", "delta", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{"psi", " ", "Degree"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"Range", "[", 
                   RowBox[{"0", ",", "360", ",", "samplerotatestep"}], 
                   "]"}]}]}], ";"}]}], "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"Print", "[", "SampleRotateList", "]"}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"SampleRotateList", "=", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"SampleRotate", "[", 
                    RowBox[{
                    "mats", ",", "theta", ",", "#", ",", "mrassumption", ",", 
                    "materialnumber", ",", "delta"}], "]"}], "&"}], "/@", 
                  RowBox[{"Range", "[", 
                   RowBox[{"0", ",", "360", ",", "samplerotatestep"}], 
                   "]"}]}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                "SampleRotateListHalf1", "=", "SampleRotateListHalf"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"SampleRotateListHalf1", "[", 
                  RowBox[{"[", 
                   RowBox[{";;", ",", "1"}], "]"}], "]"}], "=", 
                 RowBox[{
                  RowBox[{"SampleRotateListHalf1", "[", 
                   RowBox[{"[", 
                    RowBox[{";;", ",", "1"}], "]"}], "]"}], "+", "180"}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"SampleRotateList", " ", "=", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                  "SampleRotateListHalf", ",", "SampleRotateListHalf1"}], 
                  "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"!", "noAnalytical"}], ")"}], ",", 
               RowBox[{
                RowBox[{
                "Print", "[", 
                 "\"\<Only numerical simulation is supported;  Either \
analytical d or h is given! Abort!\>\"", " ", "]"}], ";", 
                RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"Postprocessing", " ", "for", " ", "plots"}], "*)"}], 
           "Chapter"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"For", " ", "Set", " ", "Material", " ", "Properties"}], 
            "*)"}], "Section"], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
             "Functionality", "==", "\"\<Set Material Properties\>\""}], " ", 
             "||", " ", 
             RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], " ", "||",
              " ", 
             RowBox[{
             "Functionality", "==", 
              "\"\<Partial Analytical Expressions\>\""}]}], ",", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", 
              RowBox[{"PLOTTING", " ", "SCHEMATIC", " ", "FIGURES"}], "*)"}], 
             "Subsubsection"], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"heterostructureschematic", "=", 
              RowBox[{"Show", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Graphics", "[", 
                 RowBox[{"{", 
                  RowBox[{"White", ",", 
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", "White", "]"}], "]"}], ",", 
                   RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "1.5"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", 
                    RowBox[{"-", "2"}]}], "}"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\>\"", ",", "15", ",", "Black", ",", "Bold"}], "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1.75"}]}], "}"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Air\>\"", ",", "15", ",", "Black", ",", "Bold"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"8.5", ",", 
                    RowBox[{"-", "1.75"}]}], "}"}]}], "]"}]}], "}"}], "]"}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"Graphics", "[", 
                 RowBox[{"Text", "[", 
                  RowBox[{
                   RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"DownArrow", "[", 
                    RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "<>", "\"\<Incident Light, \>\"", "<>", 
                    RowBox[{"ToString", "[", "\[Lambda]", "]"}], "<>", 
                    "\"\<\[Mu]m\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"DownArrow", "[", 
                    RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "]"}], "]"}]}], 
                    ",", "20", ",", "Blue", ",", "Bold"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"5", ",", 
                    RowBox[{"-", "1.75"}]}], "}"}]}], "]"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"schematicfun", "/@", 
                 RowBox[{"(", 
                  RowBox[{"Reverse", "@", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", 
                    RowBox[{"materialnumber", "+", "2"}]}], "}"}], "&"}], "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"materialnumber", "+", "1"}]}], "]"}]}], ")"}]}], 
                  ")"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"Graphics", "[", 
                 RowBox[{"{", 
                  RowBox[{"White", ",", 
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", "White", "]"}], "]"}], ",", 
                   RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{"-", "materialnumber"}], "-", "2", "-", "0.1"}]}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", 
                    RowBox[{
                    RowBox[{"-", "materialnumber"}], "-", "3"}]}], "}"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", 
                    RowBox[{"(*", 
                    RowBox[{"ToString", "[", "materialnumber", "]"}], "*)"}], 
                    ",", "15", ",", "Black", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{
                    RowBox[{"-", "materialnumber"}], "-", "2", "-", 
                    "0.25"}]}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Air\>\"", ",", "15", ",", "Black", ",", "Bold"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"8.5", ",", 
                    RowBox[{
                    RowBox[{"-", "materialnumber"}], "-", "2", "-", 
                    "0.25"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
                  "}"}], "]"}], "\[IndentingNewLine]", ",", 
                RowBox[{"ImageSize", "->", 
                 RowBox[{"{", 
                  RowBox[{"600", ",", "Automatic"}], "}"}]}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"zvecplots2d", "=", 
              RowBox[{"fzvecplots2d", "/@", "allmaterials"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"zvecplots3d", "=", 
              RowBox[{"fzvecplots3d", "/@", "allmaterials"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"For", " ", "SHG", " ", "Simulation"}], "*)"}], "Section"],
           "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], ",", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
             "noAnalytical", ",", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              StyleBox[
               RowBox[{"(*", 
                RowBox[{"PLOTTING", " ", "WAVE", " ", "PATH"}], "*)"}], 
               "Subsubsection"], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"fig13d", "=", 
                RowBox[{"Graphics3D", "[", 
                 RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"incident", " ", "\[Omega]", " ", "wave"}], 
                    "*)"}], "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"wInc", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], "-", 
                    RowBox[{"Normalize", "[", 
                    RowBox[{"wInc", "[", "k", "]"}], "]"}]}], ",", "Red"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"\[Omega]", " ", "waves", " ", "in", " ", "red"}],
                     "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"transmission", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "materialnumber"}], 
                    "}"}], ",", "Red"}], "]"}], "&"}], "/@", 
                    RowBox[{"wavL", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"reflection", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
                    "Red"}], "]"}], "&"}], "/@", 
                    RowBox[{"wavL", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"forward", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Red"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Red"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavL", "[", 
                    RowBox[{"[", "4", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"backward", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", "Red"}], 
                    "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", "Red"}], 
                    "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavL", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "2", "\[Omega]", " ", "homo", " ", "waves", " ", "in", 
                    " ", "blue"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"transmission", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", "materialnumber"}], "}"}], 
                    ",", "Blue"}], "]"}], "&"}], "/@", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"reflection", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", "Blue"}], 
                    "]"}], "&"}], "/@", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"forward", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Blue"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Blue"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "4", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"backward", " ", "waves"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", "Blue"}], 
                    "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", "Blue"}], 
                    "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "2", "\[Omega]", " ", "inhomo", " ", "waves", " ", "in", 
                    " ", "orange"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"mrassumption", "==", "0"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{"flagBackward", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{"flagStandingWave", ",", "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "5", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "6", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "7", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", ".5"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", ".5"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "8", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", ".5"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", ".5"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "9", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", ".5"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", ".5"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "10", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"0", "-", ".5"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", ".5"}]}], "}"}], 
                    ",", "Orange"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "5", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "5", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "6", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{"Sequence", "@@", "#2"}]}], "}"}], ",", 
                    "Orange"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "5", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "5", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}], ",", 
                    RowBox[{"pltWav", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", "#2"}], "-", "1"}]}], "}"}], 
                    ",", "Orange"}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"wavNL", "[", 
                    RowBox[{"[", "5", "]"}], "]"}]}], "]"}], ")"}], ",", 
                    "1"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", "interfaces", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Hyperplane", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "#"}], "}"}]}], "]"}], "&"}], 
                    "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", "materialnumber"}], "]"}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Evaluate", "@", "options2d"}], ",", 
                  RowBox[{"PlotLabel", "->", 
                   RowBox[{"\"\<\[Lambda] of \[Omega] wave (\[Mu]m) = \>\"", "<>", 
                    RowBox[{"ToString", "[", "\[Lambda]", "]"}]}]}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"fig12d", "=", 
                RowBox[{"Show", "[", 
                 RowBox[{"fig13d", ",", 
                  RowBox[{"ViewPoint", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "Infinity", ",", "0"}], "}"}]}], ",", 
                  RowBox[{"Method", "->", 
                   RowBox[{"{", 
                    RowBox[{"\"\<RotationControl\>\"", "->", "None"}], 
                    "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{
                 "PLOTTING", " ", "ELLIPSOMETRY", " ", "of", " ", "2", 
                  "\[Omega]", " ", "waves"}], "*)"}], "Subsubsection"], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "for", " ", "the", " ", "polarplot", " ", "of", " ", 
                 "reflected", " ", "waves"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"rmpw1", ",", "rmpw2"}], "}"}], "=", 
                RowBox[{"wavNL", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                  RowBox[{"[", 
                   RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ",
                   "reflected"}], ",", " ", 
                 RowBox[{
                  RowBox[{"[", 
                   RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ",
                   "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"extWave", "@", "rmpw1"}], ";", 
               RowBox[{"extWave", "@", "rmpw2"}], ";", "\[IndentingNewLine]", 
               RowBox[{"rSignal", "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], 
                 ".", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"rmpw1", "[", "A", "]"}], "+", 
                    RowBox[{"rmpw2", "[", "A", "]"}]}], ")"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "for", " ", "the", " ", "polarplot", " ", "of", " ", 
                 "transmitive", " ", "waves"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"tmpw1", ",", "tmpw2"}], "}"}], "=", 
                RowBox[{"wavNL", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                  RowBox[{"[", 
                   RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ",
                   "reflected"}], ",", " ", 
                 RowBox[{
                  RowBox[{"[", 
                   RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ",
                   "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"extWave", "@", "tmpw1"}], ";", 
               RowBox[{"extWave", "@", "tmpw2"}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"tSignal", "=", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], 
                   ".", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tmpw1", "[", "A", "]"}], "+", 
                    RowBox[{"tmpw2", "[", "A", "]"}]}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";"}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"tSignal", "=", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}], ",", 
                    RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], 
                 ".", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"tmpw1", "[", "A", "]"}], "+", 
                    RowBox[{"tmpw2", "[", "A", "]"}]}], ")"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"rules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                   RowBox[{"delta", " ", "Degree"}]}], ",", 
                  RowBox[{"If", "[", 
                   RowBox[{"RotatePolarizer", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "]"}], ",", 
                  RowBox[{"If", "[", 
                   RowBox[{"RotateAnalyzer", ",", 
                    RowBox[{"\[Psi]", "->", 
                    RowBox[{"\[CurlyPhi]", "+", 
                    RowBox[{"analyzeroffset", " ", "Degree"}]}]}], ",", 
                    RowBox[{"\[Psi]", "->", 
                    RowBox[{"psi", " ", "Degree"}]}]}], "]"}]}], "}"}]}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"dataRs", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"rSignal", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "*", 
                   RowBox[{"Conjugate", "[", 
                    RowBox[{"rSignal", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}], "/.", 
                 "rules"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"dataRp", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"rSignal", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "*", 
                   RowBox[{"Conjugate", "[", 
                    RowBox[{"rSignal", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], "/.", 
                 "rules"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"dataTs", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"tSignal", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "*", 
                   RowBox[{"Conjugate", "[", 
                    RowBox[{"tSignal", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}], "/.", 
                 "rules"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"dataTp", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"tSignal", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "*", 
                   RowBox[{"Conjugate", "[", 
                    RowBox[{"tSignal", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], "/.", 
                 "rules"}]}], ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "factorRp", ",", "factorRs", ",", "factorTp", ",", 
                  "factorTs"}], "}"}], "=", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]}], ";", 
               RowBox[{"Imax", "=", "1"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", " ", "[", 
                RowBox[{"samplerotationcontrol", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Quiet", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "MaxRp", ",", "MaxRs", ",", "MaxTp", ",", "MaxTs"}], 
                    "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", ",", "2"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", ",", "3"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", ",", "4"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", ",", "5"}], "]"}], "]"}], "]"}]}], "}"}]}], 
                   "]"}], ";"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Quiet", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "MaxRp", ",", "MaxRs", ",", "MaxTp", ",", "MaxTs"}], 
                    "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{"Re", "@", "dataRp"}], ",", "\[CurlyPhi]"}], 
                    "]"}], ",", 
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{"Re", "@", "dataRs"}], ",", "\[CurlyPhi]"}], 
                    "]"}], ",", 
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{"Re", "@", "dataTp"}], ",", "\[CurlyPhi]"}], 
                    "]"}], ",", 
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{"Re", "@", "dataTs"}], ",", "\[CurlyPhi]"}], 
                    "]"}]}], "}"}]}], "]"}], ";"}]}], "]"}], ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"Quiet", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"MaxRtot", ",", "MaxTtot"}], "}"}], "=", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Re", "@", "dataRp"}], "+", 
                    RowBox[{"Re", "@", "dataRs"}]}], ",", "\[CurlyPhi]"}], 
                    "]"}], ",", 
                    RowBox[{"NMaxValue", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Re", "@", "dataTp"}], "+", 
                    RowBox[{"Re", "@", "dataTs"}]}], ",", "\[CurlyPhi]"}], 
                    "]"}]}], "}"}]}], "]"}], ";"}], "  ", 
                RowBox[{"(*", 
                 RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Imax", "=", 
                RowBox[{"1.1", 
                 RowBox[{"Max", "[", 
                  RowBox[{"MaxRp", ",", "MaxRs", ",", "MaxTp", ",", "MaxTs"}],
                   "]"}]}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"Imax", "=", 
                  RowBox[{"1.1", 
                   RowBox[{"Max", "[", 
                    RowBox[{
                    "MaxRp", ",", "MaxRs", ",", "MaxTp", ",", "MaxTs", ",", 
                    "MaxRtot", ",", "MaxTtot"}], "]"}]}]}], ";"}], 
                RowBox[{"(*", 
                 RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Abs", "@", "Imax"}], "<", 
                  SuperscriptBox["10", 
                   RowBox[{"-", "10"}]]}], ",", 
                 RowBox[{"Imax", "=", "1"}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"factorRp", "=", 
                RowBox[{"Max", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxRp", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxRp"}], "]"}], ",", "0"}], 
                   "]"}]}], "]"}]}], ";", 
               RowBox[{"factorRs", "=", 
                RowBox[{"Max", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxRs", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxRs"}], "]"}], ",", "0"}], 
                   "]"}]}], "]"}]}], ";", 
               RowBox[{"factorTp", "=", 
                RowBox[{"Max", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxTp", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxTp"}], "]"}], ",", "0"}], 
                   "]"}]}], "]"}]}], ";", 
               RowBox[{"factorTs", "=", 
                RowBox[{"Max", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxTs", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxTs"}], "]"}], ",", "0"}], 
                   "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"factorRtot", "=", 
                  RowBox[{"Max", "[", 
                   RowBox[{"1", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxRtot", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxRtot"}], "]"}], ",", "0"}], 
                    "]"}]}], "]"}]}], ";", " ", 
                 RowBox[{"(*", 
                  RowBox[{"new", " ", "V240120"}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"factorTtot", "=", 
                  RowBox[{"Max", "[", 
                   RowBox[{"1", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", "MaxTtot", "]"}], "!=", "0"}], ",", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Imax", "/", "MaxTtot"}], "]"}], ",", "0"}], 
                    "]"}]}], "]"}]}], ";"}], " ", 
                RowBox[{"(*", 
                 RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"polarRp", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRp", "*", 
                 RowBox[{"Re", "@", "dataRp"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"polarRs", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRs", "*", 
                 RowBox[{"Re", "@", "dataRs"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"polarTp", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTp", "*", 
                 RowBox[{"Re", "@", "dataTp"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"polarTs", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTs", "*", 
                 RowBox[{"Re", "@", "dataTs"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"polarRtot", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRtot", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Re", "@", "dataRs"}], "+", 
                   RowBox[{"Re", "@", "dataRp"}]}], ")"}]}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{"new", " ", "V240120"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"polarTtot", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTtot", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Re", "@", "dataTs"}], "+", 
                   RowBox[{"Re", "@", "dataTp"}]}], ")"}]}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{"new", " ", "V240120"}], "*)"}], 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"!", "RotateAnalyzer"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"!", "RotatePolarizer"}], ")"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{"samplerotationcontrol", ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"figRp", "=", 
                    RowBox[{"ListPolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], " ", "Degree"}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "2"}], "]"}], "]"}], "/", "Imax"}], "*",
                     "factorRp"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "SampleRotateList", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Joined", "->", "True"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "->", "Full"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figRs", "=", 
                    RowBox[{"ListPolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "Degree"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "3"}], "]"}], "]"}], "/", "Imax"}], "*",
                     "factorRs"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "SampleRotateList", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Joined", "->", "True"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "->", "Full"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figTp", "=", 
                    RowBox[{"ListPolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "Degree"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "4"}], "]"}], "]"}], "/", "Imax"}], "*",
                     "factorTp"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "SampleRotateList", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Joined", "->", "True"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "->", "Full"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figTs", "=", 
                    RowBox[{"ListPolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "Degree"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleRotateList", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "5"}], "]"}], "]"}], "/", "Imax"}], "*",
                     "factorTs"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "SampleRotateList", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Joined", "->", "True"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "->", "Full"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"figRp", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarRp", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figRs", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarRs", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figTp", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarTp", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"figTs", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarTs", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}]}], "]"}], "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{"figRtot", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarRtot", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRtot", "]"}]}], ",", "22",
                     ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])+\!\(\*SuperscriptBox[\(I\), \(R, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", 
                   RowBox[{"(*", 
                    RowBox[{"new", " ", "V240120"}], "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"figTtot", "=", 
                    RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarTtot", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", 
                    RowBox[{"phi", " ", "Degree"}], ",", 
                    RowBox[{
                    RowBox[{"phi", " ", "Degree"}], "+", "0.01"}]}], "}"}], 
                    ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.05", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTtot", "]"}]}], ",", "22",
                     ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])+\!\(\*SuperscriptBox[\(I\), \(T, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}], 
                  RowBox[{"(*", 
                   RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
                 "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"figRp", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRp", "*", 
                    RowBox[{"Re", "@", "dataRp"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"figRs", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorRs", "*", 
                    RowBox[{"Re", "@", "dataRs"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"figTp", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTp", "*", 
                    RowBox[{"Re", "@", "dataTp"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTp", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "28", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"figTs", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "Imax"}], ")"}], "*", "factorTs", "*", 
                    RowBox[{"Re", "@", "dataTs"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTs", "]"}]}], ",", "22", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"figRtot", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarRtot", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Reflected SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorRtot", "]"}]}], ",", "22",
                     ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])+\!\(\*SuperscriptBox[\(I\), \(R, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";", 
                  RowBox[{"(*", 
                   RowBox[{"new", " ", "V240120"}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"figTtot", "=", 
                   RowBox[{"PolarPlot", "[", 
                    RowBox[{"polarTtot", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[CurlyPhi]", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", 
                    RowBox[{"Evaluate", "@", "options2"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Transmitted SHG (a.u.) \[Times] \>\"", "<>", 
                    RowBox[{"ToString", "[", "factorTtot", "]"}]}], ",", "22",
                     ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], ",", "None"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])+\!\(\*SuperscriptBox[\(I\), \(T, 2 \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "28", 
                    ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}]}]}], "]"}]}], ";"}], 
                 RowBox[{"(*", 
                  RowBox[{"new", " ", "V240120"}], "*)"}], "*)"}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{
                 "Plot", " ", "maker", " ", "fringes", " ", "and", " ", 
                  "fresnel", " ", "figures"}], "*)"}], "Subsubsection"], 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"makerfringescontrol", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"listMFpara", "=", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Re", "[", 
                    RowBox[{"MFList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CapitalDelta]\[Delta]", "->", 
                    RowBox[{"delta", " ", "Degree"}]}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], " ", "/.", 
                    RowBox[{"\[Psi]", "->", 
                    RowBox[{"psi", " ", "Degree"}]}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"figmakerfringespar", "=", "\[IndentingNewLine]", 
                   RowBox[{"ListLinePlot", "[", 
                    RowBox[{"listMFpara", ",", 
                    RowBox[{"PlotRange", "->", 
                    RowBox[{"{", 
                    RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Thickness", "[", "0.01", "]"}], "]"}]}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameStyle", "->", 
                    RowBox[{"Directive", "@", 
                    RowBox[{"{", 
                    RowBox[{"Black", ",", "18", ",", "Thick"}], "}"}]}]}], 
                    ",", 
                    RowBox[{"Axes", "\[Rule]", "False"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)\>\"", "]"}], ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], T\)]\)(\!\
\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]) (a.u.)\>\"", 
                    "]"}], ",", 
                    RowBox[{"BaseStyle", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontSize", "->", "18"}], ",", 
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}]}],
                     "}"}]}]}], "}"}]}], ",", 
                    RowBox[{"ImageSize", "->", "Large"}]}], 
                    RowBox[{"(*", 
                    RowBox[{",", 
                    RowBox[{"FrameTicksStyle", "->", 
                    RowBox[{"{", 
                    RowBox[{"Automatic", ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"FontOpacity", "->", "0"}], ",", 
                    RowBox[{"FontSize", "->", "0"}]}], "]"}]}], "}"}]}]}], 
                    "*)"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"listMFperp", "=", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Re", "[", 
                    RowBox[{"MFList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CapitalDelta]\[Delta]", "->", 
                    RowBox[{"delta", " ", "Degree"}]}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "/.", 
                    RowBox[{"\[Psi]", "->", 
                    RowBox[{
                    RowBox[{"(", "psi", ")"}], " ", "Degree"}]}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"figmakerfringesperp", "=", "\[IndentingNewLine]", 
                   RowBox[{"ListLinePlot", "[", 
                    RowBox[{"listMFperp", ",", 
                    RowBox[{"PlotRange", "->", 
                    RowBox[{"{", 
                    RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Thickness", "[", "0.01", "]"}], "]"}]}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameStyle", "->", 
                    RowBox[{"Directive", "@", 
                    RowBox[{"{", 
                    RowBox[{"Black", ",", "18", ",", "Thick"}], "}"}]}]}], 
                    ",", 
                    RowBox[{"Axes", "\[Rule]", "False"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)\>\"", "]"}], ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], T\)]\)(\!\
\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]+90\[Degree]) \
(a.u.)\>\"", "]"}], ",", 
                    RowBox[{"BaseStyle", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontSize", "->", "18"}], ",", 
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}]}],
                     "}"}]}]}], "}"}]}], ",", 
                    RowBox[{"ImageSize", "->", "Large"}]}], "]"}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"fresnelcontrol", ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"listFresnel", "=", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"Re", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FresnelList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"0", " ", "Degree"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FresnelList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"90", " ", "Degree"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FresnelList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"0", " ", "Degree"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FresnelList", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "5"}], "}"}]}], "]"}], "]"}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"90", " ", "Degree"}]}]}]}], "}"}], "/.", 
                    RowBox[{"\[CapitalDelta]\[Delta]", "->", "0"}]}], ")"}]}],
                     "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"figfresnel", "=", "\[IndentingNewLine]", 
                   RowBox[{"ListLinePlot", "[", 
                    RowBox[{"listFresnel", ",", 
                    RowBox[{"PlotRange", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "90"}], "}"}], ",", "Automatic"}], 
                    "}"}]}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Thickness", "[", "0.01", "]"}], "]"}]}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameStyle", "->", 
                    RowBox[{"Directive", "@", 
                    RowBox[{"{", 
                    RowBox[{"Black", ",", "18", ",", "Thick"}], "}"}]}]}], 
                    ",", 
                    RowBox[{"Axes", "\[Rule]", "False"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)\>\"", "]"}], 
                    RowBox[{"(*", 
                    RowBox[{",", 
                    RowBox[{
                    "Style", "[", "\"\<Fresnel Transmittance/Reflectance\>\"",
                     "]"}]}], "*)"}], "}"}]}], ",", 
                    RowBox[{"PlotLabel", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fresnel Transmittance/Reflectance\>\"", ",", "Black",
                     ",", "20"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "400"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(R\), \(p\)]\)\>\"", ",", "20"}],
                     "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(R\), \(s\)]\)\>\"", ",", "20"}],
                     "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(T\), \(p\)]\)\>\"", ",", "20"}],
                     "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(T\), \(s\)]\)\>\"", ",", "20"}],
                     "]"}]}], "}"}]}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
                "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{
                 "Plot", " ", "schematics", " ", "for", " ", "optical", " ", 
                  "geometry"}], "*)"}], "Subsubsection"], 
               "\[IndentingNewLine]", 
               RowBox[{"plot2geometry2d", "=", 
                RowBox[{"fplot2geometry2d", "[", "theta", "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"plot2geometry3d", "=", 
                RowBox[{"fplot2geometry3d", "[", "theta", "]"}]}], ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{
                 "Plot", " ", "schematics", " ", "for", " ", "optical", " ", 
                  "polarization"}], "*)"}], "Subsubsection"], 
               "\[IndentingNewLine]", 
               RowBox[{"polarizationplot2d", "=", 
                RowBox[{"fpolarizationplot2d", "[", 
                 RowBox[{
                 "theta", ",", "phi", ",", "psi", ",", "RotatePolarizer", ",",
                   "RotateAnalyzer"}], "]"}]}], ";", 
               RowBox[{"polarizationplot3d", "=", 
                RowBox[{"fpolarizationplot3d", "[", 
                 RowBox[{
                 "theta", ",", "phi", ",", "psi", ",", "RotatePolarizer", ",",
                   "RotateAnalyzer"}], "]"}]}], ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{"PLOTTING", " ", "ELLIPTICITY", " ", "FIGURES"}], 
                 "*)"}], "Subsubsection"], "\[IndentingNewLine]", 
               RowBox[{"rwave", "=", 
                RowBox[{"Normalize", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"rmpw2", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"rmpw1", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"rmpw1", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"rmpw2", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "}"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                    RowBox[{"delta", " ", "Degree"}]}], "}"}]}], "]"}]}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"twave", "=", 
                RowBox[{"Normalize", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tmpw2", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"tmpw1", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tmpw1", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", 
                    RowBox[{
                    RowBox[{"tmpw2", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "}"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                    RowBox[{"delta", " ", "Degree"}]}], "}"}]}], "]"}]}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"iwave", "=", 
                RowBox[{"Normalize", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"wInc", "[", "A", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"wInc", "[", "A", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                    RowBox[{"delta", " ", "Degree"}]}], "}"}]}], "]"}]}], ";",
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"ellipticityfig", "=", "\[IndentingNewLine]", 
                RowBox[{"If", " ", "[", 
                 RowBox[{"RotatePolarizer", ",", "\[IndentingNewLine]", " ", 
                  RowBox[{"ParametricPlot", "[", 
                   RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"iwave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"iwave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"rwave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"rwave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"twave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"twave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "/.", 
                    RowBox[{"\[CurlyPhi]", "->", 
                    RowBox[{"phi", " ", "Degree"}]}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"z", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Evaluate", "@", "options3"}]}], "]"}], 
                  "\[IndentingNewLine]", ",", "\[IndentingNewLine]", " ", 
                  RowBox[{"ParametricPlot", "[", 
                   RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"iwave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"iwave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"rwave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"rwave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Re", "[", 
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "z"}], "]"}], "*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"twave", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"twave", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "}"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"z", ",", "0", ",", 
                    RowBox[{"2", "Pi"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Evaluate", "@", "options3"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]",
               ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"clearFigs", "[", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"Print", "@", 
                RowBox[{"Style", "[", 
                 RowBox[{
                 "\"\<SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!\>\"", " ", ",", 
                  "Bold", ",", "Red", ",", "32"}], "]"}]}]}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{
            "For", " ", "Partial", " ", "Analytical", " ", "Expressions"}], 
            "*)"}], "Section"], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
            "Functionality", "==", "\"\<Partial Analytical Expressions\>\""}],
             ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"rules", "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\[CapitalDelta]\[Delta]", "\[Rule]", 
                 RowBox[{"delta", " ", "Degree"}]}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{"RotatePolarizer", ",", 
                  RowBox[{"Sequence", "@@", 
                   RowBox[{"{", "}"}]}], ",", 
                  RowBox[{"\[CurlyPhi]", "->", 
                   RowBox[{"phi", " ", "Degree"}]}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{"RotateAnalyzer", ",", 
                  RowBox[{"\[Psi]", "->", 
                   RowBox[{"\[CurlyPhi]", "+", 
                    RowBox[{"analyzeroffset", " ", "Degree"}]}]}], ",", 
                  RowBox[{"\[Psi]", "->", 
                   RowBox[{"psi", " ", "Degree"}]}]}], "]"}]}], "}"}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"for", " ", "the", " ", "linear", " ", "part"}], ",", 
               " ", 
               RowBox[{"i", ".", "e", "."}], ",", " ", 
               RowBox[{
               "Fresnel", " ", "coefficients", " ", "for", " ", "one", " ", 
                "incident", " ", "angle"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"rmpw1L", ",", "rmpw2L"}], "}"}], "=", 
              RowBox[{"wavL", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "reflected"}], ",", " ", 
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"extWave", "@", "rmpw1L"}], ";", 
             RowBox[{"extWave", "@", "rmpw2L"}], ";", "\[IndentingNewLine]", 
             RowBox[{"rSignalL", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"rmpw1L", "[", "A", "]"}], "+", 
                 RowBox[{"rmpw2L", "[", "A", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "2"}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tmpw1L", ",", "tmpw2L"}], "}"}], "=", 
              RowBox[{"wavL", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "reflected"}], ",", " ", 
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"extWave", "@", "tmpw1L"}], ";", 
             RowBox[{"extWave", "@", "tmpw2L"}], ";", "\[IndentingNewLine]", 
             RowBox[{"tSignalL", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"tmpw1L", "[", "A", "]"}], "+", 
                 RowBox[{"tmpw2L", "[", "A", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "2"}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"dataRpL", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"rSignalL", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "*", 
                RowBox[{"Conjugate", "[", 
                 RowBox[{"rSignalL", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}]}], 
             RowBox[{"(*", 
              RowBox[{"/.", "rules"}], "*)"}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataRsL", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"rSignalL", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "*", 
                RowBox[{"Conjugate", "[", 
                 RowBox[{"rSignalL", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}]}], 
             RowBox[{"(*", 
              RowBox[{"/.", "rules"}], "*)"}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataTpL", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"tSignalL", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "*", 
                RowBox[{"Conjugate", "[", 
                 RowBox[{"tSignalL", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}]}], 
             RowBox[{"(*", 
              RowBox[{"/.", "rules"}], "*)"}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataTsL", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"tSignalL", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "*", 
                RowBox[{"Conjugate", "[", 
                 RowBox[{"tSignalL", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}]}], 
             RowBox[{"(*", 
              RowBox[{"/.", "rules"}], "*)"}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "equationRpL", ",", "equationRsL", ",", "equationTpL", ",", 
                "equationTsL"}], "}"}], "=", 
              RowBox[{"Re", "@", 
               RowBox[{"{", 
                RowBox[{
                "dataRpL", ",", "dataRsL", ",", "dataTpL", ",", "dataTsL"}], 
                "}"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "for", " ", "the", " ", "polarplot", " ", "of", " ", 
               "reflected", " ", "waves"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"rmpw1", ",", "rmpw2"}], "}"}], "=", 
              RowBox[{"wavNL", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "reflected"}], ",", " ", 
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"extWave", "@", "rmpw1"}], ";", 
             RowBox[{"extWave", "@", "rmpw2"}], ";", "\[IndentingNewLine]", 
             RowBox[{"rSignal", "=", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                   RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Sin", "[", "\[Psi]", "]"}], ",", 
                   RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], ".", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"rmpw1", "[", "A", "]"}], "+", 
                  RowBox[{"rmpw2", "[", "A", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "for", " ", "the", " ", "polarplot", " ", "of", " ", 
               "transmitive", " ", "waves"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tmpw1", ",", "tmpw2"}], "}"}], "=", 
              RowBox[{"wavNL", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "reflected"}], ",", " ", 
               RowBox[{
                RowBox[{"[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "is", " ", "for", " ", 
                "transmitted"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"extWave", "@", "tmpw1"}], ";", 
             RowBox[{"extWave", "@", "tmpw2"}], ";", "\[IndentingNewLine]", 
             RowBox[{"tSignal", "=", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Cos", "[", "\[Psi]", "]"}], ",", 
                   RowBox[{"Sin", "[", "\[Psi]", "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sin", "[", "\[Psi]", "]"}]}], ",", 
                   RowBox[{"Cos", "[", "\[Psi]", "]"}]}], "}"}]}], "}"}], ".", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"tmpw1", "[", "A", "]"}], "+", 
                  RowBox[{"tmpw2", "[", "A", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"dataRs", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"rSignal", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "*", 
                 RowBox[{"Conjugate", "[", 
                  RowBox[{"rSignal", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}], "/.", 
               "rules"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataRp", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"rSignal", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "*", 
                 RowBox[{"Conjugate", "[", 
                  RowBox[{"rSignal", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], "/.", 
               "rules"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataTs", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"tSignal", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "*", 
                 RowBox[{"Conjugate", "[", 
                  RowBox[{"tSignal", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}], "/.", 
               "rules"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"dataTp", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"tSignal", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "*", 
                 RowBox[{"Conjugate", "[", 
                  RowBox[{"tSignal", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], "/.", 
               "rules"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "equationRp", ",", "equationRs", ",", "equationTp", ",", 
                "equationTs"}], "}"}], "=", 
              RowBox[{"Re", "@", 
               RowBox[{"{", 
                RowBox[{
                "dataRp", ",", "dataRs", ",", "dataTp", ",", "dataTs"}], 
                "}"}]}]}], ";"}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "equationRpL", ",", "equationRsL", ",", "equationTpL", ",", 
                "equationTsL"}], "}"}], "=", 
              RowBox[{"ConstantArray", "[", 
               RowBox[{"placeHolderEqus", ",", "4"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "equationRp", ",", "equationRs", ",", "equationTp", ",", 
                "equationTs"}], "}"}], "=", 
              RowBox[{"ConstantArray", "[", 
               RowBox[{"placeHolderEqus", ",", "4"}], "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"progress", "=", "100"}], ";", "\[IndentingNewLine]", 
          RowBox[{"EndTime", "=", 
           RowBox[{"SessionTime", "[", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"evaltime", "=", 
           RowBox[{"EndTime", "-", "StartTime"}]}], ";", 
          "\[IndentingNewLine]", "\"\<\>\""}], 
         RowBox[{"(*", 
          RowBox[{"Avoid", " ", "print", " ", "Null"}], "*)"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          StyleBox["CONTROLS", "Chapter",
           FontWeight->"Bold"], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"Column", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            StyleBox["header1", "Input"], ",", "\[IndentingNewLine]", 
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Framed", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Functionality\>\"", ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "Functionality", ",", "\"\<User Guide\>\"", ",", 
                    "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<User Guide\>\"", ",", 
                    "\"\<Set Material Properties\>\"", ",", 
                    "\"\<SHG Simulation\>\"", ",", 
                    "\"\<Partial Analytical Expressions\>\""}], "}"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<Row\>\""}]}], "}"}], 
                    "]"}], "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "16"}], "}"}]}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     "\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}]}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"schematictype", ",", "1", ",", "\"\<\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<2D Schematics\>\"", ",", "Bold"}], "]"}]}], 
                    ",", 
                    RowBox[{"2", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<3D Schematics\>\"", ",", "Bold"}], "]"}]}]}],
                     "}"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<Row\>\""}], ",", 
                    RowBox[{"ControlType", "->", "SetterBar"}]}], "}"}], 
                    "]"}]}], "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "14"}], "}"}]}]}], 
                    "]"}], ",", "\"\<\>\""}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], "}"}], ",", 
                    "True"}], "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Wavelength Setting\>\"", ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[Lambda]", ",", "1.064", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident fundamental wavelength (\[Mu]m):\>\"", 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ControlType", "->", "InputField"}], ",", 
                    RowBox[{"FieldSize", "->", "6"}]}], "}"}], "]"}], 
                    "\[IndentingNewLine]", "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "15"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Layer Selection:\>\"", ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"materialnumber", ",", "1", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Number of Layers: \>\"", ",", "Bold"}], 
                    "]"}]}], "}"}], ",", "Number", ",", "InputField", ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Dynamic", "["}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"IntegerQ", "[", "materialnumber", "]"}]}], ")"}],
                     ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The number of materials must be an integer.\>\
\"", ",", "Red", ",", "Bold"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"materialnumber", "<", "1"}], ")"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: You need to use at least one material.\>\"", 
                    ",", "Red", ",", "Bold"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"materialnumber", ">", 
                    RowBox[{"maxmaterialnumber", "-", "2"}]}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{
                    "\"\<ERROR: The maximum number of materials is set at \
\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"maxmaterialnumber", "-", "2"}], "]"}], "<>", 
                    "\"\<.\>\""}], ",", "Red", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"matindex", ",", "2", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Select the layer to Edit : \>\"", ",", "Bold"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"materialnumber", "+", "1"}]}], "]"}], "->", 
                    RowBox[{"(", 
                    RowBox[{"ToString", "/@", 
                    RowBox[{"Range", "[", "materialnumber", "]"}]}], ")"}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<Row\>\""}], ",", 
                    RowBox[{"ControlType", "->", "SetterBar"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", "\"\<\>\""}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", "]", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Name: \>\""}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "name", "]"}], "]"}], "]"}], "]"}], 
                    ",", "String", ",", 
                    RowBox[{"FieldSize", "->", "20"}], ",", 
                    RowBox[{"FieldHint", "->", "\"\<Enter name here\>\""}]}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
                    ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Case Studies and Examples\>\"", ",", "18", ",", 
                    "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Blank linear\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"blankMaterL", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Blank nonlinear\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"blankMaterNL", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<BaTiO3\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"BTO", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Air\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"Air", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    "\"\<LiNbO3(11\!\(\*OverscriptBox[\(2\), \(_\)]\)0)\>\"", 
                    ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "LiNbO3xCut\[Lambda]1550", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<LiNbO3(0001)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "LiNbO3zCut\[Lambda]1550", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<KTP(100)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"KTPxCut", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<KTP(010)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"KTPyCut", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<ZnO(0001)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"ZnO001", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Pt(111)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"Pt111\[Lambda]1550", "[", "\[Lambda]", "]"}]}]}],
                     ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(Al\), \
\(2\)]\)\!\(\*SubscriptBox[\(O\), \(3\)]\)(0001)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "Al2O3$0001\[Lambda]1550", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<GaAs(111)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "GaAs111\[Lambda]800", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<X-cut Quartz\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "Quartz$xCut\[Lambda]1064", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Quartz(001)\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{
                    "Quartz$zCut\[Lambda]800", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Au Coating\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"Au\[Lambda]800", "[", "\[Lambda]", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<MoS2\>\"", ",", 
                    RowBox[{
                    RowBox[{"mtemp", "=", 
                    RowBox[{"setMater", "@", 
                    RowBox[{"MoS2", "[", "\[Lambda]", "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", "mtemp"}], 
                    ";"}], ",", 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], "]"}]}], "\[IndentingNewLine]", "}"}], 
                    "]"}]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox["Left", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], ",", 
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}]}],
                     "}"}]}], "Input"]}], 
                    StyleBox["]", "Input"]}]}], 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox["True", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\"\<\>\"", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["]", "Input"]}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Calculation Controls\>\"", ",", "18", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"fresnelcontrol", ",", "False", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Generate Fresnel Coefficients Plot:\>\"", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}], 
                    ",", 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"makerfringescontrol", ",", "False", ",", 
                    RowBox[{
                    "Style", "[", "\"\<Generate Maker Fringes Plot:\>\"", 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     "\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Assumptions\>\"", ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Assumptions for Multiple Reflection: \>\"", ",", 
                    "Bold", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"mrassumption", ",", "0", ",", "\"\<\>\""}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "0", "->", "\"\<Full Multiple Reflections (FMR)\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    "1", "->", 
                    "\"\<Jerphagnon & Kurtz Assumption (No MR)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "2", "->", 
                    "\"\<Herman & Hayden Assumption \\n (MR only for \
2\[Omega] Homo Waves)\>\""}]}], "}"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<Vertical\>\""}]}], "}"}],
                     "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"mrassumption", "==", "0"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Assumptions for 2\[Omega] Inhomogeneous Waves (for \
FMR only): \>\"", ",", "Bold", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"winhAssumption", ",", "1", ",", "\"\< \>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"0", "->", "\"\<Forward waves only\>\""}], ",", 
                    RowBox[{"1", "->", "\"\<Forward + Backward waves\>\""}], 
                    ",", 
                    RowBox[{
                    "2", "->", 
                    "\"\<Forward + Backward + Standing waves\>\""}]}], "}"}], 
                    ",", 
                    RowBox[{"Appearance", "->", "\"\<Vertical\>\""}]}], "}"}],
                     "]"}]}], "}"}]}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], 
                    RowBox[{"(*", 
                    RowBox[{"\[And]", 
                    RowBox[{"(", 
                    RowBox[{"makerfringescontrol", "==", "False"}], ")"}]}], 
                    "*)"}], ")"}], "\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Polarimetry Settings\>\"", ",", "18", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Angle \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\) (\[Degree])\>\"", ",", " ", "Bold", ",", "14"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"theta", ",", "45.0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\) (\
\[Degree])\>\"", "]"}]}], "}"}], ",", "0.0", ",", "89.0", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "340"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"theta", ",", "45", ",", "\"\<\>\""}], "}"}], ",",
                     "0", ",", "75", ",", "15", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "theta", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\\\" \\\", RowBox[{\\\"(\\\", \
\\\"\[NoBreak]\\\", TagBox[GridBox[{{RowBox[{\\\"Cos\\\", \\\"[\\\", \\\"\
\[CurlyPhi]\\\", \\\"]\\\"}]},{RowBox[{RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"\
\[CurlyPhi]\\\", \\\"]\\\"}], \\\"\[Application]\\\", \
SuperscriptBox[\\\"e\\\", RowBox[{\\\"i\\\", RowBox[{\\\"\[DifferenceDelta]\\\
\", \\\"\[Delta]\\\"}]}]]}]},{\\\"0\\\"}},GridBoxAlignment->{\\\"Columns\\\" \
-> {{Center}}, \\\"Rows\\\" -> \
{{Baseline}}},GridBoxSpacings->{\\\"Columns\\\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \\\"Rows\\\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \\\"\[NoBreak]\\\", \
\\\")\\\"}]}],Function[BoxForm`e$, MatrixForm[BoxForm`e$]]]\)\>\"", ",", " ", 
                    "Bold", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"delta", ",", "0", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Ellipticity \[CapitalDelta]\[Delta] \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", ",", "Bold"}], "]"}]}], "}"}], 
                    ",", "0", " ", ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "222"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<                                               \>\"",
                     ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "delta", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], 
                    "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RotatePolarizer", ",", "True", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Polarization \
\[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", ",", "Bold"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"True", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Rotate Polarizer\>\"", ",", "Bold"}], 
                    "]"}]}], ",", 
                    RowBox[{"False", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Fix Polarizer\>\"", ",", "Bold"}], "]"}]}]}],
                     "}"}]}], "}"}], "]"}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "RotatePolarizer", ",", "\"\< \>\"", "  ", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Fixed Incident Polarization \
\[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", 
                    "0", ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "163"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "45", ",", "\"\<\>\""}], "}"}], ",", 
                    "0", ",", "180", ",", "45", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "phi", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "\"\<For \[CurlyPhi] and \[Psi], 0\[Degree] refers \
to p- polarized, 90\[Degree] refers to s- polarized\>\"", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "14"}]}]}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "0", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fixed Incident Polarization Angle \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", ",", "Bold"}], "]"}]}], "}"}], 
                    ",", "0", " ", ",", "360"}], "}"}], "]"}], "}"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{"RotatePolarizer", ",", "Red", ",", "LightBlue"}],
                     "]"}], "]"}]}]}], "]"}], ","}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RotateAnalyzer", ",", "False", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<SHG Polarization \[Psi]\!\(\*SuperscriptBox[\((\), \
\(o\)]\)): \>\"", ",", "Bold"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"True", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Rotate Analyzer\>\"", ",", "Bold"}], "]"}]}],
                     ",", 
                    RowBox[{"False", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Fix Analyzer\>\"", ",", "Bold"}], "]"}]}]}], 
                    "}"}]}], "}"}], "]"}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{"RotateAnalyzer", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"RotatePolarizer", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"analyzeroffset", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Analyzer-Polarizer Angle Offset \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", "0", ",", 
                    "180", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "}"}], "]"}], " ", 
                    ",", "\"\<\>\""}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Fixed SHG Polarization \
\[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", "0", 
                    ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "235"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "45", ",", "\"\<\>\""}], "}"}], ",", 
                    "0", ",", "180", ",", "45", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "psi", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{",", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "0", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fixed Output Analyzer Angle \!\(\*SuperscriptBox[\((\
\), \(o\)]\)): \>\"", ",", "Bold"}], "]"}]}], "}"}], ",", "0", " ", ",", 
                    "360"}], "}"}], "]"}], "}"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{"RotateAnalyzer", ",", "Red", ",", "LightBlue"}], 
                    "]"}], "]"}]}]}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"samplerotationcontrol", ",", "False", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Sample Rotation \
\[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", ",", "Bold"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"True", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Rotate Sample\>\"", ",", "Bold"}], "]"}]}], 
                    ",", 
                    RowBox[{"False", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Fix Sample\>\"", ",", "Bold"}], "]"}]}]}], 
                    "}"}]}], "}"}], "]"}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{"samplerotationcontrol", ",", 
                    RowBox[{
                    RowBox[{"RotatePolarizer", "=", "False"}], ";", 
                    RowBox[{"RotateAnalyzer", "=", "False"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"samplerotatestep", ",", "10", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Step Size\!\(\*SuperscriptBox[\((\), \(o\)]\)): \
\>\"", "]"}]}], "}"}], ",", "0", ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "235"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"samplerotatestep", ",", "10", ",", "\"\<\>\""}], 
                    "}"}], ",", "10", ",", "30", ",", "10", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "samplerotatestep", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"makerfringescontrol", "==", "False"}], ")"}]}], 
                    ")"}], "\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], ",", "True",
                     ",", "False"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
                    ",", "\"\<\>\""}], "]"}], "]"}], "\[IndentingNewLine]", 
                    ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], 
                    RowBox[{"(*", 
                    RowBox[{"\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], "*)"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"fresnelcontrol", "==", "True"}], ")"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fresnel Coefficients Collection Settings\>\"", ",", 
                    "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Step Size \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)(\[Degree])\>\"", ",", " ", "Bold", ",", "14"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"thetastep1", ",", "2", ",", "\"\<\>\""}], "}"}], 
                    ",", "1", ",", "5", ",", "1", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "thetastep1", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"fresnelcontrol", ",", "True", ",", "False"}], 
                    "]"}]}], "]"}], "\[IndentingNewLine]", ",", "\"\<\>\""}], 
                    "]"}], "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}], 
                    RowBox[{"(*", 
                    RowBox[{"\[Or]", 
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}]}], "*)"}], 
                    ")"}], 
                    RowBox[{"(*", 
                    RowBox[{"\[And]", 
                    RowBox[{"(", 
                    RowBox[{"makerfringescontrol", "==", "True"}], ")"}]}], 
                    "*)"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Maker Fringes Collection Settings\>\"", ",", "18", 
                    ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Minimum Incident Angle \!\(\*SuperscriptBox[\(\
\[Theta]\), \(min\)]\) (\[Degree])\>\"", ",", " ", "Bold", ",", "14"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"mintheta2", ",", 
                    RowBox[{"-", "30"}], ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(\[Theta]\), \(min\)]\) (\
\[Degree])\>\"", "]"}]}], "}"}], ",", 
                    RowBox[{"-", "90"}], ",", "0", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "340"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"mintheta2", ",", 
                    RowBox[{"-", "30"}], ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"-", "90"}], ",", "0", ",", "15", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "mintheta2", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Maximum Incident Angle \!\(\*SuperscriptBox[\(\
\[Theta]\), \(max\)]\) (\[Degree])\>\"", ",", " ", "Bold", ",", "14"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"maxtheta2", ",", "30", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SuperscriptBox[\(\[Theta]\), \(max\)]\) (\
\[Degree])\>\"", "]"}]}], "}"}], ",", "0", ",", "90", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "340"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"maxtheta2", ",", "30", ",", "\"\<\>\""}], "}"}], 
                    ",", "0", ",", "90", ",", "15", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "maxtheta2", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Scan Step Size (\[Degree])\>\"", ",", " ", "Bold", 
                    ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"thetastep2", ",", "1", ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "5", ",", "10", ",", "15"}], 
                    "}"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "thetastep2", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\\\" \\\", RowBox[{\\\"(\\\", \
\\\"\[NoBreak]\\\", TagBox[GridBox[{{RowBox[{\\\"Cos\\\", \\\"[\\\", \\\"\
\[CurlyPhi]\\\", \\\"]\\\"}]},{RowBox[{RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"\
\[CurlyPhi]\\\", \\\"]\\\"}], \\\"\[Application]\\\", \
SuperscriptBox[\\\"e\\\", RowBox[{\\\"i\\\", RowBox[{\\\"\[DifferenceDelta]\\\
\", \\\"\[Delta]\\\"}]}]]}]},{\\\"0\\\"}},GridBoxAlignment->{\\\"Columns\\\" \
-> {{Center}}, \\\"Rows\\\" -> \
{{Baseline}}},GridBoxSpacings->{\\\"Columns\\\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \\\"Rows\\\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \\\"\[NoBreak]\\\", \
\\\")\\\"}]}],Function[BoxForm`e$, MatrixForm[BoxForm`e$]]]\)\>\"", ",", " ", 
                    "Bold", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Fixed Incident Polarization \
\[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", 
                    "0", ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "163"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"phi", ",", "45", ",", "\"\<\>\""}], "}"}], ",", 
                    "0", ",", "180", ",", "45", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "phi", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Fixed SHG Polarization \
\[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", "0", 
                    ",", "360", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "235"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<        \>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"psi", ",", "45", ",", "\"\<\>\""}], "}"}], ",", 
                    "0", ",", "180", ",", "45", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "psi", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "\"\<For \[CurlyPhi] and \[Psi], 0\[Degree] refers \
to p- polarized, 90\[Degree] refers to s- polarized\>\"", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "14"}]}]}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"delta", ",", "0", ",", 
                    RowBox[{
                    "Style", "[", 
                    "\"\<Incident Ellipticity \[CapitalDelta]\[Delta] \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): \>\"", "]"}]}], "}"}], ",", 
                    RowBox[{"-", "90"}], " ", ",", "90", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ImageSize", "->", "222"}], ",", 
                    RowBox[{"ControlType", "->", "Slider"}]}], "}"}], "]"}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"delta", ",", "0", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"-", "90"}], ",", "90", ",", "30", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Background", "\[Rule]", "LightBlue"}], ",", 
                    RowBox[{"Appearance", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Row\>\"", ",", "\"\<FramedPalette\>\""}], 
                    "}"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<     \>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "delta", "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "5"}]}], "]"}]}], "}"}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Left"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "makerfringescontrol", ",", "True", ",", "False"}], 
                    "]"}]}], "]"}], "\[IndentingNewLine]", ",", "\"\<\>\""}], 
                    "]"}], "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Thickness\>\""}], ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"matindex", "==", "1"}], "\[Or]", 
                    RowBox[{"matindex", "==", 
                    RowBox[{"materialnumber", "+", "2"}]}]}], ")"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<(No input: thickness of first and last material is \
infinite)\>\"", ",", "14"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", "\"\<Slab Thickness (\[Mu]m)   \>\"", "]"}],
                     ",", 
                    RowBox[{"Slider", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "h", "]"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1000"}], "}"}], ",", 
                    RowBox[{"ImageSize", "->", "150"}]}], "]"}], ",", 
                    "\"\<   \>\"", "\[IndentingNewLine]", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "h", "]"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}]}], ",", 
                    RowBox[{"FieldSize", "->", "4"}]}], "]"}], ",", 
                    "\"\<    \>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<analytical h\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "h", "]"}], "]"}], "]"}], "=", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"\"\<h\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}]}], "]"}]}]}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
                    "]"}], "\[IndentingNewLine]", "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Crystal Structure\>\""}], ",", "18", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Point Group:    \>\"", ",", "Bold", ",", "14"}], 
                    "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Noncentrosymmetric -> \>\"", ",", "14"}], 
                    "]"}], ",", 
                    RowBox[{"PopupMenu", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "pg", "]"}], "]"}], "]"}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<1\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", 
                    "16"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", 
                    "26"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", 
                    "36"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<1\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<2\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "16"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "21", ",", "22", ",", "23", ",", "0", ",", "25", ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "34", ",", "0", ",", "36"}],
                     "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<2\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "11", ",", "12", ",", "13", ",", "0", ",", "15", ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "24", ",", "0", ",", "26"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "32", ",", "33", ",", "0", ",", "35", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<m\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<mm2\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "15", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "24", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "32", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<mm2\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<222\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "25", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "36"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<222\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<3\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"11", ",", 
                    RowBox[{"-", "11"}], ",", "0", ",", "14", ",", "15", ",", 
                    RowBox[{"-", "22"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "22"}], ",", "22", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "14"}], ",", 
                    RowBox[{"-", "11"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<3\>\""}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<32\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"11", ",", 
                    RowBox[{"-", "11"}], ",", "0", ",", "14", ",", "0", ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "14"}], ",", 
                    RowBox[{"-", "11"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<32\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<3m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "22"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "22"}], ",", "22", ",", "0", ",", "15", ",", 
                    "0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<3m\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<4\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "15", ",", "0"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<4\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<6\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "15", ",", "0"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<6\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "15", ",", "0"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "15"}], ",", "14", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"31", ",", 
                    RowBox[{"-", "31"}], ",", "0", ",", "0", ",", "0", ",", 
                    "36"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<4mm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "15", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "15", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<4mm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<6mm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "15", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "15", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<6mm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<422\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<422\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<622\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<622\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)2m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "14", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "36"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)2m\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(6\), \(_\)]\)\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"11", ",", 
                    RowBox[{"-", "11"}], ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "22"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "22"}], ",", "22", ",", "0", ",", "0", ",", 
                    "0", ",", 
                    RowBox[{"-", "11"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(6\), \(_\)]\)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(6\), \(_\)]\)m2\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "22"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "22"}], ",", "22", ",", "0", ",", "0", ",", 
                    "0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(6\), \(_\)]\)m2\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)3m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "14", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "14"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(4\), \(_\)]\)3m\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<23\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "14", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "14"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", "\"\<23\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "15", ",", "0"}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "15", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\[Infinity]\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "15", ",",
                     "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "15", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "31", ",", "31", ",", "33", ",", "0", ",", "0", ",", 
                    "0"}], "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\[Infinity]m\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]2\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "14", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
                    RowBox[{"-", "14"}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "1"}], "}"}], "->", 
                    "\"\<\[Infinity]2\>\""}]}], "\[IndentingNewLine]", "}"}], 
                    ",", "\"\<--\>\""}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<                                     \>\"", "]"}], 
                    ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Centrosymmetric -> \>\"", ",", "14"}], "]"}],
                     ",", 
                    RowBox[{"PopupMenu", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "pg", "]"}], "]"}], "]"}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(1\), \(_\)]\)\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(1\), \(_\)]\)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<2/m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<2/m\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<mmm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<mmm\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<4/m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<4/m\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<4/mmm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<4/mmm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(3\), \(_\)]\)\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(3\), \(_\)]\)\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*OverscriptBox[\(3\), \(_\)]\)m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\!\(\*OverscriptBox[\(3\), \(_\)]\)m\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<6/m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<6/m\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<6/mmm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<6/mmm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<m3\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<m3\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<m3m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<m3m\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<432\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", "\"\<432\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]/m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\[Infinity]/m\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]/mm\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\[Infinity]/mm\>\""}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]\[Infinity]\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\[Infinity]\[Infinity]\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Infinity]\[Infinity]m\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
                    "}"}]}], "}"}], ",", "0"}], "}"}], "->", 
                    "\"\<\[Infinity]\[Infinity]m\>\""}]}], 
                    "\[IndentingNewLine]", "}"}], ",", "\"\<--\>\""}], 
                    "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<a = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<    b = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<    c = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\[Alpha] = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<    \[Beta] = \>\"", ",", "12"}], "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "5", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<    \[Gamma] = \>\"", ",", "12"}], "]"}], 
                    ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "latcon", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "6", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}]}], "}"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Crystal Orientation\>\""}], ",", "18", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"SetterBar", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Use Miller Indices (hkl)\>\"", ",", "Bold"}],
                     "]"}]}], ",", 
                    RowBox[{"2", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Use Crystal Physics Direction\>\"", ",", "Bold"}], 
                    "]"}]}]}], "}"}]}], "]"}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<?(hkl)\>\"", ",", "Black", ",", "Bold", ",", "11"}], 
                    "]"}], ",", "hklExplain"}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "3", "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<?Crystal Physics\>\"", ",", "Black", ",", "Bold", 
                    ",", "11"}], "]"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<: \>\"", ",", 
                    RowBox[{"ZSysExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    "\"\<Times New Roman\>\"", ",", "20"}], "]"}], "]"}]}], 
                    "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "==", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\<Rotation Angle =  \>\"", "]"}],
                     ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "rotationAngle", "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    RowBox[{
                    "Style", "[", "\"\< degree(\[Degree]) \>\"", "]"}], ",", 
                    "\"\<    \>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    "\"\<Apply Rotation Angle\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "=", " ", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}]}], ",", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}]}], ";"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
                    RowBox[{"Chop", "[", 
                    RowBox[{"(", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}]}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ")"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
                    RowBox[{"Chop", "[", 
                    RowBox[{"(", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}]}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ")"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "=", " ", 
                    RowBox[{"Chop", "[", 
                    RowBox[{"(", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}]}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"rotationAngle", " ", "Degree"}], "]"}], ",", 
                    "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ")"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"rotationAngle", "=", "0"}]}]}], "]"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SubscriptBox[\(Z\), \(1\)]\) = { \>\"", "]"}], 
                    ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\"\< }\>\""}], "}"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SubscriptBox[\(Z\), \(2\)]\) = { \>\"", "]"}], 
                    ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\"\< }\>\""}], "}"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", 
                    "\"\<\!\(\*SubscriptBox[\(Z\), \(3\)]\) = { \>\"", "]"}], 
                    ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", "\"\< , \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\"\< }\>\""}], "}"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<(hkl) \[Rule] Crystal Surface Plane: \>\"", ",", 
                    "Bold"}], "]"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\<h = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\<,  k = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\<,  l = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}]}], "}"}], 
                    "]"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<[hkl] \[Rule] Direction Perpendicular to Plane of \
Incidence\>\"", ",", "Bold"}], "]"}], "]"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\<h = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\<,  k = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", "\"\<,  l = \>\"", "]"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}]}], "}"}], 
                    "]"}], "}"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}], "}"}], 
                    "]"}]}], "\[IndentingNewLine]", "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "==", "0"}], ")"}], ",", 
                    "\[IndentingNewLine]", "\"\<\>\"", "\[IndentingNewLine]", 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}]}], ",", "\"\<\>\"", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The crystal physics basis vectors are not \
orthogonal.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}]}], "]"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "==", "0"}], ")"}], ",", 
                    "\"\<\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[Cross]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "5"}], 
                    "]"}], ".", 
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", "5"}], 
                    "]"}]}], ">", "0"}], ")"}], ",", "\[IndentingNewLine]", 
                    "\"\<\>\"", "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The crystal physics basis vectors are not \
right-handed.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}]}], "]"}], 
                    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "}"}], "]"}], "\[IndentingNewLine]", "}"}], "]"}], "*)"}],
                     "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "==", "0"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\"\<\>\"", "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "==", "0"}], 
                    ")"}]}], ",", "\"\<\>\"", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The crystal physics basis vectors are not \
orthogonal.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[Cross]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "5"}], 
                    "]"}], ".", 
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", "5"}], 
                    "]"}]}], ">", "0"}], ")"}], ",", "\"\<\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: The crystal physics basis vectors are not \
right-handed.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Norm", "@", 
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "-", "1"}], 
                    "]"}], ",", "6"}], "]"}], "<=", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "4"}]]}], ",", "\"\<\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: \!\(\*SubscriptBox[\(Z\), \(1\)]\) is not a \
unit vector.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Norm", "@", 
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "-", "1"}], 
                    "]"}], ",", "6"}], "]"}], "<=", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "4"}]]}], ",", "\"\<\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: \!\(\*SubscriptBox[\(Z\), \(2\)]\) is not a \
unit vector.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Norm", "@", 
                    RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "orientation", "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "-", "1"}], 
                    "]"}], ",", "6"}], "]"}], "<=", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "4"}]]}], ",", "\"\<\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<ERROR: \!\(\*SubscriptBox[\(Z\), \(3\)]\) is not a \
unit vector.\>\"", ",", "Red", ",", "Bold"}], "]"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], "]"}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", "Left", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< Dielectric Tensors \
(\!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(\[Omega]\)], \
\(ij\)]\) and \!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(2  \
\[Omega]\)], \(ij\)]\))\>\""}], ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\< \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \
\(ij\), \(\[Omega]\)]\) = \>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"MatrixForm", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "\[CurlyEpsilon]\[Omega]C", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Sequence", "@@", "##"}], "]"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"FieldSize", "->", "9"}]}], "]"}], "&"}], ",", 
                    " ", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", "3"}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"Spacings", "->", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    RowBox[{"ItemSize", "->", "All"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], "}"}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<  \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \
\(ij\), \(2  \[Omega]\)]\) = \>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"MatrixForm", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "\[CurlyEpsilon]2\[Omega]C", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Sequence", "@@", "##"}], "]"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"FieldSize", "->", "9"}]}], "]"}], "&"}], ",", 
                    " ", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", "3"}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"Spacings", "->", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    RowBox[{"ItemSize", "->", "All"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], "}"}], "]"}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", "True"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< SHG Tensor \
(\!\(\*SubscriptBox[StyleBox[\\\"d\\\",FontSlant->\\\"Italic\\\"], \
\\\"ijk\\\"]\))\>\"", "<>", "\"\< pm/V\>\""}], ",", "18", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(d\), \(ij\)]\)=   \>\"", ",", 
                    RowBox[{"MatrixForm", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "dgrid", ",", "\"\<\>\""}], 
                    "}"}], "}"}], "]"}], ",", "\"\<    \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    "\"\<analytical dij\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "need", " ", "to", " ", "exclude", " ", "top", " ", "and",
                     " ", "bottom", " ", "layers", " ", "and", " ", "any", 
                    " ", "other", " ", "linear", " ", "materials", " ", 
                    "layers"}], ";"}], " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "dC", "]"}], "]"}], "]"}], "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<m\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}]}], "]"}], ")"}], 
                    "&"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "d11", ",", "d12", ",", "d13", ",", "d14", ",", "d15", 
                    ",", "d16"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d21", ",", "d22", ",", "d23", ",", "d24", ",", "d25", 
                    ",", "d26"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d31", ",", "d32", ",", "d33", ",", "d34", ",", "d35", 
                    ",", "d36"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"indexfun1", "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"materialnumber", "+", "2"}], "]"}]}], ";"}]}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Key", "[", "pg", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "==", "1"}], ",", "True", 
                    ",", "False"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
                    ",", "\"\<\>\""}], "]"}], "]"}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Layer Properties Preset Values\>\"", ",", "18", ",", 
                    "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Press update before setting any preset.\>\"", ",", 
                    "Blue", ",", "14"}], "]"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 1\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest1", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval1", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval1"}], ",", 
                    RowBox[{"presetval1", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap1"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 2\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest2", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval2", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval2"}], ",", 
                    RowBox[{"presetval2", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap2"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 3\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest3", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval3", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval3"}], ",", 
                    RowBox[{"presetval3", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap3"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 4\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest4", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval4", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval4"}], ",", 
                    RowBox[{"presetval4", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap4"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 5\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest5", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval5", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval5"}], ",", 
                    RowBox[{"presetval5", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap5"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 6\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest6", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval6", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval6"}], ",", 
                    RowBox[{"presetval6", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap6"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 7\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest7", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval7", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval7"}], ",", 
                    RowBox[{"presetval7", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap7"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Preset 8\>\"", ",", "Bold", ",", "Black"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"ptest8", "=", "1"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval8", "]"}], ",", 
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "=", 
                    "presetval8"}], ",", 
                    RowBox[{"presetval8", "=", 
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "ap8"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Clear Presets\>\"", ",", "Bold"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "ptest1", ",", "ptest2", ",", "ptest3", ",", "ptest4", 
                    ",", "ptest5", ",", "ptest6", ",", "ptest7", ",", 
                    "ptest8"}], "}"}], "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", "8"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "plabel1", ",", "plabel2", ",", "plabel3", ",", "plabel4",
                     ",", "plabel5", ",", "plabel6", ",", "plabel7", ",", 
                    "plabel8"}], "}"}], "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\"\<Type Label Here\>\"", ",", "8"}], "]"}]}], 
                    ";", 
                    RowBox[{"Clear", "[", 
                    RowBox[{
                    "presetval1", ",", "presetval2", ",", "presetval3", ",", 
                    "presetval4", ",", "presetval5", ",", "presetval6", ",", 
                    "presetval7", ",", "presetval8"}], "]"}]}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"Spacer", "[", "5", "]"}]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{
                    StyleBox["Row", "Input"], 
                    StyleBox["[", "Input"], 
                    RowBox[{
                    StyleBox["{", "Input"], 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest1", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 1 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel1", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest2", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 2 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel2", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest3", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 3 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel3", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest4", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 4 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel4", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest5", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 5 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel5", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest6", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 6 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel6", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    "Input"], 
                    StyleBox[",", "Input"], 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest7", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 7 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel7", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ptest8", "==", "1"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Preset 8 Label: \>\"", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "plabel8", "]"}], ",", "String"}],
                     "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], "]"}]}],
                     "}"}], "]"}], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Toggler", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "presetpopuptextvar", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"0", "->", "\"\<Show Preset Information\>\""}], 
                    ",", 
                    RowBox[{"1", "->", "\"\<Hide\>\""}]}], "}"}], ",", 
                    RowBox[{"Background", "->", "LightBlue"}], ",", 
                    RowBox[{"Alignment", "->", "Center"}]}], "]"}], ",", 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"presetpopuptextvar", "==", "1"}], ",", 
                    RowBox[{"Style", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\"\<Presets currently set:   \>\"", "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval1", "]"}], ",", 
                    "\"\<1   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval2", "]"}], ",", 
                    "\"\<2   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval3", "]"}], ",", 
                    "\"\<3   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval4", "]"}], ",", 
                    "\"\<4   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval5", "]"}], ",", 
                    "\"\<5   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval6", "]"}], ",", 
                    "\"\<6   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval7", "]"}], ",", 
                    "\"\<7   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval8", "]"}], ",", 
                    "\"\<8   \>\"", ",", "\"\<\>\""}], "]"}], "<>", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ValueQ", "[", "presetval1", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval2", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval3", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval4", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval5", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval6", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval7", "]"}], "\[Or]", 
                    RowBox[{"ValueQ", "[", "presetval8", "]"}]}], ",", 
                    "\"\<\>\"", ",", "\"\<None.\>\""}], "]"}], "<>", 
                    "\[IndentingNewLine]", 
                    
                    "\"\<\\nUpdate and press any of the preset buttons to \
save a material's \\ninformation to that preset. \\nPress the button again \
and update to apply those values.\\nHide and show this message to \
refresh.\>\""}], ",", "\"\<Times New Roman\>\"", ",", "12"}], "]"}], ",", 
                    "\"\<\>\""}], "]"}], "]"}]}], "\[IndentingNewLine]", 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "12"}], "}"}]}], 
                    "Input"]}], 
                    StyleBox["]", "Input"]}]}], 
                    StyleBox["}", "Input"]}], 
                    StyleBox[",", "Input"], 
                    StyleBox["False", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\"\<\>\"", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["]", "Input"]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    StyleBox[
                    RowBox[{"(*", 
                    RowBox[{
                    "add", " ", "another", " ", "update", " ", "button"}], 
                    "*)"}], "Input"], 
                    StyleBox["\[IndentingNewLine]", "Input"], 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Green", ",", 
                    RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Inset", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                    RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
                    RowBox[{"Typeset`update$$", "=", 
                    RowBox[{"AbsoluteTime", "[", "]"}]}], ",", 
                    RowBox[{"Appearance", "->", "None"}]}], "]"}]}], 
                    StyleBox["\[IndentingNewLine]", "Input"], "}"}], ",", 
                    StyleBox[
                    RowBox[{"ItemSize", "\[Rule]", " ", "63"}], "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}], ",", "White", ",", 
                    RowBox[{"GrayLevel", "[", "0.9", "]"}]}], "}"}]}], 
                    "Input"], 
                    StyleBox[" ", "Input"], 
                    StyleBox[",", "Input"], 
                    StyleBox[
                    RowBox[{"Frame", "\[Rule]", "All"}], "Input"]}], "]"}], 
                   ",", 
                   RowBox[{"Background", "->", "White"}], ",", 
                   RowBox[{"ImageSize", "->", "Automatic"}]}], "]"}], ",", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  StyleBox["PLOTS", "Chapter",
                   FontWeight->"Bold"], "*)"}], "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"timecell", "=", 
                   RowBox[{"TextCell", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Time Used = \>\"", ",", 
                    RowBox[{"SetPrecision", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "evaltime", "]"}], ",", "5"}], 
                    "]"}], ",", "\"\< s\>\""}], "}"}], "]"}], ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", "20"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"Framed", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<User Guide\>\""}], 
                    ",", "\[IndentingNewLine]", "userguide", 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Set Material Properties\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", "heterostructureschematic", "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"schematictype", "==", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< : \>\""}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"zvecplots2d", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], "}"}], 
                    "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<Layer \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"matindex", "-", "1"}], "]"}], "<>", 
                    "\"\< : \>\""}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"zvecplots3d", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], ",", 
                    RowBox[{"ZExplain", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"allmaterials", "[", 
                    RowBox[{"[", "matindex", "]"}], "]"}], "[", "pg", "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], "}"}], 
                    "]"}]}], "]"}], "}"}], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontSize", "->", "24"}], ",", 
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}]}],
                     "}"}]}]}], "]"}], "}"}]}], "\[IndentingNewLine]", "}"}], 
                    "]"}]}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", "timecell", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\\n\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Green", ",", 
                    RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Inset", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                    RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
                    RowBox[{"Typeset`update$$", "=", 
                    RowBox[{"AbsoluteTime", "[", "]"}]}], ",", 
                    RowBox[{"Appearance", "->", "None"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Center"}]}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Functionality", "==", "\"\<SHG Simulation\>\""}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Optical Geometry and Polarization\>\"", ",", "30", 
                    ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"schematictype", "==", "1"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"fig12d", ",", "PropagationExplain"}], "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"fig13d", ",", "PropagationExplain"}], "]"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"schematictype", "==", "1"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"plot2geometry2d", ",", "GeometryExplain"}], 
                    "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"plot2geometry3d", ",", "GeometryExplain"}], 
                    "]"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"ellipticityfig", ",", "EllipticityExplain"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"schematictype", "==", "1"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"polarizationplot2d", ",", "GeometryExplain"}], 
                    "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"polarizationplot3d", ",", "GeometryExplain"}], 
                    "]"}]}], "]"}]}], "}"}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"makerfringescontrol", "||", "fresnelcontrol"}], 
                    ",", "False", ",", "True"}], "]"}]}], "]"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Polar Plots\>\"", ",", "30", ",", "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"\"\<Assumption Used: \>\"", "<>", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"mrassumption", "==", "0"}], ",", 
                    "\"\<Full Multiple Reflection\>\"", ",", 
                    RowBox[{"mrassumption", "==", "1"}], ",", 
                    "\"\<Jerphagnon & Kurtz Assumption\>\"", ",", 
                    RowBox[{"mrassumption", "==", "2"}], ",", 
                    "\"\<Herman & Hayden Assumption\>\""}], "]"}], "<>", 
                    "\"\<\\n\>\"", "<>", 
                    "\"\<Consider Backward Wave (for FMR only)? \>\"", "<>", 
                    RowBox[{"ToString", "[", "flagBackward", "]"}], "<>", 
                    "\"\<\\n\>\"", "<>", 
                    "\"\<Consider Standing Wave (for FMR only)? \>\"", "<>", 
                    RowBox[{"ToString", "[", "flagStandingWave", "]"}]}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}], 
                    ",", 
                    RowBox[{"FontSize", "->", "22"}]}], "}"}]}]}], "]"}], ",",
                     "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"figRp", ",", "PolarPlotExplain"}], "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"figRs", ",", "PolarPlotExplain"}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\
\)(\[CurlyPhi],\[Psi])\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"Re", "@", "dataRp"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\
\)(\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"Re", "@", "dataRs"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}]}], "}"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"figTp", ",", "PolarPlotExplain"}], "]"}], ",", 
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"figTs", ",", "PolarPlotExplain"}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\
\)(\[CurlyPhi],\[Psi])\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"Re", "@", "dataTp"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\
\)(\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"Re", "@", "dataTs"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}]}], "}"}]}], 
                    RowBox[{"(*", 
                    RowBox[{",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"figRtot", ",", "figTtot"}], "}"}]}], "*)"}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"makerfringescontrol", "||", "fresnelcontrol"}], 
                    ",", "False", ",", "True"}], "]"}]}], "]"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Fresnel Coefficients Figure\>\"", ",", "30", ",", 
                    "Bold", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "figfresnel", ",", "SpanFromLeft", ",", "SpanFromLeft", 
                    ",", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SubscriptBox[\(R\), \(p\)]\)\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"listFresnel", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SubscriptBox[\(R\), \(s\)]\)\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"listFresnel", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SubscriptBox[\(T\), \(p\)]\)\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"listFresnel", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SubscriptBox[\(T\), \(s\)]\)\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", 
                    RowBox[{"listFresnel", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "100"}]}], "]"}]}], "}"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", "fresnelcontrol"}], 
                    "]"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Maker Fringes Figures\>\"", ",", "30", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"\"\<Assumption Used: \>\"", "<>", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"mrassumption", "==", "0"}], ",", 
                    "\"\<Full Multiple Reflection\>\"", ",", 
                    RowBox[{"mrassumption", "==", "1"}], ",", 
                    "\"\<Jerphagnon & Kurtz Assumption\>\"", ",", 
                    RowBox[{"mrassumption", "==", "2"}], ",", 
                    "\"\<Herman & Hayden Assumption\>\""}], "]"}], "<>", 
                    "\"\<\\n\>\"", "<>", 
                    "\"\<Consider Backward Wave (for FMR only)? \>\"", "<>", 
                    RowBox[{"ToString", "[", "flagBackward", "]"}], "<>", 
                    "\"\<\\n\>\"", "<>", 
                    "\"\<Consider Standing Wave (for FMR only)? \>\"", "<>", 
                    RowBox[{"ToString", "[", "flagStandingWave", "]"}]}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FontFamily", "->", "\"\<Times New Roman\>\""}], 
                    ",", 
                    RowBox[{"FontSize", "->", "22"}]}], "}"}]}]}], "]"}], ",",
                     "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "figmakerfringespar", "}"}], ",", 
                    RowBox[{"{", "figmakerfringesperp", "}"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
                    "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\
\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi])\>\"", ",", 
                    "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "listMFpara", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "200"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\
\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi]+90\[Degree])\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "listMFperp", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageSize", "->", "200"}]}], "]"}]}], "}"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    "makerfringescontrol"}], "]"}], "}"}]}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{"OpenerView", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Maker Fringes Figures\>\"", ",", "30", ",", "Bold", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Franklin Gothic\>\""}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Overlay", "[", 
                    RowBox[{"{", 
                    RowBox[{"figmakerfringespar", ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"\"\<\>\"", ",", "21"}], "]"}], "~", "Join", "~", 
                    RowBox[{"{", "figmakerfringesperp", "}"}]}], "]"}]}], 
                    "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "makerfringescontrol", ",", "True", ",", "False"}], 
                    "]"}]}], "]"}], "}"}], "*)"}], "\[IndentingNewLine]", 
                    "}"}], ",", 
                    RowBox[{"Alignment", "->", "Left"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", "timecell", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\\n\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Green", ",", 
                    RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Inset", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                    RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
                    RowBox[{"Typeset`update$$", "=", 
                    RowBox[{"AbsoluteTime", "[", "]"}]}], ",", 
                    RowBox[{"Appearance", "->", "None"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", "noAnalytical"}], ",", 
                    RowBox[{"Framed", "@", 
                    RowBox[{"Text", "@", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!\>\"", " ", ",", 
                    "Bold", ",", "Red", ",", "32", ",", 
                    RowBox[{"TextAlignment", "->", "Center"}]}], "]"}]}]}], 
                    ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}]}], "]"}]}], "\[IndentingNewLine]", 
                    "}"}], ",", 
                    RowBox[{"Alignment", "->", "Center"}]}], "]"}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "Functionality", "==", 
                    "\"\<Partial Analytical Expressions\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Text", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<For \[Omega] homogeneous waves:\>\"", ",", "Bold", 
                    ",", "Red", ",", "32"}], "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationRpL.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationRpL", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationRpL", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<(\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationRpL", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationRpL"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationRsL.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationRsL", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationRsL", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "Black", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationRsL", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationRsL"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationTpL.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationTpL", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationTpL", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationTpL", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationTpL"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationTsL.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationTsL", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationTsL", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "Black", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationTsL", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationTsL"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Text", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<For 2\[Omega] homogeneous waves:\>\"", ",", "Bold", 
                    ",", "Blue", ",", "32"}], "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationRp.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationRp", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationRp", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationRp", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationRp"}]}]}], "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationRs.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationRs", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationRs", "]"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", " ", 
                    "\"\<DialogBox\>\""}]}], "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "Black", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationRs", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationRs"}]}]}], "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationTp.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationTp", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationTp", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])\>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationTp", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationTp"}]}]}], "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Quiet", "@", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileSave\>\"", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"\<equationTs.mx\>\""}], "}"}], "]"}]}], "]"}], ",", 
                    "equationTs", ",", "\"\<mx\>\""}], "]"}]}], ",", 
                    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Copy\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"CopyToClipboard", "[", "equationTs", "]"}], ",", 
                    RowBox[{
                    "Appearance", "\[Rule]", " ", "\"\<DialogBox\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"TextGrid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))\>\"", ",", "Black", 
                    ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"TextCell", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< = \>\"", ",", "Black", ",", 
                    RowBox[{
                    "FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ByteCount", "[", "equationTs", "]"}], ">", 
                    "equByteLimit"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\<Too long to show\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "@", 
                    RowBox[{"MatrixForm", "@", "equationTs"}]}]}], "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}], ",", 
                    RowBox[{"TextCell", "[", "\"\<\>\"", "]"}]}], "}"}], 
                    "}"}], "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}]}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"FontSize", "\[Rule]", " ", "14"}], "}"}]}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", "timecell", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<\\n\>\"", ",", "30"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Green", ",", 
                    RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1.8", ",", "0.7"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Inset", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Update\>\"", ",", "Black", ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".27", "]"}]}], ",", 
                    RowBox[{"Background", "\[Rule]", "None"}]}], "]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
                    RowBox[{"Typeset`update$$", "=", 
                    RowBox[{"AbsoluteTime", "[", "]"}]}], ",", 
                    RowBox[{"Appearance", "->", "None"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "->", "Center"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\"\<\>\""}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}]}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{"{", 
                    RowBox[{"800", ",", "Automatic"}], "}"}]}], ",", 
                    RowBox[{"Alignment", "->", 
                    RowBox[{"{", 
                    RowBox[{"Center", ",", "Top"}], "}"}]}], ",", 
                    RowBox[{"Background", "->", "White"}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], "}"}], ",", 
              RowBox[{"Alignment", "->", "Top"}]}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", ",", 
         RowBox[{"TrackedSymbols", ":>", 
          RowBox[{"{", 
           RowBox[{
           "schematictype", ",", "materialnumber", ",", "matindex", ",", 
            "Functionality", ",", "\[Lambda]", ",", "mrassumption", ",", 
            "winhAssumption"}], "}"}]}], ",", 
         RowBox[{"ContinuousAction", "->", "None"}], ",", 
         RowBox[{"Paneled", "->", "False"}], ",", 
         RowBox[{"SaveDefinitions", "->", "False"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Background", "->", 
       RowBox[{"GrayLevel", "[", "0.9", "]"}]}], ",", 
      RowBox[{"ImageSize", "->", "Automatic"}], ",", 
      RowBox[{"Alignment", "->", 
       RowBox[{"{", 
        RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}]}], ")"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8863764175259113`*^9, 3.8863764216510215`*^9}, 
   3.8863766499202127`*^9, 3.8864455607318544`*^9, 3.887895488853596*^9, {
   3.887896034438848*^9, 3.8878960439160757`*^9}, {3.889436106460884*^9, 
   3.8894361315889654`*^9}, {3.8894361873976126`*^9, 3.88943619269838*^9}, {
   3.89102444959268*^9, 3.891024450746577*^9}, {3.89305939105934*^9, 
   3.8930593986154356`*^9}, 3.893059461698475*^9, {3.8930644547510796`*^9, 
   3.893064472349676*^9}, {3.893064510080668*^9, 3.893064522229964*^9}, {
   3.893191509709758*^9, 3.893191517223592*^9}, {3.893192189074219*^9, 
   3.893192204514889*^9}, 3.893193179948883*^9, {3.8931939064949512`*^9, 
   3.8931939312531705`*^9}, 3.8933405442081523`*^9, 3.8933481622867684`*^9, {
   3.8933507093480396`*^9, 3.893350715957938*^9}, {3.894586300088585*^9, 
   3.8945863019774375`*^9}, {3.8945882385294175`*^9, 3.8945882396429615`*^9}, 
   3.895364685360523*^9, 3.895837732757901*^9, {3.8958382367167573`*^9, 
   3.8958382509804587`*^9}, {3.895862888181453*^9, 3.895862899403054*^9}, {
   3.8958714652797155`*^9, 3.8958714808134613`*^9}, {3.895871577983863*^9, 
   3.8958716149822598`*^9}, {3.895881111608961*^9, 3.8958811205978346`*^9}, {
   3.8959239658297596`*^9, 3.895923966325376*^9}, 3.8959423773480606`*^9, {
   3.896314653348934*^9, 3.896314657267294*^9}, 3.8963154455605087`*^9, {
   3.896321435583887*^9, 3.8963214612888904`*^9}, {3.897014237722165*^9, 
   3.897014241214029*^9}, {3.8970165009005947`*^9, 3.897016502144909*^9}, {
   3.8970969729877863`*^9, 3.8970969747356415`*^9}, {3.8971742747549467`*^9, 
   3.8971742987739334`*^9}, {3.8971743546206465`*^9, 
   3.8971743601042366`*^9}, {3.8972624999508963`*^9, 3.89726250567898*^9}, {
   3.897262744722416*^9, 3.8972627684770613`*^9}, {3.8972632772311325`*^9, 
   3.8972632852568636`*^9}, {3.8972633516738973`*^9, 
   3.8972633541172123`*^9}, {3.897263634613264*^9, 3.897263650408495*^9}, {
   3.8972639453176775`*^9, 3.8972639464912057`*^9}, {3.897264054835474*^9, 
   3.897264063685416*^9}, {3.8972641236852856`*^9, 3.8972641640741763`*^9}, {
   3.897264334170711*^9, 3.897264375822837*^9}, {3.897264409445538*^9, 
   3.897264410986657*^9}, 3.8972647577955017`*^9, 3.897265056538562*^9, {
   3.8972652324571233`*^9, 3.8972652945646935`*^9}, 3.897265532269307*^9, {
   3.897265619051794*^9, 3.8972656192213917`*^9}, {3.8972656492230062`*^9, 
   3.8972658770424967`*^9}, 3.8972659621106715`*^9, {3.8972663503638773`*^9, 
   3.897266351160634*^9}, 3.8972688920457516`*^9, {3.8972689951163425`*^9, 
   3.897269022094269*^9}, {3.8972716679316235`*^9, 3.8972716712986555`*^9}, 
   3.8972735227376385`*^9, {3.897273638716218*^9, 3.897273653555581*^9}, {
   3.897608093096344*^9, 3.897608129960377*^9}, {3.904176592843627*^9, 
   3.904176604125903*^9}, {3.9052892079933033`*^9, 3.9052892095654354`*^9}, {
   3.905289426876752*^9, 3.905289478497834*^9}, {3.9052895094135027`*^9, 
   3.9052895097097797`*^9}, {3.905289560311488*^9, 3.905289588193482*^9}, 
   3.9052896306804285`*^9, {3.9052896786778135`*^9, 3.905289704345976*^9}, {
   3.905289761318979*^9, 3.9052899750971775`*^9}, {3.9052900181131816`*^9, 
   3.9052900332167206`*^9}, {3.9052901526462464`*^9, 
   3.9052902801457233`*^9}, {3.905290626349579*^9, 3.9052906368521805`*^9}, {
   3.9052906677926245`*^9, 3.9052906828516173`*^9}, {3.9052908235418086`*^9, 
   3.905290837566*^9}, {3.905291096387946*^9, 3.9052911216052566`*^9}, {
   3.905562264468772*^9, 3.905562275662298*^9}, {3.9055623246881113`*^9, 
   3.905562374937717*^9}, {3.90754067007922*^9, 3.907540675570279*^9}, {
   3.9075408246334457`*^9, 3.907540830282073*^9}, {3.907541498903358*^9, 
   3.9075415199994097`*^9}, {3.907541610396675*^9, 3.907541702126567*^9}, 
   3.9075417957496123`*^9, 3.9075419511897783`*^9, {3.907542050795882*^9, 
   3.9075420730160303`*^9}, {3.9075421752712917`*^9, 3.907542253195198*^9}, {
   3.9075424118835096`*^9, 3.9075424128744297`*^9}, {3.9075428318130407`*^9, 
   3.907542843212064*^9}, {3.9075428985752335`*^9, 3.9075428987228394`*^9}, {
   3.907543012430893*^9, 3.907543023294074*^9}, {3.907543183471364*^9, 
   3.9075431870038457`*^9}, {3.9075432197594566`*^9, 3.907543246946149*^9}, {
   3.9075437787353983`*^9, 3.907543788957831*^9}, {3.9077984448643255`*^9, 
   3.9077985064413877`*^9}, {3.908138584728819*^9, 3.908138592464755*^9}, {
   3.9147260198839097`*^9, 3.914726046939372*^9}, {3.9147260904653997`*^9, 
   3.9147264496388535`*^9}, {3.9147264808591995`*^9, 
   3.9147265119033704`*^9}, {3.914726584993626*^9, 3.9147266010557613`*^9}, {
   3.914726721746036*^9, 3.914726741175739*^9}, {3.914726808212217*^9, 
   3.9147268104937963`*^9}, {3.9154119993556137`*^9, 3.915412075108282*^9}, {
   3.9154124636178093`*^9, 3.915412478536029*^9}, {3.9159242001271296`*^9, 
   3.9159242475539618`*^9}, {3.9159242797818403`*^9, 
   3.9159242917163095`*^9}, {3.915932323557305*^9, 3.9159323828865423`*^9}, {
   3.9159325141303043`*^9, 3.915932563822338*^9}, {3.9159326982004414`*^9, 
   3.9159327254030323`*^9}, {3.915932814363677*^9, 3.915932814913087*^9}, {
   3.9159328768928757`*^9, 3.9159328890932713`*^9}, {3.9159329297880783`*^9, 
   3.9159329477343564`*^9}, {3.915933006965935*^9, 3.915933013226115*^9}, {
   3.9159330506269627`*^9, 3.915933063745679*^9}, {3.915933095776817*^9, 
   3.915933156516915*^9}, 3.9159333425011816`*^9, 3.91593351342039*^9, {
   3.9159335526207895`*^9, 3.9159335530877304`*^9}, {3.915934077276955*^9, 
   3.915934089845589*^9}, 3.9159342026932087`*^9, {3.9159349794939766`*^9, 
   3.915934979678418*^9}, 3.9159363335295906`*^9, {3.915936861662032*^9, 
   3.915936861896302*^9}, {3.9159371143384953`*^9, 3.915937120310953*^9}, {
   3.915937237986265*^9, 3.9159373006724634`*^9}, {3.9159373426470394`*^9, 
   3.915937383096856*^9}, {3.915937418865204*^9, 3.9159374281674166`*^9}, {
   3.9159381112077847`*^9, 3.9159381166025925`*^9}, {3.9159381829601336`*^9, 
   3.9159381884448333`*^9}, 3.9159386059217978`*^9, 3.9159386436615496`*^9, {
   3.9159387186977234`*^9, 3.915938732881762*^9}, {3.915939492788086*^9, 
   3.915939554093082*^9}, {3.915939597675132*^9, 3.915939771316867*^9}, {
   3.91593980399825*^9, 3.915940065993087*^9}, {3.91594015196397*^9, 
   3.9159401527740536`*^9}, {3.9159402739484305`*^9, 3.915940307650511*^9}, {
   3.9159405519594135`*^9, 3.9159406011141586`*^9}, {3.915940745264082*^9, 
   3.9159407552917585`*^9}, 3.9159407953912077`*^9, {3.915940994734627*^9, 
   3.9159410075776787`*^9}, {3.915941086695094*^9, 3.9159411400208282`*^9}, {
   3.9159412472716913`*^9, 3.9159412999863434`*^9}, {3.915941363169037*^9, 
   3.915941408241685*^9}, {3.915941470794081*^9, 3.9159415661200523`*^9}, {
   3.915941750802684*^9, 3.9159417708301334`*^9}, 3.9159418220649705`*^9, {
   3.9159418792561817`*^9, 3.9159418804989595`*^9}, {3.915941932151952*^9, 
   3.9159419414537024`*^9}, {3.9159420024045787`*^9, 3.91594200991928*^9}, {
   3.9170401802326345`*^9, 3.917040196355941*^9}, {3.9170415742361345`*^9, 
   3.9170415819752345`*^9}, {3.917041654337927*^9, 3.91704165897552*^9}, {
   3.9170449030637255`*^9, 3.9170449070849276`*^9}, {3.9170456781986723`*^9, 
   3.917045682204319*^9}, {3.917046231280607*^9, 3.917046258534807*^9}, {
   3.9170463052471433`*^9, 3.917046306670555*^9}, {3.917048962824339*^9, 
   3.9170489727238035`*^9}, {3.9172197535833664`*^9, 3.917219753682469*^9}, {
   3.917219969165842*^9, 3.917219972305231*^9}, {3.9172214383223715`*^9, 
   3.9172214460126677`*^9}, 3.9172215887350926`*^9, {3.917222074914173*^9, 
   3.917222156589408*^9}, {3.9173879394818864`*^9, 3.9173879421490917`*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"a98b854b-c774-4627-bdc0-c461ecf5096d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Run",
 FontWeight->"Bold"]], "Title",
 CellChangeTimes->{{3.895933009888097*^9, 
  3.8959330181481047`*^9}},ExpressionUUID->"55cc25b1-6118-4568-90fc-\
f6cca0bb059f"],

Cell[CellGroupData[{

Cell[BoxData["run"], "Input",
 CellChangeTimes->{{3.8971784963421345`*^9, 3.8971784967148747`*^9}, 
   3.9147265334076586`*^9, {3.914726616181691*^9, 3.914726617148091*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"54c5d0bf-aa90-4ef5-b95d-14bc7b0597e7"],

Cell[BoxData[
 TemplateBox[{
   ProgressIndicatorBox[
    Dynamic[$CellContext`progress], {0, 100}, ImageSize -> {1000, 30}], 
   TemplateBox[{"\"     \"", 
     StyleBox[
      DynamicBox[
       ToBoxes[$CellContext`progress, StandardForm], 
       ImageSizeCache -> {
        42.21196174621582, {0.30883789295330644`, 18.184375137090683`}}], 
      StripOnInput -> False, FontFamily -> "Helvetica", FontSize -> 22], 
     StyleBox[
     "\"% Completed\"", 22, FontFamily -> "Helvetica", StripOnInput -> 
      False]}, "RowDefault"]},
  "RowDefault"]], "Print",
 CellChangeTimes->{3.9172199756969357`*^9, 3.91722086104146*^9, 
  3.9172212807134757`*^9, 3.9172215000603647`*^9, 3.9172216132234035`*^9, 
  3.917221811165524*^9, 3.9172221610131135`*^9, 3.917222297639426*^9, 
  3.917384451845798*^9, 3.917384624102851*^9, 3.917386353113865*^9, 
  3.9173879654539757`*^9},
 CellLabel->
  "During evaluation of \
In[99]:=",ExpressionUUID->"ae17b72e-b59e-4bbd-89cc-9bd181188341"],

Cell[BoxData[
 FrameBox[
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`analyzeroffset$$ = 
     0, $CellContext`delta$$ = 0, $CellContext`fresnelcontrol$$ = 
     False, $CellContext`Functionality$$ = 
     "User Guide", $CellContext`makerfringescontrol$$ = 
     False, $CellContext`materialnumber$$ = 1, $CellContext`matindex$$ = 
     2, $CellContext`maxtheta2$$ = 
     30, $CellContext`mintheta2$$ = -30, $CellContext`mrassumption$$ = 
     0, $CellContext`phi$$ = 0, $CellContext`psi$$ = 
     0, $CellContext`RotateAnalyzer$$ = 
     False, $CellContext`RotatePolarizer$$ = 
     True, $CellContext`samplerotatestep$$ = 
     10, $CellContext`samplerotationcontrol$$ = 
     False, $CellContext`schematictype$$ = 1, $CellContext`theta$$ = 
     45, $CellContext`thetastep1$$ = 2, $CellContext`thetastep2$$ = 
     1, $CellContext`winhAssumption$$ = 1, $CellContext`\[Lambda]$$ = 1.064, 
     Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
     Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
     1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
        Hold[$CellContext`Functionality$$], "User Guide", ""}, {
       "User Guide", "Set Material Properties", "SHG Simulation", 
        "Partial Analytical Expressions"}}, {{
        Hold[$CellContext`schematictype$$], 1, ""}, {
       1 -> Style["2D Schematics", Bold], 2 -> 
        Style["3D Schematics", Bold]}}, {{
        Hold[$CellContext`\[Lambda]$$], 1.064, 
        Style["Incident fundamental wavelength (\[Mu]m):"]}}, {{
        Hold[$CellContext`materialnumber$$], 1, 
        Style["Number of Layers: ", Bold]}, Number}, {{
        Hold[$CellContext`matindex$$], 2, 
        Style["Select the layer to Edit : ", Bold]}, 
       Dynamic[
        Thread[Range[2, $CellContext`materialnumber$$ + 1] -> Map[ToString, 
           Range[$CellContext`materialnumber$$]]]]}, {{
        Hold[$CellContext`fresnelcontrol$$], False, 
        Style["Generate Fresnel Coefficients Plot:"]}, {True, False}}, {{
        Hold[$CellContext`makerfringescontrol$$], False, 
        Style["Generate Maker Fringes Plot:"]}, {True, False}}, {{
        Hold[$CellContext`mrassumption$$], 0, ""}, {
       0 -> "Full Multiple Reflections (FMR)", 1 -> 
        "Jerphagnon & Kurtz Assumption (No MR)", 2 -> 
        "Herman & Hayden Assumption \n (MR only for 2\[Omega] Homo Waves)"}}, \
{{
        Hold[$CellContext`winhAssumption$$], 1, " "}, {
       0 -> "Forward waves only", 1 -> "Forward + Backward waves", 2 -> 
        "Forward + Backward + Standing waves"}}, {{
        Hold[$CellContext`theta$$], 45., 
        Style["\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\) (\[Degree])"]}, 0.,
        89.}, {{
        Hold[$CellContext`theta$$], 45, ""}, 0, 75, 15}, {{
        Hold[$CellContext`delta$$], 0, 
        Style[
        "Incident Ellipticity \[CapitalDelta]\[Delta] \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): ", Bold]}, 0, 360}, {{
        Hold[$CellContext`RotatePolarizer$$], True, 
        Style[
        "Incident Polarization \[CurlyPhi]\!\(\*SuperscriptBox[\((\), \
\(o\)]\)): ", Bold]}, {
       True -> Style["Rotate Polarizer", Bold], False -> 
        Style["Fix Polarizer", Bold]}}, {{
        Hold[$CellContext`phi$$], 0, 
        Style[
        "Fixed Incident Polarization \[CurlyPhi]\!\(\*SuperscriptBox[\((\), \
\(o\)]\)): "]}, 0, 360}, {{
        Hold[$CellContext`phi$$], 45, ""}, 0, 180, 45}, {{
        Hold[$CellContext`RotateAnalyzer$$], False, 
        Style[
        "SHG Polarization \[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): ", 
         Bold]}, {
       True -> Style["Rotate Analyzer", Bold], False -> 
        Style["Fix Analyzer", Bold]}}, {{
        Hold[$CellContext`analyzeroffset$$], 0, 
        Style[
        "Analyzer-Polarizer Angle Offset \!\(\*SuperscriptBox[\((\), \
\(o\)]\)): "]}, 0, 180}, {{
        Hold[$CellContext`psi$$], 0, 
        Style[
        "Fixed SHG Polarization \[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \
"]}, 0, 360}, {{
        Hold[$CellContext`psi$$], 45, ""}, 0, 180, 45}, {{
        Hold[$CellContext`samplerotationcontrol$$], False, 
        Style[
        "Sample Rotation \[CurlyPhi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): ", 
         Bold]}, {
       True -> Style["Rotate Sample", Bold], False -> 
        Style["Fix Sample", Bold]}}, {{
        Hold[$CellContext`samplerotatestep$$], 10, 
        Style["Step Size\!\(\*SuperscriptBox[\((\), \(o\)]\)): "]}, 0, 360}, {{
        Hold[$CellContext`samplerotatestep$$], 10, ""}, 10, 30, 10}, {{
        Hold[$CellContext`thetastep1$$], 2, ""}, 1, 5, 1}, {{
        Hold[$CellContext`mintheta2$$], -30, 
        Style[
        "\!\(\*SuperscriptBox[\(\[Theta]\), \(min\)]\) (\[Degree])"]}, -90, 
       0}, {{
        Hold[$CellContext`mintheta2$$], -30, ""}, -90, 0, 15}, {{
        Hold[$CellContext`maxtheta2$$], 30, 
        Style["\!\(\*SuperscriptBox[\(\[Theta]\), \(max\)]\) (\[Degree])"]}, 
       0, 90}, {{
        Hold[$CellContext`maxtheta2$$], 30, ""}, 0, 90, 15}, {{
        Hold[$CellContext`thetastep2$$], 1, ""}, {1, 2, 5, 10, 15}}, {{
        Hold[$CellContext`phi$$], 0, 
        Style[
        "Fixed Incident Polarization \[CurlyPhi]\!\(\*SuperscriptBox[\((\), \
\(o\)]\)): "]}, 0, 360}, {{
        Hold[$CellContext`phi$$], 45, ""}, 0, 180, 45}, {{
        Hold[$CellContext`psi$$], 0, 
        Style[
        "Fixed SHG Polarization \[Psi]\!\(\*SuperscriptBox[\((\), \(o\)]\)): \
"]}, 0, 360}, {{
        Hold[$CellContext`psi$$], 45, ""}, 0, 180, 45}, {{
        Hold[$CellContext`delta$$], 0, 
        Style[
        "Incident Ellipticity \[CapitalDelta]\[Delta] \
\!\(\*SuperscriptBox[\((\), \(o\)]\)): "]}, -90, 90}, {{
        Hold[$CellContext`delta$$], 0, ""}, -90, 90, 30}, {
       Hold[
        Column[{
          Row[{
            Style["   ", 30], 
            Column[{
              Style[
              "\[Sharp] SHAARP.ml", Bold, FontFamily -> "Castellar", 70], "", 
              Row[{
                Style["S", Bold, FontFamily -> "Castellar", 30], 
                Style["econd ", FontFamily -> "Centaur", 30], 
                Style["H", Bold, FontFamily -> "Castellar", 30], 
                Style["armonic ", FontFamily -> "Centaur", 30], 
                Style["A", Bold, FontFamily -> "Castellar", 30], 
                Style["nalysis of", FontFamily -> "Centaur", 30]}], 
              Row[{
                Style["A", Bold, FontFamily -> "Castellar", 30], 
                Style["nisotropic ", FontFamily -> "Centaur", 30], 
                Style["R", Bold, FontFamily -> "Castellar", 30], 
                Style["otational ", FontFamily -> "Centaur", 30], 
                Style["P", Bold, FontFamily -> "Castellar", 30], 
                Style["olarimetry", FontFamily -> "Centaur", 30]}], 
              Style[" ", 20]}, Alignment -> Center], 
            Style["   ", 60], 
            Column[{
              Style["Version 1.00", FontFamily -> "Franklin Gothic", 25], 
              Style["", 8], 
              Style["Copyright (C) 2023", FontFamily -> "Arial", 16], 
              Style["", 8], 
              Style[
              "          Bo Wang, Rui Zu, Lincoln Weber, Akash Saha,\n        \
   Long-Qing Chen, and Venkatraman Gopalan", FontFamily -> "Franklin Gothic", 
               16], 
              Style["", 15], 
              Row[{
                Style["Tutorial video:", FontFamily -> "Franklin Gothic", 18], 
                Hyperlink[
                 Style[" Youtube", FontFamily -> "Franklin Gothic", 14], 
                 "https://www.youtube.com/watch?v=YiKRm6i7kNs"]}], 
              Row[{
                Style[
                "This program comes with ABSOLUTELY NO WARRANTY; for details, \
", FontFamily -> "Franklin Gothic", 18], 
                Hyperlink[
                 Style["click here", FontFamily -> "Franklin Gothic", 14], 
                 "https://www.gnu.org/licenses/gpl-3.0.en.html"], 
                Style[".", FontFamily -> "Franklin Gothic", 14]}], 
              Style[
              "This is free software, and you are welcome to redistribute it",
                FontFamily -> "Franklin Gothic", 14], 
              Row[{
                Style[
                "under certain conditions; ", FontFamily -> "Franklin Gothic",
                  14], 
                Hyperlink[
                 Style["click here", FontFamily -> "Franklin Gothic", 14], 
                 "https://www.gnu.org/licenses/gpl-3.0.en.html"], 
                Style[" for details.", FontFamily -> "Franklin Gothic", 14]}], 
              Style["    ", 20], 
              Row[{
                Style["Please properly acknowledge this software.", 18, Bold, 
                 RGBColor[1, 0, 0], FontFamily -> "Franklin Gothic"]}], 
              Style["", 20]}, Alignment -> Center]}], 
          Grid[{{
             Framed[
              Column[{
                OpenerView[{
                  Style[
                  "Functionality", 18, Bold, FontFamily -> "Franklin Gothic"], 
                  Column[{
                    Column[{
                    Manipulate`Place[1]}, Left, 
                    BaseStyle -> {FontSize -> 16}], 
                    Dynamic[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Set Material Properties"], 
                    Column[{"", 
                    Manipulate`Place[2]}, Left, 
                    BaseStyle -> {FontSize -> 14}], ""]]}]}, True], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Wavelength Setting", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Manipulate`Place[3]}, Left, 
                    BaseStyle -> {FontSize -> 15}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer Selection:", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Manipulate`Place[4], 
                    If[
                    Not[
                    IntegerQ[$CellContext`materialnumber$$]], 
                    Style[
                    "ERROR: The number of materials must be an integer.", Red,
                     Bold], 
                    If[$CellContext`materialnumber$$ < 1, 
                    Style[
                    "ERROR: You need to use at least one material.", Red, 
                    Bold], 
                    
                    If[$CellContext`materialnumber$$ > \
$CellContext`maxmaterialnumber - 2, 
                    Style[
                    "ERROR: The maximum number of materials is set at " <> 
                    ToString[$CellContext`maxmaterialnumber - 2] <> ".", Red, 
                    Bold], 
                    Manipulate`Place[5], ""]]], 
                    Row[{
                    TextCell[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Name: "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`name]]], String, FieldSize -> 20, 
                    FieldHint -> "Enter name here"]}]}, Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Case Studies and Examples", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    Button[
                    "Blank linear", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`blankMaterL[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Blank nonlinear", $CellContext`mtemp = \
$CellContext`setMater[
                    $CellContext`blankMaterNL[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "BaTiO3", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`BTO[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button["Air", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Air[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "LiNbO3(11\!\(\*OverscriptBox[\(2\), \(_\)]\)0)", \
$CellContext`mtemp = $CellContext`setMater[
                    $CellContext`LiNbO3xCut\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "LiNbO3(0001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`LiNbO3zCut\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "KTP(100)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`KTPxCut[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "KTP(010)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`KTPyCut[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button[
                    "ZnO(0001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`ZnO001[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Pt(111)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Pt111\[Lambda]1550[$CellContext`\[Lambda]$$]]\
; Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "\!\(\*SubscriptBox[\(Al\), \
\(2\)]\)\!\(\*SubscriptBox[\(O\), \(3\)]\)(0001)", $CellContext`mtemp = \
$CellContext`setMater[
                    $CellContext`Al2O3$0001\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "GaAs(111)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`GaAs111\[Lambda]800[$CellContext`\[Lambda]$$]\
]; Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button[
                    "X-cut Quartz", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Quartz$xCut\[Lambda]1064[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Quartz(001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Quartz$zCut\[Lambda]800[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Au Coating", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Au\[Lambda]800[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button["MoS2", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`MoS2[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}]}, Left, 
                    BaseStyle -> {
                    FontSize -> 12, FontFamily -> "Times New Roman"}]}, True],
                   ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "SHG Simulation", 
                  OpenerView[{
                    Style[
                    "Calculation Controls", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[
                  
                  Or[$CellContext`Functionality$$ == 
                   "SHG Simulation", $CellContext`Functionality$$ == 
                   "Partial Analytical Expressions"], 
                  OpenerView[{
                    Style[
                    "Assumptions", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Style["Assumptions for Multiple Reflection: ", Bold, 14], 
                    Manipulate`Place[8], 
                    If[$CellContext`mrassumption$$ == 0, 
                    Apply[Sequence, {
                    Style[
                    "Assumptions for 2\[Omega] Inhomogeneous Waves (for FMR \
only): ", Bold, 14], 
                    Manipulate`Place[9]}], 
                    Apply[Sequence, {}]]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[
                  
                  Or[$CellContext`Functionality$$ == 
                   "SHG Simulation", $CellContext`Functionality$$ == 
                   "Partial Analytical Expressions"], 
                  OpenerView[{
                    Style[
                    "Polarimetry Settings", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Incident Angle \!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\
\) (\[Degree])", Bold, 14], 
                    Manipulate`Place[10], 
                    Row[{"        ", 
                    Manipulate`Place[11], "     ", 
                    InputField[
                    Dynamic[$CellContext`theta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left], 
                    Style[
                    "Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\" \", RowBox[{\"(\", \"\[NoBreak]\", \
TagBox[GridBox[{{RowBox[{\"Cos\", \"[\", \"\[CurlyPhi]\", \
\"]\"}]},{RowBox[{RowBox[{\"Sin\", \"[\", \"\[CurlyPhi]\", \"]\"}], \"\
\[Application]\", SuperscriptBox[\"e\", RowBox[{\"i\", RowBox[{\"\
\[DifferenceDelta]\", \
\"\[Delta]\"}]}]]}]},{\"0\"}},GridBoxAlignment->{\"Columns\" -> {{Center}}, \
\"Rows\" -> {{Baseline}}},GridBoxSpacings->{\"Columns\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \"Rows\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \"\[NoBreak]\", \")\"}]}],Function[BoxForm`e$, \
MatrixForm[BoxForm`e$]]]\)", Bold, 14], 
                    Column[{
                    Row[{
                    Manipulate`Place[12]}], 
                    Row[{"                                               ", 
                    InputField[
                    Dynamic[$CellContext`delta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}], 
                    Row[{
                    Manipulate`Place[13]}], 
                    Dynamic[
                    If[$CellContext`RotatePolarizer$$, " ", 
                    Column[{
                    Manipulate`Place[14], 
                    Row[{"        ", 
                    Manipulate`Place[15], "     ", 
                    InputField[
                    Dynamic[$CellContext`phi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]], 
                    Row[{
                    "For \[CurlyPhi] and \[Psi], 0\[Degree] refers to p- \
polarized, 90\[Degree] refers to s- polarized"}, 
                    BaseStyle -> (FontSize -> 14)], 
                    Row[{
                    Manipulate`Place[16]}], 
                    Dynamic[
                    If[$CellContext`RotateAnalyzer$$, 
                    If[$CellContext`RotatePolarizer$$, 
                    Manipulate`Place[17], ""], 
                    Column[{
                    Manipulate`Place[18], 
                    Row[{"        ", 
                    Manipulate`Place[19], "     ", 
                    InputField[
                    Dynamic[$CellContext`psi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]], 
                    Row[{
                    Manipulate`Place[20]}], 
                    Dynamic[
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`RotatePolarizer$$ = False; $CellContext`RotateAnalyzer$$ = False; 
                    Column[{
                    Manipulate`Place[21], 
                    Row[{"        ", 
                    Manipulate`Place[22], "     ", 
                    InputField[
                    Dynamic[$CellContext`samplerotatestep$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, 
                   If[
                    Or[
                    
                    And[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`makerfringescontrol$$ == 
                    False], $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], True, False]], ""]], 
                Dynamic[
                 If[
                  
                  And[$CellContext`Functionality$$ == 
                   "SHG Simulation", $CellContext`fresnelcontrol$$ == True], 
                  OpenerView[{
                    Style[
                    "Fresnel Coefficients Collection Settings", 18, Bold, 
                    FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Step Size \!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\)(\
\[Degree])", Bold, 14], 
                    Row[{"        ", 
                    Manipulate`Place[23], "     ", 
                    InputField[
                    Dynamic[$CellContext`thetastep1$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}, 
                    Alignment -> Left, BaseStyle -> {FontSize -> 12}]}, 
                   If[$CellContext`fresnelcontrol$$, True, False]], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "SHG Simulation", 
                  OpenerView[{
                    Style[
                    "Maker Fringes Collection Settings", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Minimum Incident Angle \
\!\(\*SuperscriptBox[\(\[Theta]\), \(min\)]\) (\[Degree])", Bold, 14], 
                    Manipulate`Place[24], 
                    Row[{"        ", 
                    Manipulate`Place[25], "     ", 
                    InputField[
                    Dynamic[$CellContext`mintheta2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style[
                    "Maximum Incident Angle \
\!\(\*SuperscriptBox[\(\[Theta]\), \(max\)]\) (\[Degree])", Bold, 14], 
                    Manipulate`Place[26], 
                    Row[{"        ", 
                    Manipulate`Place[27], "     ", 
                    InputField[
                    Dynamic[$CellContext`maxtheta2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style["Scan Step Size (\[Degree])", Bold, 14], 
                    Row[{"        ", 
                    Manipulate`Place[28], "     ", 
                    InputField[
                    Dynamic[$CellContext`thetastep2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style[
                    "Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\" \", RowBox[{\"(\", \"\[NoBreak]\", \
TagBox[GridBox[{{RowBox[{\"Cos\", \"[\", \"\[CurlyPhi]\", \
\"]\"}]},{RowBox[{RowBox[{\"Sin\", \"[\", \"\[CurlyPhi]\", \"]\"}], \"\
\[Application]\", SuperscriptBox[\"e\", RowBox[{\"i\", RowBox[{\"\
\[DifferenceDelta]\", \
\"\[Delta]\"}]}]]}]},{\"0\"}},GridBoxAlignment->{\"Columns\" -> {{Center}}, \
\"Rows\" -> {{Baseline}}},GridBoxSpacings->{\"Columns\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \"Rows\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \"\[NoBreak]\", \")\"}]}],Function[BoxForm`e$, \
MatrixForm[BoxForm`e$]]]\)", Bold, 14], Null, 
                    Column[{
                    Manipulate`Place[29], 
                    Row[{"        ", 
                    Manipulate`Place[30], "     ", 
                    InputField[
                    Dynamic[$CellContext`phi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}], 
                    Column[{
                    Manipulate`Place[31], 
                    Row[{"        ", 
                    Manipulate`Place[32], "     ", 
                    InputField[
                    Dynamic[$CellContext`psi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}], 
                    
                    Row[{"For \[CurlyPhi] and \[Psi], 0\[Degree] refers to p- \
polarized, 90\[Degree] refers to s- polarized"}, 
                    BaseStyle -> (FontSize -> 14)], 
                    Column[{
                    Row[{
                    Manipulate`Place[33]}], 
                    Row[{
                    Manipulate`Place[34], "     ", 
                    InputField[
                    Dynamic[$CellContext`delta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}]}, 
                    Alignment -> Left, BaseStyle -> {FontSize -> 12}]}, 
                   If[$CellContext`makerfringescontrol$$, True, False]], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Thickness", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Dynamic[
                    If[
                    
                    Or[$CellContext`matindex$$ == 
                    1, $CellContext`matindex$$ == \
$CellContext`materialnumber$$ + 2], 
                    Style[
                    "(No input: thickness of first and last material is \
infinite)", 14], 
                    Row[{
                    Style["Slab Thickness (\[Mu]m)   "], 
                    Slider[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]]], {0, 1000}, ImageSize -> 150], 
                    "   ", 
                    InputField[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]]], BaseStyle -> (FontSize -> 12), 
                    FieldSize -> 4], "    ", 
                    Button["analytical h", Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]] = 
                    ToExpression[
                    "h" <> ToString[$CellContext`matindex$$ - 1]]]}]]]}, Left,
                     BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Crystal Structure", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    Style["Point Group:    ", Bold, 14], 
                    Style["Noncentrosymmetric -> ", 14], 
                    PopupMenu[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]]], {{
                    "1", {{11, 12, 13, 14, 15, 16}, {21, 22, 23, 24, 25, 
                    26}, {31, 32, 33, 34, 35, 36}}, 1} -> 
                    "1", {"2", {{0, 0, 0, 14, 0, 16}, {21, 22, 23, 0, 25, 
                    0}, {0, 0, 0, 34, 0, 36}}, 1} -> 
                    "2", {"m", {{11, 12, 13, 0, 15, 0}, {0, 0, 0, 24, 0, 
                    26}, {31, 32, 33, 0, 35, 0}}, 1} -> 
                    "m", {"mm2", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 24, 0, 0}, {
                    31, 32, 33, 0, 0, 0}}, 1} -> 
                    "mm2", {
                    "222", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, 25, 0}, {0, 0, 
                    0, 0, 0, 36}}, 1} -> 
                    "222", {
                    "3", {{11, -11, 0, 14, 15, -22}, {-22, 22, 0, 
                    15, -14, -11}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "3", {"32", {{11, -11, 0, 14, 0, 0}, {0, 0, 0, 
                    0, -14, -11}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "32", {"3m", {{0, 0, 0, 0, 15, -22}, {-22, 22, 0, 15, 0, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "3m", {"4", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 15, -14, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "4", {"6", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 15, -14, 0}, {
                    31, 31, 33, 0, 0, 0}}, 1} -> 
                    "6", {"\!\(\*OverscriptBox[\(4\), \(_\)]\)", {{0, 0, 0, 
                    14, 15, 0}, {0, 0, 0, -15, 14, 0}, {31, -31, 0, 0, 0, 
                    36}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)", {
                    "4mm", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 0}, {31, 31,
                     33, 0, 0, 0}}, 1} -> 
                    "4mm", {
                    "6mm", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 0}, {31, 31,
                     33, 0, 0, 0}}, 1} -> 
                    "6mm", {
                    "422", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, -14, 0}, {0, 0, 
                    0, 0, 0, 0}}, 1} -> 
                    "422", {
                    "622", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, -14, 0}, {0, 0, 
                    0, 0, 0, 0}}, 1} -> 
                    "622", {
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)2m", {{0, 0, 0, 14, 0,
                     0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0, 0, 0, 36}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)2m", {
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)", {{11, -11, 0, 0, 
                    0, -22}, {-22, 22, 0, 0, 0, -11}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)", {
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)m2", {{0, 0, 0, 0, 
                    0, -22}, {-22, 22, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)m2", {
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)3m", {{0, 0, 0, 14, 0,
                     0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0, 0, 0, 14}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)3m", {
                    "23", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0,
                     0, 0, 14}}, 1} -> 
                    "23", {"\[Infinity]", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 
                    15, -14, 0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "\[Infinity]", {
                    "\[Infinity]m", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "\[Infinity]m", {
                    "\[Infinity]2", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, -14, 
                    0}, {0, 0, 0, 0, 0, 0}}, 1} -> "\[Infinity]2"}, "--"]}], 
                    Row[{
                    Style["                                     "], 
                    Style["Centrosymmetric -> ", 14], 
                    PopupMenu[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]]], {{
                    "\!\(\*OverscriptBox[\(1\), \(_\)]\)", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(1\), \(_\)]\)", {
                    "2/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "2/m", {
                    "mmm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "mmm", {
                    "4/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "4/m", {
                    "4/mmm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 
                    0, 0, 0, 0}}, 0} -> 
                    "4/mmm", {
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)", {
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)m", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)m", {
                    "6/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "6/m", {
                    "6/mmm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 
                    0, 0, 0, 0}}, 0} -> 
                    "6/mmm", {
                    "m3", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "m3", {"m3m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0,
                     0, 0, 0, 0, 0}}, 0} -> 
                    "m3m", {
                    "432", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> 
                    "432", {
                    "\[Infinity]/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]/m", {
                    "\[Infinity]/mm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]/mm", {
                    "\[Infinity]\[Infinity]", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]\[Infinity]", {
                    "\[Infinity]\[Infinity]m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]\[Infinity]m"}, "--"]}], 
                    Row[{
                    Style["a = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 1]], FieldSize -> 5], 
                    Style["    b = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 2]], FieldSize -> 5], 
                    Style["    c = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 3]], FieldSize -> 5]}], 
                    Row[{
                    Style["\[Alpha] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 4]], FieldSize -> 5], 
                    Style["    \[Beta] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 5]], FieldSize -> 5], 
                    Style["    \[Gamma] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 6]], FieldSize -> 5]}]}, Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Crystal Orientation", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    SetterBar[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1]], {
                    1 -> Style["Use Miller Indices (hkl)", Bold], 2 -> 
                    Style["Use Crystal Physics Direction", Bold]}]}], 
                    Row[{
                    Tooltip[
                    Style[
                    "?(hkl)", Black, Bold, 11], $CellContext`hklExplain], 
                    Spacer[3], 
                    Tooltip[
                    Style["?Crystal Physics", Black, Bold, 11], 
                    Dynamic[
                    Style[Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1] <> 
                    ": " <> $CellContext`ZSysExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]], "Times New Roman", 20]]]}], 
                    Dynamic[
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1] == 2, 
                    Column[{
                    Row[{
                    Style["Rotation Angle =  "], 
                    InputField[
                    Dynamic[$CellContext`rotationAngle], FieldSize -> 5], 
                    Style[" degree(\[Degree]) "], "    ", 
                    Button["Apply Rotation Angle", Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1]]]]; Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]]]; Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 
                    3]]]]; $CellContext`rotationAngle = 0]}], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(1\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(2\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(3\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}], 
                    Column[{
                    Grid[{{
                    TextCell[
                    Style["(hkl) \[Rule] Crystal Surface Plane: ", Bold]]}, {
                    Row[{
                    Style["h = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 1]], FieldSize -> 
                    5], 
                    Style[",  k = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 2]], FieldSize -> 
                    5], 
                    Style[",  l = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 3]], FieldSize -> 
                    5]}]}, {
                    TextCell[
                    Style[
                    "[hkl] \[Rule] Direction Perpendicular to Plane of \
Incidence", Bold]]}, {
                    Row[{
                    Style["h = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 1]], FieldSize -> 
                    5], 
                    Style[",  k = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 2]], FieldSize -> 
                    5], 
                    Style[",  l = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 3]], FieldSize -> 
                    5]}]}}, Alignment -> Left]}]]], 
                    Column[{
                    Dynamic[
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1] == 0, 
                    Row[{""}], 
                    Row[{
                    If[
                    And[Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]] == 0, Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] == 0, Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] == 0], "", 
                    Style[
                    "ERROR: The crystal physics basis vectors are not \
orthogonal.", Red, Bold]], 
                    If[Dot[
                    SetPrecision[
                    Chop[
                    Cross[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]], 5], 
                    SetPrecision[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]], 5]] > 0, "", 
                    Style[
                    "ERROR: The crystal physics basis vectors are not \
right-handed.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(1\)]\) is not a unit \
vector.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(2\)]\) is not a unit \
vector.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(3\)]\) is not a unit \
vector.", Red, Bold]]}]]]}]}, Left, BaseStyle -> {FontSize -> 12}]}, True], 
                  ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Dielectric Tensors \
(\!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(\[Omega]\)], \
\(ij\)]\) and \!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(2  \
\[Omega]\)], \(ij\)]\))", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    
                    Row[{" \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \
\(ij\), \(\[Omega]\)]\) = ", 
                    MatrixForm[{{"", 
                    Grid[
                    Map[InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`\[CurlyEpsilon]\[Omega]C]], 
                    Apply[Sequence, 
                    SlotSequence[1]]]], FieldSize -> 9]& , 
                    
                    Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 
                    3}, {$CellContext`j, 3}], {2}], Spacings -> {0, 0}, 
                    ItemSize -> All], ""}}]}], 
                    
                    Row[{"  \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \(ij\
\), \(2  \[Omega]\)]\) = ", 
                    MatrixForm[{{"", 
                    Grid[
                    Map[InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`\[CurlyEpsilon]2\[Omega]C]], 
                    Apply[Sequence, 
                    SlotSequence[1]]]], FieldSize -> 9]& , 
                    
                    Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 
                    3}, {$CellContext`j, 3}], {2}], Spacings -> {0, 0}, 
                    ItemSize -> All], ""}}]}]}, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " SHG Tensor \
(\!\(\*SubscriptBox[StyleBox[\"d\",FontSlant->\"Italic\"], \"ijk\"]\))" <> 
                    " pm/V", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Row[{"\!\(\*SubscriptBox[\(d\), \(ij\)]\)=   ", 
                    MatrixForm[{{"", $CellContext`dgrid, ""}}], "    ", 
                    Button["analytical dij", Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`dC]] = 
                    Map[ToExpression[
                    ToString[#] <> "m" <> 
                    ToString[$CellContext`matindex$$ - 
                    1]]& , {{$CellContext`d11, $CellContext`d12, \
$CellContext`d13, $CellContext`d14, $CellContext`d15, $CellContext`d16}, \
{$CellContext`d21, $CellContext`d22, $CellContext`d23, $CellContext`d24, \
$CellContext`d25, $CellContext`d26}, {$CellContext`d31, $CellContext`d32, \
$CellContext`d33, $CellContext`d34, $CellContext`d35, $CellContext`d36}}, {
                    2}]; Map[$CellContext`indexfun1, 
                    Range[$CellContext`materialnumber$$ + 2]]; Null]}, 
                    BaseStyle -> {FontSize -> 12}]}, 
                   If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]], 3] == 1, True, False]], ""]], 
                Dynamic[
                 If[$CellContext`Functionality$$ == "Set Material Properties", 
                  OpenerView[{
                    Style[
                    "Layer Properties Preset Values", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Press update before setting any preset.", Blue, 14], 
                    Row[{
                    Button[
                    Style["Preset 1", Bold, Black], $CellContext`ptest1 = 1; 
                    If[
                    ValueQ[$CellContext`presetval1], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval1, $CellContext`presetval1 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap1], 
                    Spacer[5], 
                    Button[
                    Style["Preset 2", Bold, Black], $CellContext`ptest2 = 1; 
                    If[
                    ValueQ[$CellContext`presetval2], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval2, $CellContext`presetval2 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap2], 
                    Spacer[5], 
                    Button[
                    Style["Preset 3", Bold, Black], $CellContext`ptest3 = 1; 
                    If[
                    ValueQ[$CellContext`presetval3], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval3, $CellContext`presetval3 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap3], 
                    Spacer[5], 
                    Button[
                    Style["Preset 4", Bold, Black], $CellContext`ptest4 = 1; 
                    If[
                    ValueQ[$CellContext`presetval4], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval4, $CellContext`presetval4 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap4], 
                    Spacer[5], 
                    Button[
                    Style["Preset 5", Bold, Black], $CellContext`ptest5 = 1; 
                    If[
                    ValueQ[$CellContext`presetval5], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval5, $CellContext`presetval5 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap5], 
                    Spacer[5], 
                    Button[
                    Style["Preset 6", Bold, Black], $CellContext`ptest6 = 1; 
                    If[
                    ValueQ[$CellContext`presetval6], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval6, $CellContext`presetval6 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap6], 
                    Spacer[5], 
                    Button[
                    Style["Preset 7", Bold, Black], $CellContext`ptest7 = 1; 
                    If[
                    ValueQ[$CellContext`presetval7], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval7, $CellContext`presetval7 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap7], 
                    Spacer[5], 
                    Button[
                    Style["Preset 8", Bold, Black], $CellContext`ptest8 = 1; 
                    If[
                    ValueQ[$CellContext`presetval8], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval8, $CellContext`presetval8 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap8], 
                    Spacer[5], 
                    Button[
                    Style[
                    "Clear Presets", 
                    Bold], {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = 
                    Table[0, 
                    8]; {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]; 
                    Clear[$CellContext`presetval1, $CellContext`presetval2, \
$CellContext`presetval3, $CellContext`presetval4, $CellContext`presetval5, \
$CellContext`presetval6, $CellContext`presetval7, $CellContext`presetval8], 
                    Appearance -> "DialogBox"], 
                    Spacer[5]}, BaseStyle -> {FontSize -> 12}], 
                    Row[{
                    Dynamic[
                    If[$CellContext`ptest1 == 1, 
                    Row[{"Preset 1 Label: " InputField[
                    Dynamic[$CellContext`plabel1], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest2 == 1, 
                    Row[{"Preset 2 Label: " InputField[
                    Dynamic[$CellContext`plabel2], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest3 == 1, 
                    Row[{"Preset 3 Label: " InputField[
                    Dynamic[$CellContext`plabel3], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest4 == 1, 
                    Row[{"Preset 4 Label: " InputField[
                    Dynamic[$CellContext`plabel4], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest5 == 1, 
                    Row[{"Preset 5 Label: " InputField[
                    Dynamic[$CellContext`plabel5], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest6 == 1, 
                    Row[{"Preset 6 Label: " InputField[
                    Dynamic[$CellContext`plabel6], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest7 == 1, 
                    Row[{"Preset 7 Label: " InputField[
                    Dynamic[$CellContext`plabel7], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest8 == 1, 
                    Row[{"Preset 8 Label: " InputField[
                    Dynamic[$CellContext`plabel8], String]}], ""]]}], 
                    Toggler[
                    Dynamic[$CellContext`presetpopuptextvar], {
                    0 -> "Show Preset Information", 1 -> "Hide"}, Background -> 
                    LightBlue, Alignment -> Center], 
                    Dynamic[
                    If[$CellContext`presetpopuptextvar == 1, 
                    Style["Presets currently set:   " <> If[
                    ValueQ[$CellContext`presetval1], "1   ", ""] <> If[
                    ValueQ[$CellContext`presetval2], "2   ", ""] <> If[
                    ValueQ[$CellContext`presetval3], "3   ", ""] <> If[
                    ValueQ[$CellContext`presetval4], "4   ", ""] <> If[
                    ValueQ[$CellContext`presetval5], "5   ", ""] <> If[
                    ValueQ[$CellContext`presetval6], "6   ", ""] <> If[
                    ValueQ[$CellContext`presetval7], "7   ", ""] <> If[
                    ValueQ[$CellContext`presetval8], "8   ", ""] <> If[
                    Or[
                    ValueQ[$CellContext`presetval1], 
                    ValueQ[$CellContext`presetval2], 
                    ValueQ[$CellContext`presetval3], 
                    ValueQ[$CellContext`presetval4], 
                    ValueQ[$CellContext`presetval5], 
                    ValueQ[$CellContext`presetval6], 
                    ValueQ[$CellContext`presetval7], 
                    ValueQ[$CellContext`presetval8]], "", "None."] <> 
                    "\nUpdate and press any of the preset buttons to save a \
material's \ninformation to that preset. \nPress the button again and update \
to apply those values.\nHide and show this message to refresh.", 
                    "Times New Roman", 12], ""]]}, 
                    BaseStyle -> {FontSize -> 12}]}, False], ""]], 
                Button[
                 Graphics[{
                   RGBColor[0, 1, 0], 
                   EdgeForm[
                    GrayLevel[0]], 
                   Rectangle[{0, 0}, {1.8, 0.7}], 
                   Inset[
                    Style["Update", 
                    GrayLevel[0], FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                 Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
               ItemSize -> 63, Background -> {
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9], 
                 GrayLevel[1], 
                 GrayLevel[0.9]}, Frame -> All], Background -> GrayLevel[1], 
              ImageSize -> Automatic], 
             Framed[
              Dynamic[
               
               If[$CellContext`Functionality$$ == 
                "User Guide", $CellContext`userguide, 
                If[$CellContext`Functionality$$ == "Set Material Properties", 
                 Column[{
                   Style["", 30], 
                   Dynamic[
                    Grid[{{$CellContext`heterostructureschematic}, {
                    Grid[{{
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Column[{
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " : ", 
                    Tooltip[
                    Part[$CellContext`zvecplots2d, $CellContext`matindex$$], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}], 
                    
                    Column[{
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " : ", 
                    Tooltip[
                    Part[$CellContext`zvecplots3d, $CellContext`matindex$$], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}]]}}, 
                    BaseStyle -> {
                    FontSize -> 24, FontFamily -> "Times New Roman"}]}}]], 
                   Style["", 30], $CellContext`timecell, 
                   Style["\n", 30], 
                   Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
                  Alignment -> Center], 
                 If[$CellContext`Functionality$$ == "SHG Simulation", 
                  Column[{
                    Style["", 30], 
                    Grid[{{
                    OpenerView[{
                    Style[
                    "Optical Geometry and Polarization", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Grid[{{
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`fig12d, \
$CellContext`PropagationExplain], 
                    
                    Tooltip[$CellContext`fig13d, \
$CellContext`PropagationExplain]], 
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`plot2geometry2d, \
$CellContext`GeometryExplain], 
                    
                    Tooltip[$CellContext`plot2geometry3d, \
$CellContext`GeometryExplain]]}, {
                    
                    Tooltip[$CellContext`ellipticityfig, \
$CellContext`EllipticityExplain], 
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`polarizationplot2d, \
$CellContext`GeometryExplain], 
                    
                    Tooltip[$CellContext`polarizationplot3d, \
$CellContext`GeometryExplain]]}}]}, 
                    If[
                    
                    Or[$CellContext`makerfringescontrol$$, \
$CellContext`fresnelcontrol$$], False, True]]}, {
                    OpenerView[{
                    Style[
                    "Polar Plots", 30, Bold, FontFamily -> "Franklin Gothic"], 
                    Grid[{{
                    Text[
                    "Assumption Used: " <> 
                    Which[$CellContext`mrassumption$$ == 0, 
                    "Full Multiple Reflection", $CellContext`mrassumption$$ == 
                    1, "Jerphagnon & Kurtz Assumption", \
$CellContext`mrassumption$$ == 2, "Herman & Hayden Assumption"] <> "\n" <> 
                    "Consider Backward Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagBackward] <> "\n" <> 
                    "Consider Standing Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagStandingWave], 
                    BaseStyle -> {
                    FontFamily -> "Times New Roman", FontSize -> 22}], 
                    SpanFromLeft}, {
                    
                    Tooltip[$CellContext`figRp, \
$CellContext`PolarPlotExplain], 
                    
                    Tooltip[$CellContext`figRs, \
$CellContext`PolarPlotExplain]}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataRp]], Appearance -> "DialogBox", 
                    ImageSize -> 100], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataRs]], Appearance -> "DialogBox", 
                    ImageSize -> 100]}, {
                    
                    Tooltip[$CellContext`figTp, \
$CellContext`PolarPlotExplain], 
                    
                    Tooltip[$CellContext`figTs, \
$CellContext`PolarPlotExplain]}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataTp]], Appearance -> "DialogBox", 
                    ImageSize -> 100], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataTs]], Appearance -> "DialogBox", 
                    ImageSize -> 100]}}]}, 
                    If[
                    
                    Or[$CellContext`makerfringescontrol$$, \
$CellContext`fresnelcontrol$$], False, True]]}, {
                    OpenerView[{
                    Style[
                    "Fresnel Coefficients Figure", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    
                    Grid[{{$CellContext`figfresnel, SpanFromLeft, 
                    SpanFromLeft, SpanFromLeft}, {
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(R\), \(p\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 1]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(R\), \(s\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 2]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(T\), \(p\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 3]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(T\), \(s\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 4]], Appearance -> 
                    "DialogBox", ImageSize -> 
                    100]}}]}, $CellContext`fresnelcontrol$$]}, {
                    OpenerView[{
                    Style[
                    "Maker Fringes Figures", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Grid[{{
                    Text[
                    "Assumption Used: " <> 
                    Which[$CellContext`mrassumption$$ == 0, 
                    "Full Multiple Reflection", $CellContext`mrassumption$$ == 
                    1, "Jerphagnon & Kurtz Assumption", \
$CellContext`mrassumption$$ == 2, "Herman & Hayden Assumption"] <> "\n" <> 
                    "Consider Backward Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagBackward] <> "\n" <> 
                    "Consider Standing Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagStandingWave], 
                    BaseStyle -> {
                    FontFamily -> "Times New Roman", FontSize -> 22}], 
                    SpanFromLeft}, {
                    
                    GraphicsGrid[{{$CellContext`figmakerfringespar}, \
{$CellContext`figmakerfringesperp}}, ImageSize -> Large], SpanFromLeft}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \
\[Omega]\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[$CellContext`listMFpara], Appearance -> 
                    "DialogBox", ImageSize -> 200], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \
\[Omega]\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi]+90\[Degree])", Bold], 
                    CopyToClipboard[$CellContext`listMFperp], Appearance -> 
                    "DialogBox", ImageSize -> 
                    200]}}]}, $CellContext`makerfringescontrol$$]}}, 
                    Alignment -> Left], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None], 
                    If[
                    Not[$CellContext`noAnalytical], 
                    Framed[
                    Text[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 32, 
                    TextAlignment -> Center]]], 
                    Apply[Sequence, {}]]}, Alignment -> Center], 
                  
                  If[$CellContext`Functionality$$ == 
                   "Partial Analytical Expressions", 
                   Column[{
                    Style["", 30], 
                    Column[{
                    Text[
                    Style["For \[Omega] homogeneous waves:", Bold, Red, 32]], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRpL.mx"}]], $CellContext`equationRpL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRpL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "(\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRpL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRpL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRsL.mx"}]], $CellContext`equationRsL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRsL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRsL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRsL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTpL.mx"}]], $CellContext`equationTpL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTpL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTpL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTpL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTsL.mx"}]], $CellContext`equationTsL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTsL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTsL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTsL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Text[
                    Style[
                    "For 2\[Omega] homogeneous waves:", Bold, Blue, 32]], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRp.mx"}]], $CellContext`equationRp, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRp], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRp] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRp]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRs.mx"}]], $CellContext`equationRs, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRs], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRs] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRs]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTp.mx"}]], $CellContext`equationTp, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTp], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTp] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTp]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTs.mx"}]], $CellContext`equationTs, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTs], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTs] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTs]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}]}, 
                    BaseStyle -> {FontSize -> 14}], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
                    Alignment -> Center], ""]]]]], 
              ImageSize -> {800, Automatic}, Alignment -> {Center, Top}, 
              Background -> GrayLevel[1]]}}, Alignment -> Top]}]], 
       Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
     0., {0., 7.329003578983247}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True}, 
     DynamicBox[PaneBox[
       PaneSelectorBox[{True -> GridBox[{{
             PaneSelectorBox[{"NameField" -> ItemBox[
                 PanelBox[
                  GridBox[{{
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["FEStrings", "BookmarkMode"], 
                    StandardForm]], "", ""}, {
                    InputFieldBox[
                    Dynamic[Typeset`name$$], String, 
                    FieldSize -> {{20, 20}, {1, 
                    DirectedInfinity[1]}}, DefaultBaseStyle -> "Manipulator"], 
                    ButtonBox[
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{Typeset`down$$ = False}, 
                    TagBox[
                    PaneSelectorBox[{"Default" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateAddIcon"]], "Hover" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateAddIconHover"]], "Down" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateAddIconPressed"]]}, 
                    Dynamic[
                    Which[
                    And[
                    CurrentValue["MouseOver"], Typeset`down$$], "Down", 
                    CurrentValue["MouseOver"], "Hover", True, "Default"]], 
                    ImageSize -> Automatic, FrameMargins -> 0], 
                    
                    EventHandlerTag[{
                    "MouseDown" :> FEPrivate`Set[Typeset`down$$, True], 
                    "MouseUp" :> FEPrivate`Set[Typeset`down$$, False], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], DynamicModuleValues :> {}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["FEStrings", "BookmarkAdd"], 
                    StandardForm]]], Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource["FEStrings", "BookmarkAdd"]], 
                    "Tooltip"]& ], ButtonFunction :> Manipulate`AddBookmark[
                    Dynamic[Typeset`specs$$], 
                    Dynamic[Typeset`bookmarkMode$$], 
                    Dynamic[Typeset`bookmarkList$$], 
                    Dynamic[Typeset`name$$]], Appearance -> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "SuppressMouseDownNinePatchAppearance"], 
                    DefaultBaseStyle -> {"Panel", Background -> None}, 
                    BaselinePosition -> Baseline, Evaluator -> Automatic, 
                    Method -> "Preemptive"], 
                    ItemBox[
                    ButtonBox[
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{Typeset`down$$ = False}, 
                    TagBox[
                    PaneSelectorBox[{"Default" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIcon"]], "Hover" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconHover"]], "Down" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconPressed"]]}, 
                    Dynamic[
                    Which[
                    And[
                    CurrentValue["MouseOver"], Typeset`down$$], "Down", 
                    CurrentValue["MouseOver"], "Hover", True, "Default"]], 
                    ImageSize -> Automatic, FrameMargins -> 0], 
                    
                    EventHandlerTag[{
                    "MouseDown" :> FEPrivate`Set[Typeset`down$$, True], 
                    "MouseUp" :> FEPrivate`Set[Typeset`down$$, False], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], DynamicModuleValues :> {}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"], StandardForm]]], 
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"]], "Tooltip"]& ], 
                    ButtonFunction :> (Typeset`bookmarkMode$$ = "Menu"), 
                    Appearance -> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "SuppressMouseDownNinePatchAppearance"], 
                    DefaultBaseStyle -> {"Panel", Background -> None}, 
                    BaselinePosition -> Baseline, Evaluator -> Automatic, 
                    Method -> "Preemptive"], Frame -> {False, 
                    GrayLevel[0, 0.2], False, False}, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   ColumnSpacings -> 2], FrameMargins -> 5, ImageMargins -> 
                  5], Alignment -> {Left, Inherited}, StripOnInput -> False], 
               "Animator" -> ItemBox[
                 PanelBox[
                  GridBox[{{
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAnimate"], StandardForm]], ""}, {
                    DynamicBox[Typeset`animator$$], 
                    ItemBox[
                    ButtonBox[
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{Typeset`down$$ = False}, 
                    TagBox[
                    PaneSelectorBox[{"Default" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIcon"]], "Hover" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconHover"]], "Down" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconPressed"]]}, 
                    Dynamic[
                    Which[
                    And[
                    CurrentValue["MouseOver"], Typeset`down$$], "Down", 
                    CurrentValue["MouseOver"], "Hover", True, "Default"]], 
                    ImageSize -> Automatic, FrameMargins -> 0], 
                    
                    EventHandlerTag[{
                    "MouseDown" :> FEPrivate`Set[Typeset`down$$, True], 
                    "MouseUp" :> FEPrivate`Set[Typeset`down$$, False], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], DynamicModuleValues :> {}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"], StandardForm]]], 
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"]], "Tooltip"]& ], 
                    ButtonFunction :> (Unset[Typeset`animator$$]; 
                    Unset[Typeset`animvar$$]; 
                    Typeset`bookmarkMode$$ = "Menu"), Appearance -> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "SuppressMouseDownNinePatchAppearance"], 
                    DefaultBaseStyle -> {"Panel", Background -> None}, 
                    BaselinePosition -> Baseline, Evaluator -> Automatic, 
                    Method -> "Preemptive"], Frame -> {False, 
                    GrayLevel[0, 0.2], False, False}, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   ColumnSpacings -> 2], FrameMargins -> 5, ImageMargins -> 
                  5], Alignment -> {Left, Inherited}, StripOnInput -> False], 
               "Autorun" -> ItemBox[
                 PanelBox[
                  GridBox[{{
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAutorun"], StandardForm]], ""}, {
                    DynamicBox[Typeset`animator$$], 
                    ItemBox[
                    ButtonBox[
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{Typeset`down$$ = False}, 
                    TagBox[
                    PaneSelectorBox[{"Default" -> DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIcon"]], "Hover" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconHover"]], "Down" -> 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "ManipulateCloseIconPressed"]]}, 
                    Dynamic[
                    Which[
                    And[
                    CurrentValue["MouseOver"], Typeset`down$$], "Down", 
                    CurrentValue["MouseOver"], "Hover", True, "Default"]], 
                    ImageSize -> Automatic, FrameMargins -> 0], 
                    
                    EventHandlerTag[{
                    "MouseDown" :> FEPrivate`Set[Typeset`down$$, True], 
                    "MouseUp" :> FEPrivate`Set[Typeset`down$$, False], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], DynamicModuleValues :> {}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"], StandardForm]]], 
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateCancel"]], "Tooltip"]& ], 
                    ButtonFunction :> (Unset[Typeset`animator$$]; 
                    Unset[Typeset`animvar$$]; 
                    Typeset`bookmarkMode$$ = "Menu"), Appearance -> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "SuppressMouseDownNinePatchAppearance"], 
                    DefaultBaseStyle -> {"Panel", Background -> None}, 
                    BaselinePosition -> Baseline, Evaluator -> Automatic, 
                    Method -> "Preemptive"], Frame -> {False, 
                    GrayLevel[0, 0.2], False, False}, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   ColumnSpacings -> 2], FrameMargins -> 5, ImageMargins -> 
                  5], Alignment -> {Left, Inherited}, StripOnInput -> False], 
               "Menu" -> ""}, 
              Dynamic[Typeset`bookmarkMode$$], ImageSize -> Automatic, 
              FrameMargins -> 0], 
             StyleBox[
              GridBox[{{
                 TagBox[
                  TooltipBox[
                   ButtonBox[
                    DynamicBox[
                    ToBoxes[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100]]], 
                    ButtonFunction :> (Typeset`update$$ = AbsoluteTime[]), 
                    Appearance -> None, DefaultBaseStyle -> {}, 
                    BaseStyle -> {}, BaselinePosition -> (Center -> Center), 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                   DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateUpdate"], StandardForm]]], 
                  Annotation[#, 
                   Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateUpdate"]], "Tooltip"]& ], 
                 
                 PaneSelectorBox[{
                  "NameField" -> "", "Animator" -> "", "Autorun" -> "", 
                   "Menu" -> DynamicBox[
                    ToBoxes[
                    ActionMenu[
                    Tooltip[
                    RawBoxes[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "CirclePlusIcon"]]], 
                    If[False, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateBookmarks"]], 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateBookmarksAutorun"]]]], 
                    Flatten[{Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateHide"]] :> (Typeset`show$$ = 
                    False), Delimiter, Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulatePaste"]] :> 
                    Manipulate`PasteSnapshot[
                    Hold[Typeset`specs$$], 
                    Hold[
                    Clear[$CellContext`wavL, $CellContext`wavNL]; \
$CellContext`userguide = Column[{"", 
                    Row[{
                    Style[
                    "Welcome to \
\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\) !"]}, BaseStyle -> 
                    "Title"], 
                    Style[
                    "\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\
\"]\) is an open-source package for deriving and simulating reflected and \
transmitted optical second harmonic generation (SHG) of slab and multilayer \
systems. Optical SHG describes the process where two photons of frequency \
interact with one or more nonlinear media (crystals) to create a photon at 2\
\[Omega], so called the SHG process."], "", 
                    Row[{
                    Style[
                    "This package builds in the most general approach to both \
analytically and numerically solving the SHG response of crystals with \
arbitrary crystal symmetry, arbitrary orientation, and a complex dielectric \
function (complex refractive indices)."]}], "", 
                    Row[{
                    Style[
                    "Open \[Sharp]SHAARP.ml.nb in the Mathematica\
\[RegisteredTrademark] software on your computer"]}, BaseStyle -> "Section"], 
                    "", 
                    Row[{
                    Style["1. From the menu, "], 
                    Style["Evaluate", Background -> LightGray], 
                    Style[" -> "], 
                    Style["Evaluate Notebook", Background -> LightGray]}], 
                    Row[{
                    Style[
                    "    Note: This process will clear out all the \
definitions from other notebooks and enable the Notation package for the \
analytical solutions."]}], 
                    Row[{
                    Style[
                    "2. After a few seconds waiting time for initialization, \
you will see the main panel"]}], "", 
                    Style[
                    "Use the 'Functionality' control on the control panel to \
the left to set material properties and then view the desired output in the \
display panel.\nIn order to update figures in the display panel, you must \
press any of the three 'Update' button in green to the top right.", 20], 
                    Style["", 30], 
                    Row[{
                    Style["More Resources"]}, BaseStyle -> "Section"], 
                    Row[{
                    Style[
                    "For detailed information of \[Sharp]SHAARP.ml, please \
refer to the "], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/bzw133/SHAARP.ml"], 
                    ", ", 
                    Hyperlink[
                    Style["manual"], 
                    "https://shaarpml.readthedocs.io/en/latest/"], ", ", 
                    Hyperlink[
                    Style["tutorial video"], 
                    "https://www.youtube.com/watch?v=YiKRm6i7kNs"], 
                    Style[", and "], 
                    Hyperlink[
                    Style["FAQ"], 
                    "https://shaarpml.readthedocs.io/en/latest/FAQ/"], "."}], 
                    "", 
                    Row[{
                    Style[
                    "\[Sharp]SHAARP for single interface, \[Sharp]SHAARP.si : \
"], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/Rui-Zu/SHAARP"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si manual"], 
                    "https://shaarp.readthedocs.io/en/latest/"], "."}], "", 
                    Row[{
                    Style[
                    "If you used \[Sharp]SHAARP for your publications, please \
kindly cite us:  "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.ml"], 
                    "https://arxiv.org/abs/2307.01368"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si"], 
                    "https://www.nature.com/articles/s41524-022-00930-4"], 
                    "."}]}, Background -> White, Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Franklin Gothic", FontSize -> 
                    18}]; $CellContext`maxmaterialnumber = 10; 
                    Part[$CellContext`allmaterials, 
                    
                    Span[$CellContext`materialnumber$$ + 
                    2, $CellContext`maxmaterialnumber]] = 
                    Table[$CellContext`mbot, $CellContext`maxmaterialnumber - \
$CellContext`materialnumber$$ - 
                    1]; $CellContext`clearFigs[]; $CellContext`dgrid = Dynamic[
                    Grid[
                    $CellContext`generatingdfun1[$CellContext`matindex$$], 
                    Spacings -> {0, 0}, ItemSize -> All]]; 
                    Map[$CellContext`indexfun1, 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`zvecplots2d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; $CellContext`zvecplots3d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 10]; 
                    If[$CellContext`Functionality$$ != "User Guide", If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = Table[0, 8]]; 
                    If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]]; $CellContext`startupvar = 
                    1; {$CellContext`ap1, $CellContext`ap2, $CellContext`ap3, \
$CellContext`ap4, $CellContext`ap5, $CellContext`ap6, $CellContext`ap7, \
$CellContext`ap8} = {
                    If[
                    Dynamic[$CellContext`ptest1 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest2 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest3 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest4 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest5 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest6 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest7 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest8 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}]}; Null]; 
                    If[$CellContext`Functionality$$ != "User Guide", 
                    Map[$CellContext`ruihklfun, 
                    Range[$CellContext`materialnumber$$ + 2]]]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 15]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], $CellContext`\[Omega]0 = 
                    N[2 Pi ($CellContext`c0/$CellContext`\[Lambda]$$)]; 
                    If[Abs[$CellContext`theta$$] >= 89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`wInc = \
$CellContext`setwInc[$CellContext`\[Omega]0, 
                    
                    N[($CellContext`theta$$/180) 
                    Pi], $CellContext`\[CapitalDelta]\[Delta], $CellContext`\
\[CurlyPhi], $CellContext`n0]; $CellContext`extWave[$CellContext`wInc]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name = 
                    Part[$CellContext`allmaterials, #], HoldAll]]& , 
                    Range[$CellContext`materialnumber$$ + 2]]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    Function[$CellContext`name, 
                    $CellContext`extMater[$CellContext`name], HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`m1 = $CellContext`setMater[
                    $CellContext`Air[]]; \
$CellContext`extMater[$CellContext`m1]; $CellContext`mats = 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name, 
                    HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`noAnalytical = Apply[And, 
                    Map[NumberQ, 
                    Join[
                    Flatten[
                    Map[
                    Key[$CellContext`dC], $CellContext`mats]], 
                    Flatten[
                    Map[
                    Key[$CellContext`h], $CellContext`mats]]]]]; 
                    If[$CellContext`mrassumption$$ == 0, 
                    Which[$CellContext`winhAssumption$$ == 
                    0, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    1, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    2, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = True; 
                    Null]; $CellContext`flagJK = False; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    1, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = True; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    2, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = False; $CellContext`flagHH = 
                    True; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; 
                    Null]]]]; $CellContext`evaltime = 
                    0; $CellContext`StartTime = SessionTime[]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 25]; 
                    If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`FresnelList = {}; \
$CellContext`MFList = {}; If[
                    
                    And[$CellContext`fresnelcontrol$$, \
$CellContext`noAnalytical], $CellContext`FresnelList = 
                    Map[$CellContext`Fresnel[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    Range[0., 89., $CellContext`thetastep1$$]]]; If[
                    
                    And[$CellContext`makerfringescontrol$$, \
$CellContext`noAnalytical], If[Abs[$CellContext`maxtheta2$$] >= 
                    89, $CellContext`maxtheta2$$ = 
                    Sign[$CellContext`maxtheta2$$] 89.]; $CellContext`MFList = 
                    Map[$CellContext`MF[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    
                    Range[$CellContext`mintheta2$$, $CellContext`maxtheta2$$, \
$CellContext`thetastep2$$]]]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported for Maker \
fringes calcaulation;  Either analytical d or h is given! Abort!"]; Abort[]; 
                    Null]]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`SampleRotationList = {}; If[
                    
                    And[$CellContext`samplerotationcontrol$$, \
$CellContext`noAnalytical], If[Abs[$CellContext`theta$$] >= 
                    89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`SampleRotateList = 
                    Map[$CellContext`SampleRotate[$CellContext`mats, \
$CellContext`theta$$ 
                    Degree, #, $CellContext`samplerotatestep$$, \
$CellContext`mrassumption$$, $CellContext`materialnumber$$, \
$CellContext`delta$$, $CellContext`phi$$ Degree, $CellContext`psi$$ Degree]& , 
                    Range[0, 360, $CellContext`samplerotatestep$$]]; Null]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported;  Either \
analytical d or h is given! Abort!"]; Abort[]; Null]]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "Set Material Properties", $CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], \
$CellContext`heterostructureschematic = Show[
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    Rectangle[{0, -1.5}, {10, -2}], 
                    Text[
                    Style["", 15, Black, Bold], {1, -1.75}], 
                    Text[
                    Style["Air", 15, Black, Bold], {8.5, -1.75}]}], 
                    Graphics[
                    Text[
                    Style[ToString[
                    DownArrow["", ""]] <> "Incident Light, " <> 
                    ToString[$CellContext`\[Lambda]$$] <> "\[Mu]m" <> ToString[
                    DownArrow["", ""]], 20, Blue, Bold], {5, -1.75}]], 
                    Map[$CellContext`schematicfun, 
                    Reverse[
                    Map[{#, $CellContext`materialnumber$$ + 2}& , 
                    Range[2, $CellContext`materialnumber$$ + 1]]]], 
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    
                    Rectangle[{0, -$CellContext`materialnumber$$ - 2 - 0.1}, {
                    10, -$CellContext`materialnumber$$ - 3}], 
                    Text[
                    Style["", 15, Black, Bold], {
                    1, -$CellContext`materialnumber$$ - 2 - 0.25}], 
                    Text[
                    Style["Air", 15, Black, Bold], {
                    8.5, -$CellContext`materialnumber$$ - 2 - 0.25}]}], 
                    ImageSize -> {600, Automatic}]; $CellContext`zvecplots2d = 
                    Map[$CellContext`fzvecplots2d, $CellContext`allmaterials]; \
$CellContext`zvecplots3d = 
                    Map[$CellContext`fzvecplots3d, $CellContext`allmaterials]; 
                    Null]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", 
                    
                    If[$CellContext`noAnalytical, $CellContext`fig13d = 
                    Graphics3D[{
                    $CellContext`pltWav[$CellContext`wInc, {-1, 0, 0} - 
                    Normalize[
                    $CellContext`wInc[$CellContext`k]], Red], 
                    
                    Map[$CellContext`pltWav[#, {-1, 
                    0, $CellContext`materialnumber$$}, Red]& , 
                    Part[$CellContext`wavL, 2]], 
                    Map[$CellContext`pltWav[#, {-1, 0, 0}, Red]& , 
                    Part[$CellContext`wavL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, Apply[Sequence, #2] - 1}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, Apply[Sequence, #2] - 1}, Red]}& , 
                    Part[$CellContext`wavL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, 
                    Apply[Sequence, #2]}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, 
                    Apply[Sequence, #2]}, Red]}& , 
                    Part[$CellContext`wavL, 3]], 1]], 
                    
                    Map[$CellContext`pltWav[#, {
                    1, 0, $CellContext`materialnumber$$}, Blue]& , 
                    Part[$CellContext`wavNL, 2]], 
                    Map[$CellContext`pltWav[#, {1, 0, 0}, Blue]& , 
                    Part[$CellContext`wavNL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, Apply[Sequence, #2] - 1}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, Apply[Sequence, #2] - 1}, Blue]}& , 
                    Part[$CellContext`wavNL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, 
                    Apply[Sequence, #2]}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, 
                    Apply[Sequence, #2]}, Blue]}& , 
                    Part[$CellContext`wavNL, 3]], 1]], 
                    If[$CellContext`mrassumption$$ == 0, 
                    If[$CellContext`flagBackward, 
                    If[$CellContext`flagStandingWave, 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 7], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 8], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 9], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 10], {0 - 0.5, 0, Apply[Sequence, #2] - 0.5}, 
                    Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Map[Hyperplane[{0, 0, 1}, {0, 0, #}]& , 
                    Range[0, $CellContext`materialnumber$$]]]}, 
                    Evaluate[$CellContext`options2d], PlotLabel -> 
                    "\[Lambda] of \[Omega] wave (\[Mu]m) = " <> 
                    ToString[$CellContext`\[Lambda]$$]]; $CellContext`fig12d = 
                    Show[$CellContext`fig13d, ViewPoint -> {0, Infinity, 0}, 
                    Method -> {"RotationControl" -> 
                    None}]; {$CellContext`rmpw1, $CellContext`rmpw2} = 
                    Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 
                    2}]]; $CellContext`rules = {$CellContext`\[CapitalDelta]\
\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`factorRp, \
$CellContext`factorRs, $CellContext`factorTp, $CellContext`factorTs} = {1, 1, 
                    1, 1}; $CellContext`Imax = 1; 
                    If[$CellContext`samplerotationcontrol$$, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 2]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 3]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 4]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 5]]}]; Null, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    NMaxValue[
                    Re[$CellContext`dataRp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataRs], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTs], $CellContext`\[CurlyPhi]]}]; 
                    Null]; $CellContext`Imax = 
                    1.1 Max[$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs]; 
                    If[Abs[$CellContext`Imax] < 10^(-10), $CellContext`Imax = 
                    1]; $CellContext`factorRp = Max[1, 
                    If[Chop[$CellContext`MaxRp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRp], 
                    0]]; $CellContext`factorRs = Max[1, 
                    If[Chop[$CellContext`MaxRs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRs], 
                    0]]; $CellContext`factorTp = Max[1, 
                    If[Chop[$CellContext`MaxTp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTp], 
                    0]]; $CellContext`factorTs = Max[1, 
                    If[Chop[$CellContext`MaxTs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTs], 
                    0]]; $CellContext`polarRp = (
                    1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]; $CellContext`polarRs = (
                    1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]; $CellContext`polarTp = (
                    1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]; $CellContext`polarTs = (
                    1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]; $CellContext`polarRtot = (
                    1/$CellContext`Imax) $CellContext`factorRtot (
                    Re[$CellContext`dataRs] + 
                    Re[$CellContext`dataRp]); $CellContext`polarTtot = (
                    1/$CellContext`Imax) $CellContext`factorTtot (
                    Re[$CellContext`dataTs] + Re[$CellContext`dataTp]); If[
                    And[
                    Not[$CellContext`RotateAnalyzer$$], 
                    Not[$CellContext`RotatePolarizer$$]], 
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`figRp = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    2]/$CellContext`Imax) $CellContext`factorRp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    3]/$CellContext`Imax) $CellContext`factorRs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    4]/$CellContext`Imax) $CellContext`factorTp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    5]/$CellContext`Imax) $CellContext`factorTs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null, $CellContext`figRp = 
                    PolarPlot[$CellContext`polarRp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = 
                    PolarPlot[$CellContext`polarRs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[$CellContext`polarTp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = 
                    PolarPlot[$CellContext`polarTs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null], $CellContext`figRp = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; Null]; 
                    If[$CellContext`makerfringescontrol$$, \
$CellContext`listMFpara = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    2}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringespar = 
                    ListLinePlot[$CellContext`listMFpara, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]) \
(a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> "Times New Roman"}}, 
                    ImageSize -> Large]; $CellContext`listMFperp = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    3}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringesperp = 
                    ListLinePlot[$CellContext`listMFperp, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]+90\
\[Degree]) (a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> 
                    "Times New Roman"}}, ImageSize -> Large]; Null]; 
                    If[$CellContext`fresnelcontrol$$, \
$CellContext`listFresnel = Evaluate[
                    Re[
                    ReplaceAll[{
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    2}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    3}], $CellContext`\[CurlyPhi] -> 90 Degree], 
                    ReplaceAll[
                    Part[$CellContext`FresnelList, All, {1, 
                    4}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    5}], $CellContext`\[CurlyPhi] -> 
                    90 Degree]}, $CellContext`\[CapitalDelta]\[Delta] -> 
                    0]]]; $CellContext`figfresnel = 
                    ListLinePlot[$CellContext`listFresnel, 
                    PlotRange -> {{0, 90}, Automatic}, PlotStyle -> Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"]}, PlotLabel -> Style["Fresnel Transmittance/Reflectance", Black, 
                    20], ImageSize -> {400, 400}, PlotLegends -> {
                    Style["\!\(\*SubscriptBox[\(R\), \(p\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(R\), \(s\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(T\), \(p\)]\)", 20], 
                    Style[
                    "\!\(\*SubscriptBox[\(T\), \(s\)]\)", 
                    20]}]]; $CellContext`plot2geometry2d = \
$CellContext`fplot2geometry2d[$CellContext`theta$$]; \
$CellContext`plot2geometry3d = \
$CellContext`fplot2geometry3d[$CellContext`theta$$]; \
$CellContext`polarizationplot2d = \
$CellContext`fpolarizationplot2d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`polarizationplot3d = \
$CellContext`fpolarizationplot3d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`rwave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`rmpw2[$CellContext`A], 1] + Part[
                    $CellContext`rmpw1[$CellContext`A], 1], Part[
                    $CellContext`rmpw1[$CellContext`A], 2] + Part[
                    $CellContext`rmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`twave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`tmpw2[$CellContext`A], 1] + Part[
                    $CellContext`tmpw1[$CellContext`A], 1], Part[
                    $CellContext`tmpw1[$CellContext`A], 2] + Part[
                    $CellContext`tmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`iwave = Normalize[
                    ReplaceAll[{
                    Part[
                    $CellContext`wInc[$CellContext`A], 1], 
                    Part[
                    $CellContext`wInc[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`ellipticityfig = 
                    If[$CellContext`RotatePolarizer$$, 
                    ParametricPlot[{
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    
                    Part[$CellContext`iwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    
                    Part[$CellContext`rwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    
                    Part[$CellContext`twave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]], 
                    ParametricPlot[{
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    Part[$CellContext`iwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    Part[$CellContext`rwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    Part[$CellContext`twave, 2]}]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]]]; 
                    Null, $CellContext`clearFigs[]; Print[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 
                    32]]]]; If[$CellContext`Functionality$$ == 
                    "Partial Analytical Expressions", $CellContext`rules = \
{$CellContext`\[CapitalDelta]\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; {$CellContext`rmpw1L, $CellContext`rmpw2L} = 
                    Part[$CellContext`wavL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1L]; \
$CellContext`extWave[$CellContext`rmpw2L]; $CellContext`rSignalL = 
                    Part[$CellContext`rmpw1L[$CellContext`A] + \
$CellContext`rmpw2L[$CellContext`A], 
                    Span[1, 2]]; {$CellContext`tmpw1L, $CellContext`tmpw2L} = 
                    Part[$CellContext`wavL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1L]; \
$CellContext`extWave[$CellContext`tmpw2L]; $CellContext`tSignalL = 
                    Part[$CellContext`tmpw1L[$CellContext`A] + \
$CellContext`tmpw2L[$CellContext`A], 
                    Span[1, 2]]; $CellContext`dataRpL = 
                    Part[$CellContext`rSignalL, 1] Conjugate[
                    Part[$CellContext`rSignalL, 1]]; $CellContext`dataRsL = 
                    Part[$CellContext`rSignalL, 2] Conjugate[
                    Part[$CellContext`rSignalL, 2]]; $CellContext`dataTpL = 
                    Part[$CellContext`tSignalL, 1] Conjugate[
                    Part[$CellContext`tSignalL, 1]]; $CellContext`dataTsL = 
                    Part[$CellContext`tSignalL, 2] Conjugate[
                    
                    Part[$CellContext`tSignalL, 
                    2]]; {$CellContext`equationRpL, $CellContext`equationRsL, \
$CellContext`equationTpL, $CellContext`equationTsL} = 
                    Re[{$CellContext`dataRpL, $CellContext`dataRsL, \
$CellContext`dataTpL, $CellContext`dataTsL}]; {$CellContext`rmpw1, \
$CellContext`rmpw2} = Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 2}]]; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`equationRp, \
$CellContext`equationRs, $CellContext`equationTp, $CellContext`equationTs} = 
                    Re[{$CellContext`dataRp, $CellContext`dataRs, \
$CellContext`dataTp, $CellContext`dataTs}]; 
                    Null, {$CellContext`equationRpL, \
$CellContext`equationRsL, $CellContext`equationTpL, $CellContext`equationTsL} = 
                    ConstantArray[$CellContext`placeHolderEqus, 
                    4]; {$CellContext`equationRp, $CellContext`equationRs, \
$CellContext`equationTp, $CellContext`equationTs} = 
                    ConstantArray[$CellContext`placeHolderEqus, 4]; 
                    Null]; $CellContext`progress = 100; $CellContext`EndTime = 
                    SessionTime[]; $CellContext`evaltime = \
$CellContext`EndTime - $CellContext`StartTime; ""]], Delimiter, Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAddBookmark"]] :> 
                    If[DeleteCases[Typeset`specs$$, {
                    Blank[], Manipulate`Dump`ThisIsNotAControl}] === {}, 
                    Message[
                    MessageName[Manipulate, "novars"]], 
                    Typeset`bookmarkMode$$ = "NameField"], Delimiter, RawBoxes[
                    RowBox[{
                    RowBox[{
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "BookmarkBullet"]], "  "}], 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["FEStrings", "ManipulateInit"],
                     StandardForm]]}]] :> FixedPoint[
                    
                    Function[{}, {$CellContext`analyzeroffset$$ = 
                    0, $CellContext`delta$$ = 
                    0, $CellContext`fresnelcontrol$$ = 
                    False, $CellContext`Functionality$$ = 
                    "User Guide", $CellContext`makerfringescontrol$$ = 
                    False, $CellContext`materialnumber$$ = 
                    1, $CellContext`matindex$$ = 2, $CellContext`maxtheta2$$ = 
                    30, $CellContext`mintheta2$$ = -30, \
$CellContext`mrassumption$$ = 0, $CellContext`phi$$ = 0, $CellContext`psi$$ = 
                    0, $CellContext`RotateAnalyzer$$ = 
                    False, $CellContext`RotatePolarizer$$ = 
                    True, $CellContext`samplerotatestep$$ = 
                    10, $CellContext`samplerotationcontrol$$ = 
                    False, $CellContext`schematictype$$ = 
                    1, $CellContext`thetastep1$$ = 
                    2, $CellContext`thetastep2$$ = 1, $CellContext`theta$$ = 
                    45, $CellContext`winhAssumption$$ = 
                    1, $CellContext`\[Lambda]$$ = 1.064}], None, 3], 
                    If[Typeset`bookmarkList$$ === {}, {}, 
                    Map[
                    Function[Manipulate`Dump`bookmark$, 
                    If[
                    Manipulate`Dump`bookmark$ === Delimiter, 
                    Manipulate`Dump`bookmark$, RawBoxes[
                    RowBox[{
                    RowBox[{
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "BookmarkBullet"]], "  "}], 
                    First[Manipulate`Dump`bookmark$]}]] :> 
                    Part[Manipulate`Dump`bookmark$, 2]], HoldFirst], 
                    Typeset`bookmarkList$$]], Delimiter, Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulatePasteBookmarks"]] :> 
                    Manipulate`PasteBookmarks[
                    Hold[Typeset`specs$$], Typeset`bookmarkList$$], 
                    If[False, {}, {Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAnimate"]] :> 
                    Which[DeleteCases[Typeset`specs$$, {
                    Blank[], Manipulate`Dump`ThisIsNotAControl}] === {}, 
                    Message[
                    MessageName[Manipulate, "novars"]], 
                    Length[Typeset`bookmarkList$$] < 2, 
                    Message[
                    MessageName[Manipulate, "nobks"], 2], True, 
                    Typeset`animator$$ = ToBoxes[
                    Manipulate`BookmarksAnimator[
                    Hold[Typeset`specs$$], Typeset`bookmarkList$$, 
                    Dynamic[Typeset`animvar$$], Automatic, {1.5, True}]]; 
                    Typeset`bookmarkMode$$ = "Animator"], Delimiter, Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "ManipulateAutorun"]] :> 
                    If[DeleteCases[Typeset`specs$$, {
                    Blank[], Manipulate`Dump`ThisIsNotAControl}] === {}, 
                    Message[
                    MessageName[Manipulate, "novars"]], 
                    Typeset`animator$$ = ToBoxes[
                    Manipulate`AutorunAnimator[
                    Hold[Typeset`specs$$], 
                    Dynamic[Typeset`animvar$$], {Automatic}]]; 
                    Typeset`bookmarkMode$$ = "Autorun"]}]}], Appearance -> 
                    None, MenuAppearance -> "Menu"], StandardForm]]}, 
                  Dynamic[Typeset`bookmarkMode$$], ImageSize -> Automatic, 
                  FrameMargins -> 0]}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnSpacings -> 0.2, RowAlignments -> Baseline], 
              CacheGraphics -> False, StripOnInput -> False]}, {
             GridBox[{{
                ItemBox[
                 ItemBox[
                  TagBox[
                   StyleBox[
                    GridBox[{{
                    ItemBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    StyleBox["\"   \"", 30, StripOnInput -> False], 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"\[Sharp] SHAARP.ml\"", Bold, FontFamily -> "Castellar",
                     70, StripOnInput -> False]}, {"\"\""}, {
                    TemplateBox[{
                    StyleBox[
                    "\"S\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"econd \"", FontFamily -> "Centaur", 30, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"H\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"armonic \"", FontFamily -> "Centaur", 30, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"A\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"nalysis of\"", FontFamily -> "Centaur", 30, 
                    StripOnInput -> False]}, "RowDefault"]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"A\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"nisotropic \"", FontFamily -> "Centaur", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"R\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"otational \"", FontFamily -> "Centaur", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"P\"", Bold, FontFamily -> "Castellar", 30, 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"olarimetry\"", FontFamily -> "Centaur", 30, 
                    StripOnInput -> False]}, "RowDefault"]}, {
                    StyleBox["\" \"", 20, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    StyleBox["\"   \"", 60, StripOnInput -> False], 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Version 1.00\"", FontFamily -> "Franklin Gothic", 25, 
                    StripOnInput -> False]}, {
                    StyleBox["\"\"", 8, StripOnInput -> False]}, {
                    StyleBox[
                    "\"Copyright (C) 2023\"", FontFamily -> "Arial", 16, 
                    StripOnInput -> False]}, {
                    StyleBox["\"\"", 8, StripOnInput -> False]}, {
                    StyleBox[
                    "\"          Bo Wang, Rui Zu, Lincoln Weber, Akash \
Saha,\\n           Long-Qing Chen, and Venkatraman Gopalan\"", FontFamily -> 
                    "Franklin Gothic", 16, StripOnInput -> False]}, {
                    StyleBox["\"\"", 15, StripOnInput -> False]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"Tutorial video:\"", FontFamily -> "Franklin Gothic", 
                    18, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    "\" Youtube\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False], 
                    "https://www.youtube.com/watch?v=YiKRm6i7kNs"}, 
                    "HyperlinkURL"]}, "RowDefault"]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"This program comes with ABSOLUTELY NO WARRANTY; for \
details, \"", FontFamily -> "Franklin Gothic", 18, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    "\"click here\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False], 
                    "https://www.gnu.org/licenses/gpl-3.0.en.html"}, 
                    "HyperlinkURL"], 
                    StyleBox[
                    "\".\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False]}, "RowDefault"]}, {
                    StyleBox[
                    "\"This is free software, and you are welcome to \
redistribute it\"", FontFamily -> "Franklin Gothic", 14, StripOnInput -> 
                    False]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"under certain conditions; \"", FontFamily -> 
                    "Franklin Gothic", 14, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    "\"click here\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False], 
                    "https://www.gnu.org/licenses/gpl-3.0.en.html"}, 
                    "HyperlinkURL"], 
                    StyleBox[
                    "\" for details.\"", FontFamily -> "Franklin Gothic", 14, 
                    StripOnInput -> False]}, "RowDefault"]}, {
                    StyleBox["\"    \"", 20, StripOnInput -> False]}, {
                    TemplateBox[{
                    StyleBox[
                    "\"Please properly acknowledge this software.\"", 18, 
                    Bold, 
                    RGBColor[1, 0, 0], FontFamily -> "Franklin Gothic", 
                    StripOnInput -> False]}, "RowDefault"]}, {
                    StyleBox["\"\"", 20, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"]}, {
                    TagBox[
                    GridBox[{{
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    StyleBox[
                    "\"Functionality\"", 18, Bold, FontFamily -> 
                    "Franklin Gothic", StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    StyleBox[
                    "\"Functionality\"", 18, Bold, FontFamily -> 
                    "Franklin Gothic", StripOnInput -> False]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    GridBox[{{"\"\"", 
                    InterpretationBox[
                    StyleBox[
                    RowBox[{
                    SetterBox[
                    Dynamic[$CellContext`Functionality$$], {"User Guide"}, 
                    "\"User Guide\"", AutoAction -> False, Appearance -> 
                    Inherited], 
                    SetterBox[
                    Dynamic[$CellContext`Functionality$$], {
                    "Set Material Properties"}, "\"Set Material Properties\"",
                     AutoAction -> False, Appearance -> Inherited], 
                    SetterBox[
                    Dynamic[$CellContext`Functionality$$], {"SHG Simulation"},
                     "\"SHG Simulation\"", AutoAction -> False, Appearance -> 
                    Inherited], 
                    SetterBox[
                    Dynamic[$CellContext`Functionality$$], {
                    "Partial Analytical Expressions"}, 
                    "\"Partial Analytical Expressions\"", AutoAction -> False,
                     Appearance -> Inherited]}], Deployed -> True], 
                    SetterBar[
                    Dynamic[$CellContext`Functionality$$], {
                    "User Guide", "Set Material Properties", "SHG Simulation",
                     "Partial Analytical Expressions"}, AutoAction -> False, 
                    Appearance -> "Row"]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, ColumnAlignments -> {
                    Right, Left}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, BaseStyle -> {FontSize -> 16}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    DynamicBox[
                    ToBoxes[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Set Material Properties"], 
                    Column[{"", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`schematictype$$], {
                    1 -> Style["2D Schematics", Bold], 2 -> Style[
                    "3D Schematics", Bold]}, AutoAction -> False, Appearance -> 
                    "Row"]}}, ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Left, BaseStyle -> {FontSize -> 14}], ""], 
                    StandardForm]]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Style[
                    "Functionality", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Column[{
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`Functionality$$], {
                    "User Guide", "Set Material Properties", "SHG Simulation",
                     "Partial Analytical Expressions"}, AutoAction -> False, 
                    Appearance -> "Row"]}}, ColumnAlignments -> {Right, Left},
                     ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Left, BaseStyle -> {FontSize -> 16}], 
                    Dynamic[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Set Material Properties"], 
                    Column[{"", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`schematictype$$], {
                    1 -> Style["2D Schematics", Bold], 2 -> 
                    Style["3D Schematics", Bold]}, AutoAction -> False, 
                    Appearance -> "Row"]}}, ColumnAlignments -> {Right, Left},
                     ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Left, BaseStyle -> {FontSize -> 14}], ""]]}]}, 
                    True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Wavelength Setting", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Incident fundamental wavelength (\[Mu]m):\"", 
                    StripOnInput -> False]], 
                    InputField[
                    Dynamic[$CellContext`\[Lambda]$$], AutoAction -> False, 
                    FieldSize -> 6]}}, ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Left, BaseStyle -> {FontSize -> 15}]}, True], ""],
                     StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer Selection:", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Number of Layers: \"", Bold, StripOnInput -> False]], 
                    InputField[
                    Dynamic[$CellContext`materialnumber$$], AutoAction -> 
                    False, FieldSize -> 5]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    If[
                    Not[
                    IntegerQ[$CellContext`materialnumber$$]], 
                    Style[
                    "ERROR: The number of materials must be an integer.", Red,
                     Bold], 
                    If[$CellContext`materialnumber$$ < 1, 
                    Style[
                    "ERROR: You need to use at least one material.", Red, 
                    Bold], 
                    
                    If[$CellContext`materialnumber$$ > \
$CellContext`maxmaterialnumber - 2, 
                    Style[
                    "ERROR: The maximum number of materials is set at " <> 
                    ToString[$CellContext`maxmaterialnumber - 2] <> ".", Red, 
                    Bold], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Select the layer to Edit : \"", Bold, StripOnInput -> 
                    False]], 
                    Dynamic[
                    SetterBar[
                    Dynamic[$CellContext`matindex$$], 
                    Thread[
                    Range[2, $CellContext`materialnumber$$ + 1] -> 
                    Map[ToString, 
                    Range[$CellContext`materialnumber$$]]], AutoAction -> 
                    False, Appearance -> "Row"]]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     ""]]], 
                    Row[{
                    TextCell[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Name: "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`name]]], String, FieldSize -> 20, 
                    FieldHint -> "Enter name here"]}]}, Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Case Studies and Examples", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    Button[
                    "Blank linear", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`blankMaterL[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Blank nonlinear", $CellContext`mtemp = \
$CellContext`setMater[
                    $CellContext`blankMaterNL[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "BaTiO3", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`BTO[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button["Air", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Air[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "LiNbO3(11\!\(\*OverscriptBox[\(2\), \(_\)]\)0)", \
$CellContext`mtemp = $CellContext`setMater[
                    $CellContext`LiNbO3xCut\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "LiNbO3(0001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`LiNbO3zCut\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "KTP(100)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`KTPxCut[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "KTP(010)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`KTPyCut[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button[
                    "ZnO(0001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`ZnO001[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Pt(111)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Pt111\[Lambda]1550[$CellContext`\[Lambda]$$]]\
; Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "\!\(\*SubscriptBox[\(Al\), \
\(2\)]\)\!\(\*SubscriptBox[\(O\), \(3\)]\)(0001)", $CellContext`mtemp = \
$CellContext`setMater[
                    $CellContext`Al2O3$0001\[Lambda]1550[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "GaAs(111)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`GaAs111\[Lambda]800[$CellContext`\[Lambda]$$]\
]; Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}], 
                    Row[{
                    Button[
                    "X-cut Quartz", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Quartz$xCut\[Lambda]1064[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Quartz(001)", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Quartz$zCut\[Lambda]800[$CellContext`\
\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button[
                    "Au Coating", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`Au\[Lambda]800[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}], 
                    Button["MoS2", $CellContext`mtemp = $CellContext`setMater[
                    $CellContext`MoS2[$CellContext`\[Lambda]$$]]; 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`mtemp; Null, BaseStyle -> {FontSize -> 12}]}]}, Left, 
                    BaseStyle -> {FontSize -> 12, FontFamily -> 
                    "Times New Roman"}]}, True], ""], StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[$CellContext`Functionality$$ == "SHG Simulation", 
                    OpenerView[{
                    Style[
                    "Calculation Controls", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Generate Fresnel Coefficients Plot:\"", StripOnInput -> 
                    False]], 
                    Checkbox[
                    Dynamic[$CellContext`fresnelcontrol$$], AutoAction -> 
                    False]}}, ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Generate Maker Fringes Plot:\"", StripOnInput -> 
                    False]], 
                    Checkbox[
                    Dynamic[$CellContext`makerfringescontrol$$], AutoAction -> 
                    False]}}, ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], 
                    OpenerView[{
                    Style[
                    "Assumptions", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Style["Assumptions for Multiple Reflection: ", Bold, 14], 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`mrassumption$$], {
                    0 -> "Full Multiple Reflections (FMR)", 1 -> 
                    "Jerphagnon & Kurtz Assumption (No MR)", 2 -> 
                    "Herman & Hayden Assumption \n (MR only for 2\[Omega] \
Homo Waves)"}, AutoAction -> False, Appearance -> "Vertical"]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    If[$CellContext`mrassumption$$ == 0, 
                    Apply[Sequence, {
                    Style[
                    "Assumptions for 2\[Omega] Inhomogeneous Waves (for FMR \
only): ", Bold, 14], 
                    Grid[{{
                    RawBoxes["\" \""], 
                    SetterBar[
                    Dynamic[$CellContext`winhAssumption$$], {
                    0 -> "Forward waves only", 1 -> 
                    "Forward + Backward waves", 2 -> 
                    "Forward + Backward + Standing waves"}, AutoAction -> 
                    False, Appearance -> "Vertical"]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Apply[Sequence, {}]]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], 
                    OpenerView[{
                    Style[
                    "Polarimetry Settings", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Incident Angle \!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\
\) (\[Degree])", Bold, 14], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"\\!\\(\\*SuperscriptBox[\\(\[Theta]\\), \\(i\\)]\\) (\
\[Degree])\"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`theta$$], {0., 89.}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 340]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`theta$$], {0, 15, 30, 45, 60, 75}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`theta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left], 
                    Style[
                    "Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\" \", RowBox[{\"(\", \"\[NoBreak]\", \
TagBox[GridBox[{{RowBox[{\"Cos\", \"[\", \"\[CurlyPhi]\", \
\"]\"}]},{RowBox[{RowBox[{\"Sin\", \"[\", \"\[CurlyPhi]\", \"]\"}], \"\
\[Application]\", SuperscriptBox[\"e\", RowBox[{\"i\", RowBox[{\"\
\[DifferenceDelta]\", \
\"\[Delta]\"}]}]]}]},{\"0\"}},GridBoxAlignment->{\"Columns\" -> {{Center}}, \
\"Rows\" -> {{Baseline}}},GridBoxSpacings->{\"Columns\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \"Rows\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \"\[NoBreak]\", \")\"}]}],Function[BoxForm`e$, \
MatrixForm[BoxForm`e$]]]\)", Bold, 14], 
                    Column[{
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Incident Ellipticity \[CapitalDelta]\[Delta] \
\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", Bold, StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`delta$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 222]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Row[{"                                               ", 
                    InputField[
                    Dynamic[$CellContext`delta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}], 
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Incident Polarization \
\[CurlyPhi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", Bold, 
                    StripOnInput -> False]], 
                    SetterBar[
                    Dynamic[$CellContext`RotatePolarizer$$], {
                    True -> Style["Rotate Polarizer", Bold], False -> 
                    Style["Fix Polarizer", Bold]}, AutoAction -> False]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Dynamic[
                    If[$CellContext`RotatePolarizer$$, " ", 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Fixed Incident Polarization \
\[CurlyPhi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`phi$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 163]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`phi$$], {0, 45, 90, 135, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`phi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]], 
                    
                    Row[{"For \[CurlyPhi] and \[Psi], 0\[Degree] refers to p- \
polarized, 90\[Degree] refers to s- polarized"}, 
                    BaseStyle -> (FontSize -> 14)], 
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"SHG Polarization \
\[Psi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", Bold, StripOnInput -> 
                    False]], 
                    SetterBar[
                    Dynamic[$CellContext`RotateAnalyzer$$], {
                    True -> Style["Rotate Analyzer", Bold], False -> 
                    Style["Fix Analyzer", Bold]}, AutoAction -> False]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Dynamic[
                    If[$CellContext`RotateAnalyzer$$, 
                    If[$CellContext`RotatePolarizer$$, 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Analyzer-Polarizer Angle Offset \
\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`analyzeroffset$$], {0, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12)]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     ""], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Fixed SHG Polarization \
\[Psi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`psi$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 235]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`psi$$], {0, 45, 90, 135, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`psi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]], 
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Sample Rotation \
\[CurlyPhi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", Bold, 
                    StripOnInput -> False]], 
                    SetterBar[
                    Dynamic[$CellContext`samplerotationcontrol$$], {
                    True -> Style["Rotate Sample", Bold], False -> 
                    Style["Fix Sample", Bold]}, AutoAction -> False]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Dynamic[
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`RotatePolarizer$$ = False; $CellContext`RotateAnalyzer$$ = False; 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Step Size\\!\\(\\*SuperscriptBox[\\((\\), \
\\(o\\)]\\)): \"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`samplerotatestep$$], {0, 360}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 235]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`samplerotatestep$$], {10, 20, 30}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`samplerotatestep$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}]]]}, Alignment -> Left, 
                    BaseStyle -> {FontSize -> 12}]}, 
                    If[
                    Or[
                    
                    And[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`makerfringescontrol$$ == 
                    False], $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], True, False]], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[
                    
                    And[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`fresnelcontrol$$ == True], 
                    OpenerView[{
                    Style[
                    "Fresnel Coefficients Collection Settings", 18, Bold, 
                    FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Step Size \!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\)(\
\[Degree])", Bold, 14], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`thetastep1$$], {1, 2, 3, 4, 5}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`thetastep1$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}, 
                    Alignment -> Left, BaseStyle -> {FontSize -> 12}]}, 
                    If[$CellContext`fresnelcontrol$$, True, False]], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    If[$CellContext`Functionality$$ == "SHG Simulation", 
                    OpenerView[{
                    Style[
                    "Maker Fringes Collection Settings", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Minimum Incident Angle \
\!\(\*SuperscriptBox[\(\[Theta]\), \(min\)]\) (\[Degree])", Bold, 14], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"\\!\\(\\*SuperscriptBox[\\(\[Theta]\\), \\(min\\)]\\) \
(\[Degree])\"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`mintheta2$$], {-90, 0}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 340]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    
                    Dynamic[$CellContext`mintheta2$$], {-90, -75, -60, -45, \
-30, -15, 0}, AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`mintheta2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style[
                    "Maximum Incident Angle \
\!\(\*SuperscriptBox[\(\[Theta]\), \(max\)]\) (\[Degree])", Bold, 14], 
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"\\!\\(\\*SuperscriptBox[\\(\[Theta]\\), \\(max\\)]\\) \
(\[Degree])\"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`maxtheta2$$], {0, 90}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 340]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`maxtheta2$$], {0, 15, 30, 45, 60, 75,
                     90}, AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`maxtheta2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style["Scan Step Size (\[Degree])", Bold, 14], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`thetastep2$$], {1, 2, 5, 10, 15}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True],
                     "     ", 
                    InputField[
                    Dynamic[$CellContext`thetastep2$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}], 
                    Style[
                    "Incident Field E = \!\(\*SubscriptBox[\(E\), \
\(0\)]\)\!\(\*TagBox[RowBox[{\" \", RowBox[{\"(\", \"\[NoBreak]\", \
TagBox[GridBox[{{RowBox[{\"Cos\", \"[\", \"\[CurlyPhi]\", \
\"]\"}]},{RowBox[{RowBox[{\"Sin\", \"[\", \"\[CurlyPhi]\", \"]\"}], \"\
\[Application]\", SuperscriptBox[\"e\", RowBox[{\"i\", RowBox[{\"\
\[DifferenceDelta]\", \
\"\[Delta]\"}]}]]}]},{\"0\"}},GridBoxAlignment->{\"Columns\" -> {{Center}}, \
\"Rows\" -> {{Baseline}}},GridBoxSpacings->{\"Columns\" -> \
{Offset[0.27999999999999997`], {Offset[0.5599999999999999]}, \
Offset[0.27999999999999997`]}, \"Rows\" -> {Offset[0.2], {Offset[0.4]}, \
Offset[0.2]}}],Column], \"\[NoBreak]\", \")\"}]}],Function[BoxForm`e$, \
MatrixForm[BoxForm`e$]]]\)", Bold, 14], Null, 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Fixed Incident Polarization \
\[CurlyPhi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`phi$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 163]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`phi$$], {0, 45, 90, 135, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`phi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}], 
                    Column[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Fixed SHG Polarization \
\[Psi]\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> 
                    False]], 
                    Slider[
                    Dynamic[$CellContext`psi$$], {0, 360}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 235]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> True], 
                    Row[{"        ", 
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`psi$$], {0, 45, 90, 135, 180}, 
                    AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`psi$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}, 
                    Alignment -> Left]}], 
                    
                    Row[{"For \[CurlyPhi] and \[Psi], 0\[Degree] refers to p- \
polarized, 90\[Degree] refers to s- polarized"}, 
                    BaseStyle -> (FontSize -> 14)], 
                    Column[{
                    Row[{
                    Grid[{{
                    RawBoxes[
                    StyleBox[
                    "\"Incident Ellipticity \[CapitalDelta]\[Delta] \
\\!\\(\\*SuperscriptBox[\\((\\), \\(o\\)]\\)): \"", StripOnInput -> False]], 
                    Slider[
                    Dynamic[$CellContext`delta$$], {-90, 90}, AutoAction -> 
                    False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), ImageSize -> 222]}}, 
                    ColumnAlignments -> {Right, Left}, 
                    ItemSize -> {Automatic, Automatic}, StripOnInput -> 
                    True]}], 
                    Row[{
                    Grid[{{
                    RawBoxes["\"\""], 
                    SetterBar[
                    Dynamic[$CellContext`delta$$], {-90, -60, -30, 0, 30, 60, 
                    90}, AutoAction -> False, Appearance -> "Labeled", 
                    BaseStyle -> (FontSize -> 12), Background -> 
                    RGBColor[0.87, 0.94, 1], Appearance -> {
                    "Row", "FramedPalette"}]}}, ColumnAlignments -> {
                    Right, Left}, ItemSize -> {Automatic, Automatic}, 
                    StripOnInput -> True], "     ", 
                    InputField[
                    Dynamic[$CellContext`delta$$], 
                    BaseStyle -> (FontSize -> 12), FieldSize -> 5]}]}]}, 
                    Alignment -> Left, BaseStyle -> {FontSize -> 12}]}, 
                    If[$CellContext`makerfringescontrol$$, True, False]], ""],
                     StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Thickness", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    Dynamic[
                    If[
                    
                    Or[$CellContext`matindex$$ == 
                    1, $CellContext`matindex$$ == \
$CellContext`materialnumber$$ + 2], 
                    Style[
                    "(No input: thickness of first and last material is \
infinite)", 14], 
                    Row[{
                    Style["Slab Thickness (\[Mu]m)   "], 
                    Slider[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]]], {0, 1000}, ImageSize -> 150], 
                    "   ", 
                    InputField[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]]], BaseStyle -> (FontSize -> 12), 
                    FieldSize -> 4], "    ", 
                    Button["analytical h", Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`h]] = ToExpression[
                    "h" <> ToString[$CellContext`matindex$$ - 1]]]}]]]}, Left,
                     BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Crystal Structure", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    Style["Point Group:    ", Bold, 14], 
                    Style["Noncentrosymmetric -> ", 14], 
                    PopupMenu[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]]], {{
                    "1", {{11, 12, 13, 14, 15, 16}, {21, 22, 23, 24, 25, 
                    26}, {31, 32, 33, 34, 35, 36}}, 1} -> 
                    "1", {"2", {{0, 0, 0, 14, 0, 16}, {21, 22, 23, 0, 25, 
                    0}, {0, 0, 0, 34, 0, 36}}, 1} -> 
                    "2", {"m", {{11, 12, 13, 0, 15, 0}, {0, 0, 0, 24, 0, 
                    26}, {31, 32, 33, 0, 35, 0}}, 1} -> 
                    "m", {"mm2", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 24, 0, 0}, {
                    31, 32, 33, 0, 0, 0}}, 1} -> "mm2", {
                    "222", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, 25, 0}, {0, 0, 
                    0, 0, 0, 36}}, 1} -> "222", {
                    "3", {{11, -11, 0, 14, 15, -22}, {-22, 22, 0, 
                    15, -14, -11}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "3", {"32", {{11, -11, 0, 14, 0, 0}, {0, 0, 0, 
                    0, -14, -11}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "32", {"3m", {{0, 0, 0, 0, 15, -22}, {-22, 22, 0, 15, 0, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "3m", {"4", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 15, -14, 
                    0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "4", {"6", {{0, 0, 0, 14, 15, 0}, {0, 0, 0, 15, -14, 0}, {
                    31, 31, 33, 0, 0, 0}}, 1} -> "6", {
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)", {{0, 0, 0, 14, 15, 
                    0}, {0, 0, 0, -15, 14, 0}, {31, -31, 0, 0, 0, 36}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)", {
                    "4mm", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 0}, {31, 31,
                     33, 0, 0, 0}}, 1} -> "4mm", {
                    "6mm", {{0, 0, 0, 0, 15, 0}, {0, 0, 0, 15, 0, 0}, {31, 31,
                     33, 0, 0, 0}}, 1} -> "6mm", {
                    "422", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, -14, 0}, {0, 0, 
                    0, 0, 0, 0}}, 1} -> "422", {"622", {{0, 0, 0, 14, 0, 0}, {
                    0, 0, 0, 0, -14, 0}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "622", {"\!\(\*OverscriptBox[\(4\), \(_\)]\)2m", {{0, 0, 
                    0, 14, 0, 0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0, 0, 0, 36}}, 
                    1} -> "\!\(\*OverscriptBox[\(4\), \(_\)]\)2m", {
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)", {{11, -11, 0, 0, 
                    0, -22}, {-22, 22, 0, 0, 0, -11}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)", {
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)m2", {{0, 0, 0, 0, 
                    0, -22}, {-22, 22, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\!\(\*OverscriptBox[\(6\), \(_\)]\)m2", {
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)3m", {{0, 0, 0, 14, 0,
                     0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0, 0, 0, 14}}, 1} -> 
                    "\!\(\*OverscriptBox[\(4\), \(_\)]\)3m", {
                    "23", {{0, 0, 0, 14, 0, 0}, {0, 0, 0, 0, 14, 0}, {0, 0, 0,
                     0, 0, 14}}, 1} -> "23", {"\[Infinity]", {{0, 0, 0, 14, 
                    15, 0}, {0, 0, 0, 15, -14, 0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "\[Infinity]", {"\[Infinity]m", {{0, 0, 0, 0, 15, 0}, {0, 
                    0, 0, 15, 0, 0}, {31, 31, 33, 0, 0, 0}}, 1} -> 
                    "\[Infinity]m", {"\[Infinity]2", {{0, 0, 0, 14, 0, 0}, {0,
                     0, 0, 0, -14, 0}, {0, 0, 0, 0, 0, 0}}, 1} -> 
                    "\[Infinity]2"}, "--"]}], 
                    Row[{
                    Style["                                     "], 
                    Style["Centrosymmetric -> ", 14], 
                    PopupMenu[
                    Dynamic[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]]], {{
                    "\!\(\*OverscriptBox[\(1\), \(_\)]\)", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(1\), \(_\)]\)", {
                    "2/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> "2/m", {"mmm", {{0, 0, 0, 0, 0, 0}, {0, 
                    0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "mmm", {"4/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {
                    0, 0, 0, 0, 0, 0}}, 0} -> "4/m", {
                    "4/mmm", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 
                    0, 0, 0, 0}}, 0} -> "4/mmm", {
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)", {
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)m", {{0, 0, 0, 0, 0, 
                    0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\!\(\*OverscriptBox[\(3\), \(_\)]\)m", {
                    "6/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> "6/m", {"6/mmm", {{0, 0, 0, 0, 0, 0}, {0,
                     0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "6/mmm", {"m3", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {
                    0, 0, 0, 0, 0, 0}}, 0} -> "m3", {
                    "m3m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 
                    0, 0, 0}}, 0} -> "m3m", {"432", {{0, 0, 0, 0, 0, 0}, {0, 
                    0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "432", {"\[Infinity]/m", {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0,
                     0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]/m", {"\[Infinity]/mm", {{0, 0, 0, 0, 0, 0}, {
                    0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]/mm", {"\[Infinity]\[Infinity]", {{0, 0, 0, 0,
                     0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 0} -> 
                    "\[Infinity]\[Infinity]", {"\[Infinity]\[Infinity]m", {{0,
                     0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}, 
                    0} -> "\[Infinity]\[Infinity]m"}, "--"]}], 
                    Row[{
                    Style["a = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 1]], FieldSize -> 5], 
                    Style["    b = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 2]], FieldSize -> 5], 
                    Style["    c = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 3]], FieldSize -> 5]}], 
                    Row[{
                    Style["\[Alpha] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 4]], FieldSize -> 5], 
                    Style["    \[Beta] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 5]], FieldSize -> 5], 
                    Style["    \[Gamma] = ", 12], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`latcon]], 6]], FieldSize -> 5]}]}, Left, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Crystal Orientation", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Row[{
                    SetterBar[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1]], {
                    1 -> Style["Use Miller Indices (hkl)", Bold], 2 -> 
                    Style["Use Crystal Physics Direction", Bold]}]}], 
                    Row[{
                    Tooltip[
                    Style[
                    "?(hkl)", Black, Bold, 11], $CellContext`hklExplain], 
                    Spacer[3], 
                    Tooltip[
                    Style["?Crystal Physics", Black, Bold, 11], 
                    Dynamic[
                    Style[Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1] <> 
                    ": " <> $CellContext`ZSysExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]], "Times New Roman", 20]]]}], 
                    Dynamic[
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1] == 2, 
                    Column[{
                    Row[{
                    Style["Rotation Angle =  "], 
                    InputField[
                    Dynamic[$CellContext`rotationAngle], FieldSize -> 5], 
                    Style[" degree(\[Degree]) "], "    ", 
                    Button["Apply Rotation Angle", Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1]]]]; Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]]]; Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3] = Chop[
                    N[
                    Dot[{{
                    Cos[$CellContext`rotationAngle Degree], -
                    Sin[$CellContext`rotationAngle Degree], 0}, {
                    Sin[$CellContext`rotationAngle Degree], 
                    Cos[$CellContext`rotationAngle Degree], 0}, {0, 0, 1}}, 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 
                    3]]]]; $CellContext`rotationAngle = 0]}], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(1\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(2\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]], 
                    Tooltip[
                    Row[{
                    Style["\!\(\*SubscriptBox[\(Z\), \(3\)]\) = { "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 1]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 2]], FieldSize -> 
                    5], 
                    Style[" , "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3], 3]], FieldSize -> 
                    5], " }"}], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}], 
                    Column[{
                    Grid[{{
                    TextCell[
                    Style["(hkl) \[Rule] Crystal Surface Plane: ", Bold]]}, {
                    Row[{
                    Style["h = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 1]], FieldSize -> 
                    5], 
                    Style[",  k = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 2]], FieldSize -> 
                    5], 
                    Style[",  l = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 1], 3]], FieldSize -> 
                    5]}]}, {
                    TextCell[
                    Style[
                    "[hkl] \[Rule] Direction Perpendicular to Plane of \
Incidence", Bold]]}, {
                    Row[{
                    Style["h = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 1]], FieldSize -> 
                    5], 
                    Style[",  k = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 2]], FieldSize -> 
                    5], 
                    Style[",  l = "], 
                    InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 2], 2], 3]], FieldSize -> 
                    5]}]}}, Alignment -> Left]}]]], 
                    Column[{
                    Dynamic[
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 1] == 0, 
                    Row[{""}], 
                    Row[{
                    If[
                    And[Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]] == 0, Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] == 0, Chop[
                    Dot[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] == 0], "", 
                    Style[
                    "ERROR: The crystal physics basis vectors are not \
orthogonal.", Red, Bold]], 
                    If[Dot[
                    SetPrecision[
                    Chop[
                    Cross[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1], 
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]], 5], 
                    SetPrecision[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]], 5]] > 0, "", 
                    Style[
                    "ERROR: The crystal physics basis vectors are not \
right-handed.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 1]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(1\)]\) is not a unit \
vector.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 2]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(2\)]\) is not a unit \
vector.", Red, Bold]], 
                    If[SetPrecision[
                    Abs[Norm[
                    Chop[
                    Part[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`orientation]], 3], 3]]] - 1], 6] <= 
                    10^(-4), "", 
                    Style[
                    "ERROR: \!\(\*SubscriptBox[\(Z\), \(3\)]\) is not a unit \
vector.", Red, Bold]]}]]]}]}, Left, BaseStyle -> {FontSize -> 12}]}, True], 
                    ""], StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " Dielectric Tensors \
(\!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(\[Omega]\)], \
\(ij\)]\) and \!\(\*SubscriptBox[SuperscriptBox[\(\[CurlyEpsilon]\), \(2  \
\[Omega]\)], \(ij\)]\))", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Column[{
                    
                    Row[{" \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \
\(ij\), \(\[Omega]\)]\) = ", 
                    MatrixForm[{{"", 
                    Grid[
                    Map[InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`\[CurlyEpsilon]\[Omega]C]], 
                    Apply[Sequence, 
                    SlotSequence[1]]]], FieldSize -> 9]& , 
                    
                    Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 
                    3}, {$CellContext`j, 3}], {2}], Spacings -> {0, 0}, 
                    ItemSize -> All], ""}}]}], 
                    
                    Row[{"  \!\(\*SubsuperscriptBox[\(\[CurlyEpsilon]\), \(ij\
\), \(2  \[Omega]\)]\) = ", 
                    MatrixForm[{{"", 
                    Grid[
                    Map[InputField[
                    Dynamic[
                    Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`\[CurlyEpsilon]2\[Omega]C]], 
                    Apply[Sequence, 
                    SlotSequence[1]]]], FieldSize -> 9]& , 
                    
                    Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 
                    3}, {$CellContext`j, 3}], {2}], Spacings -> {0, 0}, 
                    ItemSize -> All], ""}}]}]}, 
                    BaseStyle -> {FontSize -> 12}]}, True], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " SHG Tensor \
(\!\(\*SubscriptBox[StyleBox[\"d\",FontSlant->\"Italic\"], \"ijk\"]\))" <> 
                    " pm/V", 18, Bold, FontFamily -> "Franklin Gothic"], 
                    Row[{"\!\(\*SubscriptBox[\(d\), \(ij\)]\)=   ", 
                    MatrixForm[{{"", $CellContext`dgrid, ""}}], "    ", 
                    Button["analytical dij", Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`dC]] = 
                    Map[ToExpression[ToString[#] <> "m" <> 
                    ToString[$CellContext`matindex$$ - 
                    1]]& , {{$CellContext`d11, $CellContext`d12, \
$CellContext`d13, $CellContext`d14, $CellContext`d15, $CellContext`d16}, \
{$CellContext`d21, $CellContext`d22, $CellContext`d23, $CellContext`d24, \
$CellContext`d25, $CellContext`d26}, {$CellContext`d31, $CellContext`d32, \
$CellContext`d33, $CellContext`d34, $CellContext`d35, $CellContext`d36}}, {
                    2}]; Map[$CellContext`indexfun1, 
                    Range[$CellContext`materialnumber$$ + 2]]; Null]}, 
                    BaseStyle -> {FontSize -> 12}]}, 
                    If[Part[
                    Part[
                    Part[$CellContext`allmaterials, $CellContext`matindex$$], 
                    Key[$CellContext`pg]], 3] == 1, True, False]], ""], 
                    StandardForm]]}, {
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    OpenerView[{
                    Style[
                    "Layer Properties Preset Values", 18, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Column[{
                    Style[
                    "Press update before setting any preset.", Blue, 14], 
                    Row[{
                    Button[
                    Style["Preset 1", Bold, Black], $CellContext`ptest1 = 1; 
                    If[
                    ValueQ[$CellContext`presetval1], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval1, $CellContext`presetval1 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap1], 
                    Spacer[5], 
                    Button[
                    Style["Preset 2", Bold, Black], $CellContext`ptest2 = 1; 
                    If[
                    ValueQ[$CellContext`presetval2], 
                    
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval2, $CellContext`presetval2 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap2], 
                    Spacer[5], 
                    Button[
                    Style["Preset 3", Bold, Black], $CellContext`ptest3 = 1; 
                    If[
                    ValueQ[$CellContext`presetval3], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval3, $CellContext`presetval3 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap3], 
                    Spacer[5], 
                    Button[
                    Style["Preset 4", Bold, Black], $CellContext`ptest4 = 1; 
                    If[
                    ValueQ[$CellContext`presetval4], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval4, $CellContext`presetval4 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap4], 
                    Spacer[5], 
                    Button[
                    Style["Preset 5", Bold, Black], $CellContext`ptest5 = 1; 
                    If[
                    ValueQ[$CellContext`presetval5], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval5, $CellContext`presetval5 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap5], 
                    Spacer[5], 
                    Button[
                    Style["Preset 6", Bold, Black], $CellContext`ptest6 = 1; 
                    If[
                    ValueQ[$CellContext`presetval6], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval6, $CellContext`presetval6 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap6], 
                    Spacer[5], 
                    Button[
                    Style["Preset 7", Bold, Black], $CellContext`ptest7 = 1; 
                    If[
                    ValueQ[$CellContext`presetval7], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval7, $CellContext`presetval7 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap7], 
                    Spacer[5], 
                    Button[
                    Style["Preset 8", Bold, Black], $CellContext`ptest8 = 1; 
                    If[
                    ValueQ[$CellContext`presetval8], 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$] = \
$CellContext`presetval8, $CellContext`presetval8 = 
                    Part[$CellContext`allmaterials, $CellContext`matindex$$]],
                     Appearance -> $CellContext`ap8], 
                    Spacer[5], 
                    Button[
                    Style[
                    "Clear Presets", 
                    Bold], {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = 
                    Table[0, 
                    8]; {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]; 
                    Clear[$CellContext`presetval1, $CellContext`presetval2, \
$CellContext`presetval3, $CellContext`presetval4, $CellContext`presetval5, \
$CellContext`presetval6, $CellContext`presetval7, $CellContext`presetval8], 
                    Appearance -> "DialogBox"], 
                    Spacer[5]}, BaseStyle -> {FontSize -> 12}], 
                    Row[{
                    Dynamic[
                    If[$CellContext`ptest1 == 1, 
                    Row[{"Preset 1 Label: " InputField[
                    Dynamic[$CellContext`plabel1], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest2 == 1, 
                    Row[{"Preset 2 Label: " InputField[
                    Dynamic[$CellContext`plabel2], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest3 == 1, 
                    Row[{"Preset 3 Label: " InputField[
                    Dynamic[$CellContext`plabel3], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest4 == 1, 
                    Row[{"Preset 4 Label: " InputField[
                    Dynamic[$CellContext`plabel4], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest5 == 1, 
                    Row[{"Preset 5 Label: " InputField[
                    Dynamic[$CellContext`plabel5], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest6 == 1, 
                    Row[{"Preset 6 Label: " InputField[
                    Dynamic[$CellContext`plabel6], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest7 == 1, 
                    Row[{"Preset 7 Label: " InputField[
                    Dynamic[$CellContext`plabel7], String]}], ""]], 
                    Dynamic[
                    If[$CellContext`ptest8 == 1, 
                    Row[{"Preset 8 Label: " InputField[
                    Dynamic[$CellContext`plabel8], String]}], ""]]}], 
                    Toggler[
                    Dynamic[$CellContext`presetpopuptextvar], {
                    0 -> "Show Preset Information", 1 -> "Hide"}, Background -> 
                    LightBlue, Alignment -> Center], 
                    Dynamic[
                    If[$CellContext`presetpopuptextvar == 1, 
                    Style["Presets currently set:   " <> If[
                    ValueQ[$CellContext`presetval1], "1   ", ""] <> If[
                    ValueQ[$CellContext`presetval2], "2   ", ""] <> If[
                    ValueQ[$CellContext`presetval3], "3   ", ""] <> If[
                    ValueQ[$CellContext`presetval4], "4   ", ""] <> If[
                    ValueQ[$CellContext`presetval5], "5   ", ""] <> If[
                    ValueQ[$CellContext`presetval6], "6   ", ""] <> If[
                    ValueQ[$CellContext`presetval7], "7   ", ""] <> If[
                    ValueQ[$CellContext`presetval8], "8   ", ""] <> If[
                    Or[
                    ValueQ[$CellContext`presetval1], 
                    ValueQ[$CellContext`presetval2], 
                    ValueQ[$CellContext`presetval3], 
                    ValueQ[$CellContext`presetval4], 
                    ValueQ[$CellContext`presetval5], 
                    ValueQ[$CellContext`presetval6], 
                    ValueQ[$CellContext`presetval7], 
                    ValueQ[$CellContext`presetval8]], "", "None."] <> 
                    "\nUpdate and press any of the preset buttons to save a \
material's \ninformation to that preset. \nPress the button again and update \
to apply those values.\nHide and show this message to refresh.", 
                    "Times New Roman", 12], ""]]}, 
                    BaseStyle -> {FontSize -> 12}]}, False], ""], 
                    StandardForm]]}, {
                    ButtonBox[
                    GraphicsBox[{
                    RGBColor[0, 1, 0], 
                    EdgeForm[
                    GrayLevel[0]], 
                    RectangleBox[{0, 0}, {1.8, 0.7}], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Update\"", 
                    GrayLevel[0], FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None, StripOnInput -> False], 
                    TraditionalForm]]]}, ImageSize -> 100], 
                    ButtonFunction :> (Typeset`update$$ = AbsoluteTime[]), 
                    Appearance -> None, Evaluator -> Automatic, Method -> 
                    "Preemptive"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, "Rows" -> {
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9], 
                    GrayLevel[1], 
                    GrayLevel[0.9]}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {"Columns" -> {{63}}}], "Column"], 
                    Background -> GrayLevel[1], ImageSize -> Automatic, 
                    StripOnInput -> False], 
                    FrameBox[
                    DynamicBox[
                    ToBoxes[
                    
                    If[$CellContext`Functionality$$ == 
                    "User Guide", $CellContext`userguide, 
                    
                    If[$CellContext`Functionality$$ == 
                    "Set Material Properties", 
                    Column[{
                    Style["", 30], 
                    Dynamic[
                    Grid[{{$CellContext`heterostructureschematic}, {
                    Grid[{{
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Column[{"Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " : ", 
                    Tooltip[
                    Part[$CellContext`zvecplots2d, $CellContext`matindex$$], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}], 
                    
                    Column[{"Layer " <> ToString[$CellContext`matindex$$ - 1] <> 
                    " : ", 
                    Tooltip[
                    Part[$CellContext`zvecplots3d, $CellContext`matindex$$], 
                    $CellContext`ZExplain[
                    Part[
                    
                    Part[$CellContext`allmaterials, \
$CellContext`matindex$$][$CellContext`pg], 1]]]}]]}}, 
                    BaseStyle -> {FontSize -> 24, FontFamily -> 
                    "Times New Roman"}]}}]], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
                    Alignment -> Center], 
                    If[$CellContext`Functionality$$ == "SHG Simulation", 
                    Column[{
                    Style["", 30], 
                    Grid[{{
                    OpenerView[{
                    Style[
                    "Optical Geometry and Polarization", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Grid[{{
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`fig12d, \
$CellContext`PropagationExplain], 
                    
                    Tooltip[$CellContext`fig13d, \
$CellContext`PropagationExplain]], 
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`plot2geometry2d, \
$CellContext`GeometryExplain], 
                    
                    Tooltip[$CellContext`plot2geometry3d, \
$CellContext`GeometryExplain]]}, {
                    
                    Tooltip[$CellContext`ellipticityfig, \
$CellContext`EllipticityExplain], 
                    If[$CellContext`schematictype$$ == 1, 
                    
                    Tooltip[$CellContext`polarizationplot2d, \
$CellContext`GeometryExplain], 
                    
                    Tooltip[$CellContext`polarizationplot3d, \
$CellContext`GeometryExplain]]}}]}, 
                    If[
                    
                    Or[$CellContext`makerfringescontrol$$, \
$CellContext`fresnelcontrol$$], False, True]]}, {
                    OpenerView[{
                    Style[
                    "Polar Plots", 30, Bold, FontFamily -> "Franklin Gothic"], 
                    Grid[{{
                    Text[
                    "Assumption Used: " <> Which[$CellContext`mrassumption$$ == 
                    0, "Full Multiple Reflection", \
$CellContext`mrassumption$$ == 1, 
                    "Jerphagnon & Kurtz Assumption", \
$CellContext`mrassumption$$ == 2, "Herman & Hayden Assumption"] <> "\n" <> 
                    "Consider Backward Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagBackward] <> "\n" <> 
                    "Consider Standing Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagStandingWave], 
                    BaseStyle -> {FontFamily -> "Times New Roman", FontSize -> 
                    22}], SpanFromLeft}, {
                    
                    Tooltip[$CellContext`figRp, \
$CellContext`PolarPlotExplain], 
                    
                    Tooltip[$CellContext`figRs, \
$CellContext`PolarPlotExplain]}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataRp]], Appearance -> "DialogBox", 
                    ImageSize -> 100], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataRs]], Appearance -> "DialogBox", 
                    ImageSize -> 100]}, {
                    
                    Tooltip[$CellContext`figTp, \
$CellContext`PolarPlotExplain], 
                    
                    Tooltip[$CellContext`figTs, \
$CellContext`PolarPlotExplain]}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataTp]], Appearance -> "DialogBox", 
                    ImageSize -> 100], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Bold], 
                    CopyToClipboard[
                    Re[$CellContext`dataTs]], Appearance -> "DialogBox", 
                    ImageSize -> 100]}}]}, 
                    If[
                    
                    Or[$CellContext`makerfringescontrol$$, \
$CellContext`fresnelcontrol$$], False, True]]}, {
                    OpenerView[{
                    Style[
                    "Fresnel Coefficients Figure", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    
                    Grid[{{$CellContext`figfresnel, SpanFromLeft, 
                    SpanFromLeft, SpanFromLeft}, {
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(R\), \(p\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 1]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(R\), \(s\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 2]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(T\), \(p\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 3]], Appearance -> 
                    "DialogBox", ImageSize -> 100], 
                    Button[
                    Style["Copy \!\(\*SubscriptBox[\(T\), \(s\)]\)", Bold], 
                    CopyToClipboard[
                    Part[$CellContext`listFresnel, 4]], Appearance -> 
                    "DialogBox", ImageSize -> 
                    100]}}]}, $CellContext`fresnelcontrol$$]}, {
                    OpenerView[{
                    Style[
                    "Maker Fringes Figures", 30, Bold, FontFamily -> 
                    "Franklin Gothic"], 
                    Grid[{{
                    Text[
                    "Assumption Used: " <> Which[$CellContext`mrassumption$$ == 
                    0, "Full Multiple Reflection", \
$CellContext`mrassumption$$ == 1, 
                    "Jerphagnon & Kurtz Assumption", \
$CellContext`mrassumption$$ == 2, "Herman & Hayden Assumption"] <> "\n" <> 
                    "Consider Backward Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagBackward] <> "\n" <> 
                    "Consider Standing Wave (for FMR only)? " <> 
                    ToString[$CellContext`flagStandingWave], 
                    BaseStyle -> {FontFamily -> "Times New Roman", FontSize -> 
                    22}], SpanFromLeft}, {
                    
                    GraphicsGrid[{{$CellContext`figmakerfringespar}, \
{$CellContext`figmakerfringesperp}}, ImageSize -> Large], SpanFromLeft}, {
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \
\[Omega]\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi])", Bold], 
                    CopyToClipboard[$CellContext`listMFpara], Appearance -> 
                    "DialogBox", ImageSize -> 200], 
                    Button[
                    Style[
                    "Copy \!\(\*SuperscriptBox[\(I\), \(T, 2  \
\[Omega]\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\),\[CurlyPhi],\[Psi]+90\[Degree])", Bold], 
                    CopyToClipboard[$CellContext`listMFperp], Appearance -> 
                    "DialogBox", ImageSize -> 
                    200]}}]}, $CellContext`makerfringescontrol$$]}}, 
                    Alignment -> Left], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None], 
                    If[
                    Not[$CellContext`noAnalytical], 
                    Framed[
                    Text[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 32, 
                    TextAlignment -> Center]]], 
                    Apply[Sequence, {}]]}, Alignment -> Center], 
                    
                    If[$CellContext`Functionality$$ == 
                    "Partial Analytical Expressions", 
                    Column[{
                    Style["", 30], 
                    Column[{
                    Text[
                    Style["For \[Omega] homogeneous waves:", Bold, Red, 32]], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRpL.mx"}]], $CellContext`equationRpL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRpL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "(\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRpL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRpL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRsL.mx"}]], $CellContext`equationRsL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRsL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRsL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRsL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTpL.mx"}]], $CellContext`equationTpL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTpL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTpL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTpL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTsL.mx"}]], $CellContext`equationTsL, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTsL], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTsL] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTsL]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Text[
                    Style[
                    "For 2\[Omega] homogeneous waves:", Bold, Blue, 32]], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRp.mx"}]], $CellContext`equationRp, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRp], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRp] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRp]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationRs.mx"}]], $CellContext`equationRs, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationRs], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationRs] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationRs]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTp.mx"}]], $CellContext`equationTp, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTp], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", Black, FontFamily -> "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTp] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTp]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}], 
                    Grid[{{
                    Button[
                    Style["Export", Bold], 
                    Quiet[
                    Export[
                    SystemDialogInput["FileSave", 
                    FileNameJoin[{
                    NotebookDirectory[], 
                    "equationTs.mx"}]], $CellContext`equationTs, "mx"]], 
                    Method -> "Queued"], 
                    Button[
                    Style["Copy", Bold], 
                    CopyToClipboard[$CellContext`equationTs], Appearance -> 
                    "DialogBox"], 
                    TextGrid[{{
                    TextCell[
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", Black, FontFamily -> 
                    "Times New Roman"]], 
                    TextCell[
                    Style[" = ", Black, FontFamily -> "Times New Roman"]], 
                    If[
                    ByteCount[$CellContext`equationTs] > \
$CellContext`equByteLimit, 
                    TextCell["Too long to show"], 
                    ExpressionCell[
                    MatrixForm[$CellContext`equationTs]]], 
                    TextCell[""], 
                    TextCell[""]}}]}}, Alignment -> {Left, Top}]}, 
                    BaseStyle -> {FontSize -> 14}], 
                    Style["", 30], $CellContext`timecell, 
                    Style["\n", 30], 
                    Button[
                    Graphics[{Green, 
                    EdgeForm[Black], 
                    Rectangle[{0, 0}, {1.8, 0.7}], 
                    Inset[
                    Style[
                    "Update", Black, FontFamily -> "Times", FontSize -> 
                    Scaled[0.27], Background -> None]]}, ImageSize -> 100], 
                    Typeset`update$$ = AbsoluteTime[], Appearance -> None]}, 
                    Alignment -> Center], ""]]]], StandardForm]], 
                    ImageSize -> {800, Automatic}, Alignment -> {Center, Top},
                     Background -> GrayLevel[1], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Alignment -> Left, StripOnInput -> False], 
                    "\[SpanFromLeft]"}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnAlignments -> {Right, Left}], "ManipulateLabel", 
                    StripOnInput -> False], {"ControlArea", Top}], 
                  Alignment -> {Automatic, Inherited}, StripOnInput -> False],
                  Background -> None, StripOnInput -> False]}, {
                ItemBox[
                 TagBox[
                  StyleBox[
                   PaneBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    Or[Typeset`skipInitDone$$, Typeset`initDone$$]], 
                    Refresh[
                    Typeset`update$$; 
                    Manipulate`SelectableTagBox[
                    Clear[$CellContext`wavL, $CellContext`wavNL]; \
$CellContext`userguide = Column[{"", 
                    Row[{
                    Style[
                    "Welcome to \
\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\) !"]}, BaseStyle -> 
                    "Title"], 
                    Style[
                    "\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\
\"]\) is an open-source package for deriving and simulating reflected and \
transmitted optical second harmonic generation (SHG) of slab and multilayer \
systems. Optical SHG describes the process where two photons of frequency \
interact with one or more nonlinear media (crystals) to create a photon at 2\
\[Omega], so called the SHG process."], "", 
                    Row[{
                    Style[
                    "This package builds in the most general approach to both \
analytically and numerically solving the SHG response of crystals with \
arbitrary crystal symmetry, arbitrary orientation, and a complex dielectric \
function (complex refractive indices)."]}], "", 
                    Row[{
                    Style[
                    "Open \[Sharp]SHAARP.ml.nb in the Mathematica\
\[RegisteredTrademark] software on your computer"]}, BaseStyle -> "Section"], 
                    "", 
                    Row[{
                    Style["1. From the menu, "], 
                    Style["Evaluate", Background -> LightGray], 
                    Style[" -> "], 
                    Style["Evaluate Notebook", Background -> LightGray]}], 
                    Row[{
                    Style[
                    "    Note: This process will clear out all the \
definitions from other notebooks and enable the Notation package for the \
analytical solutions."]}], 
                    Row[{
                    Style[
                    "2. After a few seconds waiting time for initialization, \
you will see the main panel"]}], "", 
                    Style[
                    "Use the 'Functionality' control on the control panel to \
the left to set material properties and then view the desired output in the \
display panel.\nIn order to update figures in the display panel, you must \
press any of the three 'Update' button in green to the top right.", 20], 
                    Style["", 30], 
                    Row[{
                    Style["More Resources"]}, BaseStyle -> "Section"], 
                    Row[{
                    Style[
                    "For detailed information of \[Sharp]SHAARP.ml, please \
refer to the "], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/bzw133/SHAARP.ml"], 
                    ", ", 
                    Hyperlink[
                    Style["manual"], 
                    "https://shaarpml.readthedocs.io/en/latest/"], ", ", 
                    Hyperlink[
                    Style["tutorial video"], 
                    "https://www.youtube.com/watch?v=YiKRm6i7kNs"], 
                    Style[", and "], 
                    Hyperlink[
                    Style["FAQ"], 
                    "https://shaarpml.readthedocs.io/en/latest/FAQ/"], "."}], 
                    "", 
                    Row[{
                    Style[
                    "\[Sharp]SHAARP for single interface, \[Sharp]SHAARP.si : \
"], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/Rui-Zu/SHAARP"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si manual"], 
                    "https://shaarp.readthedocs.io/en/latest/"], "."}], "", 
                    Row[{
                    Style[
                    "If you used \[Sharp]SHAARP for your publications, please \
kindly cite us:  "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.ml"], 
                    "https://arxiv.org/abs/2307.01368"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si"], 
                    "https://www.nature.com/articles/s41524-022-00930-4"], 
                    "."}]}, Background -> White, Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Franklin Gothic", FontSize -> 
                    18}]; $CellContext`maxmaterialnumber = 10; 
                    Part[$CellContext`allmaterials, 
                    
                    Span[$CellContext`materialnumber$$ + 
                    2, $CellContext`maxmaterialnumber]] = 
                    Table[$CellContext`mbot, $CellContext`maxmaterialnumber - \
$CellContext`materialnumber$$ - 
                    1]; $CellContext`clearFigs[]; $CellContext`dgrid = Dynamic[
                    Grid[
                    $CellContext`generatingdfun1[$CellContext`matindex$$], 
                    Spacings -> {0, 0}, ItemSize -> All]]; 
                    Map[$CellContext`indexfun1, 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`zvecplots2d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; $CellContext`zvecplots3d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 10]; 
                    If[$CellContext`Functionality$$ != "User Guide", If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = Table[0, 8]]; 
                    If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]]; $CellContext`startupvar = 
                    1; {$CellContext`ap1, $CellContext`ap2, $CellContext`ap3, \
$CellContext`ap4, $CellContext`ap5, $CellContext`ap6, $CellContext`ap7, \
$CellContext`ap8} = {
                    If[
                    Dynamic[$CellContext`ptest1 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest2 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest3 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest4 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest5 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest6 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest7 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest8 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}]}; Null]; 
                    If[$CellContext`Functionality$$ != "User Guide", 
                    Map[$CellContext`ruihklfun, 
                    Range[$CellContext`materialnumber$$ + 2]]]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 15]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], $CellContext`\[Omega]0 = 
                    N[2 Pi ($CellContext`c0/$CellContext`\[Lambda]$$)]; 
                    If[Abs[$CellContext`theta$$] >= 89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`wInc = \
$CellContext`setwInc[$CellContext`\[Omega]0, 
                    
                    N[($CellContext`theta$$/180) 
                    Pi], $CellContext`\[CapitalDelta]\[Delta], $CellContext`\
\[CurlyPhi], $CellContext`n0]; $CellContext`extWave[$CellContext`wInc]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name = 
                    Part[$CellContext`allmaterials, #], HoldAll]]& , 
                    Range[$CellContext`materialnumber$$ + 2]]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    Function[$CellContext`name, 
                    $CellContext`extMater[$CellContext`name], HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`m1 = $CellContext`setMater[
                    $CellContext`Air[]]; \
$CellContext`extMater[$CellContext`m1]; $CellContext`mats = 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name, 
                    HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`noAnalytical = Apply[And, 
                    Map[NumberQ, 
                    Join[
                    Flatten[
                    Map[
                    Key[$CellContext`dC], $CellContext`mats]], 
                    Flatten[
                    Map[
                    Key[$CellContext`h], $CellContext`mats]]]]]; 
                    If[$CellContext`mrassumption$$ == 0, 
                    Which[$CellContext`winhAssumption$$ == 
                    0, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    1, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    2, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = True; 
                    Null]; $CellContext`flagJK = False; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    1, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = True; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    2, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = False; $CellContext`flagHH = 
                    True; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; 
                    Null]]]]; $CellContext`evaltime = 
                    0; $CellContext`StartTime = SessionTime[]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 25]; 
                    If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`FresnelList = {}; \
$CellContext`MFList = {}; If[
                    
                    And[$CellContext`fresnelcontrol$$, \
$CellContext`noAnalytical], $CellContext`FresnelList = 
                    Map[$CellContext`Fresnel[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    Range[0., 89., $CellContext`thetastep1$$]]]; If[
                    
                    And[$CellContext`makerfringescontrol$$, \
$CellContext`noAnalytical], If[
                    Abs[$CellContext`maxtheta2$$] >= 
                    89, $CellContext`maxtheta2$$ = 
                    Sign[$CellContext`maxtheta2$$] 89.]; $CellContext`MFList = 
                    Map[$CellContext`MF[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    
                    Range[$CellContext`mintheta2$$, $CellContext`maxtheta2$$, \
$CellContext`thetastep2$$]]]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported for Maker \
fringes calcaulation;  Either analytical d or h is given! Abort!"]; Abort[]; 
                    Null]]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`SampleRotationList = {}; If[
                    
                    And[$CellContext`samplerotationcontrol$$, \
$CellContext`noAnalytical], If[
                    Abs[$CellContext`theta$$] >= 89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`SampleRotateList = 
                    Map[$CellContext`SampleRotate[$CellContext`mats, \
$CellContext`theta$$ 
                    Degree, #, $CellContext`samplerotatestep$$, \
$CellContext`mrassumption$$, $CellContext`materialnumber$$, \
$CellContext`delta$$, $CellContext`phi$$ Degree, $CellContext`psi$$ Degree]& , 
                    Range[0, 360, $CellContext`samplerotatestep$$]]; Null]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported;  Either \
analytical d or h is given! Abort!"]; Abort[]; Null]]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "Set Material Properties", $CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], \
$CellContext`heterostructureschematic = Show[
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    Rectangle[{0, -1.5}, {10, -2}], 
                    Text[
                    Style["", 15, Black, Bold], {1, -1.75}], 
                    Text[
                    Style["Air", 15, Black, Bold], {8.5, -1.75}]}], 
                    Graphics[
                    Text[
                    Style[ToString[
                    DownArrow["", ""]] <> "Incident Light, " <> 
                    ToString[$CellContext`\[Lambda]$$] <> "\[Mu]m" <> ToString[
                    DownArrow["", ""]], 20, Blue, Bold], {5, -1.75}]], 
                    Map[$CellContext`schematicfun, 
                    Reverse[
                    Map[{#, $CellContext`materialnumber$$ + 2}& , 
                    Range[2, $CellContext`materialnumber$$ + 1]]]], 
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    
                    Rectangle[{0, -$CellContext`materialnumber$$ - 2 - 0.1}, {
                    10, -$CellContext`materialnumber$$ - 3}], 
                    Text[
                    Style["", 15, Black, Bold], {
                    1, -$CellContext`materialnumber$$ - 2 - 0.25}], 
                    Text[
                    Style["Air", 15, Black, Bold], {
                    8.5, -$CellContext`materialnumber$$ - 2 - 0.25}]}], 
                    ImageSize -> {600, Automatic}]; $CellContext`zvecplots2d = 
                    Map[$CellContext`fzvecplots2d, $CellContext`allmaterials]; \
$CellContext`zvecplots3d = 
                    Map[$CellContext`fzvecplots3d, $CellContext`allmaterials]; 
                    Null]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", 
                    If[$CellContext`noAnalytical, $CellContext`fig13d = 
                    Graphics3D[{
                    $CellContext`pltWav[$CellContext`wInc, {-1, 0, 0} - 
                    Normalize[
                    $CellContext`wInc[$CellContext`k]], Red], 
                    
                    Map[$CellContext`pltWav[#, {-1, 
                    0, $CellContext`materialnumber$$}, Red]& , 
                    Part[$CellContext`wavL, 2]], 
                    Map[$CellContext`pltWav[#, {-1, 0, 0}, Red]& , 
                    Part[$CellContext`wavL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, Apply[Sequence, #2] - 1}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, Apply[Sequence, #2] - 1}, Red]}& , 
                    Part[$CellContext`wavL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, 
                    Apply[Sequence, #2]}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, 
                    Apply[Sequence, #2]}, Red]}& , 
                    Part[$CellContext`wavL, 3]], 1]], 
                    
                    Map[$CellContext`pltWav[#, {
                    1, 0, $CellContext`materialnumber$$}, Blue]& , 
                    Part[$CellContext`wavNL, 2]], 
                    Map[$CellContext`pltWav[#, {1, 0, 0}, Blue]& , 
                    Part[$CellContext`wavNL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, Apply[Sequence, #2] - 1}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, Apply[Sequence, #2] - 1}, Blue]}& , 
                    Part[$CellContext`wavNL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, 
                    Apply[Sequence, #2]}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, 
                    Apply[Sequence, #2]}, Blue]}& , 
                    Part[$CellContext`wavNL, 3]], 1]], 
                    If[$CellContext`mrassumption$$ == 0, 
                    If[$CellContext`flagBackward, 
                    If[$CellContext`flagStandingWave, 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 7], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 8], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 9], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 10], {0 - 0.5, 0, Apply[Sequence, #2] - 0.5}, 
                    Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Map[Hyperplane[{0, 0, 1}, {0, 0, #}]& , 
                    Range[0, $CellContext`materialnumber$$]]]}, 
                    Evaluate[$CellContext`options2d], PlotLabel -> 
                    "\[Lambda] of \[Omega] wave (\[Mu]m) = " <> 
                    ToString[$CellContext`\[Lambda]$$]]; $CellContext`fig12d = 
                    Show[$CellContext`fig13d, ViewPoint -> {0, Infinity, 0}, 
                    Method -> {"RotationControl" -> 
                    None}]; {$CellContext`rmpw1, $CellContext`rmpw2} = 
                    Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 
                    2}]]; $CellContext`rules = {$CellContext`\[CapitalDelta]\
\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`factorRp, \
$CellContext`factorRs, $CellContext`factorTp, $CellContext`factorTs} = {1, 1, 
                    1, 1}; $CellContext`Imax = 1; 
                    If[$CellContext`samplerotationcontrol$$, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 2]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 3]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 4]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 5]]}]; Null, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    NMaxValue[
                    Re[$CellContext`dataRp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataRs], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTs], $CellContext`\[CurlyPhi]]}]; 
                    Null]; $CellContext`Imax = 
                    1.1 Max[$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs]; 
                    If[Abs[$CellContext`Imax] < 10^(-10), $CellContext`Imax = 
                    1]; $CellContext`factorRp = Max[1, 
                    If[Chop[$CellContext`MaxRp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRp], 
                    0]]; $CellContext`factorRs = Max[1, 
                    If[Chop[$CellContext`MaxRs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRs], 
                    0]]; $CellContext`factorTp = Max[1, 
                    If[Chop[$CellContext`MaxTp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTp], 
                    0]]; $CellContext`factorTs = Max[1, 
                    If[Chop[$CellContext`MaxTs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTs], 
                    0]]; $CellContext`polarRp = (
                    1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]; $CellContext`polarRs = (
                    1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]; $CellContext`polarTp = (
                    1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]; $CellContext`polarTs = (
                    1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]; $CellContext`polarRtot = (
                    1/$CellContext`Imax) $CellContext`factorRtot (
                    Re[$CellContext`dataRs] + 
                    Re[$CellContext`dataRp]); $CellContext`polarTtot = (
                    1/$CellContext`Imax) $CellContext`factorTtot (
                    Re[$CellContext`dataTs] + Re[$CellContext`dataTp]); If[
                    And[
                    Not[$CellContext`RotateAnalyzer$$], 
                    Not[$CellContext`RotatePolarizer$$]], 
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`figRp = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    2]/$CellContext`Imax) $CellContext`factorRp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    3]/$CellContext`Imax) $CellContext`factorRs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    4]/$CellContext`Imax) $CellContext`factorTp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    5]/$CellContext`Imax) $CellContext`factorTs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null, $CellContext`figRp = 
                    PolarPlot[$CellContext`polarRp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = 
                    PolarPlot[$CellContext`polarRs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[$CellContext`polarTp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = 
                    PolarPlot[$CellContext`polarTs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null], $CellContext`figRp = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; Null]; 
                    If[$CellContext`makerfringescontrol$$, \
$CellContext`listMFpara = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    2}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringespar = 
                    ListLinePlot[$CellContext`listMFpara, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]) \
(a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> "Times New Roman"}}, 
                    ImageSize -> Large]; $CellContext`listMFperp = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    3}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringesperp = 
                    ListLinePlot[$CellContext`listMFperp, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]+90\
\[Degree]) (a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> 
                    "Times New Roman"}}, ImageSize -> Large]; Null]; 
                    If[$CellContext`fresnelcontrol$$, \
$CellContext`listFresnel = Evaluate[
                    Re[
                    ReplaceAll[{
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    2}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    3}], $CellContext`\[CurlyPhi] -> 90 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    4}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    5}], $CellContext`\[CurlyPhi] -> 
                    90 Degree]}, $CellContext`\[CapitalDelta]\[Delta] -> 
                    0]]]; $CellContext`figfresnel = 
                    ListLinePlot[$CellContext`listFresnel, 
                    PlotRange -> {{0, 90}, Automatic}, PlotStyle -> Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"]}, PlotLabel -> Style["Fresnel Transmittance/Reflectance", Black, 
                    20], ImageSize -> {400, 400}, PlotLegends -> {
                    Style["\!\(\*SubscriptBox[\(R\), \(p\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(R\), \(s\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(T\), \(p\)]\)", 20], 
                    Style[
                    "\!\(\*SubscriptBox[\(T\), \(s\)]\)", 
                    20]}]]; $CellContext`plot2geometry2d = \
$CellContext`fplot2geometry2d[$CellContext`theta$$]; \
$CellContext`plot2geometry3d = \
$CellContext`fplot2geometry3d[$CellContext`theta$$]; \
$CellContext`polarizationplot2d = \
$CellContext`fpolarizationplot2d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`polarizationplot3d = \
$CellContext`fpolarizationplot3d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`rwave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`rmpw2[$CellContext`A], 1] + Part[
                    $CellContext`rmpw1[$CellContext`A], 1], Part[
                    $CellContext`rmpw1[$CellContext`A], 2] + Part[
                    $CellContext`rmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`twave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`tmpw2[$CellContext`A], 1] + Part[
                    $CellContext`tmpw1[$CellContext`A], 1], Part[
                    $CellContext`tmpw1[$CellContext`A], 2] + Part[
                    $CellContext`tmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`iwave = Normalize[
                    ReplaceAll[{
                    Part[
                    $CellContext`wInc[$CellContext`A], 1], 
                    Part[
                    $CellContext`wInc[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`ellipticityfig = 
                    If[$CellContext`RotatePolarizer$$, 
                    ParametricPlot[{
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    
                    Part[$CellContext`iwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    
                    Part[$CellContext`rwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    
                    Part[$CellContext`twave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]], 
                    ParametricPlot[{
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    Part[$CellContext`iwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    Part[$CellContext`rwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    Part[$CellContext`twave, 2]}]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]]]; 
                    Null, $CellContext`clearFigs[]; Print[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 
                    32]]]]; If[$CellContext`Functionality$$ == 
                    "Partial Analytical Expressions", $CellContext`rules = \
{$CellContext`\[CapitalDelta]\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; {$CellContext`rmpw1L, $CellContext`rmpw2L} = 
                    Part[$CellContext`wavL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1L]; \
$CellContext`extWave[$CellContext`rmpw2L]; $CellContext`rSignalL = 
                    Part[$CellContext`rmpw1L[$CellContext`A] + \
$CellContext`rmpw2L[$CellContext`A], 
                    Span[1, 2]]; {$CellContext`tmpw1L, $CellContext`tmpw2L} = 
                    Part[$CellContext`wavL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1L]; \
$CellContext`extWave[$CellContext`tmpw2L]; $CellContext`tSignalL = 
                    Part[$CellContext`tmpw1L[$CellContext`A] + \
$CellContext`tmpw2L[$CellContext`A], 
                    Span[1, 2]]; $CellContext`dataRpL = 
                    Part[$CellContext`rSignalL, 1] Conjugate[
                    Part[$CellContext`rSignalL, 1]]; $CellContext`dataRsL = 
                    Part[$CellContext`rSignalL, 2] Conjugate[
                    Part[$CellContext`rSignalL, 2]]; $CellContext`dataTpL = 
                    Part[$CellContext`tSignalL, 1] Conjugate[
                    Part[$CellContext`tSignalL, 1]]; $CellContext`dataTsL = 
                    Part[$CellContext`tSignalL, 2] Conjugate[
                    
                    Part[$CellContext`tSignalL, 
                    2]]; {$CellContext`equationRpL, $CellContext`equationRsL, \
$CellContext`equationTpL, $CellContext`equationTsL} = 
                    Re[{$CellContext`dataRpL, $CellContext`dataRsL, \
$CellContext`dataTpL, $CellContext`dataTsL}]; {$CellContext`rmpw1, \
$CellContext`rmpw2} = Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 2}]]; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`equationRp, \
$CellContext`equationRs, $CellContext`equationTp, $CellContext`equationTs} = 
                    Re[{$CellContext`dataRp, $CellContext`dataRs, \
$CellContext`dataTp, $CellContext`dataTs}]; 
                    Null, {$CellContext`equationRpL, \
$CellContext`equationRsL, $CellContext`equationTpL, $CellContext`equationTsL} = 
                    ConstantArray[$CellContext`placeHolderEqus, 
                    4]; {$CellContext`equationRp, $CellContext`equationRs, \
$CellContext`equationTp, $CellContext`equationTs} = 
                    ConstantArray[$CellContext`placeHolderEqus, 4]; 
                    Null]; $CellContext`progress = 100; $CellContext`EndTime = 
                    SessionTime[]; $CellContext`evaltime = \
$CellContext`EndTime - $CellContext`StartTime; ""], 
                    TrackedSymbols :> {Typeset`update$$}], 
                    Manipulate`Dump`initDisplay[True]], StandardForm], 
                    SynchronousUpdating -> Automatic, ImageSizeCache -> 
                    Dynamic[Typeset`size$$]], ImageMargins -> 10], Deployed -> 
                   False, ScriptLevel -> 0, 
                   GraphicsBoxOptions -> {PreserveImageOptions -> True}, 
                   Graphics3DBoxOptions -> {PreserveImageOptions -> True}, 
                   StripOnInput -> False], Identity, Selectable -> False, 
                  Editable -> False], Alignment -> {Left, Center}, ItemSize -> 
                 Automatic, StripOnInput -> False]}}, AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              ColumnAlignments -> Left, GridFrame -> False, GridFrameMargins -> 
              1, RowSpacings -> 2, RowAlignments -> Top], "\[SpanFromLeft]"}},
            AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           ColumnAlignments -> {Left, Right}, RowSpacings -> Dynamic[
             FEPrivate`If[
              FEPrivate`SameQ[Typeset`bookmarkMode$$, "Menu"], 0, 1.]]], 
         False -> TagBox[
           TooltipBox[
            ButtonBox[
             GridBox[{{
                ItemBox[
                 TagBox[
                  StyleBox[
                   PaneBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    Or[Typeset`skipInitDone$$, Typeset`initDone$$]], 
                    Refresh[
                    Typeset`update$$; 
                    Manipulate`SelectableTagBox[
                    Clear[$CellContext`wavL, $CellContext`wavNL]; \
$CellContext`userguide = Column[{"", 
                    Row[{
                    Style[
                    "Welcome to \
\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\"]\) !"]}, BaseStyle -> 
                    "Title"], 
                    Style[
                    "\[Sharp]SHAARP.\!\(\*StyleBox[\"ml\",FontSlant->\"Italic\
\"]\) is an open-source package for deriving and simulating reflected and \
transmitted optical second harmonic generation (SHG) of slab and multilayer \
systems. Optical SHG describes the process where two photons of frequency \
interact with one or more nonlinear media (crystals) to create a photon at 2\
\[Omega], so called the SHG process."], "", 
                    Row[{
                    Style[
                    "This package builds in the most general approach to both \
analytically and numerically solving the SHG response of crystals with \
arbitrary crystal symmetry, arbitrary orientation, and a complex dielectric \
function (complex refractive indices)."]}], "", 
                    Row[{
                    Style[
                    "Open \[Sharp]SHAARP.ml.nb in the Mathematica\
\[RegisteredTrademark] software on your computer"]}, BaseStyle -> "Section"], 
                    "", 
                    Row[{
                    Style["1. From the menu, "], 
                    Style["Evaluate", Background -> LightGray], 
                    Style[" -> "], 
                    Style["Evaluate Notebook", Background -> LightGray]}], 
                    Row[{
                    Style[
                    "    Note: This process will clear out all the \
definitions from other notebooks and enable the Notation package for the \
analytical solutions."]}], 
                    Row[{
                    Style[
                    "2. After a few seconds waiting time for initialization, \
you will see the main panel"]}], "", 
                    Style[
                    "Use the 'Functionality' control on the control panel to \
the left to set material properties and then view the desired output in the \
display panel.\nIn order to update figures in the display panel, you must \
press any of the three 'Update' button in green to the top right.", 20], 
                    Style["", 30], 
                    Row[{
                    Style["More Resources"]}, BaseStyle -> "Section"], 
                    Row[{
                    Style[
                    "For detailed information of \[Sharp]SHAARP.ml, please \
refer to the "], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/bzw133/SHAARP.ml"], 
                    ", ", 
                    Hyperlink[
                    Style["manual"], 
                    "https://shaarpml.readthedocs.io/en/latest/"], ", ", 
                    Hyperlink[
                    Style["tutorial video"], 
                    "https://www.youtube.com/watch?v=YiKRm6i7kNs"], 
                    Style[", and "], 
                    Hyperlink[
                    Style["FAQ"], 
                    "https://shaarpml.readthedocs.io/en/latest/FAQ/"], "."}], 
                    "", 
                    Row[{
                    Style[
                    "\[Sharp]SHAARP for single interface, \[Sharp]SHAARP.si : \
"], 
                    Hyperlink[
                    Style["GitHub"], "https://github.com/Rui-Zu/SHAARP"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si manual"], 
                    "https://shaarp.readthedocs.io/en/latest/"], "."}], "", 
                    Row[{
                    Style[
                    "If you used \[Sharp]SHAARP for your publications, please \
kindly cite us:  "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.ml"], 
                    "https://arxiv.org/abs/2307.01368"], 
                    Style[", "], 
                    Hyperlink[
                    Style["\[Sharp]SHAARP.si"], 
                    "https://www.nature.com/articles/s41524-022-00930-4"], 
                    "."}]}, Background -> White, Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Franklin Gothic", FontSize -> 
                    18}]; $CellContext`maxmaterialnumber = 10; 
                    Part[$CellContext`allmaterials, 
                    
                    Span[$CellContext`materialnumber$$ + 
                    2, $CellContext`maxmaterialnumber]] = 
                    Table[$CellContext`mbot, $CellContext`maxmaterialnumber - \
$CellContext`materialnumber$$ - 
                    1]; $CellContext`clearFigs[]; $CellContext`dgrid = Dynamic[
                    Grid[
                    $CellContext`generatingdfun1[$CellContext`matindex$$], 
                    Spacings -> {0, 0}, ItemSize -> All]]; 
                    Map[$CellContext`indexfun1, 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`zvecplots2d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; $CellContext`zvecplots3d = 
                    ConstantArray[$CellContext`placeHolderFigs, \
$CellContext`maxmaterialnumber]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 10]; 
                    If[$CellContext`Functionality$$ != "User Guide", If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`ptest1, $CellContext`ptest2, \
$CellContext`ptest3, $CellContext`ptest4, $CellContext`ptest5, \
$CellContext`ptest6, $CellContext`ptest7, $CellContext`ptest8} = Table[0, 8]]; 
                    If[
                    ValueQ[$CellContext`startupvar], 
                    Null, {$CellContext`plabel1, $CellContext`plabel2, \
$CellContext`plabel3, $CellContext`plabel4, $CellContext`plabel5, \
$CellContext`plabel6, $CellContext`plabel7, $CellContext`plabel8} = 
                    Table["Type Label Here", 8]]; $CellContext`startupvar = 
                    1; {$CellContext`ap1, $CellContext`ap2, $CellContext`ap3, \
$CellContext`ap4, $CellContext`ap5, $CellContext`ap6, $CellContext`ap7, \
$CellContext`ap8} = {
                    If[
                    Dynamic[$CellContext`ptest1 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest2 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest3 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest4 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest5 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest6 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest7 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}], 
                    If[
                    Dynamic[$CellContext`ptest8 == 0], {"DialogBox"}, {
                    "DialogBox", "Pressed"}]}; Null]; 
                    If[$CellContext`Functionality$$ != "User Guide", 
                    Map[$CellContext`ruihklfun, 
                    Range[$CellContext`materialnumber$$ + 2]]]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 15]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], $CellContext`\[Omega]0 = 
                    N[2 Pi ($CellContext`c0/$CellContext`\[Lambda]$$)]; 
                    If[Abs[$CellContext`theta$$] >= 89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    
                    89.]; $CellContext`wInc = \
$CellContext`setwInc[$CellContext`\[Omega]0, 
                    
                    N[($CellContext`theta$$/180) 
                    Pi], $CellContext`\[CapitalDelta]\[Delta], $CellContext`\
\[CurlyPhi], $CellContext`n0]; $CellContext`extWave[$CellContext`wInc]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name = 
                    Part[$CellContext`allmaterials, #], HoldAll]]& , 
                    Range[$CellContext`materialnumber$$ + 2]]; 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    Function[$CellContext`name, 
                    $CellContext`extMater[$CellContext`name], HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`m1 = $CellContext`setMater[
                    $CellContext`Air[]]; \
$CellContext`extMater[$CellContext`m1]; $CellContext`mats = 
                    Map[ToExpression["m" <> ToString[#], InputForm, 
                    
                    Function[$CellContext`name, $CellContext`name, 
                    HoldAll]]& , 
                    
                    Range[$CellContext`materialnumber$$ + 
                    2]]; $CellContext`noAnalytical = Apply[And, 
                    Map[NumberQ, 
                    Join[
                    Flatten[
                    Map[
                    Key[$CellContext`dC], $CellContext`mats]], 
                    Flatten[
                    Map[
                    Key[$CellContext`h], $CellContext`mats]]]]]; 
                    If[$CellContext`mrassumption$$ == 0, 
                    Which[$CellContext`winhAssumption$$ == 
                    0, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    1, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = False; 
                    Null, $CellContext`winhAssumption$$ == 
                    2, $CellContext`flagBackward = 
                    True; $CellContext`flagStandingWave = True; 
                    Null]; $CellContext`flagJK = False; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    1, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = True; $CellContext`flagHH = 
                    False; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; Null, 
                    
                    If[$CellContext`mrassumption$$ == 
                    2, $CellContext`flagBackward = 
                    False; $CellContext`flagStandingWave = 
                    False; $CellContext`flagJK = False; $CellContext`flagHH = 
                    True; {$CellContext`wavL, $CellContext`wavNL} = \
$CellContext`f4NL[$CellContext`mats, $CellContext`wInc, True]; 
                    Null]]]]; $CellContext`evaltime = 
                    0; $CellContext`StartTime = SessionTime[]; 
                    If[$CellContext`Functionality$$ != 
                    "User Guide", $CellContext`progress = 25]; 
                    If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`FresnelList = {}; \
$CellContext`MFList = {}; If[
                    
                    And[$CellContext`fresnelcontrol$$, \
$CellContext`noAnalytical], $CellContext`FresnelList = 
                    Map[$CellContext`Fresnel[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    Range[0., 89., $CellContext`thetastep1$$]]]; If[
                    
                    And[$CellContext`makerfringescontrol$$, \
$CellContext`noAnalytical], If[
                    Abs[$CellContext`maxtheta2$$] >= 
                    89, $CellContext`maxtheta2$$ = 
                    Sign[$CellContext`maxtheta2$$] 89.]; $CellContext`MFList = 
                    Map[$CellContext`MF[$CellContext`mats, #, \
$CellContext`mrassumption$$]& , 
                    
                    Range[$CellContext`mintheta2$$, $CellContext`maxtheta2$$, \
$CellContext`thetastep2$$]]]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported for Maker \
fringes calcaulation;  Either analytical d or h is given! Abort!"]; Abort[]; 
                    Null]]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`SampleRotationList = {}; If[
                    
                    And[$CellContext`samplerotationcontrol$$, \
$CellContext`noAnalytical], If[Abs[$CellContext`theta$$] >= 
                    89, $CellContext`theta$$ = 
                    Sign[$CellContext`theta$$] 
                    89.]; $CellContext`SampleRotateList = 
                    Map[$CellContext`SampleRotate[$CellContext`mats, \
$CellContext`theta$$ 
                    Degree, #, $CellContext`samplerotatestep$$, \
$CellContext`mrassumption$$, $CellContext`materialnumber$$, \
$CellContext`delta$$, $CellContext`phi$$ Degree, $CellContext`psi$$ Degree]& , 
                    Range[0, 360, $CellContext`samplerotatestep$$]]; Null]; If[
                    Not[$CellContext`noAnalytical], 
                    Print["Only numerical simulation is supported;  Either \
analytical d or h is given! Abort!"]; Abort[]; Null]]; If[
                    
                    Or[$CellContext`Functionality$$ == 
                    "Set Material Properties", $CellContext`Functionality$$ == 
                    "SHG Simulation", $CellContext`Functionality$$ == 
                    "Partial Analytical Expressions"], \
$CellContext`heterostructureschematic = Show[
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    Rectangle[{0, -1.5}, {10, -2}], 
                    Text[
                    Style["", 15, Black, Bold], {1, -1.75}], 
                    Text[
                    Style["Air", 15, Black, Bold], {8.5, -1.75}]}], 
                    Graphics[
                    Text[
                    Style[ToString[
                    DownArrow["", ""]] <> "Incident Light, " <> 
                    ToString[$CellContext`\[Lambda]$$] <> "\[Mu]m" <> ToString[
                    DownArrow["", ""]], 20, Blue, Bold], {5, -1.75}]], 
                    Map[$CellContext`schematicfun, 
                    Reverse[
                    Map[{#, $CellContext`materialnumber$$ + 2}& , 
                    Range[2, $CellContext`materialnumber$$ + 1]]]], 
                    Graphics[{White, 
                    EdgeForm[
                    Directive[White]], 
                    
                    Rectangle[{0, -$CellContext`materialnumber$$ - 2 - 0.1}, {
                    10, -$CellContext`materialnumber$$ - 3}], 
                    Text[
                    Style["", 15, Black, Bold], {
                    1, -$CellContext`materialnumber$$ - 2 - 0.25}], 
                    Text[
                    Style["Air", 15, Black, Bold], {
                    8.5, -$CellContext`materialnumber$$ - 2 - 0.25}]}], 
                    ImageSize -> {600, Automatic}]; $CellContext`zvecplots2d = 
                    Map[$CellContext`fzvecplots2d, $CellContext`allmaterials]; \
$CellContext`zvecplots3d = 
                    Map[$CellContext`fzvecplots3d, $CellContext`allmaterials]; 
                    Null]; If[$CellContext`Functionality$$ == 
                    "SHG Simulation", 
                    
                    If[$CellContext`noAnalytical, $CellContext`fig13d = 
                    Graphics3D[{
                    $CellContext`pltWav[$CellContext`wInc, {-1, 0, 0} - 
                    Normalize[
                    $CellContext`wInc[$CellContext`k]], Red], 
                    
                    Map[$CellContext`pltWav[#, {-1, 
                    0, $CellContext`materialnumber$$}, Red]& , 
                    Part[$CellContext`wavL, 2]], 
                    Map[$CellContext`pltWav[#, {-1, 0, 0}, Red]& , 
                    Part[$CellContext`wavL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, Apply[Sequence, #2] - 1}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, Apply[Sequence, #2] - 1}, Red]}& , 
                    Part[$CellContext`wavL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {-1, 0, 
                    Apply[Sequence, #2]}, Red], 
                    $CellContext`pltWav[
                    Part[#, 2], {-1, 0, 
                    Apply[Sequence, #2]}, Red]}& , 
                    Part[$CellContext`wavL, 3]], 1]], 
                    Map[$CellContext`pltWav[#, {
                    1, 0, $CellContext`materialnumber$$}, Blue]& , 
                    Part[$CellContext`wavNL, 2]], 
                    Map[$CellContext`pltWav[#, {1, 0, 0}, Blue]& , 
                    Part[$CellContext`wavNL, 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, Apply[Sequence, #2] - 1}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, Apply[Sequence, #2] - 1}, Blue]}& , 
                    Part[$CellContext`wavNL, 4]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {1, 0, 
                    Apply[Sequence, #2]}, Blue], 
                    $CellContext`pltWav[
                    Part[#, 2], {1, 0, 
                    Apply[Sequence, #2]}, Blue]}& , 
                    Part[$CellContext`wavNL, 3]], 1]], 
                    If[$CellContext`mrassumption$$ == 0, 
                    If[$CellContext`flagBackward, 
                    If[$CellContext`flagStandingWave, 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 7], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 8], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 9], {-0.5, 0, Apply[Sequence, #2] - 0.5}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 10], {0 - 0.5, 0, Apply[Sequence, #2] - 0.5}, 
                    Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 4], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 5], {0, 0, 
                    Apply[Sequence, #2]}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 6], {0, 0, 
                    Apply[Sequence, #2]}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Flatten[
                    MapIndexed[{
                    $CellContext`pltWav[
                    Part[#, 1], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 2], {0, 0, Apply[Sequence, #2] - 1}, Orange], 
                    $CellContext`pltWav[
                    Part[#, 3], {0, 0, Apply[Sequence, #2] - 1}, Orange]}& , 
                    Part[$CellContext`wavNL, 5]], 1]]], 
                    Apply[Sequence, 
                    Map[Hyperplane[{0, 0, 1}, {0, 0, #}]& , 
                    Range[0, $CellContext`materialnumber$$]]]}, 
                    Evaluate[$CellContext`options2d], PlotLabel -> 
                    "\[Lambda] of \[Omega] wave (\[Mu]m) = " <> 
                    ToString[$CellContext`\[Lambda]$$]]; $CellContext`fig12d = 
                    Show[$CellContext`fig13d, ViewPoint -> {0, Infinity, 0}, 
                    Method -> {"RotationControl" -> 
                    None}]; {$CellContext`rmpw1, $CellContext`rmpw2} = 
                    Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 
                    2}]]; $CellContext`rules = {$CellContext`\[CapitalDelta]\
\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`factorRp, \
$CellContext`factorRs, $CellContext`factorTp, $CellContext`factorTs} = {1, 1, 
                    1, 1}; $CellContext`Imax = 1; 
                    If[$CellContext`samplerotationcontrol$$, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 2]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 3]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 4]], 
                    Max[
                    Part[$CellContext`SampleRotateList, 
                    Span[1, All], 5]]}]; Null, 
                    Quiet[{$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs} = {
                    NMaxValue[
                    Re[$CellContext`dataRp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataRs], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTp], $CellContext`\[CurlyPhi]], 
                    NMaxValue[
                    Re[$CellContext`dataTs], $CellContext`\[CurlyPhi]]}]; 
                    Null]; $CellContext`Imax = 
                    1.1 Max[$CellContext`MaxRp, $CellContext`MaxRs, \
$CellContext`MaxTp, $CellContext`MaxTs]; 
                    If[Abs[$CellContext`Imax] < 10^(-10), $CellContext`Imax = 
                    1]; $CellContext`factorRp = Max[1, 
                    If[Chop[$CellContext`MaxRp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRp], 
                    0]]; $CellContext`factorRs = Max[1, 
                    If[Chop[$CellContext`MaxRs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxRs], 
                    0]]; $CellContext`factorTp = Max[1, 
                    If[Chop[$CellContext`MaxTp] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTp], 
                    0]]; $CellContext`factorTs = Max[1, 
                    If[Chop[$CellContext`MaxTs] != 0, 
                    IntegerPart[$CellContext`Imax/$CellContext`MaxTs], 
                    0]]; $CellContext`polarRp = (
                    1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]; $CellContext`polarRs = (
                    1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]; $CellContext`polarTp = (
                    1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]; $CellContext`polarTs = (
                    1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]; $CellContext`polarRtot = (
                    1/$CellContext`Imax) $CellContext`factorRtot (
                    Re[$CellContext`dataRs] + 
                    Re[$CellContext`dataRp]); $CellContext`polarTtot = (
                    1/$CellContext`Imax) $CellContext`factorTtot (
                    Re[$CellContext`dataTs] + Re[$CellContext`dataTp]); If[
                    And[
                    Not[$CellContext`RotateAnalyzer$$], 
                    Not[$CellContext`RotatePolarizer$$]], 
                    
                    If[$CellContext`samplerotationcontrol$$, \
$CellContext`figRp = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    2]/$CellContext`Imax) $CellContext`factorRp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    3]/$CellContext`Imax) $CellContext`factorRs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    4]/$CellContext`Imax) $CellContext`factorTp}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = ListPolarPlot[
                    
                    Table[{Part[$CellContext`SampleRotateList, $CellContext`i,
                     1] Degree, (
                    Part[$CellContext`SampleRotateList, $CellContext`i, 
                    5]/$CellContext`Imax) $CellContext`factorTs}, \
{$CellContext`i, 
                    Length[$CellContext`SampleRotateList]}], Joined -> True, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, PlotRange -> Full, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null, $CellContext`figRp = 
                    PolarPlot[$CellContext`polarRp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = 
                    PolarPlot[$CellContext`polarRs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[$CellContext`polarTp, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = 
                    PolarPlot[$CellContext`polarTs, \
{$CellContext`\[CurlyPhi], $CellContext`phi$$ 
                    Degree, $CellContext`phi$$ Degree + 0.01}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.05]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; 
                    Null], $CellContext`figRp = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRp 
                    Re[$CellContext`dataRp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figRs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorRs 
                    Re[$CellContext`dataRs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Reflected SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorRs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(R, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; $CellContext`figTp = 
                    PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTp 
                    Re[$CellContext`dataTp]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Blue, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTp], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi])", 28, Black, FontFamily -> 
                    "Times New Roman"]]; $CellContext`figTs = PolarPlot[
                    
                    Evaluate[(1/$CellContext`Imax) $CellContext`factorTs 
                    Re[$CellContext`dataTs]], {$CellContext`\[CurlyPhi], 0, 2 
                    Pi}, 
                    Evaluate[$CellContext`options2], PlotStyle -> {Red, 
                    Thickness[0.01]}, FrameLabel -> {{
                    Style[
                    "Transmitted SHG (a.u.) \[Times] " <> 
                    ToString[$CellContext`factorTs], 22, Black, FontFamily -> 
                    "Times New Roman"], None}, {None, None}}, PlotLabel -> 
                    Style["\!\(\*SuperscriptBox[\(I\), \(T, 2  \[Omega]\)]\)(\
\[CurlyPhi],\[Psi]+\!\(\*FractionBox[\(\[Pi]\), \(2\)]\))", 28, Black, 
                    FontFamily -> "Times New Roman"]]; Null]; 
                    If[$CellContext`makerfringescontrol$$, \
$CellContext`listMFpara = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    2}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringespar = 
                    ListLinePlot[$CellContext`listMFpara, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]) \
(a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> "Times New Roman"}}, 
                    ImageSize -> Large]; $CellContext`listMFperp = ReplaceAll[
                    ReplaceAll[
                    ReplaceAll[
                    Re[
                    
                    Part[$CellContext`MFList, All, {1, 
                    3}]], $CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree], $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree], $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]; $CellContext`figmakerfringesperp = 
                    ListLinePlot[$CellContext`listMFperp, 
                    PlotRange -> {Automatic, Automatic}, PlotStyle -> 
                    Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"], 
                    Style[
                    "\!\(\*SuperscriptBox[\(I\), \(2  \[Omega], \
T\)]\)(\!\(\*SuperscriptBox[\(\[Theta]\), \(i\)]\),\[CurlyPhi],\[Psi]+90\
\[Degree]) (a.u.)"], BaseStyle -> {FontSize -> 18, FontFamily -> 
                    "Times New Roman"}}, ImageSize -> Large]; Null]; 
                    If[$CellContext`fresnelcontrol$$, \
$CellContext`listFresnel = Evaluate[
                    Re[
                    ReplaceAll[{
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    2}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    3}], $CellContext`\[CurlyPhi] -> 90 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    4}], $CellContext`\[CurlyPhi] -> 0 Degree], 
                    ReplaceAll[
                    
                    Part[$CellContext`FresnelList, All, {1, 
                    5}], $CellContext`\[CurlyPhi] -> 
                    90 Degree]}, $CellContext`\[CapitalDelta]\[Delta] -> 
                    0]]]; $CellContext`figfresnel = 
                    ListLinePlot[$CellContext`listFresnel, 
                    PlotRange -> {{0, 90}, Automatic}, PlotStyle -> Directive[
                    Thickness[0.01]], Frame -> True, FrameStyle -> 
                    Directive[{Black, 18, Thick}], Axes -> False, FrameLabel -> {
                    Style[
                    "Incident Angle, \!\(\*SuperscriptBox[\(\[Theta]\), \
\(i\)]\)"]}, PlotLabel -> Style["Fresnel Transmittance/Reflectance", Black, 
                    20], ImageSize -> {400, 400}, PlotLegends -> {
                    Style["\!\(\*SubscriptBox[\(R\), \(p\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(R\), \(s\)]\)", 20], 
                    Style["\!\(\*SubscriptBox[\(T\), \(p\)]\)", 20], 
                    Style[
                    "\!\(\*SubscriptBox[\(T\), \(s\)]\)", 
                    20]}]]; $CellContext`plot2geometry2d = \
$CellContext`fplot2geometry2d[$CellContext`theta$$]; \
$CellContext`plot2geometry3d = \
$CellContext`fplot2geometry3d[$CellContext`theta$$]; \
$CellContext`polarizationplot2d = \
$CellContext`fpolarizationplot2d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`polarizationplot3d = \
$CellContext`fpolarizationplot3d[$CellContext`theta$$, $CellContext`phi$$, \
$CellContext`psi$$, $CellContext`RotatePolarizer$$, \
$CellContext`RotateAnalyzer$$]; $CellContext`rwave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`rmpw2[$CellContext`A], 1] + Part[
                    $CellContext`rmpw1[$CellContext`A], 1], Part[
                    $CellContext`rmpw1[$CellContext`A], 2] + Part[
                    $CellContext`rmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`twave = Normalize[
                    ReplaceAll[{Part[
                    $CellContext`tmpw2[$CellContext`A], 1] + Part[
                    $CellContext`tmpw1[$CellContext`A], 1], Part[
                    $CellContext`tmpw1[$CellContext`A], 2] + Part[
                    $CellContext`tmpw2[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`iwave = Normalize[
                    ReplaceAll[{
                    Part[
                    $CellContext`wInc[$CellContext`A], 1], 
                    Part[
                    $CellContext`wInc[$CellContext`A], 
                    2]}, {$CellContext`\[CapitalDelta]\[Delta] -> \
$CellContext`delta$$ Degree}]]; $CellContext`ellipticityfig = 
                    If[$CellContext`RotatePolarizer$$, 
                    ParametricPlot[{
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    
                    Part[$CellContext`iwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    
                    Part[$CellContext`rwave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]], 
                    Re[
                    ReplaceAll[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    
                    Part[$CellContext`twave, 
                    2]}, $CellContext`\[CurlyPhi] -> $CellContext`phi$$ 
                    Degree]]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]], 
                    ParametricPlot[{
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`iwave, 1], 
                    Part[$CellContext`iwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`rwave, 1], 
                    Part[$CellContext`rwave, 2]}], 
                    Re[Exp[I $CellContext`z] {
                    Part[$CellContext`twave, 1], 
                    Part[$CellContext`twave, 2]}]}, {$CellContext`z, 0, 2 Pi}, 
                    Evaluate[$CellContext`options3]]]; 
                    Null, $CellContext`clearFigs[]; Print[
                    Style[
                    "SHG Simulation can only be used for numerical \
simulation; Either analytical d or h is given! Not plotting!", Bold, Red, 
                    32]]]]; If[$CellContext`Functionality$$ == 
                    "Partial Analytical Expressions", $CellContext`rules = \
{$CellContext`\[CapitalDelta]\[Delta] -> $CellContext`delta$$ Degree, 
                    If[$CellContext`RotatePolarizer$$, 
                    Apply[
                    Sequence, {}], $CellContext`\[CurlyPhi] -> \
$CellContext`phi$$ Degree], 
                    
                    If[$CellContext`RotateAnalyzer$$, $CellContext`\[Psi] -> \
$CellContext`\[CurlyPhi] + $CellContext`analyzeroffset$$ 
                    Degree, $CellContext`\[Psi] -> $CellContext`psi$$ 
                    Degree]}; {$CellContext`rmpw1L, $CellContext`rmpw2L} = 
                    Part[$CellContext`wavL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1L]; \
$CellContext`extWave[$CellContext`rmpw2L]; $CellContext`rSignalL = 
                    Part[$CellContext`rmpw1L[$CellContext`A] + \
$CellContext`rmpw2L[$CellContext`A], 
                    Span[1, 2]]; {$CellContext`tmpw1L, $CellContext`tmpw2L} = 
                    Part[$CellContext`wavL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1L]; \
$CellContext`extWave[$CellContext`tmpw2L]; $CellContext`tSignalL = 
                    Part[$CellContext`tmpw1L[$CellContext`A] + \
$CellContext`tmpw2L[$CellContext`A], 
                    Span[1, 2]]; $CellContext`dataRpL = 
                    Part[$CellContext`rSignalL, 1] Conjugate[
                    Part[$CellContext`rSignalL, 1]]; $CellContext`dataRsL = 
                    Part[$CellContext`rSignalL, 2] Conjugate[
                    Part[$CellContext`rSignalL, 2]]; $CellContext`dataTpL = 
                    Part[$CellContext`tSignalL, 1] Conjugate[
                    Part[$CellContext`tSignalL, 1]]; $CellContext`dataTsL = 
                    Part[$CellContext`tSignalL, 2] Conjugate[
                    
                    Part[$CellContext`tSignalL, 
                    2]]; {$CellContext`equationRpL, $CellContext`equationRsL, \
$CellContext`equationTpL, $CellContext`equationTsL} = 
                    Re[{$CellContext`dataRpL, $CellContext`dataRsL, \
$CellContext`dataTpL, $CellContext`dataTsL}]; {$CellContext`rmpw1, \
$CellContext`rmpw2} = Part[$CellContext`wavNL, 
                    1]; $CellContext`extWave[$CellContext`rmpw1]; \
$CellContext`extWave[$CellContext`rmpw2]; $CellContext`rSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], -Sin[$CellContext`\[Psi]]}, {
                    Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`rmpw1[$CellContext`A] + \
$CellContext`rmpw2[$CellContext`A], {1, 
                    2}]]; {$CellContext`tmpw1, $CellContext`tmpw2} = 
                    Part[$CellContext`wavNL, 
                    2]; $CellContext`extWave[$CellContext`tmpw1]; \
$CellContext`extWave[$CellContext`tmpw2]; $CellContext`tSignal = Dot[{{
                    Cos[$CellContext`\[Psi]], 
                    Sin[$CellContext`\[Psi]]}, {-Sin[$CellContext`\[Psi]], 
                    Cos[$CellContext`\[Psi]]}}, 
                    
                    Part[$CellContext`tmpw1[$CellContext`A] + \
$CellContext`tmpw2[$CellContext`A], {1, 2}]]; $CellContext`dataRs = 
                    ReplaceAll[Part[$CellContext`rSignal, 2] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    2]], $CellContext`rules]; $CellContext`dataRp = 
                    ReplaceAll[Part[$CellContext`rSignal, 1] Conjugate[
                    
                    Part[$CellContext`rSignal, 
                    1]], $CellContext`rules]; $CellContext`dataTs = 
                    ReplaceAll[Part[$CellContext`tSignal, 2] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    2]], $CellContext`rules]; $CellContext`dataTp = 
                    ReplaceAll[Part[$CellContext`tSignal, 1] Conjugate[
                    
                    Part[$CellContext`tSignal, 
                    1]], $CellContext`rules]; {$CellContext`equationRp, \
$CellContext`equationRs, $CellContext`equationTp, $CellContext`equationTs} = 
                    Re[{$CellContext`dataRp, $CellContext`dataRs, \
$CellContext`dataTp, $CellContext`dataTs}]; 
                    Null, {$CellContext`equationRpL, \
$CellContext`equationRsL, $CellContext`equationTpL, $CellContext`equationTsL} = 
                    ConstantArray[$CellContext`placeHolderEqus, 
                    4]; {$CellContext`equationRp, $CellContext`equationRs, \
$CellContext`equationTp, $CellContext`equationTs} = 
                    ConstantArray[$CellContext`placeHolderEqus, 4]; 
                    Null]; $CellContext`progress = 100; $CellContext`EndTime = 
                    SessionTime[]; $CellContext`evaltime = \
$CellContext`EndTime - $CellContext`StartTime; ""], 
                    TrackedSymbols :> {Typeset`update$$}], 
                    Manipulate`Dump`initDisplay[True]], StandardForm], 
                    SynchronousUpdating -> Automatic, ImageSizeCache -> 
                    Dynamic[Typeset`size$$]], ImageMargins -> 10], Deployed -> 
                   False, ScriptLevel -> 0, 
                   GraphicsBoxOptions -> {PreserveImageOptions -> True}, 
                   Graphics3DBoxOptions -> {PreserveImageOptions -> True}, 
                   StripOnInput -> False], Identity, Selectable -> False, 
                  Editable -> False], Alignment -> {Left, Center}, ItemSize -> 
                 Manipulate`Dump`$AutomaticContentSize, StripOnInput -> 
                 False]}}, AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             ButtonFunction :> (Typeset`show$$ = True), Appearance -> None, 
             DefaultBaseStyle -> {}, BaseStyle -> {}, Evaluator -> Automatic, 
             Method -> "Preemptive"], 
            DynamicBox[
             ToBoxes[
              FEPrivate`FrontEndResource["FEStrings", "ManipulateShow"], 
              StandardForm]]], Annotation[#, 
            Dynamic[
             FEPrivate`FrontEndResource["FEStrings", "ManipulateShow"]], 
            "Tooltip"]& ]}, 
        Dynamic[Typeset`show$$], ImageSize -> Automatic], ImageMargins -> 0, 
       BaselinePosition -> Automatic],
      ImageSizeCache->{1462., {656.704138330766, 663.295861669234}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  Alignment->{Left, Top},
  Background->GrayLevel[0.9],
  ImageSize->Automatic,
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.915408361224081*^9, 3.915409172165191*^9, 3.9154120815611315`*^9, 
   3.915412366115756*^9, 3.915922960830022*^9, 3.9159331628850975`*^9, 
   3.915933362177228*^9, 3.915933564786705*^9, 3.915934249059012*^9, 
   3.9159347369577*^9, 3.9159349868252487`*^9, 3.9159352644250126`*^9, 
   3.915935351788329*^9, 3.91593576878671*^9, {3.915936040955332*^9, 
   3.915936055929164*^9}, 3.9159361202400427`*^9, 3.915936338273993*^9, 
   3.915936848167307*^9, 3.915936921346233*^9, {3.91593743576996*^9, 
   3.915937455070897*^9}, 3.9159382038125935`*^9, 3.915938747645837*^9, 
   3.915939014077612*^9, 3.915939131253092*^9, 3.91593931347865*^9, 
   3.915940075304644*^9, 3.9159403185818787`*^9, 3.9159406052139893`*^9, 
   3.9159415776650276`*^9, 3.9159417772673645`*^9, 3.9159418271873884`*^9, 
   3.9159418842402463`*^9, 3.915941944904996*^9, 3.915942017461341*^9, 
   3.915966564958581*^9, 3.917039694103129*^9, 3.9170399948115644`*^9, 
   3.9170400639478426`*^9, 3.917040109120571*^9, 3.9170402029180365`*^9, 
   3.917041871852186*^9, 3.9170420132408648`*^9, 3.917042343934395*^9, 
   3.9170431147120113`*^9, 3.917043790658436*^9, 3.9170442324664865`*^9, 
   3.9170449126819305`*^9, {3.9170457499369316`*^9, 3.91704576351503*^9}, 
   3.9170490431040287`*^9, 3.917049166594001*^9, 3.917049382867156*^9, 
   3.9170504827827015`*^9, {3.9172186791006145`*^9, 3.9172186981397476`*^9}, {
   3.9172199455527105`*^9, 3.917219975916537*^9}, 3.9172208612621775`*^9, 
   3.9172212809269047`*^9, 3.9172215002718887`*^9, 3.9172216137242937`*^9, 
   3.9172218113650284`*^9, 3.91722216122723*^9, 3.917222297833967*^9, 
   3.9173844523245173`*^9, 3.917384624351777*^9, 3.91738635337821*^9, 
   3.917387965792042*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"cfc0c664-ee79-4a30-be35-777d9128b19c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.9154083179401665`*^9, 3.9154083908653393`*^9},
 CellLabel->
  "In[100]:=",ExpressionUUID->"680d5709-58da-41c6-8bad-d8bbeda8c232"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9147266134784408`*^9, 3.914726613483427*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"05bc0c31-2837-4f08-b280-8a13c19d9516"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.914726528226497*^9, 3.914726528231193*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"6d75d6a7-b2dd-496d-ba1d-3b24ba9df720"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.9147215871847806`*^9, 3.9147265301464343`*^9},
 CellLabel->
  "In[103]:=",ExpressionUUID->"e6f666d8-58c4-49d4-8f64-660b787dd5c4"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.9147215872681894`*^9, 3.914726537654142*^9},
 CellLabel->
  "In[104]:=",ExpressionUUID->"2cee032e-fb83-4e9e-b878-4b158f412982"]
}, Open  ]]
},
WindowSize->{1908, 1011},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->{},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.15 Inherited,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (June 3, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"69a610e1-3d00-4b53-a163-6fa5ef21be47"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 200, 4, 112, "Title",ExpressionUUID->"441924d6-3b8e-4bd4-8fa6-0941648c2c7b"],
Cell[783, 28, 2784, 45, 95, "Input",ExpressionUUID->"0937ff5c-ef37-4c7e-9f0b-71353001cec0",
 InitializationCell->True],
Cell[3570, 75, 431341, 9002, 24029, "Input",ExpressionUUID->"a98b854b-c774-4627-bdc0-c461ecf5096d",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[434948, 9082, 189, 4, 112, "Title",ExpressionUUID->"55cc25b1-6118-4568-90fc-f6cca0bb059f"],
Cell[CellGroupData[{
Cell[435162, 9090, 252, 3, 32, "Input",ExpressionUUID->"54c5d0bf-aa90-4ef5-b95d-14bc7b0597e7"],
Cell[435417, 9095, 976, 22, 45, "Print",ExpressionUUID->"ae17b72e-b59e-4bbd-89cc-9bd181188341"],
Cell[436396, 9119, 384741, 7583, 1353, "Output",ExpressionUUID->"cfc0c664-ee79-4a30-be35-777d9128b19c"]
}, Open  ]],
Cell[821152, 16705, 177, 3, 32, "Input",ExpressionUUID->"680d5709-58da-41c6-8bad-d8bbeda8c232"],
Cell[821332, 16710, 177, 3, 32, "Input",ExpressionUUID->"05bc0c31-2837-4f08-b280-8a13c19d9516"],
Cell[821512, 16715, 175, 3, 32, "Input",ExpressionUUID->"6d75d6a7-b2dd-496d-ba1d-3b24ba9df720"],
Cell[821690, 16720, 177, 3, 32, "Input",ExpressionUUID->"e6f666d8-58c4-49d4-8f64-660b787dd5c4"],
Cell[821870, 16725, 175, 3, 32, "Input",ExpressionUUID->"2cee032e-fb83-4e9e-b878-4b158f412982"]
}, Open  ]]
}
]
*)

